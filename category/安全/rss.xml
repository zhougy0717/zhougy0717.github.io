<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Big Ben • Posts by &#34;安全&#34; category</title>
        <link>https://zhougy0717.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Sat, 18 Sep 2021 22:17:35 +0800</pubDate>
        <lastBuildDate>Sat, 18 Sep 2021 22:17:35 +0800</lastBuildDate>
        <category>javascript</category>
        <category>angular</category>
        <category>操作系统</category>
        <category>arm</category>
        <category>单片机</category>
        <category>machine learning</category>
        <category>deep learning</category>
        <category>Linux</category>
        <category>内存管理</category>
        <category>Markdown</category>
        <category>python</category>
        <category>win32com</category>
        <category>nas</category>
        <category>synology</category>
        <category>USB</category>
        <category>Linux Device Drivers</category>
        <category>uboot</category>
        <category>http</category>
        <category>同步</category>
        <category>算法</category>
        <category>读书笔记</category>
        <category>程序员修炼之道</category>
        <category>c/c++</category>
        <category>rap</category>
        <category>Eminem</category>
        <category>hexo</category>
        <category>security</category>
        <category>SELinux</category>
        <category>编译</category>
        <category>C++</category>
        <category>selinux</category>
        <category>iptables</category>
        <category>capability</category>
        <category>LD_PRELOAD</category>
        <category>coding</category>
        <category>红楼梦</category>
        <category>教育</category>
        <category>UT</category>
        <category>TDD</category>
        <category>code review</category>
        <category>committer</category>
        <category>印象笔记</category>
        <category>Obsidian</category>
        <category>群晖</category>
        <category>Calibre</category>
        <category>电子书</category>
        <category>Android</category>
        <category>xposed</category>
        <category>GitHub</category>
        <category>中断处理</category>
        <category>docker</category>
        <category>ttrss</category>
        <category>rsshub</category>
        <category>wallabag</category>
        <category>can</category>
        <category>network</category>
        <category>unittest</category>
        <category>mockito</category>
        <category>powermock</category>
        <category>QT</category>
        <category>nlp</category>
        <category>vim</category>
        <category>SpaceVim</category>
        <category>tmux</category>
        <category>面向对象</category>
        <category>promise</category>
        <category>mongodb</category>
        <category>Programming</category>
        <category>C++11</category>
        <category>IoT</category>
        <category>broadlink</category>
        <category>domoticz</category>
        <category>UML</category>
        <category>socket</category>
        <category>neural network</category>
        <category>mock</category>
        <category>深度学习</category>
        <category>schedule algorithm</category>
        <category>glibc</category>
        <category>gtest</category>
        <category>gmock</category>
        <category>golang</category>
        <category>elf</category>
        <category>软件开发</category>
        <category>设计模式</category>
        <item>
            <guid isPermalink="true">https://zhougy0717.github.io/2021/09/18/obsidian_posts/RBAC/</guid>
            <title>RBAC</title>
            <link>https://zhougy0717.github.io/2021/09/18/obsidian_posts/RBAC/</link>
            <category>security</category>
            <category>SELinux</category>
            <pubDate>Sat, 18 Sep 2021 22:17:35 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;RBAC, Role Based Access Control, 是SELinux的另一个重要的特性。但他并不是一种独立的控制方式，而是对TEAC的一种补充。其主要的作用是，构建SELinux提供的进程级的MAC机制与Linux的用户系统的映射关系。&lt;/p&gt;
&lt;h1 id=&#34;RBAC工作原理&#34;&gt;&lt;a href=&#34;#RBAC工作原理&#34; class=&#34;headerlink&#34; title=&#34;RBAC工作原理&#34;&gt;&lt;/a&gt;RBAC工作原理&lt;/h1&gt;&lt;p&gt;RBAC并不提供强制访问控制，而是通过user，role，type之间的对应关系，来控制type_transition策略能否成功。&lt;/p&gt;
&lt;h2 id=&#34;role-vs-type&#34;&gt;&lt;a href=&#34;#role-vs-type&#34; class=&#34;headerlink&#34; title=&#34;role vs. type&#34;&gt;&lt;/a&gt;role vs. type&lt;/h2&gt;&lt;p&gt;role based最基本的就是定义role到type到对应关系。使用role语句可以实现：&lt;code&gt;role role_name [types type_set];&lt;/code&gt;。例如：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;role user_r types user_t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;role user_r types &amp;#123; staff_t, admin_t &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;role定义是累积的，即后面的对应关系不会覆盖前面语句定义的对应关系，而只会追加这种关系&lt;/li&gt;
&lt;li&gt;role语句通常定义在type声明附近，以确保该对应关系被及时定义&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;定义子role (period)&lt;/strong&gt;&lt;br&gt;A period is used to indicate restrictions on the set of types that may be assigned to a role. For example, the set of types for a role called &lt;strong&gt;&lt;em&gt;apache.cgi&lt;/em&gt;&lt;/strong&gt; must be a &lt;strong&gt;&lt;em&gt;subset&lt;/em&gt;&lt;/strong&gt; of the type set of a role called &lt;strong&gt;&lt;em&gt;apache&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;role语句定义的基本逻辑就是，定义了role=&amp;gt;{ types }集合的映射关系。当发生type transition时，如果转换后的{role，type}组合未定义，则视为权限错误。从这个层面看，role对应的是主体type，即domain type，而非object type。&lt;/p&gt;
&lt;h3 id=&#34;特殊的role-object-r&#34;&gt;&lt;a href=&#34;#特殊的role-object-r&#34; class=&#34;headerlink&#34; title=&#34;特殊的role: object_r&#34;&gt;&lt;/a&gt;特殊的role: object_r&lt;/h3&gt;&lt;p&gt;object_r是内核SELinux模块预定义的一个role，无需在policy中声明。而这个object_r被专门用来定义客体的安全上下文。&lt;/p&gt;
&lt;h2 id=&#34;user-vs-role&#34;&gt;&lt;a href=&#34;#user-vs-role&#34; class=&#34;headerlink&#34; title=&#34;user vs. role&#34;&gt;&lt;/a&gt;user vs. role&lt;/h2&gt;&lt;p&gt;user是对role的再一次扩充，通过user将role与Linux user的映射关系建立起来。SELinux的用户系统独立于Linux用户系统。通过seusers文件或者&lt;code&gt;semanage user&lt;/code&gt;命令可以定义他们之间的映射关系。但实际可定义的自由度并没有那么高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The design decision for SELinux to have a distinct user identifier (rather than share that of Linux) is motivated by the desire to create an immutable SELinux user identifier.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定义一个user与role的映射关系，可以使用user语句：&lt;code&gt;user user_name roles &amp;#123; role_set &amp;#125;;&lt;/code&gt;&lt;br&gt;user语句所体现的逻辑和role语句类似，即定义了user=&amp;gt;{ roles }集合的映射关系。当应用启动时发生role transition时，如果转换后的{user, role}未定义，则视为权限错误。&lt;/p&gt;
&lt;p&gt;当SELinux通过RBAC，建立起user=&amp;gt;role=&amp;gt;type的映射关系以后，还获得了一个好处。Linux系统的用户数可能很多，而用户的类型很少。用户并不是为了定义权限的，不同的用户之间的使用数据需要隔离。但往往一类用户的权限是相同的。例如超级用户，管理员用户，普通用户等等。系统的权限集最小粒度由domain定义。可能每个进程的权限不同，也可能一组进程的权限相同。但往往domain的数量也很庞大。如果没有RBAC，我们需要定义user到domain到映射。这样也不是不能做，但却不太优雅。每次新增用户时，需要为新增用户绑定一堆domain。定义了role之后，role相当于较稳定的一层抽象，role到types的映射关系是在定义type时候就定义了的。增加新user的时候，只要定义user到role的映射即可。这就是引入RBAC的原因。&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;graph LR
A[user] --&gt; B[role]
A --&gt; C[role]
A --&gt; D[role]
C --&gt; E[domain]
C --&gt; F[domain]
C --&gt; G[domain]&lt;/pre&gt;

&lt;h3 id=&#34;Linux用户-vs-SELinux-user&#34;&gt;&lt;a href=&#34;#Linux用户-vs-SELinux-user&#34; class=&#34;headerlink&#34; title=&#34;Linux用户 vs. SELinux user&#34;&gt;&lt;/a&gt;Linux用户 vs. SELinux user&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当前系统的用户可以通过查看/etc/passwd文件获取，也可以参考&lt;a href=&#34;https://zhuanlan.zhihu.com/p/41161408&#34;&gt;列出 Linux 系统上所有用户的 3 种方法&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;查看SELinux的用户可以通过命令&lt;code&gt;semanage user -l&lt;/code&gt;.&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;               标记中        MLS/       MLS/                          &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SELinux 用户      前缀         MCS 级别     MCS 范围                         SELinux 角色&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;guest_u         user       s0         s0                             guest_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;root            user       s0         s0-s0:c0.c1023                 staff_r sysadm_r system_r unconfined_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;staff_u         user       s0         s0-s0:c0.c1023                 staff_r sysadm_r unconfined_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sysadm_u        user       s0         s0-s0:c0.c1023                 sysadm_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;system_u        user       s0         s0-s0:c0.c1023                 system_r unconfined_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unconfined_u    user       s0         s0-s0:c0.c1023                 system_r unconfined_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;user_u          user       s0         s0                             user_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xguest_u        user       s0         s0                             xguest_r&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;查看两者的映射关系可以通过命令&lt;code&gt;semanage login -l&lt;/code&gt;.&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;登录名                  SELinux 用户           MLS/MCS 范围           服务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__default__          unconfined_u         s0-s0:c0.c1023       *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;john                 user_u               s0                   *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;root                 unconfined_u         s0-s0:c0.c1023       *&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux用户和SELinux用户的初始映射关系由seusers文件指定。这个文件不属于策略二进制的一部分，而可以直接修改生效。当然更优雅的办法是通过semanage命令来修改。&lt;br&gt;另外，在修改了context以后，或者新建了用户以后，必须要使用注销登录的方法，才能使新的context生效，而只使用su命令切换用户，并不会切换context。推测注销登录使用的是PAM登录程序，而su命令中，并没有重新加载user context的功能。&lt;br&gt;Linux用户登录后，获取shell安全上下文的步骤，可以参考文献【2】。简述如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据seusers文件，映射SELinux用户，如果没有seusers文件，系统就无法启动了。如果seusers文件没有对应的用户描述，则统一映射为&lt;code&gt;__default__&lt;/code&gt;用户。如果&lt;code&gt;__default__&lt;/code&gt;用户描述不存在，则无法登录。&lt;/li&gt;
&lt;li&gt;根据SELinux的搜索优先级，找到对应SELinux用户的安全上下文。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;勘误&lt;/strong&gt;&lt;br&gt;在[1]中，对Linux用户和SELinux的映射关系有如下描述：&lt;br&gt;On login, if there is an SELinux user identifier that is exactly the same as the Linux user identifier, the matching SELinux user identifier becomes the user identifier in the security context for the initial shell process. In this way, if a Linux user identifier also exists as a user identifier in the SELinux policy, all login processes will set the initial shell process security context user identifier to that matching Linux identity.&lt;br&gt;经实验证明，并非如此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义了一个guest_u用户，登录后，其shell的安全上下文仍为：&lt;br&gt;&lt;img src=&#34;/2021/09/18/obsidian_posts/RBAC/163C5090-847B-49EC-B709-3AAA87D776D9.png&#34; alt=&#34;1ca6909a350aa84947ea565bb4c8eaa2&#34;&gt;&lt;/li&gt;
&lt;li&gt;但事实证明，明明就有guest_u这个用户&lt;br&gt;&lt;img src=&#34;/2021/09/18/obsidian_posts/RBAC/CA68A544-BEE4-4B4E-9BC5-EA3452F816F9.png&#34; alt=&#34;7737fbc74190005733b9f01b60178907&#34;&gt;&lt;br&gt;推测，可能是因为SELinux也一直在发展改进中。[1]d 成书时间是2006年，彼时还是FC（Fedora Core）5的年代，现在最新版已经是Fedora 33，2020年10月份发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;现在可以引用[1]中的一幅图来总结一下RBAC的工作原理了。&lt;br&gt;&lt;img src=&#34;/2021/09/18/obsidian_posts/RBAC/6903A6B7-B8D6-4621-8AF4-C276F4EAD57F.png&#34; alt=&#34;115b4d2e2576fd1b93937d66425645d5&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux系统有一个用户较joe&lt;/li&gt;
&lt;li&gt;SELinuxcelue中规定joe和user_r绑定，user_r和user_t绑定&lt;/li&gt;
&lt;li&gt;当joe登录时，系统根据seusers（此处与图不同，参见上一章勘误），找到对应的SELinux user，找不到就是&lt;strong&gt;default&lt;/strong&gt;, &lt;strong&gt;default&lt;/strong&gt;没有就不能登录了&lt;/li&gt;
&lt;li&gt;根据以下context文件顺序，决定其shell的安全上下文，即joe:user_r:user_t&lt;ul&gt;
&lt;li&gt;/etc/selinux/specified-policy/contexts/users&lt;/li&gt;
&lt;li&gt;/etc/selinux/specified-policy/contexts/default_contexts&lt;/li&gt;
&lt;li&gt;/etc/selinux/specified-policy/contexts/failsafe_context&lt;/li&gt;
&lt;li&gt;sid kernel的安全上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;joe执行了一个应用，开始进行domain_transition, 要从user_t切换到passwd_t&lt;ul&gt;
&lt;li&gt;如果定义了&lt;code&gt;role user_r types passwd_t&lt;/code&gt;和&lt;code&gt;role user_r types user_t&lt;/code&gt;，则这次domain transition可以成功&lt;/li&gt;
&lt;li&gt;否则任意一个未定义，domain transition都会失败&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;高阶用法&#34;&gt;&lt;a href=&#34;#高阶用法&#34; class=&#34;headerlink&#34; title=&#34;高阶用法&#34;&gt;&lt;/a&gt;高阶用法&lt;/h1&gt;&lt;h2 id=&#34;role-transition&#34;&gt;&lt;a href=&#34;#role-transition&#34; class=&#34;headerlink&#34; title=&#34;role_transition&#34;&gt;&lt;/a&gt;role_transition&lt;/h2&gt;&lt;p&gt;role transition和domain transition非常类似，也是在某个domain进程在执行某个可执行文件时，即exec系统调用时，切换进程主体的安全上下文。domain transition切换的时domain，role transtion切换的是role。实现方式通过以下两条语句：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;allow staff_r sysadm_r; # 允许从staff_r切换到sysadm_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;role_transition sysadm_r http_exec_t system_r; # sysadm_r进程执行http_exec_t类型文件时，role切换为system_r&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;role-dominance&#34;&gt;&lt;a href=&#34;#role-dominance&#34; class=&#34;headerlink&#34; title=&#34;role_dominance&#34;&gt;&lt;/a&gt;role_dominance&lt;/h2&gt;&lt;p&gt;可以利用role来定义其他role，即role dominance。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;dominance &amp;#123; role super_r &amp;#123;role sysadm_r; role secadm_r; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;上面例子中的super_r称为dominant role，它可以从它关联的role中即成types。但它只能继承该条语句之前关联的types。我们之前说role语句是可以累积的。那么在role_dominance语句之后定义的types，并不能动态的添加到dominant role上。&lt;/p&gt;
&lt;h1 id=&#34;相关工具&#34;&gt;&lt;a href=&#34;#相关工具&#34; class=&#34;headerlink&#34; title=&#34;相关工具&#34;&gt;&lt;/a&gt;相关工具&lt;/h1&gt;&lt;p&gt;跟role相关的主要是semnage的一些用法，另外[1]还介绍了一个apol的可视化工具，可以检索user和role的数据。我理解semanage通过命令行也都可以实现。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前文介绍过的&lt;code&gt;semanage user -l&lt;/code&gt;和&lt;code&gt;semanage login -l&lt;/code&gt;, 前者用来查看所有SELinux的用户，后者用来查看Linux用户和SELinux用户两者的映射关系.&lt;/li&gt;
&lt;li&gt;Modify the default user on the system to the guest_u user&lt;ul&gt;
&lt;li&gt;&lt;code&gt;semanage login -m -s guest_u __default__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改user和role的对应关系&lt;ul&gt;
&lt;li&gt;&lt;code&gt;semanage user -m -R &amp;quot;message_filter_r unconfined_r&amp;quot; user_u&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加一个用户并指定SELinux用户&lt;ul&gt;
&lt;li&gt;&lt;code&gt;useradd joe -Z user_u&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a href=&#34;#参考文献&#34; class=&#34;headerlink&#34; title=&#34;参考文献&#34;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;p&gt;[1] &lt;a href=&#34;https://app.yinxiang.com/shard/s10/nl/161681/ea41e2f7-d7a8-4629-9f8c-c08696f578af/&#34;&gt;SELinux by Example_ Using Security Enhanced Linux&lt;/a&gt;&lt;br&gt;[2] &lt;a href=&#34;https://blog.csdn.net/keheinash/article/details/81047520&#34;&gt;SELinux初始化登录用户安全上下文的方法&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zhougy0717.github.io/2021/09/12/obsidian_posts/%E8%AF%A6%E8%A7%A3SELinux%20SID/</guid>
            <title>详解SELinux SID</title>
            <link>https://zhougy0717.github.io/2021/09/12/obsidian_posts/%E8%AF%A6%E8%A7%A3SELinux%20SID/</link>
            <category>SELinux</category>
            <pubDate>Sun, 12 Sep 2021 14:26:36 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Intro&#34;&gt;&lt;a href=&#34;#Intro&#34; class=&#34;headerlink&#34; title=&#34;Intro&#34;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;p&gt;SID = Security Identifier (即Security ID)。其作用就是取代安全上下文，在权限匹配时，提升规则搜索速度，以及降低整个策略数据的空间复杂度，提升了整个SELinux特性的性能损耗。&lt;br&gt;例如一次权限匹配的函数调用原型如下：&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;avc_has_perm&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct selinux_state *state, u32 ssid, u32 tsid, u16 tclass,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;		 u32 requested, struct common_audit_data *auditdata)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中ssid, tsid就代表了源(source)SID和目的(target)SID。在最终的av(access vector)计算中，SID被转化为context。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是context？&lt;br&gt;context，即安全上下文，是SELinux的核心概念。形如&lt;code&gt;user_u:role_r:type_t:s0-s1:c0,c1-c255&lt;/code&gt;的就是context。其中user字段和role字段用于RBAC，type字段用于TEAC，后面的s0-s1,c1-c255用于mls/mcs。而所有的这些字段，都由策略编译工具生成了整数数据，在SELinux加载策略时一并加载到内存policydb中。&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// context定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;context&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 role;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 len;        &lt;span class=&#34;comment&#34;&gt;/* length of string in bytes */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mls_range&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;range&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *str;	&lt;span class=&#34;comment&#34;&gt;/* string representation if context cannot be mapped. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// context加载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;context_read_and_validate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct context *c,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				     struct policydb *p,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				     &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *fp)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c-&amp;gt;user = le32_to_cpu(buf[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c-&amp;gt;role = le32_to_cpu(buf[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c-&amp;gt;type = le32_to_cpu(buf[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在真正的权限匹配时，SELinux通过SID获取到对应的context，再通过context中的type属性，所搜policydb中相应的hash表找到对应的map array，并获取对应某个权限的一个bit位，来得到权限判定结果。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 搜索sidtab获取SID对应的context，并用context数据结构来计算权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;security_compute_av&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct selinux_state *state,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u32 ssid,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u32 tsid,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u16 orig_tclass,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 struct av_decision *avd,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 struct extended_perms *xperms)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scontext = sidtab_search(sidtab, ssid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tcontext = sidtab_search(sidtab, tsid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    context_struct_compute_av(policydb, scontext, tcontext, tclass, avd,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				  xperms);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 通过context的type字段从policydb中获取权限数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;context_struct_compute_av&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct policydb *policydb,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				      struct context *scontext,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				      struct context *tcontext,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				      u16 tclass,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				      struct av_decision *avd,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				      struct extended_perms *xperms)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sattr = flex_array_get(policydb-&amp;gt;type_attr_map_array,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   scontext-&amp;gt;type - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tattr = flex_array_get(policydb-&amp;gt;type_attr_map_array,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   tcontext-&amp;gt;type - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ebitmap_for_each_positive_bit(sattr, snode, i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ebitmap_for_each_positive_bit(tattr, tnode, j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (node = avtab_search_node(&amp;amp;policydb-&amp;gt;te_avtab,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &amp;amp;avkey);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 node;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 node = avtab_search_node_next(node, avkey.specified)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// Get and assign perm data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;initial-SID&#34;&gt;&lt;a href=&#34;#initial-SID&#34; class=&#34;headerlink&#34; title=&#34;initial SID&#34;&gt;&lt;/a&gt;initial SID&lt;/h1&gt;&lt;p&gt;initial SID是一种比较特殊的SID。他在策略编译和SELinux启动中都扮演了非常重要的角色。通常在编译policy的时候，需要一些flask文件，例如Fedora refpolicy：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; ls refpolicy-master/policy/flask/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;access_vectors   initial_sids     security_classes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中initial_sids就指定了policy二进制中所有的initial SID。内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# FLASK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Define initial security identifiers&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid security&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid unlabeled&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid fs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid file_labels&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid init&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid any_socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid port&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid netif&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid netmsg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid node&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid igmp_packet&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid icmp_socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid tcp_socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_modprobe&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_fs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_net&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_net_unix&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_vm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_dev&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid kmod&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid policy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid scmp_packet&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid devnull&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# FLASK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考《Building The Sample Policy》中的介绍，这些flask文件的内容将被写到最终的policy二进制文件中（即policy.conf),如下：&lt;br&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;notebook-tools/build-sepolicy -o policy.conf -d ../../flask-files&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;build-sepolicy是一个python的示例程序，他是这样处理flask文件的:&lt;br&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f = Flask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.parseSids(flask_dir + &lt;span class=&#34;string&#34;&gt;&amp;quot;/initial_sids&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.parseClasses(flask_dir + &lt;span class=&#34;string&#34;&gt;&amp;quot;/security_classes&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.parseVectors(flask_dir + &lt;span class=&#34;string&#34;&gt;&amp;quot;/access_vectors&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Open the file and then create the requested policy source file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    of = &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(outf, &lt;span class=&#34;string&#34;&gt;&amp;#x27;w&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; include == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        of.writelines(f.createPolicyHdr(mode))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Output header file&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; cil == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        of.writelines(f.createCilPolicy(mode))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Output CIL policy&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; class_perm == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        of.writelines(f.createCilClassPerms(mode))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Output CIL class permission sets&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; sids == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        of.writelines(f.createCilInitialSIDS(mode))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Output CIL initial SIDs&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        of.writelines(f.createPolicy(mode))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Output Kernel Language policy&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    of.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;可见这些文件的内容，被写入到一个Flask对象中，而该对象的内容最终会被写入策略二进制数据。在后续的策略编译中，这些文件会被checkpolicy来处理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;initial SID的作用&lt;/strong&gt;&lt;br&gt;&lt;em&gt;from “SELinux by Example: Using Security Enhanced Linux”&lt;/em&gt;&lt;br&gt;Some objects are labeled via an initial SID early in system initialization, &lt;strong&gt;&lt;em&gt;even before the policy is loaded&lt;/em&gt;&lt;/strong&gt;. This labeling behavior is needed, for example, to label objects such as the kernel security server and the root filesystem, which are present in the system before the first policy load. &lt;strong&gt;&lt;em&gt;When the policy is eventually loaded, the initial SIDs are then associated with the appropriate security context&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;&lt;strong&gt;&lt;em&gt;Initial SIDs are also used to prevent objects from having a missing or invalid security context, which would make it impossible for SELinux to correctly enforce access&lt;/em&gt;&lt;/strong&gt;. Instead, SELinux associates these objects with the special unlabeled initial SID. The unlabeled initial SID should have a security context that allows only limited access, thereby preventing inappropriate access until the objects can be relabeled by the administrator or destroyed.&lt;br&gt;Invalid security contexts most commonly result from loading a new policy that removes users, roles, or types, or changes role or type authorizations. In this situation, the &lt;strong&gt;&lt;em&gt;SIDs representing security contexts that use these invalid names or associations will become invalid and are mapped to the unlabeled SID at policy load&lt;/em&gt;&lt;/strong&gt;. Invalid security contexts can also arise when transferring object instances between systems (for example, using removable media). Further, if the objects are created on a non-SELinux system, they will have no associated security context. Regardless of whether the security context is invalid or missing, SELinux will use the unlabeled initial SID on first access to the object as the security context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结一下，一共有这几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统启动时，policy尚未加载，也就是所有的context还没被抽象成SID，存储在内存中的policydb里。allow规则也还没加载，这时候，为了保证代码归一，所以需要这些unlabeled SID，在SELinux启动流程中，再具体介绍。&lt;/li&gt;
&lt;li&gt;当系统策略变化时，有些role，user或type被删除，导致一些安全上下文失效了，此时这些安全上下文，在策略加载时，会被映射到这些initial SID上。（这里还没找到具体的代码位置）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动时的使用&#34;&gt;&lt;a href=&#34;#启动时的使用&#34; class=&#34;headerlink&#34; title=&#34;启动时的使用&#34;&gt;&lt;/a&gt;启动时的使用&lt;/h2&gt;&lt;p&gt;init进程在加载策略之前，首先将SELinux的enforcing模式打开。其打开的方式就是往selinuxfs的enforce文件写1。注意此时策略未加载，初始化也未完成。所以策略判断直接取allow。&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;security_compute_av&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct selinux_state *state,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u32 ssid,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u32 tsid,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u16 orig_tclass,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 struct av_decision *avd,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 struct extended_perms *xperms)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!state-&amp;gt;initialized)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; allow;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;allow:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	avd-&amp;gt;allowed = &lt;span class=&#34;number&#34;&gt;0xffffffff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;但由于用户态的入口是一致的，即启动完成后，用户态可以写同样的enforce文件完成SELinux状态的切换，所以为了判断此时用户态进程是否具有设置的权限，在enforce文件的入口处，对用户态进程权限进行了判定：&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;length = avc_has_perm(&amp;amp;selinux_state,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  current_sid(), SECINITSID_SECURITY,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  SECCLASS_SECURITY, SECURITY__SETENFORCE,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;这里就用到了initial SID - &lt;code&gt;SECINITSID_SECURITY&lt;/code&gt;。这里其实已经可以使用selinuxfs的inode.i_security.sid，但由于selinuxfs未通过系统的file open调用，所以无法使用到inode下的SID标签。&lt;/p&gt;
&lt;h2 id=&#34;系统标签无效时&#34;&gt;&lt;a href=&#34;#系统标签无效时&#34; class=&#34;headerlink&#34; title=&#34;系统标签无效时&#34;&gt;&lt;/a&gt;系统标签无效时&lt;/h2&gt;&lt;p&gt;以socket bind时，对IP地址进行权限判断为例。该权限判断流程大致如下：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;mermaid&#34;&gt;graph TD
A[&#34;selinux_socket_bind&#34;]
A --&gt; B[&#34;sock_has_perm(SOCKET__BIND)&#34;]
B --&gt; C[&#34;get nodecon sid by sel_netnode_sid&#34;]
C --&gt; D[&#34;av_has_perm&#34;]&lt;/pre&gt;&lt;br&gt;&lt;code&gt;security_node_sid&lt;/code&gt;会从&lt;code&gt;policydb-&amp;gt;ocontexts[OCON_NODE]&lt;/code&gt;中搜索policydb中关于该IP地址的nodecon定义，如果找不着，说明此IP相关的nodecon无效（未定义），则会走默认的initial SID。&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!c-&amp;gt;sid[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rc = sidtab_context_to_sid(sidtab,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       &amp;amp;c-&amp;gt;context[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       &amp;amp;c-&amp;gt;sid[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (rc)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; out;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *out_sid = c-&amp;gt;sid[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *out_sid = SECINITSID_NODE; &lt;span class=&#34;comment&#34;&gt;// &amp;lt;===== intial SID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;其他SID&#34;&gt;&lt;a href=&#34;#其他SID&#34; class=&#34;headerlink&#34; title=&#34;其他SID&#34;&gt;&lt;/a&gt;其他SID&lt;/h1&gt;&lt;p&gt;除了initial SID由内核直接加载生成，其他的SID则由对应的打标签流程生成。例如：文件的SID则由setfiles/restorecon工具打入文件系统的扩展属性上，socket则由socket系统调用创建时生成。&lt;br&gt;以socket bind为例，因为比较简单。当socket bind系统调用被执行时，一个socket object被绑定到一个node上。而此时该node的SID才被写入policydb中。&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sel_netnode_sid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *addr, u16 family, u32 *sid)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sel_netnode&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;node&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	rcu_read_lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	node = sel_netnode_find(addr, family);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		*sid = node-&amp;gt;nsec.sid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		rcu_read_unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	rcu_read_unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; sel_netnode_sid_slow(addr, family, sid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;code&gt;sel_netnode_sid_slow&lt;/code&gt;调用&lt;code&gt;security_node_sid&lt;/code&gt;,并最终调用&lt;code&gt;sidtab_context_to_sid&lt;/code&gt;将相关的SID以及对应的context数据结构插入到表中。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;mermaid&#34;&gt;graph TD
A[&#34;security_node_sid&#34;]
A --&gt; B[&#34;search policydb-&gt;ocontexts[OCON_NODE]&#34;]
B --&gt; C{&#34;find?&#34;}
C --&gt; |N| B
C --&gt; |Y| D[&#34;sidtab_context_to_sid(context，&amp;sid)&#34;]
D --&gt; E(&#34;end&#34;)
C --&gt; |Never find| F[&#34;set an initial SID&#34;]
F --&gt; E&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;security_node_sid&lt;/code&gt;使用传入的IP地址在policydb中匹配查找context，如果找到则进行下一步，匹配或生成SID，找不到，则直接使用initial SID。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sidtab_context_to_sid&lt;/code&gt;将context写入sidtab，并获取返回的SID记入policydb中，后续通过context找SID，直接匹配&lt;code&gt;policydb-&amp;gt;ocontexts[OCON_NODE];&lt;/code&gt;即可。对于SID本身的生成也很简单，就是一个单向增长的整形数字，在&lt;code&gt;sidtab_context_to_sid&lt;/code&gt;中。&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sid = sidtab_search_context(s, context);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sid)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; unlock_out;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid = s-&amp;gt;next_sid++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret = sidtab_insert(s, sid, context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
先尝试在sidtab中查找，如果找不到就加一条记录，并为sid赋值。&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;SID在整个SELinux子系统中的作用就是提升匹配性能（从安全上下文的字符串匹配，降低到整数匹配）,所以在整个SELinux子系统生命周期内，SID总是与安全上下文（context）一一对应的。在一次权限匹配过程中，SID的使用如下：&lt;br&gt;&lt;img src=&#34;/2021/09/12/obsidian_posts/%E8%AF%A6%E8%A7%A3SELinux%20SID/948A5192-E302-40F3-9A2D-D3C2D5B2FF75.png&#34; alt=&#34;7fe0cdf2b84938b1e0610fe99bd3c917&#34;&gt;&lt;br&gt;context和SID的定义分别为：&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;u32 sid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;context&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 role;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 len;        &lt;span class=&#34;comment&#34;&gt;/* length of string in bytes */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mls_range&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;range&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *str;	&lt;span class=&#34;comment&#34;&gt;/* string representation if context cannot be mapped. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;相关工具&#34;&gt;&lt;a href=&#34;#相关工具&#34; class=&#34;headerlink&#34; title=&#34;相关工具&#34;&gt;&lt;/a&gt;相关工具&lt;/h1&gt;没有一个专门的工具用来转换SID与context。但libselinux提供了相应的接口，参考&lt;a href=&#34;https://linux.die.net/man/3/sidget&#34;&gt;sidget(3) - Linux man page&lt;/a&gt;。&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;avc_context_to_sid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;security_context_t&lt;/span&gt; ctx, &lt;span class=&#34;keyword&#34;&gt;security_id_t&lt;/span&gt; *sid)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;avc_sid_to_context&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;security_id_t&lt;/span&gt; sid, &lt;span class=&#34;keyword&#34;&gt;security_context_t&lt;/span&gt; *ctx)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;seinfo&#34;&gt;&lt;a href=&#34;#seinfo&#34; class=&#34;headerlink&#34; title=&#34;seinfo&#34;&gt;&lt;/a&gt;seinfo&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;打印所有initial SID&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost ~]$ seinfo --initialsid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Initial SIDs: 27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   any_socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   devnull&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   file_labels&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   icmp_socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   igmp_packet&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   init&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;打印selinuxfs context&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost ~]$ seinfo --genfscon|grep selinux&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   genfscon selinuxfs /  system_u:object_r:security_t:s0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;initial-contexts&#34;&gt;&lt;a href=&#34;#initial-contexts&#34; class=&#34;headerlink&#34; title=&#34;initial_contexts&#34;&gt;&lt;/a&gt;initial_contexts&lt;/h2&gt;策略加载后，每个initial SID都有一个对应的context。这些context在各策略模块中定义。这些context在selinuxfs可以查看：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost ~]$ sudo cat /sys/fs/selinux/initial_contexts/kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;system_u:system_r:kernel_t:s0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a href=&#34;#参考文献&#34; class=&#34;headerlink&#34; title=&#34;参考文献&#34;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fedora-selinux/selinux-policy&#34;&gt;Fedora refpolicy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Frank Mayer, Karl MacMillan, David Caplan， July 27, 2006- “SELinux by Example: Using Security Enhanced Linux”&lt;/li&gt;
&lt;li&gt;SELinux官方教材，”&lt;a href=&#34;https://github.com/SELinuxProject/selinux-notebook&#34;&gt;The SELinux Notebook&lt;/a&gt;“ Volume II, Building The Sample Policy&lt;/li&gt;
&lt;li&gt;SELinux官方教材，”&lt;a href=&#34;https://github.com/SELinuxProject/selinux-notebook&#34;&gt;The SELinux Notebook 4th Edition&lt;/a&gt;“&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
