<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhougy0717.github.io</id>
    <title>Big Ben • Posts by &#34;计算机技术&#34; category</title>
    <link href="https://zhougy0717.github.io" />
    <updated>2021-10-02T04:26:16.078Z</updated>
    <category term="javascript" />
    <category term="angular" />
    <category term="操作系统" />
    <category term="arm" />
    <category term="单片机" />
    <category term="machine learning" />
    <category term="deep learning" />
    <category term="Linux" />
    <category term="内存管理" />
    <category term="Markdown" />
    <category term="python" />
    <category term="win32com" />
    <category term="nas" />
    <category term="synology" />
    <category term="USB" />
    <category term="Linux Device Drivers" />
    <category term="uboot" />
    <category term="http" />
    <category term="同步" />
    <category term="算法" />
    <category term="读书笔记" />
    <category term="程序员修炼之道" />
    <category term="c/c++" />
    <category term="rap" />
    <category term="Eminem" />
    <category term="hexo" />
    <category term="security" />
    <category term="SELinux" />
    <category term="编译" />
    <category term="C++" />
    <category term="selinux" />
    <category term="iptables" />
    <category term="capability" />
    <category term="LD_PRELOAD" />
    <category term="coding" />
    <category term="红楼梦" />
    <category term="教育" />
    <category term="UT" />
    <category term="TDD" />
    <category term="code review" />
    <category term="committer" />
    <category term="印象笔记" />
    <category term="Obsidian" />
    <category term="群晖" />
    <category term="Calibre" />
    <category term="电子书" />
    <category term="Android" />
    <category term="xposed" />
    <category term="GitHub" />
    <category term="中断处理" />
    <category term="docker" />
    <category term="ttrss" />
    <category term="rsshub" />
    <category term="wallabag" />
    <category term="can" />
    <category term="network" />
    <category term="unittest" />
    <category term="mockito" />
    <category term="powermock" />
    <category term="QT" />
    <category term="nlp" />
    <category term="vim" />
    <category term="SpaceVim" />
    <category term="tmux" />
    <category term="面向对象" />
    <category term="promise" />
    <category term="mongodb" />
    <category term="Programming" />
    <category term="C++11" />
    <category term="IoT" />
    <category term="broadlink" />
    <category term="domoticz" />
    <category term="UML" />
    <category term="socket" />
    <category term="neural network" />
    <category term="mock" />
    <category term="深度学习" />
    <category term="schedule algorithm" />
    <category term="glibc" />
    <category term="gtest" />
    <category term="gmock" />
    <category term="golang" />
    <category term="elf" />
    <category term="软件开发" />
    <category term="设计模式" />
    <entry>
        <id>https://zhougy0717.github.io/2021/10/02/obsidian_posts/%E6%96%B0%E4%BA%BA%E4%B8%8Ecode%20review/</id>
        <title>新人与code review</title>
        <link rel="alternate" href="https://zhougy0717.github.io/2021/10/02/obsidian_posts/%E6%96%B0%E4%BA%BA%E4%B8%8Ecode%20review/"/>
        <content type="html">&lt;p&gt;通常commtter都是一些比较资深的员工，因为通过阅读代码发现问题，需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;迅速读懂代码，意味着比较好的代码抽象能力&lt;/li&gt;
&lt;li&gt;通过阅读代码识别问题，意味着比较丰富的编码经验和调试经验&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那是不是职场新人就不适合对别人的代码code review呢？这可能是很多人的第一印象，但如果你是新人，也这么想，那么你就失去了很多主动学习的机会。&lt;/p&gt;
&lt;p&gt;code review更多的是一个沟通过程。评审人毕竟不是owner，他对代码的熟悉程度大概率是远不如提交人的。评审者多是根据自身的开发经验，以及短时间内对提交代码的理解发现问题。大多数时候，因为每个人的经验，性格，看问题的角度不同，多数时候是抛出一些问题，并形成讨论。当思想发生碰撞时，确实会发现一些问题，或者形成一些更好的想法和设计。这些都是code review能够带来的好处。虽然代码评审需要比较深厚的编码功力，但并不意味着参与代码评审对新人没有任何意义。&lt;/p&gt;
&lt;h1 id=&#34;新人参与code-review的好处&#34;&gt;&lt;a href=&#34;#新人参与code-review的好处&#34; class=&#34;headerlink&#34; title=&#34;新人参与code review的好处&#34;&gt;&lt;/a&gt;新人参与code review的好处&lt;/h1&gt;&lt;p&gt;据我看，至少有以下的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常我们可以看到的都是同一个开发领域提交的代码。那么在评审代码的同时，可以阅读已有代码，通过新提交的代码了解某一块的实现逻辑，以学习存量代码。&lt;/li&gt;
&lt;li&gt;如果提交人是比较资深的开发，那么可以借此机会，提出一些问题，向前辈请教。在阅读资深开发提交的代码时，也可以学习一些好的编码实践，而这些通常书本上是不会有的。如果依靠阅读海量的存量代码来学习，可能很快就迷失了，效率也会比较低。而一次代码提交的代码量是比较有限的，且功能相对内聚，比较容易提炼一些抽象逻辑，是一个很好的学习的机会。并且由于提交人需要合入一份新的代码，他可能也更乐于讨论他提交的这一份代码，进而发现问题。所以，这时候提出问题，通常会得到比较积极的回复。&lt;/li&gt;
&lt;li&gt;如果提交人同样资历也比较浅，那么通过阅读别人的代码，来发现问题，通常是我们检验所学知识的很好的一次锻炼机会。知识管理学揭示，通过学习习得的知识只有通过不停的使用，才会内化，进而变成自己的知识。实际开发中使用可以内化知识，使用自己的经验和书本所学，对别人的代码进行评审，并发现问题，也是对所学知识的一种使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;新人甚少参与code-review的原因剖析&#34;&gt;&lt;a href=&#34;#新人甚少参与code-review的原因剖析&#34; class=&#34;headerlink&#34; title=&#34;新人甚少参与code review的原因剖析&#34;&gt;&lt;/a&gt;新人甚少参与code review的原因剖析&lt;/h1&gt;&lt;p&gt;但可惜的是，据我观察，主动投入code review的职场新人真的太少了。我总结原因可能是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;还是职场上磨不开面子，尤其是害羞腼腆的国内新职场人。如果参考Google的code review指南，把握提出问题的方式，应该没问题的&lt;/li&gt;
&lt;li&gt;中国教育造成的主动思维太少，新人们更关注安排的任务，而缺乏主动学习思考的锻炼。其实你的领导和同事，大多数时候关注的是工作输出，自己的进步还需要自己做主。因为你才是自己的owner。&lt;/li&gt;
&lt;li&gt;加班文化扼杀了很多思考的时间。本来国人的主观能动性就比较差，再加上996的璀璨，留给新人们思考总结和规划的时间就越来越少了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;所有的开发都应当积极的投身code review活动中，新手开发更应该参与其中。可能你一开始并不能很快提出有效意见，但code review更多的时候是一种学习和交流，投身其中有百利而无一害。祝愿所有新手能够迅速走出新手村。&lt;/p&gt;
</content>
        <category term="code review" />
        <updated>2021-10-02T04:26:16.078Z</updated>
    </entry>
    <entry>
        <id>https://zhougy0717.github.io/2021/09/19/obsidian_posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%20vs.%20%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</id>
        <title>单元测试 vs. 功能测试</title>
        <link rel="alternate" href="https://zhougy0717.github.io/2021/09/19/obsidian_posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%20vs.%20%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
        <content type="html">&lt;p&gt;最近在某一次讨论测试的话题中，有一位同事认为“重构结果看护，用集成测试（Integration Test）就可以了，UT看护的逻辑太小，导致修改过于频繁，维护成本太高，没必要。”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;几种测试名词：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单元测试（Unit Test或UT）&lt;br&gt;针对小的代码逻辑编写的测试，不需要运行在真实环境上的，可以随时部署，随时运行，结果应当保持一致&lt;/li&gt;
&lt;li&gt;功能测试（Function Test）&lt;br&gt;针对特性功能编写的测试，应当与实际运行环境保持一致，测试软件产品端到端功能&lt;/li&gt;
&lt;li&gt;集成测试（Integration Test）&lt;br&gt;针对系统或子系统中某个组件的特性功能编写的测试，对其依赖组件进行打桩，并在真实环境进行部署测试，通常用于看护代码提交质量&lt;/li&gt;
&lt;li&gt;冒烟测试（Smoke Test）&lt;br&gt;我们通常说的ST指的是冒烟测试，而非系统测试（System Test），冒烟测试与集成测试指代同一种测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，IT或ST都是一种功能测试，除此之外，还有看护完整特性功能的测试，性能测试等，都属于功能测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这位同学给出IT可以胜任看护重构结果的原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IT通过对周边依赖进行打桩，可以达到80%的覆盖率，看护力度足够&lt;/li&gt;
&lt;li&gt;只要设计足够精巧，完成一个大型工程的IT只需要十分钟，运行速度足够快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为在重构中，IT完全可以看护代码质量&lt;sup&gt;1⃣️&lt;/sup&gt;，所以UT的作用就削弱了&lt;sup&gt;2⃣️&lt;/sup&gt;。又因为UT看护粒度过细，导致UT代码维护困难，维护UT得不偿失&lt;sup&gt;3⃣️&lt;/sup&gt;。而实际上，那个榜样部门就是这样做的——只用IT看护重构，库上代码放弃开发维护UT。&lt;/p&gt;
&lt;p&gt;先不遑论该部门做法的对与错，我们首先针对上面提到的三个观点进行剖析。&lt;/p&gt;
&lt;h1 id=&#34;IT完全可以看护代码质量&#34;&gt;&lt;a href=&#34;#IT完全可以看护代码质量&#34; class=&#34;headerlink&#34; title=&#34;IT完全可以看护代码质量&#34;&gt;&lt;/a&gt;IT完全可以看护代码质量&lt;/h1&gt;&lt;p&gt;这一点我是认同的。UT的关注点是组成接口代码的小逻辑。虽然理论上只要保证每个小逻辑的输入输出正确，就可以保证一个接口的正确性，进而到模块，组件，系统级别。但是，因为UT对模块的划分比较细，模块之间采用打桩的方式解决依赖问题，而mock质量参差不齐，势必会造成对接口间，模块间的测试误差。这也是不可测性的一种体现。相反，因为IT的测试关注点，在特性功能（至少是组件级的功能），所以IT更擅长于发现组件集成时的bug（所以叫集成测试嘛）。&lt;/p&gt;
&lt;h1 id=&#34;UT的作用被削弱了&#34;&gt;&lt;a href=&#34;#UT的作用被削弱了&#34; class=&#34;headerlink&#34; title=&#34;UT的作用被削弱了&#34;&gt;&lt;/a&gt;UT的作用被削弱了&lt;/h1&gt;&lt;p&gt;刚才说到IT相比UT更擅长看护代码质量，那是不是意味着UT没用了呢？&lt;br&gt;答案是否定的。我们先看看什么是IT不擅长的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于IT关注的代码粒度较大，看护的是模块或组件间的特性接口，不利于构造细粒度的case，这造成分支覆盖率低。或者说如果要实现超高分支覆盖率，IT付出的成本会比较高。其结果就是测试稳定性高了（随代码改动而失败的频率降低，只要组件间接口保持一致，IT就不需要变更），但对代码修改的敏感度降低。&lt;/li&gt;
&lt;li&gt;IT的开发成本高。因为涉及到多模块甚至多组件协同，case复杂度高。如果涉及模块间接口打桩，由于接口复杂度高，桩代码实现也更为复杂。在特性代码开发过程中，无法进行有效的IT开发和测试。&lt;/li&gt;
&lt;li&gt;IT运行时间久。前面说到一个比较大的工程运行一次IT，运行时间可以控制到十分钟。可能很多人都认为十分钟是能够忍受的长度。对于IT来说，这确实是一个很优秀的数字了（我想为了实现这一点本身也是要付出很大的代价的）。但是如果将其运用到red-green-refactor的开发节奏中，还是有些不合时宜。试想，你要运行一个预计十分钟会完成的测试，你会全身灌注地盯着屏幕，等待十分钟直到测试完成吗？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2021/09/19/obsidian_posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%20vs.%20%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/Pasted%20image%2020210829201431.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;我想通常是不会的。这时候，自制力差一点的同学就开始刷手机了，自制力好一点的同学会着手处理其他问题。这其实就是另一种被打断。而被打断是软件开发的大忌。你不仅失去进入“心流”的机会，并且你回到主线开发的时间间隔越长，花费在重建现场的额外开销就会越大，进而影响你的效率。&lt;/p&gt;
&lt;p&gt;先看看我们利用IT进行一次前文提到的大型“重构”的流程会是怎么样的？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里说的重构，我认为称为re-architecture更合适，和我们平时说的refactor还是不太一样。他们的共同点是，保证代码功能不变的前提下，优化代码架构和实现。区别是，re-architecture是一次根本性的架构变更，可能涉及到很多模块需要重写，而refactor更多的是在平时做一些代码调整，即所谓的小步重构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;定好特性架构，开始特性开发&lt;/li&gt;
&lt;li&gt;特性代码接近完成时，开始开发IT&lt;/li&gt;
&lt;li&gt;开发IT的同时，一边调试IT，一边使用IT测试特性代码&lt;/li&gt;
&lt;li&gt;重复步骤3直到IT代码和特性代码均没有问题，即达到可交付状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;前文提到IT的测试时间相比UT还是比较久的，如果将其运用到red-green-refactor节奏中，则容易造成注意力分散，进而引起时间管理困境&lt;/li&gt;
&lt;li&gt;如果没有UT，步骤2通常会一直处于“裸奔”状态，“裸奔”的时间取决于开发者对特性代码开发状态的评估，一般要到特性代码比较接近完工水平时，才可以编写IT。由于IT开发调试难度高，基本也不太可能和特性代码一同开发。&lt;/li&gt;
&lt;li&gt;由于IT开发和运行的成本高，那么势必造成开发时，针对特性代码的测试运过少，那么由于开发的不稳定性，产生的返工可能性大，成本高。（换句话说，如果开发对于特性的熟悉程度非常高，实际上也可以不一定即时UT，还是选择与平衡问题。不过这种情况据我观察还是比较少的）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以抛弃UT，确实节省了一些代码开发时间，但也丢失了一件非常重要的武器，导致我们的开发节奏又回到了瀑布式开发，而无法实现小步快跑的即时重构开发方式。&lt;/p&gt;
&lt;p&gt;实际上我认为，&lt;strong&gt;引入UT就是为了引入reg-green-refactor的开发节奏，从而通过实时重构，及时消除代码坏味道，进而实现代码自下而上的架构设计&lt;/strong&gt;。与前期自上而下的特性设计配合，以实现最合理的代码架构。避免在特性设计阶段过于关注实现细节，也避免在开发阶段，过于纠结权衡欠设计与过设计导致的效率低下。&lt;/p&gt;
&lt;p&gt;UT的运行成本非常低，这是因为UT不关注代码功能，只关注代码输入输出逻辑。全程对依赖接口进行打桩实现，运行速度很快（没有任何的延时和多线程操作，也可能连IO操作都没有）。UT针对小逻辑组织case，单case复杂度低，case之间的依赖关系被严格控制。所以运行的时候，一方面速度快，另一方面可以根据需要，随意组合运行的case以达到需要的测试范围和粒度。例如：可以选择运行一个case或是一个suite，也可以通过正则表达式运行多个case，或者完整运行所有的case。&lt;/p&gt;
&lt;p&gt;综上可见，UT和IT是两类用途完全不同的测试方法。一个好比军刀，可以上战场杀敌；一个好比菜刀，可以烹小鲜慰军。一个看护结果；一个促进过程。&lt;/p&gt;
&lt;h1 id=&#34;UT维护困难，维护UT得不偿失&#34;&gt;&lt;a href=&#34;#UT维护困难，维护UT得不偿失&#34; class=&#34;headerlink&#34; title=&#34;UT维护困难，维护UT得不偿失&#34;&gt;&lt;/a&gt;UT维护困难，维护UT得不偿失&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;那UT带来的工作量呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刚才说，如果没有UT，其实会引入很多隐性工作量。如果要衡量工作量，更公平的比较应当是将维护UT的工作量与这些隐性工作量进行比较。通常我听到的对UT的抱怨大多是因为UT看护内部模块边界。当组件内部实现修改时，例如函数改名字，变更函数原型等一些特别频繁的重构操作，由于IT看护组件边界接口，IT更稳定不需要变动。而UT由于看护了内部模块边界，所以UT要随之更新。这些确实看起来是额外的工作量，但当前流行的开发工具，例如一些IDE或者VS code，都已经能够提供很好的重构工具，在修改函数名字，修改函数原型，或者抽取函数或内联函数等操作上，都已经可以大大减少开发者的操作难度。另外，由于UT对代码的敏感性，让你实时都感受到你的代码变动都是经过测试的，每一次变动都被看护，这种感觉不是很令人有安全感吗😊？&lt;/p&gt;
&lt;p&gt;而传统的瀑布式开发带来的隐性问题，很多是因为人类思考方式导致的。例如思路打断，对过设计和欠设计的恐惧，不停返工引起的沮丧心情。这些带来的影响很难去估量，他们可能很严重，也可能无足轻重，完全取决于开发者自身的素质。以我个人的经验看，我是更愿意花一些切实的UT成本，来消除这些不确定性。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;再回过头来分析一下那个成功部门的做法。通过IT看护重构结果，并丢弃UT这种测试方法。首先，重构结果大概率不会有问题，因为有足够测试力度的IT作为看护工具。其次，因为缺乏及时运行的测试case，重构开发时效率得不到保证。大概率只能通过模块重写实现。另外，又因为重构效率低，成本高，重构只能积攒起来一次性完成。于是refactor变成re-architecture。&lt;/p&gt;
&lt;p&gt;不过话说回来，测试策略并没有对错之分，永远是项目组根据自身情况，权衡得出的。可能项目组一时无法获得UT的价值，或者项目组对UT对技术积累不充分，从而无法很好对实践UT。但我们还是应该厘清单元测试和功能测试的差别，分清应用场合，这样才能更好地朝正确的方向演进。&lt;/p&gt;
</content>
        <category term="UT" />
        <category term="TDD" />
        <updated>2021-09-19T12:40:57.189Z</updated>
    </entry>
    <entry>
        <id>https://zhougy0717.github.io/2021/09/18/obsidian_posts/RBAC/</id>
        <title>RBAC</title>
        <link rel="alternate" href="https://zhougy0717.github.io/2021/09/18/obsidian_posts/RBAC/"/>
        <content type="html">&lt;p&gt;RBAC, Role Based Access Control, 是SELinux的另一个重要的特性。但他并不是一种独立的控制方式，而是对TEAC的一种补充。其主要的作用是，构建SELinux提供的进程级的MAC机制与Linux的用户系统的映射关系。&lt;/p&gt;
&lt;h1 id=&#34;RBAC工作原理&#34;&gt;&lt;a href=&#34;#RBAC工作原理&#34; class=&#34;headerlink&#34; title=&#34;RBAC工作原理&#34;&gt;&lt;/a&gt;RBAC工作原理&lt;/h1&gt;&lt;p&gt;RBAC并不提供强制访问控制，而是通过user，role，type之间的对应关系，来控制type_transition策略能否成功。&lt;/p&gt;
&lt;h2 id=&#34;role-vs-type&#34;&gt;&lt;a href=&#34;#role-vs-type&#34; class=&#34;headerlink&#34; title=&#34;role vs. type&#34;&gt;&lt;/a&gt;role vs. type&lt;/h2&gt;&lt;p&gt;role based最基本的就是定义role到type到对应关系。使用role语句可以实现：&lt;code&gt;role role_name [types type_set];&lt;/code&gt;。例如：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;role user_r types user_t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;role user_r types &amp;#123; staff_t, admin_t &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;role定义是累积的，即后面的对应关系不会覆盖前面语句定义的对应关系，而只会追加这种关系&lt;/li&gt;
&lt;li&gt;role语句通常定义在type声明附近，以确保该对应关系被及时定义&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;定义子role (period)&lt;/strong&gt;&lt;br&gt;A period is used to indicate restrictions on the set of types that may be assigned to a role. For example, the set of types for a role called &lt;strong&gt;&lt;em&gt;apache.cgi&lt;/em&gt;&lt;/strong&gt; must be a &lt;strong&gt;&lt;em&gt;subset&lt;/em&gt;&lt;/strong&gt; of the type set of a role called &lt;strong&gt;&lt;em&gt;apache&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;role语句定义的基本逻辑就是，定义了role=&amp;gt;{ types }集合的映射关系。当发生type transition时，如果转换后的{role，type}组合未定义，则视为权限错误。从这个层面看，role对应的是主体type，即domain type，而非object type。&lt;/p&gt;
&lt;h3 id=&#34;特殊的role-object-r&#34;&gt;&lt;a href=&#34;#特殊的role-object-r&#34; class=&#34;headerlink&#34; title=&#34;特殊的role: object_r&#34;&gt;&lt;/a&gt;特殊的role: object_r&lt;/h3&gt;&lt;p&gt;object_r是内核SELinux模块预定义的一个role，无需在policy中声明。而这个object_r被专门用来定义客体的安全上下文。&lt;/p&gt;
&lt;h2 id=&#34;user-vs-role&#34;&gt;&lt;a href=&#34;#user-vs-role&#34; class=&#34;headerlink&#34; title=&#34;user vs. role&#34;&gt;&lt;/a&gt;user vs. role&lt;/h2&gt;&lt;p&gt;user是对role的再一次扩充，通过user将role与Linux user的映射关系建立起来。SELinux的用户系统独立于Linux用户系统。通过seusers文件或者&lt;code&gt;semanage user&lt;/code&gt;命令可以定义他们之间的映射关系。但实际可定义的自由度并没有那么高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The design decision for SELinux to have a distinct user identifier (rather than share that of Linux) is motivated by the desire to create an immutable SELinux user identifier.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定义一个user与role的映射关系，可以使用user语句：&lt;code&gt;user user_name roles &amp;#123; role_set &amp;#125;;&lt;/code&gt;&lt;br&gt;user语句所体现的逻辑和role语句类似，即定义了user=&amp;gt;{ roles }集合的映射关系。当应用启动时发生role transition时，如果转换后的{user, role}未定义，则视为权限错误。&lt;/p&gt;
&lt;p&gt;当SELinux通过RBAC，建立起user=&amp;gt;role=&amp;gt;type的映射关系以后，还获得了一个好处。Linux系统的用户数可能很多，而用户的类型很少。用户并不是为了定义权限的，不同的用户之间的使用数据需要隔离。但往往一类用户的权限是相同的。例如超级用户，管理员用户，普通用户等等。系统的权限集最小粒度由domain定义。可能每个进程的权限不同，也可能一组进程的权限相同。但往往domain的数量也很庞大。如果没有RBAC，我们需要定义user到domain到映射。这样也不是不能做，但却不太优雅。每次新增用户时，需要为新增用户绑定一堆domain。定义了role之后，role相当于较稳定的一层抽象，role到types的映射关系是在定义type时候就定义了的。增加新user的时候，只要定义user到role的映射即可。这就是引入RBAC的原因。&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;graph LR
A[user] --&gt; B[role]
A --&gt; C[role]
A --&gt; D[role]
C --&gt; E[domain]
C --&gt; F[domain]
C --&gt; G[domain]&lt;/pre&gt;

&lt;h3 id=&#34;Linux用户-vs-SELinux-user&#34;&gt;&lt;a href=&#34;#Linux用户-vs-SELinux-user&#34; class=&#34;headerlink&#34; title=&#34;Linux用户 vs. SELinux user&#34;&gt;&lt;/a&gt;Linux用户 vs. SELinux user&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当前系统的用户可以通过查看/etc/passwd文件获取，也可以参考&lt;a href=&#34;https://zhuanlan.zhihu.com/p/41161408&#34;&gt;列出 Linux 系统上所有用户的 3 种方法&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;查看SELinux的用户可以通过命令&lt;code&gt;semanage user -l&lt;/code&gt;.&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;               标记中        MLS/       MLS/                          &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SELinux 用户      前缀         MCS 级别     MCS 范围                         SELinux 角色&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;guest_u         user       s0         s0                             guest_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;root            user       s0         s0-s0:c0.c1023                 staff_r sysadm_r system_r unconfined_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;staff_u         user       s0         s0-s0:c0.c1023                 staff_r sysadm_r unconfined_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sysadm_u        user       s0         s0-s0:c0.c1023                 sysadm_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;system_u        user       s0         s0-s0:c0.c1023                 system_r unconfined_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unconfined_u    user       s0         s0-s0:c0.c1023                 system_r unconfined_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;user_u          user       s0         s0                             user_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xguest_u        user       s0         s0                             xguest_r&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;查看两者的映射关系可以通过命令&lt;code&gt;semanage login -l&lt;/code&gt;.&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;登录名                  SELinux 用户           MLS/MCS 范围           服务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__default__          unconfined_u         s0-s0:c0.c1023       *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;john                 user_u               s0                   *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;root                 unconfined_u         s0-s0:c0.c1023       *&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux用户和SELinux用户的初始映射关系由seusers文件指定。这个文件不属于策略二进制的一部分，而可以直接修改生效。当然更优雅的办法是通过semanage命令来修改。&lt;br&gt;另外，在修改了context以后，或者新建了用户以后，必须要使用注销登录的方法，才能使新的context生效，而只使用su命令切换用户，并不会切换context。推测注销登录使用的是PAM登录程序，而su命令中，并没有重新加载user context的功能。&lt;br&gt;Linux用户登录后，获取shell安全上下文的步骤，可以参考文献【2】。简述如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据seusers文件，映射SELinux用户，如果没有seusers文件，系统就无法启动了。如果seusers文件没有对应的用户描述，则统一映射为&lt;code&gt;__default__&lt;/code&gt;用户。如果&lt;code&gt;__default__&lt;/code&gt;用户描述不存在，则无法登录。&lt;/li&gt;
&lt;li&gt;根据SELinux的搜索优先级，找到对应SELinux用户的安全上下文。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;勘误&lt;/strong&gt;&lt;br&gt;在[1]中，对Linux用户和SELinux的映射关系有如下描述：&lt;br&gt;On login, if there is an SELinux user identifier that is exactly the same as the Linux user identifier, the matching SELinux user identifier becomes the user identifier in the security context for the initial shell process. In this way, if a Linux user identifier also exists as a user identifier in the SELinux policy, all login processes will set the initial shell process security context user identifier to that matching Linux identity.&lt;br&gt;经实验证明，并非如此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义了一个guest_u用户，登录后，其shell的安全上下文仍为：&lt;br&gt;&lt;img src=&#34;/2021/09/18/obsidian_posts/RBAC/163C5090-847B-49EC-B709-3AAA87D776D9.png&#34; alt=&#34;1ca6909a350aa84947ea565bb4c8eaa2&#34;&gt;&lt;/li&gt;
&lt;li&gt;但事实证明，明明就有guest_u这个用户&lt;br&gt;&lt;img src=&#34;/2021/09/18/obsidian_posts/RBAC/CA68A544-BEE4-4B4E-9BC5-EA3452F816F9.png&#34; alt=&#34;7737fbc74190005733b9f01b60178907&#34;&gt;&lt;br&gt;推测，可能是因为SELinux也一直在发展改进中。[1]d 成书时间是2006年，彼时还是FC（Fedora Core）5的年代，现在最新版已经是Fedora 33，2020年10月份发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;现在可以引用[1]中的一幅图来总结一下RBAC的工作原理了。&lt;br&gt;&lt;img src=&#34;/2021/09/18/obsidian_posts/RBAC/6903A6B7-B8D6-4621-8AF4-C276F4EAD57F.png&#34; alt=&#34;115b4d2e2576fd1b93937d66425645d5&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux系统有一个用户较joe&lt;/li&gt;
&lt;li&gt;SELinuxcelue中规定joe和user_r绑定，user_r和user_t绑定&lt;/li&gt;
&lt;li&gt;当joe登录时，系统根据seusers（此处与图不同，参见上一章勘误），找到对应的SELinux user，找不到就是&lt;strong&gt;default&lt;/strong&gt;, &lt;strong&gt;default&lt;/strong&gt;没有就不能登录了&lt;/li&gt;
&lt;li&gt;根据以下context文件顺序，决定其shell的安全上下文，即joe:user_r:user_t&lt;ul&gt;
&lt;li&gt;/etc/selinux/specified-policy/contexts/users&lt;/li&gt;
&lt;li&gt;/etc/selinux/specified-policy/contexts/default_contexts&lt;/li&gt;
&lt;li&gt;/etc/selinux/specified-policy/contexts/failsafe_context&lt;/li&gt;
&lt;li&gt;sid kernel的安全上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;joe执行了一个应用，开始进行domain_transition, 要从user_t切换到passwd_t&lt;ul&gt;
&lt;li&gt;如果定义了&lt;code&gt;role user_r types passwd_t&lt;/code&gt;和&lt;code&gt;role user_r types user_t&lt;/code&gt;，则这次domain transition可以成功&lt;/li&gt;
&lt;li&gt;否则任意一个未定义，domain transition都会失败&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;高阶用法&#34;&gt;&lt;a href=&#34;#高阶用法&#34; class=&#34;headerlink&#34; title=&#34;高阶用法&#34;&gt;&lt;/a&gt;高阶用法&lt;/h1&gt;&lt;h2 id=&#34;role-transition&#34;&gt;&lt;a href=&#34;#role-transition&#34; class=&#34;headerlink&#34; title=&#34;role_transition&#34;&gt;&lt;/a&gt;role_transition&lt;/h2&gt;&lt;p&gt;role transition和domain transition非常类似，也是在某个domain进程在执行某个可执行文件时，即exec系统调用时，切换进程主体的安全上下文。domain transition切换的时domain，role transtion切换的是role。实现方式通过以下两条语句：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;allow staff_r sysadm_r; # 允许从staff_r切换到sysadm_r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;role_transition sysadm_r http_exec_t system_r; # sysadm_r进程执行http_exec_t类型文件时，role切换为system_r&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;role-dominance&#34;&gt;&lt;a href=&#34;#role-dominance&#34; class=&#34;headerlink&#34; title=&#34;role_dominance&#34;&gt;&lt;/a&gt;role_dominance&lt;/h2&gt;&lt;p&gt;可以利用role来定义其他role，即role dominance。&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;dominance &amp;#123; role super_r &amp;#123;role sysadm_r; role secadm_r; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;上面例子中的super_r称为dominant role，它可以从它关联的role中即成types。但它只能继承该条语句之前关联的types。我们之前说role语句是可以累积的。那么在role_dominance语句之后定义的types，并不能动态的添加到dominant role上。&lt;/p&gt;
&lt;h1 id=&#34;相关工具&#34;&gt;&lt;a href=&#34;#相关工具&#34; class=&#34;headerlink&#34; title=&#34;相关工具&#34;&gt;&lt;/a&gt;相关工具&lt;/h1&gt;&lt;p&gt;跟role相关的主要是semnage的一些用法，另外[1]还介绍了一个apol的可视化工具，可以检索user和role的数据。我理解semanage通过命令行也都可以实现。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前文介绍过的&lt;code&gt;semanage user -l&lt;/code&gt;和&lt;code&gt;semanage login -l&lt;/code&gt;, 前者用来查看所有SELinux的用户，后者用来查看Linux用户和SELinux用户两者的映射关系.&lt;/li&gt;
&lt;li&gt;Modify the default user on the system to the guest_u user&lt;ul&gt;
&lt;li&gt;&lt;code&gt;semanage login -m -s guest_u __default__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改user和role的对应关系&lt;ul&gt;
&lt;li&gt;&lt;code&gt;semanage user -m -R &amp;quot;message_filter_r unconfined_r&amp;quot; user_u&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加一个用户并指定SELinux用户&lt;ul&gt;
&lt;li&gt;&lt;code&gt;useradd joe -Z user_u&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a href=&#34;#参考文献&#34; class=&#34;headerlink&#34; title=&#34;参考文献&#34;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;p&gt;[1] &lt;a href=&#34;https://app.yinxiang.com/shard/s10/nl/161681/ea41e2f7-d7a8-4629-9f8c-c08696f578af/&#34;&gt;SELinux by Example_ Using Security Enhanced Linux&lt;/a&gt;&lt;br&gt;[2] &lt;a href=&#34;https://blog.csdn.net/keheinash/article/details/81047520&#34;&gt;SELinux初始化登录用户安全上下文的方法&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="security" />
        <category term="SELinux" />
        <updated>2021-09-18T14:17:35.996Z</updated>
    </entry>
    <entry>
        <id>https://zhougy0717.github.io/2021/09/18/obsidian_posts/initializer-list%E5%92%8C%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
        <title>initializer-list和列表初始化</title>
        <link rel="alternate" href="https://zhougy0717.github.io/2021/09/18/obsidian_posts/initializer-list%E5%92%8C%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
        <content type="html">&lt;h1 id=&#34;C-11的列表初始化&#34;&gt;&lt;a href=&#34;#C-11的列表初始化&#34; class=&#34;headerlink&#34; title=&#34;C++11的列表初始化&#34;&gt;&lt;/a&gt;C++11的列表初始化&lt;/h1&gt;&lt;p&gt;在C语言和C++98/03中，大括号可以用来初始化数组，例如：&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a[] = &amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; b[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&amp;#125;; &lt;span class=&#34;comment&#34;&gt;// 如果个数不足的，用0初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;C++11将这类大括号初始化，扩展到自定义类型，但需要满足一定的条件，否则会编译报错。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考&lt;a href=&#34;https://blog.csdn.net/JinhuCheng/article/details/107330983&#34;&gt;C++11新特性之列表初始化、POD、聚合类&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C++98/03标准中对于普通数组和POD类型可以直接使用列表初始化；&lt;/li&gt;
&lt;li&gt;C++11标准中对于普通数组和聚合类型可以直接使用列表初始化；&lt;/li&gt;
&lt;li&gt;C++11标准中对于非聚合类型可以通过自定义构造函数的方式使用列表初始化。&lt;br&gt;&lt;a href=&#34;https://blog.csdn.net/hailong0715/article/details/54018002&#34;&gt;C++11新特性之列表初始化&lt;/a&gt;提到非聚合类型不能使用列表初始化是不对的。实验证明，不论是不是聚合类型，均可以采用列表初始化。&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a1) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(std::initializer_list&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt; l) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a &amp;#123;&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	A a = &amp;#123;&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
首先声明&lt;code&gt;A a=&amp;#123;123&amp;#125;&lt;/code&gt;或者&lt;code&gt;A a&amp;#123;123&amp;#125;&lt;/code&gt;这两种构造方法是一致的。&lt;br&gt;其次，对于这种构造方法，编译器会先尝试用&lt;code&gt;A(std::initializer_list&amp;lt;int&amp;gt; l)&lt;/code&gt;去匹配，如果不成功，则会尝试&lt;code&gt;A(int)&lt;/code&gt;，如果这两种构造函数都未定义，就会编译报错。&lt;br&gt;另外，成员变量也可以采用就地初始化, 虽然这会导致类成为非聚合类，但并不妨碍其采用列表初始化方法。使用虚函数，有基类的效果都是一样的，不影响列表初始化方法的使用。&lt;h2 id=&#34;C-11中的几种初始化方法&#34;&gt;&lt;a href=&#34;#C-11中的几种初始化方法&#34; class=&#34;headerlink&#34; title=&#34;C++11中的几种初始化方法&#34;&gt;&lt;/a&gt;C++11中的几种初始化方法&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;就地初始化&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a1 &amp;#123;&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; a2 = &amp;#123;&lt;span class=&#34;number&#34;&gt;12.0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; a3 = &lt;span class=&#34;number&#34;&gt;12.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        B b&amp;#123;&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        C c = &amp;#123;&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;构造函数初始化列表&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;() : &lt;span class=&#34;built_in&#34;&gt;a&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;), &lt;span class=&#34;built_in&#34;&gt;b&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;456&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;列表初始化&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(std::initializer_list&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 优先匹配A(std::initializer_list&amp;lt;int, int&amp;gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 再匹配A(int, int)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 否则报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    A a &amp;#123;&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;456&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;就地初始化会最先得到执行，构造函数初始化列表会覆盖就地初始化的值&lt;/li&gt;
&lt;li&gt;如果采用初始化列表，即&lt;code&gt;a&amp;#123;...&amp;#125;&lt;/code&gt;初始化，&lt;code&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;的构造函数会优先得到执行&lt;/li&gt;
&lt;li&gt;如果采用原生构造函数，即&lt;code&gt;a(int)&lt;/code&gt;初始化，&lt;code&gt;A(init)&lt;/code&gt;优先得到执行&lt;h1 id=&#34;什么是initializer-list&#34;&gt;&lt;a href=&#34;#什么是initializer-list&#34; class=&#34;headerlink&#34; title=&#34;什么是initializer-list&#34;&gt;&lt;/a&gt;什么是initializer-list&lt;/h1&gt;&lt;strong&gt;摘录&lt;a href=&#34;https://blog.csdn.net/hailong0715/article/details/54018002&#34;&gt;C++11新特性之列表初始化&lt;/a&gt;&lt;/strong&gt;-初始化列表&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;它是一个轻量级的容器类型，内部定义了迭代器iterator等容器必须的一些概念。 &lt;/li&gt;
&lt;li&gt;initialzer-list&lt;T&gt;来说，它可以接受任意长度的初始化列表，但是元素必须是要相同的或者可以转换为T类型的。  &lt;/T&gt;&lt;/li&gt;
&lt;li&gt;三个成员接口，begin(),end(),size(),其中size()返回initialzer-list的长度。  &lt;/li&gt;
&lt;li&gt;能被整体的初始化和赋值，遍历只能通过begin和end迭代器来，遍历取得的数据是可读的，是不能对单个进行修改的。  &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意一：&lt;br&gt;initialzer-list&lt;T&gt;保存的是T类型的引用，并不对T类型的数据进行拷贝，因此需要注意变量的生存期&lt;/T&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;std::initializer_list&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&amp;#123; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; c = &lt;span class=&#34;built_in&#34;&gt;func&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; it = c.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(); it != c.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		std::cout &amp;lt;&amp;lt; it - c.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; (*it) &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此处打印是乱的。因为func返回的是右值引用，在退出函数后失效。&lt;/p&gt;
&lt;p&gt;注意二：&lt;br&gt;列表初始化防止类型收窄&lt;br&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; b&amp;#123; &lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt; &amp;#125;; &lt;span class=&#34;comment&#34;&gt;//error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; f1 = &lt;span class=&#34;number&#34;&gt;1e40&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//OK, 科学计数法10^40&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; f2&amp;#123; &lt;span class=&#34;number&#34;&gt;1e40&lt;/span&gt; &amp;#125;; &lt;span class=&#34;comment&#34;&gt;//error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;, y = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; c = x; &lt;span class=&#34;comment&#34;&gt;//OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; d&amp;#123; x &amp;#125;;&lt;span class=&#34;comment&#34;&gt;//error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; e = y;&lt;span class=&#34;comment&#34;&gt;//error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; f&amp;#123; y &amp;#125;;&lt;span class=&#34;comment&#34;&gt;//error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a href=&#34;#参考文献&#34; class=&#34;headerlink&#34; title=&#34;参考文献&#34;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://en.cppreference.com/w/cpp/utility/initializer_list&#34;&gt;initializer_list - cppreference.com&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://blog.csdn.net/hailong0715/article/details/54018002&#34;&gt;C++11新特性之列表初始化&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://blog.csdn.net/JinhuCheng/article/details/107330983&#34;&gt;C++11新特性之列表初始化、POD、聚合类&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="C++" />
        <updated>2021-09-18T14:07:11.246Z</updated>
    </entry>
    <entry>
        <id>https://zhougy0717.github.io/2021/09/18/obsidian_posts/%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B&amp;POD/</id>
        <title>聚合类型&amp;POD</title>
        <link rel="alternate" href="https://zhougy0717.github.io/2021/09/18/obsidian_posts/%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B&amp;POD/"/>
        <content type="html">&lt;h1 id=&#34;什么是聚合类型&#34;&gt;&lt;a href=&#34;#什么是聚合类型&#34; class=&#34;headerlink&#34; title=&#34;什么是聚合类型&#34;&gt;&lt;/a&gt;什么是聚合类型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;C++03定义&lt;/strong&gt;&lt;br&gt;An aggregate is an array or a class (clause 9) with no user-declared constructors (12.1), no private or protected non-static data members (clause 11), no base classes (clause 10), and no virtual functions (10.3).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++11定义&lt;/strong&gt;&lt;br&gt;An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no brace-or-equal-initializers for non-static data members (9.2), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结合C++03和C++11标准定义，罗列一下聚合类型的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚合类型可以有构造函数，但只能是编译器定义的默认构造函数，或者用&lt;code&gt;=default&lt;/code&gt;定义的构造函数&lt;/li&gt;
&lt;li&gt;聚合类型不能有private，protected非static变量&lt;/li&gt;
&lt;li&gt;聚合类型可以有copy-assignment operator and/or destructor&lt;/li&gt;
&lt;li&gt;数组是聚合类型，即便数组成员是非聚合类型&lt;/li&gt;
&lt;li&gt;聚合类型的数组可以是非聚合类型&lt;/li&gt;
&lt;li&gt;聚合类型不能用brace-or-equal-initializers（即就地初始化）初始化非static成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;聚合类型变量初始化&#34;&gt;&lt;a href=&#34;#聚合类型变量初始化&#34; class=&#34;headerlink&#34; title=&#34;聚合类型变量初始化&#34;&gt;&lt;/a&gt;聚合类型变量初始化&lt;/h2&gt;&lt;p&gt;聚合类型可以采用列表初始化（其实非聚合类型，通过自定义构造函数，也可以采用列表初始化）&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(m == n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// the ith element of the array is initialized with ai&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(m &amp;lt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// the first m elements of the array are initialized with a1,  a2, …, am and the other n - m elements are, if possible, value-initialized (see below for the explanation of the term)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(m &amp;gt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// the compiler will issue an error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/*(this is the case when n isn&amp;#x27;t specified at all like int a[] = &amp;#123;1, 2, 3&amp;#125;;) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// the size of the array (n) is assumed to be equal to m, so int a[] = &amp;#123;1, 2, 3&amp;#125;; is equivalent to int a[3] = &amp;#123;1, 2, 3&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;聚合变量最大的特点可以做&lt;strong&gt;聚合初始化&lt;/strong&gt;，除了基本的列表初始化规则，聚合初始化还体现在可以递归初始化。&lt;br&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  X x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; f; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Z&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  X x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;Z&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; a1) &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Y y = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;code&gt;y.x&lt;/code&gt;也被初始化了。如果对Z用递归聚合初始化，例如&lt;code&gt;Z z = &amp;#123;&amp;#39;a&amp;#39;, &amp;#123;&amp;#39;b&amp;#39;&amp;#125;&amp;#125;&lt;/code&gt;，编译器就会报错。因为Z不是聚合类型，编译器会去找对应的构造函数，显然Z没定义这样的构造函数。&lt;br&gt;具体介绍可以参考&lt;a href=&#34;https://en.cppreference.com/w/cpp/language/aggregate_initialization&#34;&gt;Aggregate initialization&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;什么是POD变量&#34;&gt;&lt;a href=&#34;#什么是POD变量&#34; class=&#34;headerlink&#34; title=&#34;什么是POD变量&#34;&gt;&lt;/a&gt;什么是POD变量&lt;/h1&gt;&lt;p&gt;POD = Plain Old Data，可见这是一种兼容型比较好的形态。甚至可以导出与其他语言共享此类变量定义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;C++03定义&lt;/strong&gt;&lt;br&gt;A POD-struct is an aggregate class that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-defined copy assignment operator and no user-defined destructor. Similarly, a POD-union is an aggregate union that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-defined copy assignment operator and no user-defined destructor. A POD class is a class that is either a POD-struct or a POD-union.&lt;/p&gt;
&lt;p&gt;C++11定义变得非常优雅&lt;br&gt;&lt;strong&gt;A POD struct is a non-union class that is both a trivial class and a standard-layout class&lt;/strong&gt;, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). Similarly, a POD union is a union that is both a trivial class and a standard layout class, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). A POD class is a class that is either a POD struct or a POD union.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总而言之：&lt;br&gt;POD类型是一种特殊的聚合类型，一个POD类型为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标量类型。&lt;/li&gt;
&lt;li&gt;满足以下条件的自定义类型：&lt;ul&gt;
&lt;li&gt;C++11之前：&lt;ul&gt;
&lt;li&gt;聚合类型。&lt;/li&gt;
&lt;li&gt;没有非POD类型的非静态成员变量。&lt;/li&gt;
&lt;li&gt;没有引用类型的非静态成员变量。&lt;/li&gt;
&lt;li&gt;没有自定义的构造函数或析构函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11之后：&lt;ul&gt;
&lt;li&gt;是平凡类。&lt;/li&gt;
&lt;li&gt;是标准布局类。&lt;/li&gt;
&lt;li&gt;没有非POD类型的非静态成员变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;POD类型的数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;聚合类型或是POD变量有什么好处？&#34;&gt;&lt;a href=&#34;#聚合类型或是POD变量有什么好处？&#34; class=&#34;headerlink&#34; title=&#34;聚合类型或是POD变量有什么好处？&#34;&gt;&lt;/a&gt;聚合类型或是POD变量有什么好处？&lt;/h1&gt;&lt;p&gt;聚合类最大的特点就是可以采用聚合初始化。&lt;br&gt;POD的特点更为实用一些&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;POD的用途&lt;/strong&gt;&lt;br&gt;平凡类的用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平凡类的对象可以与字节流之间安全转换，即：&lt;ul&gt;
&lt;li&gt;若要将对象转为字节流，直接取其地址即可。&lt;/li&gt;
&lt;li&gt;若要将字节流转为对象，直接将该地址cast为对象指针即可。&lt;/li&gt;
&lt;li&gt;直接通过复制字节的方式复制对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全的静态初始化。&lt;ul&gt;
&lt;li&gt;C++11的thread_local变量可以是非平凡类型，但在某些编译器下会有比较大的性能开销。gcc扩展的__thread只能使用POD类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;标准布局类的用途：&lt;/strong&gt;&lt;br&gt;跨进程、跨语言使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;名词解释&#34;&gt;&lt;a href=&#34;#名词解释&#34; class=&#34;headerlink&#34; title=&#34;名词解释&#34;&gt;&lt;/a&gt;名词解释&lt;/h1&gt;&lt;h2 id=&#34;value-initialization&#34;&gt;&lt;a href=&#34;#value-initialization&#34; class=&#34;headerlink&#34; title=&#34;value initialization&#34;&gt;&lt;/a&gt;value initialization&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对于普通类型变量(bool, int, char, double, pointers, etc.)&lt;br&gt;it means it is initialized with 0 for that type (false for bool, 0.0 for double, etc.). &lt;/li&gt;
&lt;li&gt;对于class类型&lt;ul&gt;
&lt;li&gt;如果有自定义构造函数，则调用自定义构造函数&lt;/li&gt;
&lt;li&gt;如果没有自定一构造函数，则调用默认构造函数&lt;/li&gt;
&lt;li&gt;如果没有对应的构造函数，则报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例&lt;br&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;) &amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;//no default constructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;B&lt;/span&gt;() &amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;//default constructor available&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  A a1[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;), &lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;)&amp;#125;; &lt;span class=&#34;comment&#34;&gt;//OK n == m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  A a2[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&amp;#125;; &lt;span class=&#34;comment&#34;&gt;//ERROR A has no default constructor. Unable to value-initialize a2[1] and a2[2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  B b1[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;built_in&#34;&gt;B&lt;/span&gt;()&amp;#125;; &lt;span class=&#34;comment&#34;&gt;//OK b1[1] and b1[2] are value initialized, in this case with the default-ctor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; Array1[&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;; &lt;span class=&#34;comment&#34;&gt;//All elements are initialized with 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; Array2[&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;; &lt;span class=&#34;comment&#34;&gt;//Attention: only the first element is 1, the rest are 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;bool&lt;/span&gt; Array3[&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;] = &amp;#123;&amp;#125;; &lt;span class=&#34;comment&#34;&gt;//the braces can be empty too. All elements initialized with false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; Array4[&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;//no initializer. This is different from an empty &amp;#123;&amp;#125; initializer in that&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//the elements in this case are not value-initialized, but have indeterminate values &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//(unless, of course, Array4 is a global array)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; array[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&amp;#125;; &lt;span class=&#34;comment&#34;&gt;//ERROR, too many initializers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;大括号中个数不足的，用value initialization补足。这就是&lt;code&gt;A a = &amp;#123;1&amp;#125;;&lt;/code&gt;或者&lt;code&gt;A a = &amp;#123;&amp;#125;&lt;/code&gt;的含义。大括号中个数超过声明的个数的，则编译报错。&lt;/p&gt;
&lt;h2 id=&#34;brace-or-equal-initializers&#34;&gt;&lt;a href=&#34;#brace-or-equal-initializers&#34; class=&#34;headerlink&#34; title=&#34;brace-or-equal-initializers&#34;&gt;&lt;/a&gt;brace-or-equal-initializers&lt;/h2&gt;&lt;p&gt;类成员的一种初始化方法&lt;br&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;B&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; b &amp;#123;&lt;span class=&#34;number&#34;&gt;456&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    B c &amp;#123;&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    B d = &amp;#123;&lt;span class=&#34;number&#34;&gt;34&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;copy-assignment-operator&#34;&gt;&lt;a href=&#34;#copy-assignment-operator&#34; class=&#34;headerlink&#34; title=&#34;copy-assignment operator&#34;&gt;&lt;/a&gt;copy-assignment operator&lt;/h2&gt;&lt;p&gt;拷贝赋值方法&lt;br&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;A &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &amp;amp;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    A&amp;amp; &lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt;= (&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; A&amp;amp;a) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    A a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    A b = a; &lt;span class=&#34;comment&#34;&gt;// 这里调用的是拷贝构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    A c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = a; &lt;span class=&#34;comment&#34;&gt;// 这里才会调用拷贝复制函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;trial-stuff&#34;&gt;&lt;a href=&#34;#trial-stuff&#34; class=&#34;headerlink&#34; title=&#34;trial stuff&#34;&gt;&lt;/a&gt;trial stuff&lt;/h2&gt;&lt;h3 id=&#34;trivial-copyable&#34;&gt;&lt;a href=&#34;#trivial-copyable&#34; class=&#34;headerlink&#34; title=&#34;trivial copyable&#34;&gt;&lt;/a&gt;trivial copyable&lt;/h3&gt;&lt;p&gt;参考&lt;a href=&#34;https://en.cppreference.com/w/cpp/named_req/TriviallyCopyable&#34;&gt;C++ named requirements: TriviallyCopyable&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following types are collectively called trivially copyable types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scalar types&lt;/li&gt;
&lt;li&gt;Trivially copyable classes, i.e. classes satisfying following requirements:&lt;ul&gt;
&lt;li&gt;At least one copy constructor, move constructor, copy assignment operator, or move assignment operator is eligible&lt;/li&gt;
&lt;li&gt;Every eligible copy constructor (if any) is trivial&lt;/li&gt;
&lt;li&gt;Every eligible move constructor (if any) is trivial&lt;/li&gt;
&lt;li&gt;Every eligible copy assignment operator (if any) is trivial&lt;/li&gt;
&lt;li&gt;Every eligible move assignment operator (if any) is trivial&lt;/li&gt;
&lt;li&gt;Has a trivial non-deleted destructor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arrays of TriviallyCopyable objects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This implies that a trivially copyable class has no virtual functions or virtual base classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过模版&lt;a href=&#34;https://en.cppreference.com/w/cpp/types/is_trivially_copyable&#34;&gt;std::is_trivially_copyable&lt;/a&gt;可以检验一个类是否trivially copyable。&lt;/p&gt;
&lt;h3 id=&#34;trivial-constructor-destructor&#34;&gt;&lt;a href=&#34;#trivial-constructor-destructor&#34; class=&#34;headerlink&#34; title=&#34;trivial constructor/destructor&#34;&gt;&lt;/a&gt;trivial constructor/destructor&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编译器定义的构造/析构函数&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;=default&lt;/code&gt;定义的构造析构函数&lt;h3 id=&#34;trivial-class&#34;&gt;&lt;a href=&#34;#trivial-class&#34; class=&#34;headerlink&#34; title=&#34;trivial class&#34;&gt;&lt;/a&gt;trivial class&lt;/h3&gt;The standard defines a trivial class as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A trivially copyable class is a class that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;has no non-trivial copy constructors (12.8),&lt;/li&gt;
&lt;li&gt;has no non-trivial move constructors (12.8),&lt;/li&gt;
&lt;li&gt;has no non-trivial copy assignment operators (13.5.3, 12.8),&lt;/li&gt;
&lt;li&gt;has no non-trivial move assignment operators (13.5.3, 12.8), and&lt;/li&gt;
&lt;li&gt;has a trivial destructor (12.4).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A trivial class is a class that has a trivial default constructor (12.1) and is trivially copyable.&lt;/p&gt;
&lt;p&gt;[ Note: In particular, a trivially copyable or trivial class does not have virtual functions or virtual base classes. ]&lt;br&gt;另外trivial class是递归的，即trivial class不能有非trivial class的非static成员。&lt;br&gt;用模版&lt;a href=&#34;https://en.cppreference.com/w/cpp/types/is_trivial&#34;&gt;std::is_trivial&lt;/a&gt;来测试&lt;/p&gt;
&lt;h2 id=&#34;standard-layout&#34;&gt;&lt;a href=&#34;#standard-layout&#34; class=&#34;headerlink&#34; title=&#34;standard layout&#34;&gt;&lt;/a&gt;standard layout&lt;/h2&gt;&lt;p&gt;A standard-layout class is a class that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;has no non-static data members of type non-standard-layout class (or array of such types) or reference,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;has no virtual functions (10.3) and no virtual base classes (10.1),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;has the same access control (Clause 11) for all non-static data members,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;has no non-standard-layout base classes,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;either has no non-static data members in the most derived class and at most one base class with non-static data members, or has no base classes with non-static data members, (要么终点类没有非静态成员，并且只有一个基类有非静态成员；要么没有基类有非静态成员)，and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;has no base classes of the same type as the first non-static data member.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A standard-layout struct is a standard-layout class defined with the class-key struct or the class-key class.&lt;/p&gt;
&lt;p&gt;A standard-layout union is a standard-layout class defined with the class-key union.&lt;/p&gt;
&lt;p&gt;[ Note: Standard-layout classes are useful for communicating with code written in other programming languages. Their layout is specified in 9.2.]&lt;/p&gt;
&lt;p&gt;标准内存分布，确保对象内存和C语言的结构体内存分布完全一致。使得POD变量具备了C兼容性。&lt;br&gt;用模版&lt;a href=&#34;https://en.cppreference.com/w/cpp/types/is_standard_layout&#34;&gt;std::is_standard_layout&lt;/a&gt;可以测试&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;用&lt;a href=&#34;https://en.cppreference.com/w/cpp/types/is_pod&#34;&gt;std::is_pod&lt;/a&gt;来测试你的类吧。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a href=&#34;#参考文献&#34; class=&#34;headerlink&#34; title=&#34;参考文献&#34;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/4178175/what-are-aggregates-and-pods-and-how-why-are-they-special&#34;&gt;What are Aggregates and PODs and how/why are they special?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fuzhe1989.github.io/2018/03/15/cpp-object-model-pod/&#34;&gt;C++对象模型（三）POD&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="C++" />
        <updated>2021-09-18T14:03:05.792Z</updated>
    </entry>
    <entry>
        <id>https://zhougy0717.github.io/2021/09/12/obsidian_posts/setcap%20vs.%20LD_PRELOAD/</id>
        <title>setcap vs. LD_PRELOAD</title>
        <link rel="alternate" href="https://zhougy0717.github.io/2021/09/12/obsidian_posts/setcap%20vs.%20LD_PRELOAD/"/>
        <content type="html">&lt;p&gt;在Linux中，一个进程拉起另一个进程的流程大致如下：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;mermaid&#34;&gt;graph LR;
F[parent process] --&gt; A[start]
A --fork--&gt; B[child]
A --&gt; C[wait]
B --exec--&gt; D[new process]
D --&gt; E[end]
C --&gt; E&lt;/pre&gt;&lt;br&gt;最常见的就是通过shell终端执行命令。此场景下，/bin/bash就是这个parent process，而要执行的那个命令就是new process。&lt;br&gt;Linux有一些特性，可以使得创建出的进程比拉起的进程权限高。例如可执行文件配置了set-user-ID位，则拉起的进程就是root权限，而其父进程有可能是普通用户权限。如果可执行文件配置了file capability，则创建出的进程就具备了某些capability，如果父进程没有这些capability，则这也是一种权限放大的场景。&lt;br&gt;当发生这种权限放大的场景时，Linux的安全特性要求，此时子进程中的某些敏感环境变量会被清空，例如：LD_PRELOAD,LD_LIBRARY_PATH。由于这些环境变量都是从父进程继承过来的，如果不清空，则表明会使用高权限级别执行这些环境变量指定的可执行代码。&lt;/p&gt;
&lt;h1 id=&#34;LD-LIBRARY-PATH&#34;&gt;&lt;a href=&#34;#LD-LIBRARY-PATH&#34; class=&#34;headerlink&#34; title=&#34;LD_LIBRARY_PATH&#34;&gt;&lt;/a&gt;LD_LIBRARY_PATH&lt;/h1&gt;&lt;p&gt;参考文献[1]，ld.so搜索动态库的顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DT_PATH指定的库文件（deprecated）&lt;/li&gt;
&lt;li&gt;LD_LIBRARY_PATH指定的库文件&lt;/li&gt;
&lt;li&gt;DT_RUNPATH指定的库文件&lt;/li&gt;
&lt;li&gt;/etc/ld.so.cache这个二进制文件指定的库文件，该文件通过ldconfig命令生成&lt;/li&gt;
&lt;li&gt;In the default path /lib, and then /usr/lib.  (On some 64-bit architectures, the default paths for 64-bit shared objects are /lib64, and then /usr/lib64.)  If the binary was linked with the -z nodeflib linker option, this step is skipped.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以针对LD_LIBRARY_PATH，除了第二条的方法失效，其他的都可以用。&lt;/p&gt;
&lt;h1 id=&#34;LD-PRELOAD&#34;&gt;&lt;a href=&#34;#LD-PRELOAD&#34; class=&#34;headerlink&#34; title=&#34;LD_PRELOAD&#34;&gt;&lt;/a&gt;LD_PRELOAD&lt;/h1&gt;&lt;p&gt;那针对LD_PRELOAD，是不是就没法用呢？其实也不是。&lt;br&gt;在没有setcap以及set-user-ID的情况下，如果ld.so需要预加载一个库文件，指定方法在文献[1]中同样有描述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;LD_PRELOAD&lt;/code&gt; environment variable.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;--preload&lt;/code&gt; command-line option when invoking the dynamic linker directly.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;/etc/ld.so.preload&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在secure-execution模式下，方法2和方法3均不受影响。方法1也仍然可以使用。但是需要一些特殊的设置，在[1]中也有描述。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In secure-execution mode, &lt;strong&gt;preload pathnames containing slashes are ignored&lt;/strong&gt;.  Furthermore, shared objects are preloaded &lt;strong&gt;only from the standard search directories&lt;/strong&gt; and only if &lt;strong&gt;they have set-user-ID mode bit enabled&lt;/strong&gt; (which is not typical).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;综上，需要3点配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LD_PRELOAD环境变量指定的库文件不能包含斜线’/‘&lt;/li&gt;
&lt;li&gt;库文件只会从标准路径下加载。这里标准路径可以参考LD_LIBRARY_PATH中的描述。注意，此时ld.so只会搜索标准路径，不会搜索通过其他手段配置的路径（如上一节描述的）。&lt;/li&gt;
&lt;li&gt;库文件必须使能了set-user-id位&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;示例代码&#34;&gt;&lt;a href=&#34;#示例代码&#34; class=&#34;headerlink&#34; title=&#34;示例代码&#34;&gt;&lt;/a&gt;示例代码&lt;/h1&gt;&lt;p&gt;代码目录树：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost test]$ tree .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── lib.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── libtest.so&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── test&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;└── test.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;main.c生成main可执行程序，test.c生成test可执行程序，lib.c生成libtest.so。&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// main.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pid_t&lt;/span&gt; pid = fork();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pid == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *envp[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;string&#34;&gt;&amp;quot;LD_PRELOAD=libtest.so&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;comment&#34;&gt;// &amp;quot;LD_PRELOAD=./libtest.so&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *argv[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; err = execve(&lt;span class=&#34;string&#34;&gt;&amp;quot;./test&amp;quot;&lt;/span&gt;, argv, envp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; status;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                wait(&amp;amp;status);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// test.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *preload = getenv(&lt;span class=&#34;string&#34;&gt;&amp;quot;LD_PRELOAD&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;LD_PRELOAD = %s\n&amp;quot;&lt;/span&gt;, preload);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// lib.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; __&lt;span class=&#34;title&#34;&gt;attribute__&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;((constructor))&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;I&amp;#x27;m libtest.so loaded\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;在test可执行程序是普通的二进制时，输出为&lt;br&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost test]$ ./main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;I&amp;#x27;m libtest.so loaded&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LD_PRELOAD = ./libtest.so&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;当test配置了capability以后：&lt;br&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost test]$ sudo setcap cap_net_admin,cap_net_raw=eip ./test&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost test]$ ./main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LD_PRELOAD = (null)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;可见LD_PRELOAD指定libtest.so未被加载，且LD_PRELOAD环境变量被清空了。&lt;/p&gt;
&lt;h2 id=&#34;LD-PRELOAD不含斜线&#34;&gt;&lt;a href=&#34;#LD-PRELOAD不含斜线&#34; class=&#34;headerlink&#34; title=&#34;LD_PRELOAD不含斜线&#34;&gt;&lt;/a&gt;LD_PRELOAD不含斜线&lt;/h2&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost test]$ ./main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ERROR: ld.so: object &amp;#x27;libtest.so&amp;#x27; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LD_PRELOAD = (null)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;LD_PRELOAD仍然被清空了，但ld.so似乎尝试去加载libtest.so了，但是没找着。&lt;/p&gt;
&lt;h2 id=&#34;将libtest-so放入标准路径&#34;&gt;&lt;a href=&#34;#将libtest-so放入标准路径&#34; class=&#34;headerlink&#34; title=&#34;将libtest.so放入标准路径&#34;&gt;&lt;/a&gt;将libtest.so放入标准路径&lt;/h2&gt;&lt;p&gt;如果没有配置set-user-id位：&lt;br&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost test]$ ./main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ERROR: ld.so: object &amp;#x27;libtest.so&amp;#x27; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LD_PRELOAD = (null)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;仍然提示找不到。如果设置了set-user-id位：&lt;br&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost test]$ sudo chmod a+s /usr/lib64/libtest.so &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost test]$ ./main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;I&amp;#x27;m libtest.so loaded&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LD_PRELOAD = (null)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;在满足上一节提到的3个条件时，libteso.so就可以正常加载了。&lt;br&gt;看看如果放到/usr/lib下面会怎么样？&lt;br&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost test]$ ls /usr/lib/libtest.so -l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-rwsr-sr-x. 1 root root 8208 1月  24 19:48 /usr/lib/libtest.so&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost test]$ ./main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ERROR: ld.so: object &amp;#x27;libtest.so&amp;#x27; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LD_PRELOAD = (null)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;看看还是一样找不到。可见在x64平台上，/usr/lib并非标准路径，而/usr/lib64以及/lib64才是。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a href=&#34;#参考文献&#34; class=&#34;headerlink&#34; title=&#34;参考文献&#34;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;p&gt;[1] &lt;a href=&#34;https://man7.org/linux/man-pages/man8/ld.so.8.html&#34;&gt;ld.so(8) — Linux manual page&lt;/a&gt;&lt;br&gt;[2] &lt;a href=&#34;https://stackoverflow.com/questions/18058426/does-using-linux-capabilities-disables-ld-preload&#34;&gt;Stackoverflow - Does using linux capabilities disables LD_PRELOAD&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <category term="capability" />
        <category term="LD_PRELOAD" />
        <updated>2021-09-12T06:29:34.553Z</updated>
    </entry>
    <entry>
        <id>https://zhougy0717.github.io/2021/09/12/obsidian_posts/%E8%AF%A6%E8%A7%A3SELinux%20SID/</id>
        <title>详解SELinux SID</title>
        <link rel="alternate" href="https://zhougy0717.github.io/2021/09/12/obsidian_posts/%E8%AF%A6%E8%A7%A3SELinux%20SID/"/>
        <content type="html">&lt;h1 id=&#34;Intro&#34;&gt;&lt;a href=&#34;#Intro&#34; class=&#34;headerlink&#34; title=&#34;Intro&#34;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;p&gt;SID = Security Identifier (即Security ID)。其作用就是取代安全上下文，在权限匹配时，提升规则搜索速度，以及降低整个策略数据的空间复杂度，提升了整个SELinux特性的性能损耗。&lt;br&gt;例如一次权限匹配的函数调用原型如下：&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;avc_has_perm&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct selinux_state *state, u32 ssid, u32 tsid, u16 tclass,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;		 u32 requested, struct common_audit_data *auditdata)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中ssid, tsid就代表了源(source)SID和目的(target)SID。在最终的av(access vector)计算中，SID被转化为context。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是context？&lt;br&gt;context，即安全上下文，是SELinux的核心概念。形如&lt;code&gt;user_u:role_r:type_t:s0-s1:c0,c1-c255&lt;/code&gt;的就是context。其中user字段和role字段用于RBAC，type字段用于TEAC，后面的s0-s1,c1-c255用于mls/mcs。而所有的这些字段，都由策略编译工具生成了整数数据，在SELinux加载策略时一并加载到内存policydb中。&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// context定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;context&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 role;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 len;        &lt;span class=&#34;comment&#34;&gt;/* length of string in bytes */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mls_range&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;range&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *str;	&lt;span class=&#34;comment&#34;&gt;/* string representation if context cannot be mapped. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// context加载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;context_read_and_validate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct context *c,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				     struct policydb *p,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				     &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *fp)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c-&amp;gt;user = le32_to_cpu(buf[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c-&amp;gt;role = le32_to_cpu(buf[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c-&amp;gt;type = le32_to_cpu(buf[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在真正的权限匹配时，SELinux通过SID获取到对应的context，再通过context中的type属性，所搜policydb中相应的hash表找到对应的map array，并获取对应某个权限的一个bit位，来得到权限判定结果。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 搜索sidtab获取SID对应的context，并用context数据结构来计算权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;security_compute_av&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct selinux_state *state,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u32 ssid,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u32 tsid,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u16 orig_tclass,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 struct av_decision *avd,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 struct extended_perms *xperms)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scontext = sidtab_search(sidtab, ssid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tcontext = sidtab_search(sidtab, tsid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    context_struct_compute_av(policydb, scontext, tcontext, tclass, avd,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				  xperms);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 通过context的type字段从policydb中获取权限数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;context_struct_compute_av&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct policydb *policydb,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				      struct context *scontext,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				      struct context *tcontext,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				      u16 tclass,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				      struct av_decision *avd,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;				      struct extended_perms *xperms)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sattr = flex_array_get(policydb-&amp;gt;type_attr_map_array,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   scontext-&amp;gt;type - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tattr = flex_array_get(policydb-&amp;gt;type_attr_map_array,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   tcontext-&amp;gt;type - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ebitmap_for_each_positive_bit(sattr, snode, i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ebitmap_for_each_positive_bit(tattr, tnode, j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (node = avtab_search_node(&amp;amp;policydb-&amp;gt;te_avtab,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &amp;amp;avkey);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 node;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 node = avtab_search_node_next(node, avkey.specified)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// Get and assign perm data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;initial-SID&#34;&gt;&lt;a href=&#34;#initial-SID&#34; class=&#34;headerlink&#34; title=&#34;initial SID&#34;&gt;&lt;/a&gt;initial SID&lt;/h1&gt;&lt;p&gt;initial SID是一种比较特殊的SID。他在策略编译和SELinux启动中都扮演了非常重要的角色。通常在编译policy的时候，需要一些flask文件，例如Fedora refpolicy：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; ls refpolicy-master/policy/flask/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;access_vectors   initial_sids     security_classes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中initial_sids就指定了policy二进制中所有的initial SID。内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# FLASK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Define initial security identifiers&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid security&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid unlabeled&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid fs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid file_labels&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid init&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid any_socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid port&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid netif&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid netmsg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid node&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid igmp_packet&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid icmp_socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid tcp_socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_modprobe&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_fs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_net&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_net_unix&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_vm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid sysctl_dev&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid kmod&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid policy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid scmp_packet&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid devnull&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# FLASK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考《Building The Sample Policy》中的介绍，这些flask文件的内容将被写到最终的policy二进制文件中（即policy.conf),如下：&lt;br&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;notebook-tools/build-sepolicy -o policy.conf -d ../../flask-files&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;build-sepolicy是一个python的示例程序，他是这样处理flask文件的:&lt;br&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f = Flask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.parseSids(flask_dir + &lt;span class=&#34;string&#34;&gt;&amp;quot;/initial_sids&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.parseClasses(flask_dir + &lt;span class=&#34;string&#34;&gt;&amp;quot;/security_classes&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.parseVectors(flask_dir + &lt;span class=&#34;string&#34;&gt;&amp;quot;/access_vectors&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Open the file and then create the requested policy source file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    of = &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(outf, &lt;span class=&#34;string&#34;&gt;&amp;#x27;w&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; include == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        of.writelines(f.createPolicyHdr(mode))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Output header file&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; cil == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        of.writelines(f.createCilPolicy(mode))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Output CIL policy&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; class_perm == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        of.writelines(f.createCilClassPerms(mode))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Output CIL class permission sets&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; sids == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        of.writelines(f.createCilInitialSIDS(mode))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Output CIL initial SIDs&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        of.writelines(f.createPolicy(mode))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Output Kernel Language policy&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    of.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;可见这些文件的内容，被写入到一个Flask对象中，而该对象的内容最终会被写入策略二进制数据。在后续的策略编译中，这些文件会被checkpolicy来处理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;initial SID的作用&lt;/strong&gt;&lt;br&gt;&lt;em&gt;from “SELinux by Example: Using Security Enhanced Linux”&lt;/em&gt;&lt;br&gt;Some objects are labeled via an initial SID early in system initialization, &lt;strong&gt;&lt;em&gt;even before the policy is loaded&lt;/em&gt;&lt;/strong&gt;. This labeling behavior is needed, for example, to label objects such as the kernel security server and the root filesystem, which are present in the system before the first policy load. &lt;strong&gt;&lt;em&gt;When the policy is eventually loaded, the initial SIDs are then associated with the appropriate security context&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;&lt;strong&gt;&lt;em&gt;Initial SIDs are also used to prevent objects from having a missing or invalid security context, which would make it impossible for SELinux to correctly enforce access&lt;/em&gt;&lt;/strong&gt;. Instead, SELinux associates these objects with the special unlabeled initial SID. The unlabeled initial SID should have a security context that allows only limited access, thereby preventing inappropriate access until the objects can be relabeled by the administrator or destroyed.&lt;br&gt;Invalid security contexts most commonly result from loading a new policy that removes users, roles, or types, or changes role or type authorizations. In this situation, the &lt;strong&gt;&lt;em&gt;SIDs representing security contexts that use these invalid names or associations will become invalid and are mapped to the unlabeled SID at policy load&lt;/em&gt;&lt;/strong&gt;. Invalid security contexts can also arise when transferring object instances between systems (for example, using removable media). Further, if the objects are created on a non-SELinux system, they will have no associated security context. Regardless of whether the security context is invalid or missing, SELinux will use the unlabeled initial SID on first access to the object as the security context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结一下，一共有这几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统启动时，policy尚未加载，也就是所有的context还没被抽象成SID，存储在内存中的policydb里。allow规则也还没加载，这时候，为了保证代码归一，所以需要这些unlabeled SID，在SELinux启动流程中，再具体介绍。&lt;/li&gt;
&lt;li&gt;当系统策略变化时，有些role，user或type被删除，导致一些安全上下文失效了，此时这些安全上下文，在策略加载时，会被映射到这些initial SID上。（这里还没找到具体的代码位置）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动时的使用&#34;&gt;&lt;a href=&#34;#启动时的使用&#34; class=&#34;headerlink&#34; title=&#34;启动时的使用&#34;&gt;&lt;/a&gt;启动时的使用&lt;/h2&gt;&lt;p&gt;init进程在加载策略之前，首先将SELinux的enforcing模式打开。其打开的方式就是往selinuxfs的enforce文件写1。注意此时策略未加载，初始化也未完成。所以策略判断直接取allow。&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;security_compute_av&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct selinux_state *state,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u32 ssid,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u32 tsid,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 u16 orig_tclass,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 struct av_decision *avd,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;			 struct extended_perms *xperms)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!state-&amp;gt;initialized)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; allow;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;allow:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	avd-&amp;gt;allowed = &lt;span class=&#34;number&#34;&gt;0xffffffff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;但由于用户态的入口是一致的，即启动完成后，用户态可以写同样的enforce文件完成SELinux状态的切换，所以为了判断此时用户态进程是否具有设置的权限，在enforce文件的入口处，对用户态进程权限进行了判定：&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;length = avc_has_perm(&amp;amp;selinux_state,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  current_sid(), SECINITSID_SECURITY,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  SECCLASS_SECURITY, SECURITY__SETENFORCE,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;这里就用到了initial SID - &lt;code&gt;SECINITSID_SECURITY&lt;/code&gt;。这里其实已经可以使用selinuxfs的inode.i_security.sid，但由于selinuxfs未通过系统的file open调用，所以无法使用到inode下的SID标签。&lt;/p&gt;
&lt;h2 id=&#34;系统标签无效时&#34;&gt;&lt;a href=&#34;#系统标签无效时&#34; class=&#34;headerlink&#34; title=&#34;系统标签无效时&#34;&gt;&lt;/a&gt;系统标签无效时&lt;/h2&gt;&lt;p&gt;以socket bind时，对IP地址进行权限判断为例。该权限判断流程大致如下：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;mermaid&#34;&gt;graph TD
A[&#34;selinux_socket_bind&#34;]
A --&gt; B[&#34;sock_has_perm(SOCKET__BIND)&#34;]
B --&gt; C[&#34;get nodecon sid by sel_netnode_sid&#34;]
C --&gt; D[&#34;av_has_perm&#34;]&lt;/pre&gt;&lt;br&gt;&lt;code&gt;security_node_sid&lt;/code&gt;会从&lt;code&gt;policydb-&amp;gt;ocontexts[OCON_NODE]&lt;/code&gt;中搜索policydb中关于该IP地址的nodecon定义，如果找不着，说明此IP相关的nodecon无效（未定义），则会走默认的initial SID。&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!c-&amp;gt;sid[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rc = sidtab_context_to_sid(sidtab,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       &amp;amp;c-&amp;gt;context[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       &amp;amp;c-&amp;gt;sid[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (rc)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; out;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *out_sid = c-&amp;gt;sid[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *out_sid = SECINITSID_NODE; &lt;span class=&#34;comment&#34;&gt;// &amp;lt;===== intial SID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;其他SID&#34;&gt;&lt;a href=&#34;#其他SID&#34; class=&#34;headerlink&#34; title=&#34;其他SID&#34;&gt;&lt;/a&gt;其他SID&lt;/h1&gt;&lt;p&gt;除了initial SID由内核直接加载生成，其他的SID则由对应的打标签流程生成。例如：文件的SID则由setfiles/restorecon工具打入文件系统的扩展属性上，socket则由socket系统调用创建时生成。&lt;br&gt;以socket bind为例，因为比较简单。当socket bind系统调用被执行时，一个socket object被绑定到一个node上。而此时该node的SID才被写入policydb中。&lt;br&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sel_netnode_sid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *addr, u16 family, u32 *sid)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sel_netnode&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;node&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	rcu_read_lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	node = sel_netnode_find(addr, family);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		*sid = node-&amp;gt;nsec.sid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		rcu_read_unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	rcu_read_unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; sel_netnode_sid_slow(addr, family, sid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;code&gt;sel_netnode_sid_slow&lt;/code&gt;调用&lt;code&gt;security_node_sid&lt;/code&gt;,并最终调用&lt;code&gt;sidtab_context_to_sid&lt;/code&gt;将相关的SID以及对应的context数据结构插入到表中。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;mermaid&#34;&gt;graph TD
A[&#34;security_node_sid&#34;]
A --&gt; B[&#34;search policydb-&gt;ocontexts[OCON_NODE]&#34;]
B --&gt; C{&#34;find?&#34;}
C --&gt; |N| B
C --&gt; |Y| D[&#34;sidtab_context_to_sid(context，&amp;sid)&#34;]
D --&gt; E(&#34;end&#34;)
C --&gt; |Never find| F[&#34;set an initial SID&#34;]
F --&gt; E&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;security_node_sid&lt;/code&gt;使用传入的IP地址在policydb中匹配查找context，如果找到则进行下一步，匹配或生成SID，找不到，则直接使用initial SID。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sidtab_context_to_sid&lt;/code&gt;将context写入sidtab，并获取返回的SID记入policydb中，后续通过context找SID，直接匹配&lt;code&gt;policydb-&amp;gt;ocontexts[OCON_NODE];&lt;/code&gt;即可。对于SID本身的生成也很简单，就是一个单向增长的整形数字，在&lt;code&gt;sidtab_context_to_sid&lt;/code&gt;中。&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sid = sidtab_search_context(s, context);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sid)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; unlock_out;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sid = s-&amp;gt;next_sid++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret = sidtab_insert(s, sid, context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
先尝试在sidtab中查找，如果找不到就加一条记录，并为sid赋值。&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;SID在整个SELinux子系统中的作用就是提升匹配性能（从安全上下文的字符串匹配，降低到整数匹配）,所以在整个SELinux子系统生命周期内，SID总是与安全上下文（context）一一对应的。在一次权限匹配过程中，SID的使用如下：&lt;br&gt;&lt;img src=&#34;/2021/09/12/obsidian_posts/%E8%AF%A6%E8%A7%A3SELinux%20SID/948A5192-E302-40F3-9A2D-D3C2D5B2FF75.png&#34; alt=&#34;7fe0cdf2b84938b1e0610fe99bd3c917&#34;&gt;&lt;br&gt;context和SID的定义分别为：&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;u32 sid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;context&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 role;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	u32 len;        &lt;span class=&#34;comment&#34;&gt;/* length of string in bytes */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mls_range&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;range&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *str;	&lt;span class=&#34;comment&#34;&gt;/* string representation if context cannot be mapped. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;相关工具&#34;&gt;&lt;a href=&#34;#相关工具&#34; class=&#34;headerlink&#34; title=&#34;相关工具&#34;&gt;&lt;/a&gt;相关工具&lt;/h1&gt;没有一个专门的工具用来转换SID与context。但libselinux提供了相应的接口，参考&lt;a href=&#34;https://linux.die.net/man/3/sidget&#34;&gt;sidget(3) - Linux man page&lt;/a&gt;。&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;avc_context_to_sid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;security_context_t&lt;/span&gt; ctx, &lt;span class=&#34;keyword&#34;&gt;security_id_t&lt;/span&gt; *sid)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;avc_sid_to_context&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;security_id_t&lt;/span&gt; sid, &lt;span class=&#34;keyword&#34;&gt;security_context_t&lt;/span&gt; *ctx)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;seinfo&#34;&gt;&lt;a href=&#34;#seinfo&#34; class=&#34;headerlink&#34; title=&#34;seinfo&#34;&gt;&lt;/a&gt;seinfo&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;打印所有initial SID&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost ~]$ seinfo --initialsid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Initial SIDs: 27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   any_socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   devnull&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   file_labels&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   icmp_socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   igmp_packet&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   init&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;打印selinuxfs context&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost ~]$ seinfo --genfscon|grep selinux&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   genfscon selinuxfs /  system_u:object_r:security_t:s0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;initial-contexts&#34;&gt;&lt;a href=&#34;#initial-contexts&#34; class=&#34;headerlink&#34; title=&#34;initial_contexts&#34;&gt;&lt;/a&gt;initial_contexts&lt;/h2&gt;策略加载后，每个initial SID都有一个对应的context。这些context在各策略模块中定义。这些context在selinuxfs可以查看：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[ben@localhost ~]$ sudo cat /sys/fs/selinux/initial_contexts/kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;system_u:system_r:kernel_t:s0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a href=&#34;#参考文献&#34; class=&#34;headerlink&#34; title=&#34;参考文献&#34;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fedora-selinux/selinux-policy&#34;&gt;Fedora refpolicy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Frank Mayer, Karl MacMillan, David Caplan， July 27, 2006- “SELinux by Example: Using Security Enhanced Linux”&lt;/li&gt;
&lt;li&gt;SELinux官方教材，”&lt;a href=&#34;https://github.com/SELinuxProject/selinux-notebook&#34;&gt;The SELinux Notebook&lt;/a&gt;“ Volume II, Building The Sample Policy&lt;/li&gt;
&lt;li&gt;SELinux官方教材，”&lt;a href=&#34;https://github.com/SELinuxProject/selinux-notebook&#34;&gt;The SELinux Notebook 4th Edition&lt;/a&gt;“&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="SELinux" />
        <updated>2021-09-12T06:26:36.976Z</updated>
    </entry>
    <entry>
        <id>https://zhougy0717.github.io/2021/08/30/obsidian_posts/%E6%88%91%E7%9A%84Code%20Review%E5%BF%83%E5%BE%97/</id>
        <title>Code Review</title>
        <link rel="alternate" href="https://zhougy0717.github.io/2021/08/30/obsidian_posts/%E6%88%91%E7%9A%84Code%20Review%E5%BF%83%E5%BE%97/"/>
        <content type="html">&lt;p&gt;记得某一场合，一位领导说过，这次可信变革大概率会留下两样东西，一个是committer机制，另一个是代码白盒评价。而对于committer来说，code review就是其最重要的工作。&lt;/p&gt;
&lt;p&gt;第一次接触code review还是在前公司。那时候，代码合入要请人点“ship it”。后来工具切换成了gerrit，不过code review基本上还是流于形式，和朋友圈点赞差不多。有一些比较较真的老外会给出不少意见，同事间还颇有不忿。&lt;br&gt;”连拼写错误也要提！“&lt;br&gt;”烦死了，他根本就不懂！“&lt;br&gt;国内的开发同学基本上是磨不开面子的，反正代码又不是我维护，就给你点个赞有啥关系。&lt;/p&gt;
&lt;p&gt;真正第一次被评审代码是初入我司的时候。那时候与隔壁部门的同事一起参与一个操作系统项目。其中一位专家在评审代码的时候非常认真。每次提交MR，该专家在评审的时候都会提一堆问题。而且，这些问题点都或多或少确实存在问题，或者存在优化的可能。或修改，或解释，或补充注释。不过，最终我的MR也并没有合入，就切换到另外一个项目去了。经过这次刻骨铭心的合作，我也算是经历了一次真正的代码评审。后来，这位专家以及和他同组的小兄弟，在我司屡次的committer评选中，斩获了数次优秀committer的殊荣。很荣幸和他们能有过一段“不太愉快”的合作经历。在之后的项目里，我也被任命为committer，我希望把这份“不愉快”原汁原味地传递下去。&lt;/p&gt;
&lt;p&gt;code review，又叫代码评审，是代码开发很必要的一环，也是代码合入的最后一环。我们通常说，问题发现得越早，修复问题花费的成本月底。code review通常就是靠看看代码，就能发现一些潜在的问题，成本是非常低的。试想代码合入之后再发现问题，会引入多少overloading——沟通，重现，定界，抓log……&lt;/p&gt;
&lt;p&gt;code review既然这么好，那为什么总做不好呢？因为大家都是职场人，磨不开面儿。通常我们看到别人做的不好的地方，都不会当面戳破。关系好的，可能私底下会提醒一下，绝大多数情况就当作视而不见。所以committer课程通常第一句话都是教大家“要敢于说不”。话是不错，不过如果没有具体怎么做，就略显空洞，缺乏实操性。好在Google提供了一份详尽的code review指南（《&lt;a href=&#34;https://github.com/google/eng-practices&#34;&gt;google/eng-practices: Google’s Engineering Practices documentation&lt;/a&gt;》），从提交人和评审人的角度，给出了切实的做法，值得大家阅读。&lt;/p&gt;
&lt;p&gt;下面结合我自身的一些评审经验和Google指南，从committer的角度谈一谈我的心得。&lt;/p&gt;
&lt;h1 id=&#34;如何提出评审意见？&#34;&gt;&lt;a href=&#34;#如何提出评审意见？&#34; class=&#34;headerlink&#34; title=&#34;如何提出评审意见？&#34;&gt;&lt;/a&gt;如何提出评审意见？&lt;/h1&gt;&lt;p&gt;尽量保持就事论事的态度，避免采用情绪化的表达方式，例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不好的例子: “你为什么会在这里使用线程，这样做难道会有任何好处？”&lt;/p&gt;
&lt;p&gt;好的例子: “我并没有发现这个并发模块给程序带来了多少帮助，并且还增加了&lt;strong&gt;程序的复杂性，因此我认为这段代码最好是用单线程而不是多线程。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;及时的评审，也可以减少负面评论带来的“挫败感”。&lt;br&gt;评审人如果能够主动地与提交人进行交流探讨，接受提交人的解释，也可以很大程度避免在MR中发生键盘侠现象。&lt;/p&gt;
&lt;h1 id=&#34;问题太多怎么办？&#34;&gt;&lt;a href=&#34;#问题太多怎么办？&#34; class=&#34;headerlink&#34; title=&#34;问题太多怎么办？&#34;&gt;&lt;/a&gt;问题太多怎么办？&lt;/h1&gt;&lt;p&gt;问题太多应不应该提出来？会不会得罪提交人？会不会来得及修，影响交付进度？&lt;br&gt;Google给出的答案是“如果确定是问题，应当尽量提出”。&lt;/p&gt;
&lt;p&gt;首先需要明确的是哪些问题需要提出来。code review并不是为了追求完美。不应当苛责提交人写出完美代码。问题解决也要顾及成本。只要保证提交的代码对原有代码有了明显的提升，且能正常工作，就应该尽快合入。识别出的问题可以等待未来修复，只要确保有合适的跟踪方式即可。&lt;/p&gt;
&lt;p&gt;其次，如果确实有问题，就应当及时提出。如果我们能够及时响应评审请求，并且避免情绪化观点，通常不太会令提交人感觉不舒服。大部分情况下，很多问题都是一些编写风格的问题，一旦修改了，后续可能就不会再出现。那么后续的代码评审速度就会变快。&lt;/p&gt;
&lt;h1 id=&#34;code-review应当何时进行&#34;&gt;&lt;a href=&#34;#code-review应当何时进行&#34; class=&#34;headerlink&#34; title=&#34;code review应当何时进行&#34;&gt;&lt;/a&gt;code review应当何时进行&lt;/h1&gt;&lt;p&gt;code review应当及时，因为通常提交人需要等待评审结果，再进行下一步开发。code review拖得比较就，如果涉及大面积改动，那么后续开发代码的merge成本就会很高。可能造成团队开发配合进度受影响。所以建议code review的时间不要超过一天。&lt;/p&gt;
&lt;p&gt;code review应当及时，但如果评审人正在处理需要集中注意力的事情时，例如正在开发代码时，就不应当被打断。因为一旦被打断，那么恢复现场的时间成本就会比较高。比较合理的着手处理code review的时间是处理事情的间歇，例如：每天开始工作之前，或者吃完午餐，或者从茶水间回来……&lt;/p&gt;
&lt;h1 id=&#34;与提交人发生意见不一致怎么办？&#34;&gt;&lt;a href=&#34;#与提交人发生意见不一致怎么办？&#34; class=&#34;headerlink&#34; title=&#34;与提交人发生意见不一致怎么办？&#34;&gt;&lt;/a&gt;与提交人发生意见不一致怎么办？&lt;/h1&gt;&lt;p&gt;如果你坚信有问题，应当更积极地和提交人沟通。如果最终无法说服提交人，应当以提交人的意见为准，毕竟他才是代码owner。&lt;/p&gt;
&lt;h1 id=&#34;与项目交付节点冲突怎么办？&#34;&gt;&lt;a href=&#34;#与项目交付节点冲突怎么办？&#34; class=&#34;headerlink&#34; title=&#34;与项目交付节点冲突怎么办？&#34;&gt;&lt;/a&gt;与项目交付节点冲突怎么办？&lt;/h1&gt;&lt;p&gt;除了确实会引起问题的代码需要修正之外，其他的改进意见是需要权衡的，如果无法在项目交付节点之内完成，或者完成会引入很大的交付风险，那应该选择规避项目风险，并留下跟踪项，以尽快解决或优化潜在问题。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;总而言之，还是鼓励大家多参与code review。如果你不知道怎么做，可以阅读《&lt;a href=&#34;https://github.com/google/eng-practices&#34;&gt;google/eng-practices: Google’s Engineering Practices documentation&lt;/a&gt;》。另外，把code review当成一种交流，一次思想碰撞，而不是一次评审。不论你是提交人，还是评审人，take it easy！&lt;/p&gt;
</content>
        <category term="code review" />
        <category term="committer" />
        <updated>2021-08-30T14:57:57.572Z</updated>
    </entry>
    <entry>
        <id>https://zhougy0717.github.io/2021/08/29/obsidian_posts/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
        <title>我眼中的单元测试</title>
        <link rel="alternate" href="https://zhougy0717.github.io/2021/08/29/obsidian_posts/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
        <content type="html">&lt;p&gt;在最近的一些针对毕业生的面试中，我都会问一下他们对单元测试的理解。得到的答案无一例外都是不知道，不清楚，或是按字面意思的解释。其实，这也难怪。虽然我司可信变革对单元测试的要求越来越严苛，但真正能够理解并正确使用单元测试的同学也还是比较少的。至少在我周围是这样。&lt;/p&gt;
&lt;p&gt;想想这也正常，记得曾经刚毕业时，我根本都不知道单元测试这个名词。直到后来，以前任职的公司专门外聘了专业的机构，做了相关的培训之后，我算是认识了这个词。但彼时的理解，有点像现在我司推行的Fuzz测试。也就是，代码写好后，通过工具生成各种各样的参数，调用待测代码，从而保证代码输出质量。现在可能很多同学还是这样的思路。回过头来再审视当时的观点，不免觉得过于片面了。单元测试最重要的作用其实并不是保证代码质量，对代码质量的改进可以说是它的一个副作用。&lt;/p&gt;
&lt;p&gt;后来对于单元测试有了更深入的理解，是在阅读了下面三本书之后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《敏捷软件开发-原则模式与实践》 — Robert C. Martin&lt;/li&gt;
&lt;li&gt;《测试驱动开发》— Kent Beck&lt;/li&gt;
&lt;li&gt;《重构-改善既有代码的设计》— Martin Fowler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得一提的是这三本书的作者都是&lt;a href=&#34;https://agilemanifesto.org/iso/zhchs/manifesto.html&#34;&gt;敏捷软件开发宣言&lt;/a&gt;的发起者，也是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B&#34;&gt;极限编程（Extreme Programming）&lt;/a&gt;的践行者。书也都是高分经典著作，非常推荐给大家阅读。&lt;/p&gt;
&lt;h1 id=&#34;单元测试提升代码信心&#34;&gt;&lt;a href=&#34;#单元测试提升代码信心&#34; class=&#34;headerlink&#34; title=&#34;单元测试提升代码信心&#34;&gt;&lt;/a&gt;单元测试提升代码信心&lt;/h1&gt;&lt;p&gt;现在谈谈我对单元测试的认识。在刚毕业的那一段时间，我的开发流程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先尝试设计，思考代码的执行流程，画一些时序图和流程图&lt;/li&gt;
&lt;li&gt;开始编程&lt;/li&gt;
&lt;li&gt;发现问题&lt;br&gt; 1). 如果是设计问题，导致开发不下去，那么回到步骤1&lt;br&gt; 2). 如果发现有更好的实现方法，那么擦掉已有的代码，回到步骤2&lt;/li&gt;
&lt;li&gt;所有问题都解决了，开发结束，开始写功能测试代码，验证特性代码。如果发现问题，重复步骤3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样完成整个开发循环，通常要至少半天时间。有时半天甚至一天，也没留下几行特性代码。整个开发过程不断地陷入编写和整体推翻的循环中。即便最终完成了前3步，准备开始第4步功能测试的时候，也是战战兢兢的。如果功能测试发现问题，又会陷入不停地调试，修改，推翻设计的死循环。我相信很多同学都遇到过这样的问题，并因此而感到困惑。到底该怎么摆脱这样效率低下的不断重复？&lt;/p&gt;
&lt;p&gt;现在就让我们诊断一下。通常我们做完前3步流程都会花比较久的时间。按照我的经验，一般一个新特性的开发，少则若干个小时，多则一天，甚至数天。整个流程来到第4步，我们才第一次开始测试我们的特性代码。之前顶多就是编译通过。运行测试的时候才会发现很多问题，进而反思我们的实现逻辑是否与我们开始设计时思考的逻辑相符合。编写代码，实际是将物理世界，翻译成用代码表述的，严谨的逻辑语言。而通常我们并不能一次性地完成这样的翻译。而且即便完成了，也无法避免引入bug。我们只有通过测试不断地完成负反馈，来验证我们的代码，找到错误，最终收敛成正确的代码逻辑，从而完成现实世界到代码逻辑的翻译工作。软件的迭代开发，就像控制系统一样，测试就如控制系统中的负反馈，如果没有负反馈的，控制系统是无法达到稳定收敛的。&lt;/p&gt;
&lt;p&gt;由于我们前面的步骤过于依赖功能测试，所以需要我们等很久，也就是功能代码编写完以后，才可以进行第一次测试。由于功能测试与特性逻辑相关，其运行花费的时间往往很久。用例要覆盖端到端功能，测试逻辑也比较复杂，写起来也比较耗时。这几点从本质上就会限制功能测试的运行次数。功能测试虽然能发现，且擅长发现代码逻辑问题，但开发和执行成本高，导致运行的次数不会太多。测试运行次数少，导致我们不知道我们自己写出来的特性逻辑是否真实地反映了我们的设计。那么这就会影响我们对代码的信心。所以，在进行第4步功能测试之前，我们总是战战兢兢的。&lt;/p&gt;
&lt;p&gt;我们等不及到所有特性代码开发完成再进行测试。因为通过昂贵的功能测试来试错发现问题，返工所花费的成本太高了。所以，我们需要一种针对小逻辑的（这样单case复杂度更低，有利于测试case之间的解耦），覆盖率高（通过mock依赖实现），运行快速的（方便不断运行）测试。于是，单元测试就应运而生了。为了编写单元测试，我们首先会把大的特性分解成小的模块；其次，通过编写单元测试，我们会不断地思考代码实现逻辑，这样就可以实时地发现逻辑问题，及时返工修正。而通常单元测试速度是很快的，这使得我们有条件可以完成下面的red-&amp;gt;green-&amp;gt;refactor的开发节奏。&lt;br&gt;&lt;img src=&#34;/2021/08/29/obsidian_posts/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/Pasted%20image%2020210829201431.png&#34; alt&gt;&lt;br&gt;在每一次red-&amp;gt;green的变化中，我们都会运行一次单元测试。而每次完成refactor后，我们又会使用单元测试，验证我们重构后的代码是否破坏了原有的逻辑。所以引入单元测试，并不是为了直接提升我们的代码质量，而是为了能让我们：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;切分原先整块的代码逻辑，变成一个个小的积木逻辑&lt;/li&gt;
&lt;li&gt;充分测试我们的特性代码逻辑，并且达到足够的覆盖率（越高越好）&lt;/li&gt;
&lt;li&gt;在重构时，有足够覆盖率的测试帮助我们验证逻辑是否遭到破坏&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们严格按照red-&amp;gt;green-&amp;gt;refactor的节奏不断推进时，我们的代码架构就会变好，代码经过更多的测试，代码质量也会得到一定的保证。而这只是单元测试带来的附加值。&lt;/p&gt;
&lt;p&gt;现在我们有了单元测试这个武器后，看看我们的开发流程会变成怎样？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设计代码逻辑，与前面不同之处在于，我们先不深入到具体的代码逻辑，而是将功能模块化，将模块接口化&lt;/li&gt;
&lt;li&gt;挑一个接口开始编程&lt;/li&gt;
&lt;li&gt;按照开发顺序，写好待测逻辑的单元测试&lt;/li&gt;
&lt;li&gt;开发特性代码逻辑，让单元测试通过&lt;/li&gt;
&lt;li&gt;如果发现设计逻辑导致无法开发，回到步骤1&lt;/li&gt;
&lt;li&gt;重复3-4步，直到接口完成&lt;/li&gt;
&lt;li&gt;重复1-6，直到特性代码完成&lt;/li&gt;
&lt;li&gt;编写功能测试，调试，如果发现问题，检验代码逻辑，如果有设计问题，仍然要回到步骤1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，从第3步开始，我们就不断地测试，不断验证我们的逻辑。虽然到达最后一步功能测试验证时，如果发现设计问题，仍然要返工回到步骤1，但因为我们期间不断地测试，不断地思考，并验证逻辑，我们可能很早就发现了设计问题，而不会等到最后一步才需要返工。正因为如此，当我们在准备进行功能测试验证的时候，我们对自己开发的代码更有信心。&lt;/p&gt;
&lt;h1 id=&#34;单元测试带来的额外好处&#34;&gt;&lt;a href=&#34;#单元测试带来的额外好处&#34; class=&#34;headerlink&#34; title=&#34;单元测试带来的额外好处&#34;&gt;&lt;/a&gt;单元测试带来的额外好处&lt;/h1&gt;&lt;h2 id=&#34;单元测试帮助你进入心流&#34;&gt;&lt;a href=&#34;#单元测试帮助你进入心流&#34; class=&#34;headerlink&#34; title=&#34;单元测试帮助你进入心流&#34;&gt;&lt;/a&gt;单元测试帮助你进入心流&lt;/h2&gt;&lt;p&gt;单元测试提升了我们对开发代码的信心，让我们有机会实现red-&amp;gt;green-&amp;gt;refactor的开发节奏，从而优化代码架构。单元测试让我们能够更focus，从而更容易进入心流状态。进入心流状态，意味着注意力极为集中，工作效率很高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;心流&lt;/strong&gt;（英语：Flow），也有别名以化境（Zone）表示，亦有人翻译为&lt;strong&gt;神驰&lt;/strong&gt;或&lt;strong&gt;沉浸&lt;/strong&gt;状态，是由匈牙利裔美籍心理学家&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B1%B3%E5%93%88%E9%87%8C%C2%B7%E5%A5%91%E5%85%8B%E6%A3%AE&#34; title=&#34;米哈里·契克森&#34;&gt;米哈里·契克森&lt;/a&gt;首度提出，定义是一种将个人精神力完全投注在某种活动上的感觉；心流产生同时会有高度的兴奋感及充实感等正向情绪。&lt;br&gt;Martin Fowler的&lt;a href=&#34;https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073&#34;&gt;The Clean Coder: A Code of Conduct for Professional Programmers: Martin, Robert: 4708364241379: Amazon.com: Books&lt;/a&gt;一书告诉我们，心流对程序员来说并不一定是好事，但大多数情况它还是好的。心流并不在本文讨论范围之内。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《测试驱动开发》一书给出了一种撰写单元测试的最佳实践。即&lt;strong&gt;每次关注一个足够小的逻辑，并在完成之后再完善它&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为人的注意力是有限的，不能一次性关注太多的东西。在开发某一个逻辑中间，如果被其他事情分散了注意力，往往会造成逻辑发散。例如：你在实现一个上报故障逻辑，但你希望记录每个故障的时间戳，你又不记得时间戳函数的具体使用方法。这时候如果你选择去google这个函数，并搞清楚它的使用方法，有可能你需要花很久时间才会回到你原先的主线逻辑继续开发。这和你的开发被打断没有区别，你失去了进入心流的机会，你需要花很长的时间再重新回顾原先的开发现场，导致你的效率不可能很高。但这还不是最糟糕的。最糟糕的是，你在google的过程中，又发现了其他问题，你又去看那个问题，或者不巧在这过程中被访客打断（实际工作中经常发生，这也是通常我认为在家远程办公的效率可能更高）。你离开原先的开发主线的时间越长，则需要重建现场的时间就越长。这和操作系统的中断很像，你离开的时间越长，很多cache都被flush掉了，那么你再次回到原先的工作状态就要花费更多的overloading。&lt;/p&gt;
&lt;p&gt;Kent Beck给出的建议是，以最简单的方法解决当前的问题，让你每一个开发逻辑都原子化地完成。例如：刚才我们的上报故障功能需要一个时间戳，我们现在不知道怎么写那个时间戳方法，于是就先hard code一个时间戳，并在我们的TODO list上记录一个事项。等我们完成了当前的开发逻辑，再去除TODO list，依次解决上面的问题。等问题都解决完了，再进行下一步开发。每件事务的处理保持原子化，要么没做，要么就做完。这样多出来记录TODO list的时间，但节省了被打断并且恢复现场的时间，并且你有更多的机会进入“心流”。&lt;/p&gt;
&lt;h2 id=&#34;单元测试帮助你克服内心的恐惧&#34;&gt;&lt;a href=&#34;#单元测试帮助你克服内心的恐惧&#34; class=&#34;headerlink&#34; title=&#34;单元测试帮助你克服内心的恐惧&#34;&gt;&lt;/a&gt;单元测试帮助你克服内心的恐惧&lt;/h2&gt;&lt;p&gt;通常一个有责任心的程序员，都会有“完美程序”情节。你希望你写出来的代码是完美抽象的，通用性好，扩展性强，性能佳，等等。这本没有错，也是一个程序员的基本素养。但如果你总是想毕其功于一役，却并没有那么简单。这曾经也深深地困扰过我。在一个支线逻辑上踟蹰不前，严重影响开发效率。在现实的开发中，我也观察到很多同事有和我一样的困扰。针对这个问题， Kent Beck给出的建议是，先实现你的预定计划（除非你可以立即证明它完全是错误的，无法实现）。之后，再通过不断的重构，在必要的时候优化它，避免过设计。直到它能满足你的需求。&lt;/p&gt;
&lt;p&gt;我们总是提倡编写好代码，优美的代码，但事实上，并没有放之四海而皆准的好代码标准。好的代码应该是动态的，能够满足当下可见的需求（功能性和扩展性）的代码就是好代码。当有新需求的时候，比如开发新特性，或需要做性能优化，及时地重构就可以了。重构应当是实时进行的，是自下而上的。通过一些技巧和工具，我们在重构中就能让代码进化到一个更适合当前需求的状态，从而更易于开发新特性，或者继续重构优化。&lt;/p&gt;
&lt;p&gt;再回头看，为什么程序员会有完美代码情结？没错，因为他们自律，有责任心，且见贤思齐。但换个角度说，也可能因为他们内心有一种焦虑，或者恐惧。这是程序员对自己代码没有信心的表现。担心因为一时考虑不周全，在未来会付出更大的返工。每时每刻需要在欠设计和过设计之间做权衡。但请记住，代码是动态的，只要保证代码能够实时地被重构，尽量减少代码的坏味道，代码架构通常大概率是合理的。架构合理的代码，不论做架构调整或性能优化，都是比较容易的。没必要追求所谓的“完美代码”。&lt;/p&gt;
&lt;p&gt;我们平时编程时，应当尽力克服自己内心对未知的恐惧，用单元测试和重构来武装自己。这时，我常常想到一个词“Zen Coding”。做一个佛系的程序员，运用禅编程。&lt;/p&gt;
&lt;h1 id=&#34;单元测试的误区&#34;&gt;&lt;a href=&#34;#单元测试的误区&#34; class=&#34;headerlink&#34; title=&#34;单元测试的误区&#34;&gt;&lt;/a&gt;单元测试的误区&lt;/h1&gt;&lt;p&gt;公司在施行可信变革时，要求单元测试能够达到一定的覆盖率数值。这是完全正确的，应该被提倡。因为只有单元测试的覆盖率足够高，才能在重构时捕获每一个轻微的逻辑破损，避免因为即时重构引入的问题。而单元测试因为通常采用mock依赖实现，理论上只要mock实现的足够优秀，是可以实现100%的覆盖率的。但真正在项目运行的时候，因为覆盖率是一个很容易感知的指标，所以单元测试慢慢地沦为实现覆盖率的附属品。也就是只是为了实现超高覆盖率而写单元测试。这表现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个测试case不是为了覆盖一个小逻辑而产生，为了迅速满足覆盖率要求，很多个测试断言放在一起，产生巨大的composite case&lt;/li&gt;
&lt;li&gt;为了完成超高覆盖率，随意运用核武器来mock依赖函数，造成mock了过多的内部实现，测试代码变得异常脆弱，一旦依赖实现需要变更，整棵依赖树上的测试case都要跟着改&lt;/li&gt;
&lt;li&gt;测试代码缺乏重构，随处可见重复代码，一旦变更要涉及多处更改&lt;/li&gt;
&lt;li&gt;测试case之间耦合严重，一个特性代码的修改理想情况下只会导致一个相关case失败，但耦合严重的case，往往会失败一大片。一个特性代码改动导致一个完全不相干的case失败。这是很令人崩溃的事情。令人崩溃的事情往往就会成为一个包袱，随时等待被丢弃。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在我接触到的项目中，这样的情况非常普遍。虽然我们每日的CI报告中，单元测试覆盖率数值是很好看的。但实际单元测试应该产生的作用很小，甚至沦为了开发的负担。通常听到一个词语叫“补单元测试”。可见单元测试并没有被正确的使用。打个比方，登山运动员都有一个很大的背包，背包里面放满了各种救命用的工具。你见别人的包挺大，你也整了个大背包，然后背了一堆你爱吃的零食。这些零食在一开始的时候，让你挺happy，到了关键时刻，别人从背包里拿出救命的工具，你的背包只会成为累赘，不如早早丢弃。&lt;/p&gt;
&lt;p&gt;正确的做法应当是，每写一个小逻辑（接口实现级别，若干个小逻辑组成一个接口），就完成一个单元测试case与之对应，不论你是先写case（TDD），还是先写特性代码（非TDD）。当整个特性代码完成后，单元测试也是完备的，并且提交MR之前，应当即时完成重构，并修复能识别到的坏味道。如果因为交付时间问题，不能即时解决的应当添加FIXME注释，并且在你的TODO list上添加一条，以跟踪该事项。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;单元测试是工具不是目的。&lt;/li&gt;
&lt;li&gt;单元测试用于即时重构，优化代码逻辑和结构，功能测试用于看护代码质量&lt;/li&gt;
&lt;li&gt;流水不腐，户枢不蠹，好的代码应该不断地流动，在变化中达到平衡&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="UT" />
        <category term="TDD" />
        <updated>2021-08-29T09:11:09.223Z</updated>
    </entry>
    <entry>
        <id>https://zhougy0717.github.io/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/</id>
        <title>unique_ptr到底是否能按值传递？</title>
        <link rel="alternate" href="https://zhougy0717.github.io/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/"/>
        <content type="html">&lt;p&gt;答案是否定的。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(std::unique_ptr&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt; a)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; a = std::make_unique&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;func&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码是不能编译的，因为uniqe_ptr没有拷贝构造函数。&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ben@LUbuntu ~/t/unique_ptr&amp;gt; g++ -o &lt;span class=&#34;built_in&#34;&gt;test&lt;/span&gt; main.cpp -std=c++14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main.cpp: In &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; ‘int main()’:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main.cpp:10:11: error: use of deleted &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; ‘std::unique_ptr&amp;lt;_Tp, _Dp&amp;gt;::unique_ptr(const std::unique_ptr&amp;lt;_Tp, _Dp&amp;gt;&amp;amp;) [with _Tp = int; _Dp = std::default_delete&amp;lt;int&amp;gt;]’&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10 | func(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那为什么问这个问题？看下面这段代码&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(std::unique_ptr&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt; a)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;func&lt;/span&gt;(std::make_unique&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个是可以编译的，执行也没问题。再看make_unique的原型。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt; class T, class... Args &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;unique_ptr&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;make_unique&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;( Args&amp;amp;&amp;amp;... args )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt; class T &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;unique_ptr&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;make_unique&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;( std::&lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; size )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;class&lt;/span&gt;... &lt;span class=&#34;title&#34;&gt;Args&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* unspecified */&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;( Args&amp;amp;&amp;amp;... args ) = &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可见make_unique的返回值是unique_ptr。那么前面那段代码就给人造成了unique_ptr似乎也可以按值传递的假象。到底是什么原因呢？后面我们结合汇编一起分析一下，编译器针对这样的场景做了什么优化。&lt;/p&gt;
&lt;h1 id=&#34;make-unique的返回值直接作为函数参数的真相&#34;&gt;&lt;a href=&#34;#make-unique的返回值直接作为函数参数的真相&#34; class=&#34;headerlink&#34; title=&#34;make_unique的返回值直接作为函数参数的真相&#34;&gt;&lt;/a&gt;make_unique的返回值直接作为函数参数的真相&lt;/h1&gt;&lt;p&gt;直接通过&lt;code&gt;objectdum -tCS test &amp;gt; test.dump&lt;/code&gt;命令对可执行文件进行反汇编。注意编译时，要指定&lt;code&gt;-g -O0&lt;/code&gt;。这样反汇编时，信息更多一些。&lt;/p&gt;
&lt;p&gt;由于STL扩展代码，外加C++编译器插入的一些初始化和退出清理代码，反汇编产生的文件行数较多，我们只需关注核心的main函数以及一些相关的函数即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008a8: a9be7bfd stp x29, x30, [sp, #-32]! // 将x29,x30存储于sp-32处，且sp = sp-32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008ac: 910003fd mov x29, sp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func(std::make_unique&amp;lt;int&amp;gt;(1));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008b0: 52800020 mov w0, #0x1 // #1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008b4: b9001fe0 str w0, [sp, #28]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008b8: 910073e0 add x0, sp, #0x1c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008bc: 910043e1 add x1, sp, #0x10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008c0: aa0103e8 mov x8, x1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008c4: 94000027 bl 400960 &amp;lt;std::_MakeUniq&amp;lt;int&amp;gt;::__single_object std::make_unique&amp;lt;int, int&amp;gt;(int&amp;amp;&amp;amp;)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008c8: 910043e0 add x0, sp, #0x10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008cc: 97fffff2 bl 400894 &amp;lt;func(std::unique_ptr&amp;lt;int, std::default_delete&amp;lt;int&amp;gt; &amp;gt;)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008d0: 910043e0 add x0, sp, #0x10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008d4: 94000035 bl 4009a8 &amp;lt;std::unique_ptr&amp;lt;int, std::default_delete&amp;lt;int&amp;gt; &amp;gt;::~unique_ptr()&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008d8: 52800000 mov w0, #0x0 // #0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008dc: a8c27bfd ldp x29, x30, [sp], #32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4008e0: d65f03c0 ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;///@&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;调用make-unique前的准备&#34;&gt;&lt;a href=&#34;#调用make-unique前的准备&#34; class=&#34;headerlink&#34; title=&#34;调用make_unique前的准备&#34;&gt;&lt;/a&gt;调用make_unique前的准备&lt;/h2&gt;&lt;p&gt;main函数的第一行指令，将栈指针（sp）移动到了栈底，并保存了x29和x30寄存器。寄存器含义可以参考附录。在调用make_unique前，栈内存如下图。&lt;br&gt;&lt;img src=&#34;/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/Pasted%20image%2020210822121125.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;ARM函数调用约定&#34;&gt;&lt;a href=&#34;#ARM函数调用约定&#34; class=&#34;headerlink&#34; title=&#34;ARM函数调用约定&#34;&gt;&lt;/a&gt;ARM函数调用约定&lt;/h3&gt;&lt;p&gt;也叫AAPCS，Procedure Call Standard for the Arm Architecture。对于aarch64，简而言之就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;小于8个参数时，使用x0-x7寄存器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;超过8个参数，按顺序从右往左入栈（因为栈是先入后出的）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回地址在lr寄存器，返回值的值在x0寄存器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;make-unique的参数传递&#34;&gt;&lt;a href=&#34;#make-unique的参数传递&#34; class=&#34;headerlink&#34; title=&#34;make_unique的参数传递&#34;&gt;&lt;/a&gt;make_unique的参数传递&lt;/h3&gt;&lt;p&gt;按照AAPCS的理解，make_unique的实现函数实际有两个入参：一个是uniuqe_ptr的构造函数参数1，另一个就是用来存放unique_ptr对象指针的地址，即x1。&lt;/p&gt;
&lt;p&gt;这样就很好理解了，调用完make_unique，下一步就是使用make_unique的输出调用func了。也就是&lt;code&gt;add x0, sp, #0x10&lt;/code&gt;z这一行。将保存了unique_ptr指针的地址赋予了func函数的唯一一个参数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;所以可见，func函数并不是传递unique_ptr的值，而是通过编译器生成了一个临时变量保存了make_unique返回的unique_ptr对象指针，并传递给了func。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;按引用传递会怎么样？&#34;&gt;&lt;a href=&#34;#按引用传递会怎么样？&#34; class=&#34;headerlink&#34; title=&#34;按引用传递会怎么样？&#34;&gt;&lt;/a&gt;按引用传递会怎么样？&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;built_in&#34;&gt;std&lt;/span&gt;::&lt;span class=&#34;built_in&#34;&gt;unique_ptr&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;a)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; a = &lt;span class=&#34;built_in&#34;&gt;std&lt;/span&gt;::make_unique&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    func(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight armasm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;symbol&#34;&gt;int&lt;/span&gt; main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;a8: a9bd7bfd stp x29, x30, [&lt;span class=&#34;built_in&#34;&gt;sp&lt;/span&gt;, #-&lt;span class=&#34;number&#34;&gt;48&lt;/span&gt;]!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;ac: &lt;span class=&#34;number&#34;&gt;910003&lt;/span&gt;fd &lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; x29, &lt;span class=&#34;built_in&#34;&gt;sp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;b0: f9000bf3 &lt;span class=&#34;keyword&#34;&gt;str&lt;/span&gt; x19, [&lt;span class=&#34;built_in&#34;&gt;sp&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;#16&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;symbol&#34;&gt;auto&lt;/span&gt; a = std::make_unique&amp;lt;int&amp;gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;span class=&#34;comment&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;b4: &lt;span class=&#34;number&#34;&gt;52800020&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; w0, &lt;span class=&#34;number&#34;&gt;#0x1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// #1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;b8: b9002fe0 &lt;span class=&#34;keyword&#34;&gt;str&lt;/span&gt; w0, [&lt;span class=&#34;built_in&#34;&gt;sp&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;#44&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;bc: &lt;span class=&#34;number&#34;&gt;9100&lt;/span&gt;b3e0 &lt;span class=&#34;keyword&#34;&gt;add&lt;/span&gt; x0, &lt;span class=&#34;built_in&#34;&gt;sp&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;#0x2c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;c0&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;910083&lt;/span&gt;e1 &lt;span class=&#34;keyword&#34;&gt;add&lt;/span&gt; x1, &lt;span class=&#34;built_in&#34;&gt;sp&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;#0x20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;c4&lt;/span&gt;: aa0103e8 &lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; x8, x1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;c8&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;94000029&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;bl&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;40096&lt;/span&gt;c &amp;lt;std::_MakeUniq&amp;lt;int&amp;gt;::__single_object std::make_unique&amp;lt;int, int&amp;gt;(int&amp;amp;&amp;amp;)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;symbol&#34;&gt;func&lt;/span&gt;(a)&lt;span class=&#34;comment&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;cc: &lt;span class=&#34;number&#34;&gt;910083&lt;/span&gt;e0 &lt;span class=&#34;keyword&#34;&gt;add&lt;/span&gt; x0, &lt;span class=&#34;built_in&#34;&gt;sp&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;#0x20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;d0&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;97&lt;/span&gt;fffff1 &lt;span class=&#34;keyword&#34;&gt;bl&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;400894&lt;/span&gt; &amp;lt;func(std::unique_ptr&amp;lt;int, std::default_delete&amp;lt;int&amp;gt; &amp;gt;&amp;amp;)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;symbol&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;///@&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/Pasted%20image%2020210822121232.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;如出一辙，对make_unique的调用是一样的，只不过这里多存了一个局部变量a，所以多花费了几个字节的栈空间。而前文的临时变量存在寄存器即可。&lt;/p&gt;
&lt;h3 id=&#34;传右值引用呢？&#34;&gt;&lt;a href=&#34;#传右值引用呢？&#34; class=&#34;headerlink&#34; title=&#34;传右值引用呢？&#34;&gt;&lt;/a&gt;传右值引用呢？&lt;/h3&gt;&lt;figure class=&#34;highlight armasm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;b8: &lt;span class=&#34;number&#34;&gt;910073&lt;/span&gt;e0 &lt;span class=&#34;keyword&#34;&gt;add&lt;/span&gt; x0, &lt;span class=&#34;built_in&#34;&gt;sp&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;#0x1c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;bc: &lt;span class=&#34;number&#34;&gt;910043&lt;/span&gt;e1 &lt;span class=&#34;keyword&#34;&gt;add&lt;/span&gt; x1, &lt;span class=&#34;built_in&#34;&gt;sp&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;#0x10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;c0&lt;/span&gt;: aa0103e8 &lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; x8, x1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;c4&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;94000027&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;bl&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;400960&lt;/span&gt; &amp;lt;std::_MakeUniq&amp;lt;int&amp;gt;::__single_object std::make_unique&amp;lt;int, int&amp;gt;(int&amp;amp;&amp;amp;)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;c8&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;910043&lt;/span&gt;e0 &lt;span class=&#34;keyword&#34;&gt;add&lt;/span&gt; x0, &lt;span class=&#34;built_in&#34;&gt;sp&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;#0x10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4008&lt;/span&gt;cc: &lt;span class=&#34;number&#34;&gt;97&lt;/span&gt;fffff2 &lt;span class=&#34;keyword&#34;&gt;bl&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;400894&lt;/span&gt; &amp;lt;func(std::unique_ptr&amp;lt;int, std::default_delete&amp;lt;int&amp;gt; &amp;gt;&amp;amp;&amp;amp;)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可见传右值引用和传值一模一样。&lt;/p&gt;
&lt;h1 id=&#34;附录&#34;&gt;&lt;a href=&#34;#附录&#34; class=&#34;headerlink&#34; title=&#34;附录&#34;&gt;&lt;/a&gt;附录&lt;/h1&gt;&lt;h2 id=&#34;AARCH64寄存器&#34;&gt;&lt;a href=&#34;#AARCH64寄存器&#34; class=&#34;headerlink&#34; title=&#34;AARCH64寄存器&#34;&gt;&lt;/a&gt;AARCH64寄存器&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&#34;https://winddoing.github.io/post/7190.html&#34;&gt;ARMv8-aarch64 寄存器和指令集&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;通用寄存器&#34;&gt;&lt;a href=&#34;#通用寄存器&#34; class=&#34;headerlink&#34; title=&#34;通用寄存器&#34;&gt;&lt;/a&gt;通用寄存器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;参数寄存器（X0-X7）： 用作临时寄存器或可以保存的调用者保存的寄存器变量函数内的中间值，调用其他函数之间的值（8 个寄存器可用于传递参数）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;来电保存的临时寄存器（X9-X15）： 如果调用者要求在任何这些寄存器中保留值调用另一个函数，调用者必须将受影响的寄存器保存在自己的堆栈中帧。 它们可以通过被调用的子程序进行修改，而无需保存并在返回调用者之前恢复它们。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;被调用者保存的寄存器（X19-X29）： 这些寄存器保存在被调用者帧中。 它们可以被被调用者修改子程序，只要它们在返回之前保存并恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;特殊用途寄存器（X8，X16-X18，X29，X30）：&#34;&gt;&lt;a href=&#34;#特殊用途寄存器（X8，X16-X18，X29，X30）：&#34; class=&#34;headerlink&#34; title=&#34;特殊用途寄存器（X8，X16-X18，X29，X30）：&#34;&gt;&lt;/a&gt;特殊用途寄存器（X8，X16-X18，X29，X30）：&lt;/h3&gt;&lt;p&gt;X8： 是间接结果寄存器，用于保存子程序返回地址，尽量不使用&lt;/p&gt;
&lt;p&gt;X16 和 X17： 程序内调用临时寄存器&lt;/p&gt;
&lt;p&gt;X18： 平台寄存器，保留用于平台 ABI，尽量不使用&lt;/p&gt;
&lt;p&gt;X29： 帧指针寄存器（FP）&lt;/p&gt;
&lt;p&gt;X30： 链接寄存器（LR）&lt;/p&gt;
&lt;p&gt;X31： 堆栈指针寄存器 SP 或零寄存器 ZXR&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a href=&#34;#参考文献&#34; class=&#34;headerlink&#34; title=&#34;参考文献&#34;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://code.woboq.org/appleseed/include/boost/move/make_unique.hpp.html&#34;&gt;make_unique源码&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/forever_2015/article/details/50283747&#34;&gt;[AAPCS 学习课后练习 - 通过一个小例子来讲解]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/42486116&#34;&gt;基于ARM64 的常见汇编命令记录&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://winddoing.github.io/post/7190.html&#34;&gt;ARMv8-aarch64 寄存器和指令集&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="C++" />
        <category term="coding" />
        <updated>2021-08-22T02:36:37.359Z</updated>
    </entry>
</feed>
