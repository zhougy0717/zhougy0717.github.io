{
    "version": "https://jsonfeed.org/version/1",
    "title": "Big Ben • All posts by \"操作系统\" category",
    "description": null,
    "home_page_url": "https://zhougy0717.github.io",
    "items": [
        {
            "id": "https://zhougy0717.github.io/2021/09/12/obsidian_posts/setcap%20vs.%20LD_PRELOAD/",
            "url": "https://zhougy0717.github.io/2021/09/12/obsidian_posts/setcap%20vs.%20LD_PRELOAD/",
            "title": "setcap vs. LD_PRELOAD",
            "date_published": "2021-09-12T06:29:34.553Z",
            "content_html": "<p>在Linux中，一个进程拉起另一个进程的流程大致如下：</p>\n<p><pre class=\"mermaid\">graph LR;\nF[parent process] --> A[start]\nA --fork--> B[child]\nA --> C[wait]\nB --exec--> D[new process]\nD --> E[end]\nC --> E</pre><br>最常见的就是通过shell终端执行命令。此场景下，/bin/bash就是这个parent process，而要执行的那个命令就是new process。<br>Linux有一些特性，可以使得创建出的进程比拉起的进程权限高。例如可执行文件配置了set-user-ID位，则拉起的进程就是root权限，而其父进程有可能是普通用户权限。如果可执行文件配置了file capability，则创建出的进程就具备了某些capability，如果父进程没有这些capability，则这也是一种权限放大的场景。<br>当发生这种权限放大的场景时，Linux的安全特性要求，此时子进程中的某些敏感环境变量会被清空，例如：LD_PRELOAD,LD_LIBRARY_PATH。由于这些环境变量都是从父进程继承过来的，如果不清空，则表明会使用高权限级别执行这些环境变量指定的可执行代码。</p>\n<h1 id=\"LD-LIBRARY-PATH\"><a href=\"#LD-LIBRARY-PATH\" class=\"headerlink\" title=\"LD_LIBRARY_PATH\"></a>LD_LIBRARY_PATH</h1><p>参考文献[1]，ld.so搜索动态库的顺序如下：</p>\n<ol>\n<li>DT_PATH指定的库文件（deprecated）</li>\n<li>LD_LIBRARY_PATH指定的库文件</li>\n<li>DT_RUNPATH指定的库文件</li>\n<li>/etc/ld.so.cache这个二进制文件指定的库文件，该文件通过ldconfig命令生成</li>\n<li>In the default path /lib, and then /usr/lib.  (On some 64-bit architectures, the default paths for 64-bit shared objects are /lib64, and then /usr/lib64.)  If the binary was linked with the -z nodeflib linker option, this step is skipped.</li>\n</ol>\n<p>所以针对LD_LIBRARY_PATH，除了第二条的方法失效，其他的都可以用。</p>\n<h1 id=\"LD-PRELOAD\"><a href=\"#LD-PRELOAD\" class=\"headerlink\" title=\"LD_PRELOAD\"></a>LD_PRELOAD</h1><p>那针对LD_PRELOAD，是不是就没法用呢？其实也不是。<br>在没有setcap以及set-user-ID的情况下，如果ld.so需要预加载一个库文件，指定方法在文献[1]中同样有描述：</p>\n<ol>\n<li>The <code>LD_PRELOAD</code> environment variable.</li>\n<li>The <code>--preload</code> command-line option when invoking the dynamic linker directly.</li>\n<li>The <code>/etc/ld.so.preload</code> file.</li>\n</ol>\n<p>在secure-execution模式下，方法2和方法3均不受影响。方法1也仍然可以使用。但是需要一些特殊的设置，在[1]中也有描述。</p>\n<blockquote>\n<p>In secure-execution mode, <strong>preload pathnames containing slashes are ignored</strong>.  Furthermore, shared objects are preloaded <strong>only from the standard search directories</strong> and only if <strong>they have set-user-ID mode bit enabled</strong> (which is not typical).</p>\n</blockquote>\n<p>综上，需要3点配置：</p>\n<ul>\n<li>LD_PRELOAD环境变量指定的库文件不能包含斜线’/‘</li>\n<li>库文件只会从标准路径下加载。这里标准路径可以参考LD_LIBRARY_PATH中的描述。注意，此时ld.so只会搜索标准路径，不会搜索通过其他手段配置的路径（如上一节描述的）。</li>\n<li>库文件必须使能了set-user-id位</li>\n</ul>\n<h1 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h1><p>代码目录树：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ben@localhost test]$ tree .</span><br><span class=\"line\">.</span><br><span class=\"line\">├── lib.c</span><br><span class=\"line\">├── libtest.so</span><br><span class=\"line\">├── main</span><br><span class=\"line\">├── main.c</span><br><span class=\"line\">├── test</span><br><span class=\"line\">└── test.c</span><br></pre></td></tr></table></figure><br>main.c生成main可执行程序，test.c生成test可执行程序，lib.c生成libtest.so。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">pid_t</span> pid = fork();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> *envp[] = &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;LD_PRELOAD=libtest.so&quot;</span>,</span><br><span class=\"line\">                        <span class=\"comment\">// &quot;LD_PRELOAD=./libtest.so&quot;,</span></span><br><span class=\"line\">                        <span class=\"literal\">NULL</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> *argv[] = &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">                        <span class=\"literal\">NULL</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> err = execve(<span class=\"string\">&quot;./test&quot;</span>, argv, envp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">                wait(&amp;status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *preload = getenv(<span class=\"string\">&quot;LD_PRELOAD&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;LD_PRELOAD = %s\\n&quot;</span>, preload);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lib.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> __<span class=\"title\">attribute__</span><span class=\"params\">((constructor))</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I&#x27;m libtest.so loaded\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>在test可执行程序是普通的二进制时，输出为<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ben@localhost test]$ ./main</span><br><span class=\"line\">I&#x27;m libtest.so loaded</span><br><span class=\"line\">LD_PRELOAD = ./libtest.so</span><br></pre></td></tr></table></figure><br>当test配置了capability以后：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ben@localhost test]$ sudo setcap cap_net_admin,cap_net_raw=eip ./test</span><br><span class=\"line\">[ben@localhost test]$ ./main</span><br><span class=\"line\">LD_PRELOAD = (null)</span><br></pre></td></tr></table></figure><br>可见LD_PRELOAD指定libtest.so未被加载，且LD_PRELOAD环境变量被清空了。</p>\n<h2 id=\"LD-PRELOAD不含斜线\"><a href=\"#LD-PRELOAD不含斜线\" class=\"headerlink\" title=\"LD_PRELOAD不含斜线\"></a>LD_PRELOAD不含斜线</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ben@localhost test]$ ./main</span><br><span class=\"line\">ERROR: ld.so: object &#x27;libtest.so&#x27; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.</span><br><span class=\"line\">LD_PRELOAD = (null)</span><br></pre></td></tr></table></figure>\n<p>LD_PRELOAD仍然被清空了，但ld.so似乎尝试去加载libtest.so了，但是没找着。</p>\n<h2 id=\"将libtest-so放入标准路径\"><a href=\"#将libtest-so放入标准路径\" class=\"headerlink\" title=\"将libtest.so放入标准路径\"></a>将libtest.so放入标准路径</h2><p>如果没有配置set-user-id位：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ben@localhost test]$ ./main</span><br><span class=\"line\">ERROR: ld.so: object &#x27;libtest.so&#x27; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.</span><br><span class=\"line\">LD_PRELOAD = (null)</span><br></pre></td></tr></table></figure><br>仍然提示找不到。如果设置了set-user-id位：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ben@localhost test]$ sudo chmod a+s /usr/lib64/libtest.so </span><br><span class=\"line\">[ben@localhost test]$ ./main</span><br><span class=\"line\">I&#x27;m libtest.so loaded</span><br><span class=\"line\">LD_PRELOAD = (null)</span><br></pre></td></tr></table></figure><br>在满足上一节提到的3个条件时，libteso.so就可以正常加载了。<br>看看如果放到/usr/lib下面会怎么样？<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ben@localhost test]$ ls /usr/lib/libtest.so -l</span><br><span class=\"line\">-rwsr-sr-x. 1 root root 8208 1月  24 19:48 /usr/lib/libtest.so</span><br><span class=\"line\">[ben@localhost test]$ ./main</span><br><span class=\"line\">ERROR: ld.so: object &#x27;libtest.so&#x27; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.</span><br><span class=\"line\">LD_PRELOAD = (null)</span><br></pre></td></tr></table></figure><br>看看还是一样找不到。可见在x64平台上，/usr/lib并非标准路径，而/usr/lib64以及/lib64才是。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>[1] <a href=\"https://man7.org/linux/man-pages/man8/ld.so.8.html\">ld.so(8) — Linux manual page</a><br>[2] <a href=\"https://stackoverflow.com/questions/18058426/does-using-linux-capabilities-disables-ld-preload\">Stackoverflow - Does using linux capabilities disables LD_PRELOAD</a></p>\n",
            "tags": [
                "Linux",
                "capability",
                "LD_PRELOAD"
            ]
        }
    ]
}