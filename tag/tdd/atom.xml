<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.zhougy.top</id>
    <title>Big Ben • Posts by &#34;tdd&#34; tag</title>
    <link href="https://blog.zhougy.top" />
    <updated>2021-09-19T12:40:57.189Z</updated>
    <category term="javascript" />
    <category term="angular" />
    <category term="操作系统" />
    <category term="arm" />
    <category term="单片机" />
    <category term="machine learning" />
    <category term="deep learning" />
    <category term="Linux" />
    <category term="内存管理" />
    <category term="Markdown" />
    <category term="python" />
    <category term="win32com" />
    <category term="nas" />
    <category term="synology" />
    <category term="USB" />
    <category term="Linux Device Drivers" />
    <category term="uboot" />
    <category term="http" />
    <category term="同步" />
    <category term="算法" />
    <category term="读书笔记" />
    <category term="程序员修炼之道" />
    <category term="c/c++" />
    <category term="rap" />
    <category term="Eminem" />
    <category term="hexo" />
    <category term="security" />
    <category term="SELinux" />
    <category term="编译" />
    <category term="C++" />
    <category term="selinux" />
    <category term="iptables" />
    <category term="capability" />
    <category term="LD_PRELOAD" />
    <category term="coding" />
    <category term="红楼梦" />
    <category term="教育" />
    <category term="UT" />
    <category term="TDD" />
    <category term="code review" />
    <category term="committer" />
    <category term="印象笔记" />
    <category term="Obsidian" />
    <category term="群晖" />
    <category term="Calibre" />
    <category term="电子书" />
    <category term="Android" />
    <category term="xposed" />
    <category term="GitHub" />
    <category term="中断处理" />
    <category term="docker" />
    <category term="ttrss" />
    <category term="rsshub" />
    <category term="wallabag" />
    <category term="can" />
    <category term="network" />
    <category term="unittest" />
    <category term="mockito" />
    <category term="powermock" />
    <category term="QT" />
    <category term="nlp" />
    <category term="vim" />
    <category term="SpaceVim" />
    <category term="tmux" />
    <category term="面向对象" />
    <category term="promise" />
    <category term="mongodb" />
    <category term="Programming" />
    <category term="C++11" />
    <category term="IoT" />
    <category term="broadlink" />
    <category term="domoticz" />
    <category term="UML" />
    <category term="socket" />
    <category term="neural network" />
    <category term="mock" />
    <category term="深度学习" />
    <category term="schedule algorithm" />
    <category term="glibc" />
    <category term="gtest" />
    <category term="gmock" />
    <category term="golang" />
    <category term="elf" />
    <category term="软件开发" />
    <category term="设计模式" />
    <entry>
        <id>https://blog.zhougy.top/2021/09/19/obsidian_posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%20vs.%20%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</id>
        <title>单元测试 vs. 功能测试</title>
        <link rel="alternate" href="https://blog.zhougy.top/2021/09/19/obsidian_posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%20vs.%20%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
        <content type="html">&lt;p&gt;最近在某一次讨论测试的话题中，有一位同事认为“重构结果看护，用集成测试（Integration Test）就可以了，UT看护的逻辑太小，导致修改过于频繁，维护成本太高，没必要。”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;几种测试名词：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单元测试（Unit Test或UT）&lt;br&gt;针对小的代码逻辑编写的测试，不需要运行在真实环境上的，可以随时部署，随时运行，结果应当保持一致&lt;/li&gt;
&lt;li&gt;功能测试（Function Test）&lt;br&gt;针对特性功能编写的测试，应当与实际运行环境保持一致，测试软件产品端到端功能&lt;/li&gt;
&lt;li&gt;集成测试（Integration Test）&lt;br&gt;针对系统或子系统中某个组件的特性功能编写的测试，对其依赖组件进行打桩，并在真实环境进行部署测试，通常用于看护代码提交质量&lt;/li&gt;
&lt;li&gt;冒烟测试（Smoke Test）&lt;br&gt;我们通常说的ST指的是冒烟测试，而非系统测试（System Test），冒烟测试与集成测试指代同一种测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，IT或ST都是一种功能测试，除此之外，还有看护完整特性功能的测试，性能测试等，都属于功能测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这位同学给出IT可以胜任看护重构结果的原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IT通过对周边依赖进行打桩，可以达到80%的覆盖率，看护力度足够&lt;/li&gt;
&lt;li&gt;只要设计足够精巧，完成一个大型工程的IT只需要十分钟，运行速度足够快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为在重构中，IT完全可以看护代码质量&lt;sup&gt;1⃣️&lt;/sup&gt;，所以UT的作用就削弱了&lt;sup&gt;2⃣️&lt;/sup&gt;。又因为UT看护粒度过细，导致UT代码维护困难，维护UT得不偿失&lt;sup&gt;3⃣️&lt;/sup&gt;。而实际上，那个榜样部门就是这样做的——只用IT看护重构，库上代码放弃开发维护UT。&lt;/p&gt;
&lt;p&gt;先不遑论该部门做法的对与错，我们首先针对上面提到的三个观点进行剖析。&lt;/p&gt;
&lt;h1 id=&#34;IT完全可以看护代码质量&#34;&gt;&lt;a href=&#34;#IT完全可以看护代码质量&#34; class=&#34;headerlink&#34; title=&#34;IT完全可以看护代码质量&#34;&gt;&lt;/a&gt;IT完全可以看护代码质量&lt;/h1&gt;&lt;p&gt;这一点我是认同的。UT的关注点是组成接口代码的小逻辑。虽然理论上只要保证每个小逻辑的输入输出正确，就可以保证一个接口的正确性，进而到模块，组件，系统级别。但是，因为UT对模块的划分比较细，模块之间采用打桩的方式解决依赖问题，而mock质量参差不齐，势必会造成对接口间，模块间的测试误差。这也是不可测性的一种体现。相反，因为IT的测试关注点，在特性功能（至少是组件级的功能），所以IT更擅长于发现组件集成时的bug（所以叫集成测试嘛）。&lt;/p&gt;
&lt;h1 id=&#34;UT的作用被削弱了&#34;&gt;&lt;a href=&#34;#UT的作用被削弱了&#34; class=&#34;headerlink&#34; title=&#34;UT的作用被削弱了&#34;&gt;&lt;/a&gt;UT的作用被削弱了&lt;/h1&gt;&lt;p&gt;刚才说到IT相比UT更擅长看护代码质量，那是不是意味着UT没用了呢？&lt;br&gt;答案是否定的。我们先看看什么是IT不擅长的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于IT关注的代码粒度较大，看护的是模块或组件间的特性接口，不利于构造细粒度的case，这造成分支覆盖率低。或者说如果要实现超高分支覆盖率，IT付出的成本会比较高。其结果就是测试稳定性高了（随代码改动而失败的频率降低，只要组件间接口保持一致，IT就不需要变更），但对代码修改的敏感度降低。&lt;/li&gt;
&lt;li&gt;IT的开发成本高。因为涉及到多模块甚至多组件协同，case复杂度高。如果涉及模块间接口打桩，由于接口复杂度高，桩代码实现也更为复杂。在特性代码开发过程中，无法进行有效的IT开发和测试。&lt;/li&gt;
&lt;li&gt;IT运行时间久。前面说到一个比较大的工程运行一次IT，运行时间可以控制到十分钟。可能很多人都认为十分钟是能够忍受的长度。对于IT来说，这确实是一个很优秀的数字了（我想为了实现这一点本身也是要付出很大的代价的）。但是如果将其运用到red-green-refactor的开发节奏中，还是有些不合时宜。试想，你要运行一个预计十分钟会完成的测试，你会全身灌注地盯着屏幕，等待十分钟直到测试完成吗？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2021/09/19/obsidian_posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%20vs.%20%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/Pasted%20image%2020210829201431.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;我想通常是不会的。这时候，自制力差一点的同学就开始刷手机了，自制力好一点的同学会着手处理其他问题。这其实就是另一种被打断。而被打断是软件开发的大忌。你不仅失去进入“心流”的机会，并且你回到主线开发的时间间隔越长，花费在重建现场的额外开销就会越大，进而影响你的效率。&lt;/p&gt;
&lt;p&gt;先看看我们利用IT进行一次前文提到的大型“重构”的流程会是怎么样的？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里说的重构，我认为称为re-architecture更合适，和我们平时说的refactor还是不太一样。他们的共同点是，保证代码功能不变的前提下，优化代码架构和实现。区别是，re-architecture是一次根本性的架构变更，可能涉及到很多模块需要重写，而refactor更多的是在平时做一些代码调整，即所谓的小步重构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;定好特性架构，开始特性开发&lt;/li&gt;
&lt;li&gt;特性代码接近完成时，开始开发IT&lt;/li&gt;
&lt;li&gt;开发IT的同时，一边调试IT，一边使用IT测试特性代码&lt;/li&gt;
&lt;li&gt;重复步骤3直到IT代码和特性代码均没有问题，即达到可交付状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;前文提到IT的测试时间相比UT还是比较久的，如果将其运用到red-green-refactor节奏中，则容易造成注意力分散，进而引起时间管理困境&lt;/li&gt;
&lt;li&gt;如果没有UT，步骤2通常会一直处于“裸奔”状态，“裸奔”的时间取决于开发者对特性代码开发状态的评估，一般要到特性代码比较接近完工水平时，才可以编写IT。由于IT开发调试难度高，基本也不太可能和特性代码一同开发。&lt;/li&gt;
&lt;li&gt;由于IT开发和运行的成本高，那么势必造成开发时，针对特性代码的测试运过少，那么由于开发的不稳定性，产生的返工可能性大，成本高。（换句话说，如果开发对于特性的熟悉程度非常高，实际上也可以不一定即时UT，还是选择与平衡问题。不过这种情况据我观察还是比较少的）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以抛弃UT，确实节省了一些代码开发时间，但也丢失了一件非常重要的武器，导致我们的开发节奏又回到了瀑布式开发，而无法实现小步快跑的即时重构开发方式。&lt;/p&gt;
&lt;p&gt;实际上我认为，&lt;strong&gt;引入UT就是为了引入reg-green-refactor的开发节奏，从而通过实时重构，及时消除代码坏味道，进而实现代码自下而上的架构设计&lt;/strong&gt;。与前期自上而下的特性设计配合，以实现最合理的代码架构。避免在特性设计阶段过于关注实现细节，也避免在开发阶段，过于纠结权衡欠设计与过设计导致的效率低下。&lt;/p&gt;
&lt;p&gt;UT的运行成本非常低，这是因为UT不关注代码功能，只关注代码输入输出逻辑。全程对依赖接口进行打桩实现，运行速度很快（没有任何的延时和多线程操作，也可能连IO操作都没有）。UT针对小逻辑组织case，单case复杂度低，case之间的依赖关系被严格控制。所以运行的时候，一方面速度快，另一方面可以根据需要，随意组合运行的case以达到需要的测试范围和粒度。例如：可以选择运行一个case或是一个suite，也可以通过正则表达式运行多个case，或者完整运行所有的case。&lt;/p&gt;
&lt;p&gt;综上可见，UT和IT是两类用途完全不同的测试方法。一个好比军刀，可以上战场杀敌；一个好比菜刀，可以烹小鲜慰军。一个看护结果；一个促进过程。&lt;/p&gt;
&lt;h1 id=&#34;UT维护困难，维护UT得不偿失&#34;&gt;&lt;a href=&#34;#UT维护困难，维护UT得不偿失&#34; class=&#34;headerlink&#34; title=&#34;UT维护困难，维护UT得不偿失&#34;&gt;&lt;/a&gt;UT维护困难，维护UT得不偿失&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;那UT带来的工作量呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刚才说，如果没有UT，其实会引入很多隐性工作量。如果要衡量工作量，更公平的比较应当是将维护UT的工作量与这些隐性工作量进行比较。通常我听到的对UT的抱怨大多是因为UT看护内部模块边界。当组件内部实现修改时，例如函数改名字，变更函数原型等一些特别频繁的重构操作，由于IT看护组件边界接口，IT更稳定不需要变动。而UT由于看护了内部模块边界，所以UT要随之更新。这些确实看起来是额外的工作量，但当前流行的开发工具，例如一些IDE或者VS code，都已经能够提供很好的重构工具，在修改函数名字，修改函数原型，或者抽取函数或内联函数等操作上，都已经可以大大减少开发者的操作难度。另外，由于UT对代码的敏感性，让你实时都感受到你的代码变动都是经过测试的，每一次变动都被看护，这种感觉不是很令人有安全感吗😊？&lt;/p&gt;
&lt;p&gt;而传统的瀑布式开发带来的隐性问题，很多是因为人类思考方式导致的。例如思路打断，对过设计和欠设计的恐惧，不停返工引起的沮丧心情。这些带来的影响很难去估量，他们可能很严重，也可能无足轻重，完全取决于开发者自身的素质。以我个人的经验看，我是更愿意花一些切实的UT成本，来消除这些不确定性。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;再回过头来分析一下那个成功部门的做法。通过IT看护重构结果，并丢弃UT这种测试方法。首先，重构结果大概率不会有问题，因为有足够测试力度的IT作为看护工具。其次，因为缺乏及时运行的测试case，重构开发时效率得不到保证。大概率只能通过模块重写实现。另外，又因为重构效率低，成本高，重构只能积攒起来一次性完成。于是refactor变成re-architecture。&lt;/p&gt;
&lt;p&gt;不过话说回来，测试策略并没有对错之分，永远是项目组根据自身情况，权衡得出的。可能项目组一时无法获得UT的价值，或者项目组对UT对技术积累不充分，从而无法很好对实践UT。但我们还是应该厘清单元测试和功能测试的差别，分清应用场合，这样才能更好地朝正确的方向演进。&lt;/p&gt;
</content>
        <category term="UT" />
        <category term="TDD" />
        <updated>2021-09-19T12:40:57.189Z</updated>
    </entry>
    <entry>
        <id>https://blog.zhougy.top/2021/08/29/obsidian_posts/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
        <title>我眼中的单元测试</title>
        <link rel="alternate" href="https://blog.zhougy.top/2021/08/29/obsidian_posts/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
        <content type="html">&lt;p&gt;在最近的一些针对毕业生的面试中，我都会问一下他们对单元测试的理解。得到的答案无一例外都是不知道，不清楚，或是按字面意思的解释。其实，这也难怪。虽然我司可信变革对单元测试的要求越来越严苛，但真正能够理解并正确使用单元测试的同学也还是比较少的。至少在我周围是这样。&lt;/p&gt;
&lt;p&gt;想想这也正常，记得曾经刚毕业时，我根本都不知道单元测试这个名词。直到后来，以前任职的公司专门外聘了专业的机构，做了相关的培训之后，我算是认识了这个词。但彼时的理解，有点像现在我司推行的Fuzz测试。也就是，代码写好后，通过工具生成各种各样的参数，调用待测代码，从而保证代码输出质量。现在可能很多同学还是这样的思路。回过头来再审视当时的观点，不免觉得过于片面了。单元测试最重要的作用其实并不是保证代码质量，对代码质量的改进可以说是它的一个副作用。&lt;/p&gt;
&lt;p&gt;后来对于单元测试有了更深入的理解，是在阅读了下面三本书之后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《敏捷软件开发-原则模式与实践》 — Robert C. Martin&lt;/li&gt;
&lt;li&gt;《测试驱动开发》— Kent Beck&lt;/li&gt;
&lt;li&gt;《重构-改善既有代码的设计》— Martin Fowler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得一提的是这三本书的作者都是&lt;a href=&#34;https://agilemanifesto.org/iso/zhchs/manifesto.html&#34;&gt;敏捷软件开发宣言&lt;/a&gt;的发起者，也是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B&#34;&gt;极限编程（Extreme Programming）&lt;/a&gt;的践行者。书也都是高分经典著作，非常推荐给大家阅读。&lt;/p&gt;
&lt;h1 id=&#34;单元测试提升代码信心&#34;&gt;&lt;a href=&#34;#单元测试提升代码信心&#34; class=&#34;headerlink&#34; title=&#34;单元测试提升代码信心&#34;&gt;&lt;/a&gt;单元测试提升代码信心&lt;/h1&gt;&lt;p&gt;现在谈谈我对单元测试的认识。在刚毕业的那一段时间，我的开发流程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先尝试设计，思考代码的执行流程，画一些时序图和流程图&lt;/li&gt;
&lt;li&gt;开始编程&lt;/li&gt;
&lt;li&gt;发现问题&lt;br&gt; 1). 如果是设计问题，导致开发不下去，那么回到步骤1&lt;br&gt; 2). 如果发现有更好的实现方法，那么擦掉已有的代码，回到步骤2&lt;/li&gt;
&lt;li&gt;所有问题都解决了，开发结束，开始写功能测试代码，验证特性代码。如果发现问题，重复步骤3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样完成整个开发循环，通常要至少半天时间。有时半天甚至一天，也没留下几行特性代码。整个开发过程不断地陷入编写和整体推翻的循环中。即便最终完成了前3步，准备开始第4步功能测试的时候，也是战战兢兢的。如果功能测试发现问题，又会陷入不停地调试，修改，推翻设计的死循环。我相信很多同学都遇到过这样的问题，并因此而感到困惑。到底该怎么摆脱这样效率低下的不断重复？&lt;/p&gt;
&lt;p&gt;现在就让我们诊断一下。通常我们做完前3步流程都会花比较久的时间。按照我的经验，一般一个新特性的开发，少则若干个小时，多则一天，甚至数天。整个流程来到第4步，我们才第一次开始测试我们的特性代码。之前顶多就是编译通过。运行测试的时候才会发现很多问题，进而反思我们的实现逻辑是否与我们开始设计时思考的逻辑相符合。编写代码，实际是将物理世界，翻译成用代码表述的，严谨的逻辑语言。而通常我们并不能一次性地完成这样的翻译。而且即便完成了，也无法避免引入bug。我们只有通过测试不断地完成负反馈，来验证我们的代码，找到错误，最终收敛成正确的代码逻辑，从而完成现实世界到代码逻辑的翻译工作。软件的迭代开发，就像控制系统一样，测试就如控制系统中的负反馈，如果没有负反馈的，控制系统是无法达到稳定收敛的。&lt;/p&gt;
&lt;p&gt;由于我们前面的步骤过于依赖功能测试，所以需要我们等很久，也就是功能代码编写完以后，才可以进行第一次测试。由于功能测试与特性逻辑相关，其运行花费的时间往往很久。用例要覆盖端到端功能，测试逻辑也比较复杂，写起来也比较耗时。这几点从本质上就会限制功能测试的运行次数。功能测试虽然能发现，且擅长发现代码逻辑问题，但开发和执行成本高，导致运行的次数不会太多。测试运行次数少，导致我们不知道我们自己写出来的特性逻辑是否真实地反映了我们的设计。那么这就会影响我们对代码的信心。所以，在进行第4步功能测试之前，我们总是战战兢兢的。&lt;/p&gt;
&lt;p&gt;我们等不及到所有特性代码开发完成再进行测试。因为通过昂贵的功能测试来试错发现问题，返工所花费的成本太高了。所以，我们需要一种针对小逻辑的（这样单case复杂度更低，有利于测试case之间的解耦），覆盖率高（通过mock依赖实现），运行快速的（方便不断运行）测试。于是，单元测试就应运而生了。为了编写单元测试，我们首先会把大的特性分解成小的模块；其次，通过编写单元测试，我们会不断地思考代码实现逻辑，这样就可以实时地发现逻辑问题，及时返工修正。而通常单元测试速度是很快的，这使得我们有条件可以完成下面的red-&amp;gt;green-&amp;gt;refactor的开发节奏。&lt;br&gt;&lt;img src=&#34;/2021/08/29/obsidian_posts/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/Pasted%20image%2020210829201431.png&#34; alt&gt;&lt;br&gt;在每一次red-&amp;gt;green的变化中，我们都会运行一次单元测试。而每次完成refactor后，我们又会使用单元测试，验证我们重构后的代码是否破坏了原有的逻辑。所以引入单元测试，并不是为了直接提升我们的代码质量，而是为了能让我们：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;切分原先整块的代码逻辑，变成一个个小的积木逻辑&lt;/li&gt;
&lt;li&gt;充分测试我们的特性代码逻辑，并且达到足够的覆盖率（越高越好）&lt;/li&gt;
&lt;li&gt;在重构时，有足够覆盖率的测试帮助我们验证逻辑是否遭到破坏&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们严格按照red-&amp;gt;green-&amp;gt;refactor的节奏不断推进时，我们的代码架构就会变好，代码经过更多的测试，代码质量也会得到一定的保证。而这只是单元测试带来的附加值。&lt;/p&gt;
&lt;p&gt;现在我们有了单元测试这个武器后，看看我们的开发流程会变成怎样？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设计代码逻辑，与前面不同之处在于，我们先不深入到具体的代码逻辑，而是将功能模块化，将模块接口化&lt;/li&gt;
&lt;li&gt;挑一个接口开始编程&lt;/li&gt;
&lt;li&gt;按照开发顺序，写好待测逻辑的单元测试&lt;/li&gt;
&lt;li&gt;开发特性代码逻辑，让单元测试通过&lt;/li&gt;
&lt;li&gt;如果发现设计逻辑导致无法开发，回到步骤1&lt;/li&gt;
&lt;li&gt;重复3-4步，直到接口完成&lt;/li&gt;
&lt;li&gt;重复1-6，直到特性代码完成&lt;/li&gt;
&lt;li&gt;编写功能测试，调试，如果发现问题，检验代码逻辑，如果有设计问题，仍然要回到步骤1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，从第3步开始，我们就不断地测试，不断验证我们的逻辑。虽然到达最后一步功能测试验证时，如果发现设计问题，仍然要返工回到步骤1，但因为我们期间不断地测试，不断地思考，并验证逻辑，我们可能很早就发现了设计问题，而不会等到最后一步才需要返工。正因为如此，当我们在准备进行功能测试验证的时候，我们对自己开发的代码更有信心。&lt;/p&gt;
&lt;h1 id=&#34;单元测试带来的额外好处&#34;&gt;&lt;a href=&#34;#单元测试带来的额外好处&#34; class=&#34;headerlink&#34; title=&#34;单元测试带来的额外好处&#34;&gt;&lt;/a&gt;单元测试带来的额外好处&lt;/h1&gt;&lt;h2 id=&#34;单元测试帮助你进入心流&#34;&gt;&lt;a href=&#34;#单元测试帮助你进入心流&#34; class=&#34;headerlink&#34; title=&#34;单元测试帮助你进入心流&#34;&gt;&lt;/a&gt;单元测试帮助你进入心流&lt;/h2&gt;&lt;p&gt;单元测试提升了我们对开发代码的信心，让我们有机会实现red-&amp;gt;green-&amp;gt;refactor的开发节奏，从而优化代码架构。单元测试让我们能够更focus，从而更容易进入心流状态。进入心流状态，意味着注意力极为集中，工作效率很高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;心流&lt;/strong&gt;（英语：Flow），也有别名以化境（Zone）表示，亦有人翻译为&lt;strong&gt;神驰&lt;/strong&gt;或&lt;strong&gt;沉浸&lt;/strong&gt;状态，是由匈牙利裔美籍心理学家&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B1%B3%E5%93%88%E9%87%8C%C2%B7%E5%A5%91%E5%85%8B%E6%A3%AE&#34; title=&#34;米哈里·契克森&#34;&gt;米哈里·契克森&lt;/a&gt;首度提出，定义是一种将个人精神力完全投注在某种活动上的感觉；心流产生同时会有高度的兴奋感及充实感等正向情绪。&lt;br&gt;Martin Fowler的&lt;a href=&#34;https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073&#34;&gt;The Clean Coder: A Code of Conduct for Professional Programmers: Martin, Robert: 4708364241379: Amazon.com: Books&lt;/a&gt;一书告诉我们，心流对程序员来说并不一定是好事，但大多数情况它还是好的。心流并不在本文讨论范围之内。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《测试驱动开发》一书给出了一种撰写单元测试的最佳实践。即&lt;strong&gt;每次关注一个足够小的逻辑，并在完成之后再完善它&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为人的注意力是有限的，不能一次性关注太多的东西。在开发某一个逻辑中间，如果被其他事情分散了注意力，往往会造成逻辑发散。例如：你在实现一个上报故障逻辑，但你希望记录每个故障的时间戳，你又不记得时间戳函数的具体使用方法。这时候如果你选择去google这个函数，并搞清楚它的使用方法，有可能你需要花很久时间才会回到你原先的主线逻辑继续开发。这和你的开发被打断没有区别，你失去了进入心流的机会，你需要花很长的时间再重新回顾原先的开发现场，导致你的效率不可能很高。但这还不是最糟糕的。最糟糕的是，你在google的过程中，又发现了其他问题，你又去看那个问题，或者不巧在这过程中被访客打断（实际工作中经常发生，这也是通常我认为在家远程办公的效率可能更高）。你离开原先的开发主线的时间越长，则需要重建现场的时间就越长。这和操作系统的中断很像，你离开的时间越长，很多cache都被flush掉了，那么你再次回到原先的工作状态就要花费更多的overloading。&lt;/p&gt;
&lt;p&gt;Kent Beck给出的建议是，以最简单的方法解决当前的问题，让你每一个开发逻辑都原子化地完成。例如：刚才我们的上报故障功能需要一个时间戳，我们现在不知道怎么写那个时间戳方法，于是就先hard code一个时间戳，并在我们的TODO list上记录一个事项。等我们完成了当前的开发逻辑，再去除TODO list，依次解决上面的问题。等问题都解决完了，再进行下一步开发。每件事务的处理保持原子化，要么没做，要么就做完。这样多出来记录TODO list的时间，但节省了被打断并且恢复现场的时间，并且你有更多的机会进入“心流”。&lt;/p&gt;
&lt;h2 id=&#34;单元测试帮助你克服内心的恐惧&#34;&gt;&lt;a href=&#34;#单元测试帮助你克服内心的恐惧&#34; class=&#34;headerlink&#34; title=&#34;单元测试帮助你克服内心的恐惧&#34;&gt;&lt;/a&gt;单元测试帮助你克服内心的恐惧&lt;/h2&gt;&lt;p&gt;通常一个有责任心的程序员，都会有“完美程序”情节。你希望你写出来的代码是完美抽象的，通用性好，扩展性强，性能佳，等等。这本没有错，也是一个程序员的基本素养。但如果你总是想毕其功于一役，却并没有那么简单。这曾经也深深地困扰过我。在一个支线逻辑上踟蹰不前，严重影响开发效率。在现实的开发中，我也观察到很多同事有和我一样的困扰。针对这个问题， Kent Beck给出的建议是，先实现你的预定计划（除非你可以立即证明它完全是错误的，无法实现）。之后，再通过不断的重构，在必要的时候优化它，避免过设计。直到它能满足你的需求。&lt;/p&gt;
&lt;p&gt;我们总是提倡编写好代码，优美的代码，但事实上，并没有放之四海而皆准的好代码标准。好的代码应该是动态的，能够满足当下可见的需求（功能性和扩展性）的代码就是好代码。当有新需求的时候，比如开发新特性，或需要做性能优化，及时地重构就可以了。重构应当是实时进行的，是自下而上的。通过一些技巧和工具，我们在重构中就能让代码进化到一个更适合当前需求的状态，从而更易于开发新特性，或者继续重构优化。&lt;/p&gt;
&lt;p&gt;再回头看，为什么程序员会有完美代码情结？没错，因为他们自律，有责任心，且见贤思齐。但换个角度说，也可能因为他们内心有一种焦虑，或者恐惧。这是程序员对自己代码没有信心的表现。担心因为一时考虑不周全，在未来会付出更大的返工。每时每刻需要在欠设计和过设计之间做权衡。但请记住，代码是动态的，只要保证代码能够实时地被重构，尽量减少代码的坏味道，代码架构通常大概率是合理的。架构合理的代码，不论做架构调整或性能优化，都是比较容易的。没必要追求所谓的“完美代码”。&lt;/p&gt;
&lt;p&gt;我们平时编程时，应当尽力克服自己内心对未知的恐惧，用单元测试和重构来武装自己。这时，我常常想到一个词“Zen Coding”。做一个佛系的程序员，运用禅编程。&lt;/p&gt;
&lt;h1 id=&#34;单元测试的误区&#34;&gt;&lt;a href=&#34;#单元测试的误区&#34; class=&#34;headerlink&#34; title=&#34;单元测试的误区&#34;&gt;&lt;/a&gt;单元测试的误区&lt;/h1&gt;&lt;p&gt;公司在施行可信变革时，要求单元测试能够达到一定的覆盖率数值。这是完全正确的，应该被提倡。因为只有单元测试的覆盖率足够高，才能在重构时捕获每一个轻微的逻辑破损，避免因为即时重构引入的问题。而单元测试因为通常采用mock依赖实现，理论上只要mock实现的足够优秀，是可以实现100%的覆盖率的。但真正在项目运行的时候，因为覆盖率是一个很容易感知的指标，所以单元测试慢慢地沦为实现覆盖率的附属品。也就是只是为了实现超高覆盖率而写单元测试。这表现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个测试case不是为了覆盖一个小逻辑而产生，为了迅速满足覆盖率要求，很多个测试断言放在一起，产生巨大的composite case&lt;/li&gt;
&lt;li&gt;为了完成超高覆盖率，随意运用核武器来mock依赖函数，造成mock了过多的内部实现，测试代码变得异常脆弱，一旦依赖实现需要变更，整棵依赖树上的测试case都要跟着改&lt;/li&gt;
&lt;li&gt;测试代码缺乏重构，随处可见重复代码，一旦变更要涉及多处更改&lt;/li&gt;
&lt;li&gt;测试case之间耦合严重，一个特性代码的修改理想情况下只会导致一个相关case失败，但耦合严重的case，往往会失败一大片。一个特性代码改动导致一个完全不相干的case失败。这是很令人崩溃的事情。令人崩溃的事情往往就会成为一个包袱，随时等待被丢弃。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在我接触到的项目中，这样的情况非常普遍。虽然我们每日的CI报告中，单元测试覆盖率数值是很好看的。但实际单元测试应该产生的作用很小，甚至沦为了开发的负担。通常听到一个词语叫“补单元测试”。可见单元测试并没有被正确的使用。打个比方，登山运动员都有一个很大的背包，背包里面放满了各种救命用的工具。你见别人的包挺大，你也整了个大背包，然后背了一堆你爱吃的零食。这些零食在一开始的时候，让你挺happy，到了关键时刻，别人从背包里拿出救命的工具，你的背包只会成为累赘，不如早早丢弃。&lt;/p&gt;
&lt;p&gt;正确的做法应当是，每写一个小逻辑（接口实现级别，若干个小逻辑组成一个接口），就完成一个单元测试case与之对应，不论你是先写case（TDD），还是先写特性代码（非TDD）。当整个特性代码完成后，单元测试也是完备的，并且提交MR之前，应当即时完成重构，并修复能识别到的坏味道。如果因为交付时间问题，不能即时解决的应当添加FIXME注释，并且在你的TODO list上添加一条，以跟踪该事项。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;单元测试是工具不是目的。&lt;/li&gt;
&lt;li&gt;单元测试用于即时重构，优化代码逻辑和结构，功能测试用于看护代码质量&lt;/li&gt;
&lt;li&gt;流水不腐，户枢不蠹，好的代码应该不断地流动，在变化中达到平衡&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="UT" />
        <category term="TDD" />
        <updated>2021-08-29T09:11:09.223Z</updated>
    </entry>
    <entry>
        <id>https://blog.zhougy.top/2017/09/12/C/C++%20Test%20Framework%20-%20Google%20Test%20&amp;%20Google%20Mock/</id>
        <title>C/C++ Test Framework - Google Test &amp; Google Mock</title>
        <link rel="alternate" href="https://blog.zhougy.top/2017/09/12/C/C++%20Test%20Framework%20-%20Google%20Test%20&amp;%20Google%20Mock/"/>
        <content type="html">&lt;div class=&#34;enNote&#34; style=&#34;color: #2c3f51; line-height: 1.6; display: block;&#34; title lang=&#34;v2&#34; xml:lang dir&gt;&lt;del style=&#34;position:relative;display:block;z-index:10;&#34;&gt;&lt;a style=&#34;position: absolute;color: #FFF;text-decoration: none;font-size: 12px;height: 25px;border-radius: 0;margin-top: -20px;right: 15px;background: rgba(0, 0, 0, 0);border-left: 10px solid #BB3A34;border-right: 10px solid #BB3A34;border-bottom: 5px solid rgba(0, 0, 0, 0);width: 0;text-indent:-100000px;&#34; href=&#34;http://maxiang.info/#/?provider=evernote&amp;amp;guid=52d299a6-1591-4f5a-b50c-cca38230ecc5&amp;amp;notebook=myblog&#34;&gt;Edit&lt;/a&gt;&lt;/del&gt;&lt;div style=&#34;color: #2c3f51; line-height: 1.6; display: block;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Google Test&amp;#xFF0C;Google Mock&amp;#x4EE5;&amp;#x4E0B;&amp;#x7B80;&amp;#x79F0;gtest&amp;#xFF0C;gmock&amp;#x3002; &lt;br&gt;&amp;#x5728;&amp;#x63A5;&amp;#x89E6;gtest&amp;#xFF0C;gmock&amp;#x4E4B;&amp;#x524D;&amp;#xFF0C;&amp;#x6D4B;&amp;#x8BD5;C/C++ code&amp;#x4F7F;&amp;#x7528;&lt;a href=&#34;https://github.com/unittest-cpp/unittest-cpp&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;UnitTest++&lt;/a&gt;&amp;#x3002;&amp;#x8FD9;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F88;&amp;#x7B80;&amp;#x6D01;&amp;#x7684;&amp;#x6846;&amp;#x67B6;&amp;#xFF0C;&amp;#x4E0A;&amp;#x624B;&amp;#x5F88;&amp;#x5FEB;&amp;#x3002;&amp;#x53C2;&amp;#x770B;&amp;#x53E6;&amp;#x4E00;&amp;#x7BC7;&amp;#x535A;&amp;#x6587;&lt;a href=&#34;https://zhougy0717.github.io/2016/02/29/UnitTest++%E7%AE%80%E4%BB%8B/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;UnitTest++&amp;#x7B80;&amp;#x4ECB;&lt;/a&gt;&amp;#x3002;&amp;#x6D4B;&amp;#x8BD5;&amp;#x76F8;&amp;#x5173;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#x591F;&amp;#x7528;&amp;#xFF0C;&amp;#x4F46;&amp;#x662F;&amp;#x6CA1;&amp;#x6709;mock&amp;#x5E93;&amp;#x3002;&amp;#x8FD9;&amp;#x5E26;&amp;#x6765;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x662F;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;&amp;#x9057;&amp;#x7559;&amp;#x4EE3;&amp;#x7801;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x9700;&amp;#x8981;&amp;#x81EA;&amp;#x884C;fake&amp;#x76F8;&amp;#x5173;&amp;#x4EE3;&amp;#x7801;&amp;#x3002;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5728;&amp;#x9057;&amp;#x7559;&amp;#x7CFB;&amp;#x7EDF;&amp;#x5F88;&amp;#x5E9E;&amp;#x5927;&amp;#x65F6;&amp;#xFF0C;&amp;#x8981;&amp;#x9887;&amp;#x8D39;&amp;#x5FC3;&amp;#x529B;&amp;#x3002;&amp;#x800C;&amp;#x4E14;&amp;#x8FC7;&amp;#x591A;&amp;#x6D89;&amp;#x53CA;&amp;#x7EC6;&amp;#x8282;&amp;#xFF0C;&amp;#x5BFC;&amp;#x81F4;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6781;&amp;#x4E0D;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x7CFB;&amp;#x7EDF;&amp;#x4EE3;&amp;#x7801;&amp;#x4EFB;&amp;#x610F;&amp;#x7684;&amp;#x6F14;&amp;#x8FDB;&amp;#xFF0C;&amp;#x90FD;&amp;#x4F1A;&amp;#x5BFC;&amp;#x81F4;&amp;#x5927;&amp;#x5806;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5931;&amp;#x8D25;&amp;#xFF0C;&amp;#x751A;&amp;#x81F3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65E0;&amp;#x6CD5;&amp;#x8FDB;&amp;#x884C;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;case&amp;#x4E4B;&amp;#x95F4;&amp;#x65E0;&amp;#x6CD5;&amp;#x5F88;&amp;#x597D;&amp;#x7684;&amp;#x89E3;&amp;#x8026;&amp;#x3002;&amp;#x7ED3;&amp;#x679C;&amp;#x540C;&amp;#x6837;&amp;#x662F;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E0D;&amp;#x591F;&amp;#x7A33;&amp;#x5B9A;&amp;#x3002;&amp;#x672F;&amp;#x8BED;&amp;#x662F;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4EE3;&amp;#x7801;&amp;#x5F88;&amp;#x201C;&amp;#x8106;&amp;#x5F31;&amp;#x201D;&amp;#x3002;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Java&amp;#xFF0C;Python&amp;#xFF0C;JavaScript&amp;#x90FD;&amp;#x6709;&amp;#x81EA;&amp;#x5DF1;&amp;#x7684;mock&amp;#x5E93;&amp;#x3002;Python&amp;#x7684;Mock&amp;#x7C7B;&amp;#xFF0C;Java&amp;#x7684;Mockito/PowerMock&amp;#xFF0C;JavaScript&amp;#x7684;Sinon&amp;#x3002;&amp;#x4E8E;&amp;#x662F;&amp;#xFF0C;&amp;#x5728;&amp;#x7F51;&amp;#x4E0A;&amp;#x641C;&amp;#x7D22;&amp;#x4E86;&amp;#x4E00;&amp;#x4E0B;C/C++&amp;#x7684;Mock&amp;#x5E93;&amp;#xFF0C;&amp;#x4E8E;&amp;#x662F;&amp;#x770B;&amp;#x5230;&amp;#x4E86;gtest&amp;#xFF0C;gmock&amp;#x3002;&amp;#x7136;&amp;#x540E;&amp;#x5C31;&amp;#x6709;&amp;#x4E86;&amp;#x8FD9;&amp;#x4E00;&amp;#x7BC7;&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&amp;#x7B80;&amp;#x4ECB;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0D;&amp;#x7528;&amp;#x53BB;&amp;#x7F51;&amp;#x4E0A;&amp;#x8D39;&amp;#x5FC3;&amp;#x627E;&amp;#x6559;&amp;#x7A0B;&amp;#xFF0C;&amp;#x4E24;&amp;#x4E2A;&amp;#x9879;&amp;#x76EE;&amp;#x7684;&amp;#x6587;&amp;#x6863;&amp;#x90FD;&amp;#x975E;&amp;#x5E38;&amp;#x68D2;&amp;#x3002;&amp;#x5165;&amp;#x53E3;&amp;#x7EDF;&amp;#x4E00;&amp;#x5728;&lt;a href=&#34;https://github.com/google/googletest&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;gtest GitHub&amp;#x9879;&amp;#x76EE;&amp;#x4E3B;&amp;#x9875;&lt;/a&gt;&amp;#x4E0A;&amp;#x3002;&amp;#x800C;&amp;#x4E14;&amp;#x8BE5;&amp;#x6587;&amp;#x6863;&amp;#x4E0D;&amp;#x4EC5;&amp;#x5F88;&amp;#x597D;&amp;#x7684;&amp;#x4ECB;&amp;#x7ECD;&amp;#x4E86;gtest&amp;#xFF0C;gmock&amp;#x7684;&amp;#x7528;&amp;#x6CD5;&amp;#xFF0C;&amp;#x5176;&amp;#x4E2D;&amp;#x8FD8;&amp;#x6D89;&amp;#x53CA;&amp;#x4E86;&amp;#x5F88;&amp;#x591A;TDD&amp;#x6216;&amp;#x8005;UnitTest&amp;#x7684;&amp;#x771F;&amp;#x77E5;&amp;#x707C;&amp;#x89C1;&amp;#xFF0C;&amp;#x5F88;&amp;#x503C;&amp;#x5F97;&amp;#x8BFB;&amp;#x4E00;&amp;#x8BFB;&amp;#x3002; &lt;br&gt;&amp;#x8981;&amp;#x4F7F;&amp;#x7528;gtest&amp;#x975E;&amp;#x5E38;&amp;#x7B80;&amp;#x5355;&amp;#xFF1A;&amp;#x7F16;&amp;#x8BD1;&amp;#x51FA;gtest&amp;#xFF0C;gmock&amp;#xFF0C;&amp;#x518D;&amp;#x94FE;&amp;#x5165;&amp;#x4F60;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7A0B;&amp;#x5E8F;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x7F16;&amp;#x8BD1;gtest/gmock&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gtest&amp;#xFF0C;gmock&amp;#x5747;&amp;#x7528;cmake&amp;#x6765;&amp;#x7BA1;&amp;#x7406;&amp;#x8DE8;&amp;#x5E73;&amp;#x53F0;&amp;#xFF0C;&amp;#x5148;&amp;#x7528;cmake&amp;#x6765;&amp;#x751F;&amp;#x6210;Makefile&amp;#x3002;&amp;#x7528;&amp;#x547D;&amp;#x4EE4;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;cmake -G &amp;quot;Unix Makefiles&amp;quot; /path/to/CMakeList.txt&lt;/code&gt;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Makefile&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7136;&amp;#x540E;&amp;#x6309;&amp;#x7167;&amp;#x4E0B;&amp;#x9762;&amp;#x7F16;&amp;#x5199;Makefile&amp;#x3002;&amp;#x6CE8;&amp;#x610F;gmock_main&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;main&amp;#x51FD;&amp;#x6570;&amp;#x6765;&amp;#x8C03;&amp;#x7528;&amp;#x6240;&amp;#x6709;&amp;#x7684;test case&amp;#xFF0C;&amp;#x7701;&amp;#x5F97;&amp;#x81EA;&amp;#x5DF1;&amp;#x5199;main&amp;#x51FD;&amp;#x6570;&amp;#x4E86;&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;CC = gcc&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;CPP = g++&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;LINK = g++&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;CFLAGS = -g -Wall -Werror -Wextra -std=gnu99&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;CPPFLAGS = -g -Wall -Werror -Wextra&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;LIBS = -L./lib -lgtest -lgmock -lgmock_main -lpthread&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;C__SOURCES = $(wildcard *.c)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;CPPSOURCES = $(wildcard *.cpp)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;OBJECTS = $(patsubst %.c, %.o, $(C__SOURCES)) $(patsubst %.cpp, %.o, $(CPPSOURCES))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;TARGET = test_exe&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;first: all&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;%.o: %.c&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    $(CC) $(INCLUDES) -c $(CFLAGS) -o $@ $&amp;lt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;%.o: %.cpp&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    $(CPP) $(INCLUDES) -c $(CPPFLAGS) -o $@ $&amp;lt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;all: $(TARGET)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;$(TARGET): $(OBJECTS)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    $(LINK) $(CPPFLAGS) $(LIBS) -o $(TARGET) $(OBJECTS)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;.PHONY : clean&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;clean:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    rm -f $(TARGET) $(OBJECTS)&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Terms&lt;/h3&gt;&lt;table style=&#34;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&#34;&gt;&lt;thead style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;Meaning&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;Google Test Term&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;ISTQB Term&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Exercise a particular program path with specific input values and verify the results&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;TEST()&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Case&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;A set of several tests related to one component&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Case&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Suite&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Test&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gtest/gtest.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Test;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::AtLeast;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;TEST(TestCaseName, should_this_test_do)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    EXPECT_STREQ(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, str);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E2D;&amp;#x95F4;&amp;#x7684;&amp;#x90A3;&amp;#x5806;namespace&amp;#x90FD;&amp;#x662F;gtest/gmock&amp;#x5E93;&amp;#x91CC;&amp;#x5B9A;&amp;#x4E49;&amp;#x7684;matcher&amp;#x5B8F;&amp;#x6216;&amp;#x8005;&amp;#x5404;&amp;#x79CD;&amp;#x6709;&amp;#x7528;&amp;#x7684;&amp;#x5B8F;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Test Fixture&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6709;&amp;#x91CD;&amp;#x590D;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5C31;&amp;#x8981;&amp;#x7528;&amp;#x5230;Test Fixture&amp;#x4E86;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;setUp / tearDown&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt; : public ::testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Test&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt; protected:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  virtual void &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;SetUp&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    q1_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(1);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(2);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(3);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  // virtual void &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TearDown&lt;/span&gt;() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q0_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q1_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q2_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TEST_F&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;IsEmptyInitially&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(0, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q0_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TEST_F&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;DequeueWorks&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  int* n = q0_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  n = q1_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ASSERT_TRUE&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt; != &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(1, *&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(0, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q1_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  delete n;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  n = q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ASSERT_TRUE&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt; != &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(2, *&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(1, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q2_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  delete n;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;constructor/destructor vs. SetUp/TearDown&lt;/h4&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;When you need to write per-test set-up and tear-down logic, you have the choice between using the test fixture constructor/destructor or SetUp()/TearDown(). The former is usually preferred, as it has the following benefits:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;By initializing a member variable in the constructor, we have the option to make it const, which helps prevent accidental changes to its value and makes the tests more obviously correct.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;In case we need to subclass the test fixture class, the subclass&amp;#x2019; constructor is guaranteed to call the base class&amp;#x2019; constructor first, and the subclass&amp;#x2019; destructor is guaranteed to call the base class&amp;#x2019; destructor afterward. &lt;/strong&gt;With SetUp()/TearDown(), a subclass may make the mistake of forgetting to call the base class&amp;#x2019; SetUp()/TearDown() or call them at the wrong moment.&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;Benefit for using SetUp/TearDown:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If the tear-down operation could throw an exception, you must use TearDown() as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer TearDown() if you want to write portable tests that work with or without exceptions.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The assertion macros throw an exception when flag &amp;#x2013;gtest_throw_on_failure is specified. Therefore, you shouldn&amp;#x2019;t use Google Test assertions in a destructor if you plan to run your tests with this flag.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;In a constructor or destructor, you cannot make a virtual function call on this object. (You can call a method declared as virtual, but it will be statically bound.) Therefore, if you need to call a method that will be overriden in a derived class, you have to use SetUp()/TearDown().&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7B80;&amp;#x8A00;&amp;#x4E4B;&amp;#xFF0C;&amp;#x5728;&amp;#x903B;&amp;#x8F91;&amp;#x4E0A;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E24;&amp;#x7EC4;&amp;#x7684;&amp;#x4F5C;&amp;#x7528;&amp;#x76F8;&amp;#x540C;&amp;#xFF0C;&amp;#x90FD;&amp;#x662F;&amp;#x6BCF;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E4B;&amp;#x524D;&amp;#x4E4B;&amp;#x540E;&amp;#x4F1A;&amp;#x505A;&amp;#x4E00;&amp;#x4E9B;&amp;#x5904;&amp;#x7406;&amp;#x5DE5;&amp;#x4F5C;&amp;#x3002;Constructor/Destructor&amp;#x7684;&amp;#x597D;&amp;#x5904;&amp;#x662F;&amp;#x63D0;&amp;#x4F9B;&amp;#x4E86;&amp;#x7EE7;&amp;#x627F;&amp;#x3002;setUp/tearDown&amp;#x7684;&amp;#x597D;&amp;#x5904;&amp;#x662F;&amp;#x53EF;&amp;#x4EE5;&amp;#x5904;&amp;#x7406;exception&amp;#xFF0C;&amp;#x8FD9;&amp;#x662F;&amp;#x4E0D;&amp;#x80FD;&amp;#x653E;&amp;#x5728;&amp;#x6790;&amp;#x6784;&amp;#x51FD;&amp;#x6570;&amp;#x91CC;&amp;#x7684;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;SetUpTestCase / TearDownTestCase&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Test Case&amp;#x7EA7;&amp;#x522B;&amp;#x7684;SetUp/TearDown&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; FooTest : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; ::testing::Test &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;protected&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Per-test-case set-up.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Called before the first test in this test case.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Can be omitted if not needed.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUpTestCase&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    shared_resource_ = &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;new&lt;/span&gt; ...;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Per-test-case tear-down.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Called after the last test in this test case.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Can be omitted if not needed.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDownTestCase&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;delete&lt;/span&gt; shared_resource_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    shared_resource_ = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// You can define per-test set-up and tear-down logic as usual.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUp&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDown&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Some expensive resource shared by all tests.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;static&lt;/span&gt; T* shared_resource_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;SetUp/TearDown Environment&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;First, you subclass the ::testing::Environment class to define a test environment, which knows how to set-up and tear-down:&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Then, you register an instance of your environment class with Google Test by calling the &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;::testing::AddGlobalTestEnvironment()&lt;/code&gt; function: &lt;br&gt;Now, when RUN_ALL_TESTS() is called, it first calls the SetUp() method of the environment object, then runs the tests if there was no fatal failures, and finally calls TearDown() of the environment object.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;It&amp;#x2019;s OK to register multiple environment objects. In this case, their SetUp() will be called in the order they are registered, and their TearDown() will be called in the reverse order.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Note that Google Test takes ownership of the registered environment objects. Therefore do not delete them by yourself.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; Environment &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;virtual&lt;/span&gt; ~Environment() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Override this to define how to set up the environment.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUp&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Override this to define how to tear down the environment.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDown&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Environment* &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;AddGlobalTestEnvironment&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(Environment* env)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x65AD;&amp;#x8A00;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6709;&amp;#x4E24;&amp;#x79CD;&amp;#x65AD;&amp;#x8A00;EXPECT_xxx&amp;#x548C;ASSERT_xxx&amp;#x3002;&amp;#x524D;&amp;#x8005;&amp;#x4F1A;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7EC8;&amp;#x6B62;&amp;#xFF0C;&amp;#x540E;&amp;#x8005;&amp;#x4E0D;&amp;#x4F1A;&amp;#xFF0C;&amp;#x53EA;&amp;#x4F1A;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;fail&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;gmock&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E4B;&amp;#x6240;&amp;#x4EE5;&amp;#x8981;&amp;#x5207;&amp;#x5230;gtest&amp;#xFF0C;&amp;#x552F;&amp;#x4E00;&amp;#x7684;&amp;#x539F;&amp;#x56E0;&amp;#x5C31;&amp;#x662F;gmock&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x8981;&amp;#x4E13;&amp;#x5F00;&amp;#x4E00;&amp;#x7AE0;&amp;#x91CD;&amp;#x70B9;&amp;#x4ECB;&amp;#x7ECD;&amp;#x4E00;&amp;#x4E0B;&amp;#x3002;&amp;#x6240;&amp;#x6709;&amp;#x5185;&amp;#x5BB9;&amp;#x5747;&amp;#x6765;&amp;#x81EA;&amp;#x4E8E;&amp;#x5B98;&amp;#x65B9;&amp;#x6587;&amp;#x6863;&amp;#x3002;&amp;#x5185;&amp;#x5BB9;&amp;#x6DF1;&amp;#x5EA6;&amp;#x7531;&amp;#x6D45;&amp;#x5165;&amp;#x6DF1;&amp;#xFF0C;&amp;#x4F9D;&amp;#x6B21;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Google Mock for Dummies&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/CookBook.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;CookBook&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6700;&amp;#x540E;&amp;#x8FD8;&amp;#x6709;&amp;#x53C2;&amp;#x8003;&amp;#x624B;&amp;#x518C;:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/CheatSheet.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x7B80;&amp;#x4ECB;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Google C++ Mocking Framework (or Google Mock for short) is a library (sometimes we also call it a &amp;#x201C;framework&amp;#x201D; to make it sound cool) for creating mock classes and using them. It does to C++ what jMock and EasyMock do to Java.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4F55;&amp;#x4E3A;Mock&amp;#xFF1F;&lt;/h4&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Mocks&lt;/strong&gt; are objects pre-programmed with expectations, which form a specification of the calls they are expected to receive.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x76F8;&amp;#x5E94;&amp;#x7684;&amp;#x8FD8;&amp;#x6709;Fake&amp;#x548C;Stub&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Fake&lt;/strong&gt; objects have working implementations, but usually take some shortcut (perhaps to make the operations less expensive), which makes them not suitable for production. An in-memory file system would be an example of a fake.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gmock&amp;#x7684;&amp;#x6587;&amp;#x6863;&amp;#x91CC;&amp;#x53EA;&amp;#x63D0;&amp;#x5230;&amp;#x4E86;Fake&amp;#xFF0C;&amp;#x4ECE;Martin Fowler&amp;#x7684;&amp;#x6587;&amp;#x7AE0;&lt;a href=&#34;https://martinfowler.com/articles/mocksArentStubs.html&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Mocks Aren&amp;#x2019;t Stubs&lt;/a&gt;&amp;#x4E2D;&amp;#x6458;&amp;#x5F55;&amp;#x5982;&amp;#x4E0B;:&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Stubs&lt;/strong&gt; provide canned answers to calls made during the test, usually not responding at all to anything outside what&amp;#x2019;s programmed in for the test.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E09;&amp;#x8005;&amp;#x4F5C;&amp;#x7528;&amp;#x76F8;&amp;#x540C;&amp;#xFF0C;&amp;#x90FD;&amp;#x662F;&amp;#x6A21;&amp;#x62DF;&amp;#x7CFB;&amp;#x7EDF;&amp;#x5176;&amp;#x4ED6;&amp;#x90E8;&amp;#x5206;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#xFF0C;&amp;#x8FBE;&amp;#x5230;&amp;#x4EE3;&amp;#x7801;&amp;#x9694;&amp;#x79BB;&amp;#x7684;&amp;#x6548;&amp;#x679C;&amp;#xFF0C;&amp;#x65B9;&amp;#x4FBF;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;&amp;#x4F46;&amp;#x662F;Mock&amp;#x7684;&amp;#x7279;&amp;#x70B9;&amp;#x662F;&amp;#x66F4;OO&amp;#x5316;&amp;#xFF0C;&amp;#x4E5F;&amp;#x7B26;&amp;#x5408;TDD&amp;#x6216;&amp;#x8005;BDD&amp;#x7684;&amp;#x601D;&amp;#x60F3;&amp;#x2014;&amp;#x2014;&amp;#x9488;&amp;#x5BF9;&amp;#x4E00;&amp;#x4E2A;object&amp;#x8BBE;&amp;#x7F6E;&amp;#x671F;&amp;#x5F85;&amp;#xFF0C;&amp;#x518D;&amp;#x5BF9;&amp;#x9F50;verify&amp;#x3002;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Mocks vs. Stubs - from Martin Fowler&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;In order to use state verification on the stub, I need to make some extra methods on the stub to help with verification. As a result the stub implements MailService but adds extra test methods.&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Mock objects always use behavior verification, a stub can go either way. Meszaros refers to stubs that use behavior verification as a Test Spy. The difference is in how exactly the double runs and verifies and I&amp;#x2019;ll leave that for you to explore on your own.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Getting Started&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Class to Mock&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Turtle&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;virtual&lt;/span&gt; ~Turtle() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;PenUp&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;PenDown&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Forward&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; distance&lt;/span&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Mock class&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Brings in Google Mock.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockTurtle : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; Turtle &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  MOCK_METHOD0(PenUp, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  MOCK_METHOD0(PenDown, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  MOCK_METHOD1(Forward, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; distance));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x9488;&amp;#x5BF9;&amp;#x5F85;Mock&amp;#x7684;Turtle class&amp;#x8981;&amp;#x6CE8;&amp;#x610F;&amp;#x7684;&amp;#x662F;:&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Note that the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;destructor of Turtle must be virtual&lt;/strong&gt;, as is the case for all classes you intend to inherit from - otherwise the destructor of the derived class will not be called when you delete an object through a base pointer, and you&amp;#x2019;ll get corrupted program states like memory leaks.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Use it&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;path/to/mock-turtle.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gtest/gtest.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::AtLeast;                     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #1&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;TEST(PainterTest, CanDrawSomething) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  MockTurtle turtle;                          &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #2&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  EXPECT_CALL(turtle, PenDown())              &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #3&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;      .Times(AtLeast(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Painter &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;painter&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&amp;amp;turtle)&lt;/span&gt;&lt;/span&gt;;                   &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #4&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  EXPECT_TRUE(painter.DrawCircle(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;                                             &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #5&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;char&lt;/span&gt;** argv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// The following line must be executed to initialize Google Mock&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// (and Google Test) before running the tests.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  ::testing::InitGoogleMock(&amp;amp;argc, argv);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; RUN_ALL_TESTS();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x613F;&amp;#x610F;&amp;#x7684;&amp;#x8BDD;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x81EA;&amp;#x5DF1;&amp;#x5199;main&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x60F3;&amp;#x5077;&amp;#x61D2;&amp;#xFF0C;&amp;#x8BB0;&amp;#x5F97;&amp;#x5728;Makefile&amp;#x91CC;link gmock_main&amp;#x3002; &lt;br&gt;&amp;#x6309;Google&amp;#x7684;&amp;#x8BF4;&amp;#x6CD5;&amp;#xFF0C;gmock&amp;#x4E5F;&amp;#x53EF;&amp;#x4EE5;&amp;#x548C;&amp;#x5176;&amp;#x4ED6;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6846;&amp;#x67B6;&amp;#x517C;&amp;#x5BB9;&amp;#xFF0C;&amp;#x4F46;&amp;#x603B;&amp;#x611F;&amp;#x89C9;&amp;#x633A;&amp;#x60AC;&amp;#x7684;&amp;#x3002;&lt;/p&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4E00;&amp;#x4E9B;&amp;#x6709;&amp;#x7528;&amp;#x7684;&amp;#x5DE5;&amp;#x5177;&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Marcher&lt;/strong&gt; &lt;br&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;EXPECT_CALL(turtle, Forward(_));&lt;/code&gt; &lt;br&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0; &amp;#x4EE5;&amp;#x4EFB;&amp;#x610F;&amp;#x53C2;&amp;#x6570;&amp;#x8C03;&amp;#x7528;Forward &lt;br&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;EXPECT_CALL(turtle, Forward(Ge(100)));&lt;/code&gt; &lt;br&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0; &amp;#x4EE5;&amp;#x5927;&amp;#x4E8E;100&amp;#x7684;&amp;#x6574;&amp;#x6570;&amp;#x8C03;&amp;#x7528;Forward&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Cardinalities: How Many Times Will It Be Called?&lt;/strong&gt;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If neither WillOnce() nor WillRepeatedly() is in the EXPECT_CALL(), the inferred cardinality is Times(1).&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If there are n WillOnce()&amp;#x2019;s but no WillRepeatedly(), where n &amp;gt;= 1, the cardinality is Times(n).&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If there are n WillOnce()&amp;#x2019;s and one WillRepeatedly(), where n &amp;gt;= 0, the cardinality is Times(AtLeast(n)).&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mockObj, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .Times(AtLeast(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;123&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillRepeatedly(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;456&lt;/span&gt;))&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0A;&amp;#x9762;&amp;#x8FD9;&amp;#x6BB5;&amp;#x4EE3;&amp;#x7801;&amp;#x8981;&amp;#x6C42;func&amp;#x51FD;&amp;#x6570;&amp;#x81F3;&amp;#x5C11;&amp;#x8FD0;&amp;#x884C;&amp;#x4E00;&amp;#x6B21;&amp;#xFF0C;&amp;#x7B2C;&amp;#x4E00;&amp;#x6B21;&amp;#x8FD4;&amp;#x56DE;123&amp;#xFF0C;&amp;#x4E4B;&amp;#x540E;&amp;#x6BCF;&amp;#x6B21;&amp;#x8FD4;&amp;#x56DE;456&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Important note&lt;/strong&gt;: The EXPECT_CALL() statement evaluates the action clause only once, even though the action may be performed many times. Therefore you must be careful about side effects. The following may not do what you want:&lt;/p&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;n&lt;/span&gt; = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;.Times(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;4&lt;/span&gt;)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;.WillRepeatedly(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;n&lt;/span&gt;++));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x56E0;&amp;#x4E3A;Return&amp;#x662F;&amp;#x5B8F;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x53EA;&amp;#x4F1A;&amp;#x66FF;&amp;#x6362;&amp;#x4E00;&amp;#x6B21;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x4E0D;&amp;#x7BA1;GetX&amp;#x8C03;&amp;#x7528;&amp;#x51E0;&amp;#x6B21;&amp;#xFF0C;&amp;#x8FD4;&amp;#x56DE;&amp;#x90FD;&amp;#x662F;101&amp;#xFF0C;&amp;#x800C;&amp;#x4E0D;&amp;#x662F;101,102,103,&amp;#x2026;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;All Expectations Are Sticky&lt;/strong&gt; &lt;br&gt;&amp;#x6240;&amp;#x8C13;&amp;#x7684;sticky&amp;#x5C31;&amp;#x662F;EXPECT_CALL&amp;#x603B;&amp;#x662F;&amp;#x751F;&amp;#x6548;&amp;#x7684;&amp;#xFF0C;&amp;#x9664;&amp;#x975E;&amp;#x4F60;&amp;#x663E;&amp;#x793A;&amp;#x7684;&amp;#x5C06;&amp;#x5176;&amp;#x5931;&amp;#x6548;&amp;#x3002;&amp;#x5982;&amp;#x4E0B;&amp;#xFF0C;&amp;#x6240;&amp;#x6709;&amp;#x7684;EXPECT_CALL&amp;#x90FD;&amp;#x4F1A;&amp;#x751F;&amp;#x6548;&amp;#xFF0C;&amp;#x90A3;&amp;#x4E48;&amp;#x6700;&amp;#x540E;&amp;#x4E00;&amp;#x4E2A;&amp;#x4F1A;&amp;#x8986;&amp;#x76D6;&amp;#x524D;&amp;#x9762;&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;GetX&amp;#x603B;&amp;#x4F1A;&amp;#x8FD4;&amp;#x56DE;10&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = n; i &amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;      &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x5E0C;&amp;#x671B;&amp;#x4ED6;&amp;#x8FD4;&amp;#x56DE;&amp;#xFF0C;30,20,10&amp;#xFF0C;&amp;#x2026;&amp;#xFF0C;&amp;#x5E94;&amp;#x8BE5;&amp;#x8FD9;&amp;#x4E48;&amp;#x5199;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = n; i &amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.RetiresOnSaturation&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;RetireOnSaturation&lt;/code&gt;&amp;#x5C31;&amp;#x662F;&amp;#x663E;&amp;#x793A;&amp;#x7684;&amp;#x8BA9;&amp;#x5176;&amp;#x5931;&amp;#x6548;&amp;#x3002;&amp;#x8FD8;&amp;#x6709;&amp;#x4E00;&amp;#x4E2A;&amp;#x529E;&amp;#x6CD5;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::InSequence;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;InSequence&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;s&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.RetiresOnSaturation&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x56E0;&amp;#x4E3A;InSequence&amp;#x7684;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x5728;&amp;#x524D;&amp;#x9762;&amp;#x7684;EXPECT_CALL&amp;#x751F;&amp;#x6548;&amp;#x4EE5;&amp;#x540E;&amp;#xFF0C;&amp;#x5C31;&amp;#x4F1A;&amp;#x81EA;&amp;#x52A8;&amp;#x5931;&amp;#x6548;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x4E0D;&amp;#x4F1A;&amp;#x4EA7;&amp;#x751F;&amp;#x8986;&amp;#x76D6;&amp;#x7684;&amp;#x6548;&amp;#x679C;&amp;#x3002; &lt;br&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Ordered vs Unordered Calls&lt;/strong&gt;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::InSequence;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;TEST&lt;/span&gt;(FooTest, DrawsLineSegment) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;InSequence&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;dummy&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, PenDown());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, Forward(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, PenUp());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;Foo&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Expecting Partially Ordered Calls&lt;/strong&gt; &lt;br&gt;Google Mock allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to &lt;br&gt;use the After clause of EXPECT_CALL .&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;using ::testing::Sequence&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;Sequence &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s1&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s2&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(foo, A())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s1, &lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s2&lt;/span&gt;)&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bar, &lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;B())&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s1);&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bar, &lt;/span&gt;C())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s2);&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(foo, D())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s2);&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;specifies the following DAG (where s1 is A -&amp;gt; B , and s2 is A -&amp;gt; C -&amp;gt; D ):&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;B&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;D&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Uninteresting Calls&lt;/strong&gt; &lt;br&gt;&amp;#x8FD9;&amp;#x662F;gmock&amp;#x62A5;&amp;#x7684;warning&amp;#x3002;&amp;#x5F53;&amp;#x9488;&amp;#x5BF9;&amp;#x67D0;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F85;&amp;#x6D4B;&amp;#x51FD;&amp;#x6570;&amp;#x8BBE;&amp;#x7F6E;&amp;#x4E86;EXPECT spec&amp;#xFF0C;&amp;#x5374;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x8C03;&amp;#x7528;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5C31;&amp;#x4F1A;&amp;#x62A5;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#x3002;&amp;#x6B64;&amp;#x65F6;gmock&amp;#x8BA4;&amp;#x4E3A;&amp;#x4F60;&amp;#x5BF9;&amp;#x8BE5;&amp;#x51FD;&amp;#x6570;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x5174;&amp;#x8DA3;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x5C31;&amp;#x4E0D;&amp;#x9700;&amp;#x8981;&amp;#x8FD9;&amp;#x4E2A;EXPECT spec&amp;#x3002;&amp;#x5F53;&amp;#x7136;&amp;#x4F60;&amp;#x53EF;&amp;#x4EE5;&amp;#x9009;&amp;#x62E9;&amp;#x5FFD;&amp;#x7565;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#xFF0C;&amp;#x4F46;&amp;#x6211;&amp;#x8BA4;&amp;#x4E3A;&amp;#x51FA;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x591A;&amp;#x534A;&amp;#x662F;test&amp;#x6F0F;&amp;#x5199;&amp;#x4E86;&amp;#x4EC0;&amp;#x4E48;&amp;#x3002;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Returning Live Values from Mock Methods&lt;/strong&gt;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;using&lt;/span&gt; testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ByRef&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;using&lt;/span&gt; testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Return&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MockFoo&lt;/span&gt; : public &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    public:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MOCK_METHOD0&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;int&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;int x = 0;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MockFoo&lt;/span&gt; foo;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_CALL&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;foo&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    // .&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;WillRepeatedly&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ByRef(x)&lt;/span&gt;)); &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;X&lt;/span&gt; error&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;WillRepeatedly&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ReturnPointee(x)&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;x = 42;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(42, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;foo&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;());&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4E00;&amp;#x4E9B;&amp;#x6D4B;&amp;#x8BD5;case&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5199;Unit Test&amp;#x5E76;&amp;#x4E0D;&amp;#x50CF;&amp;#x60F3;&amp;#x50CF;&amp;#x7684;&amp;#x90A3;&amp;#x4E48;&amp;#x7B80;&amp;#x5355;&amp;#xFF0C;&amp;#x5E76;&amp;#x4E0D;&amp;#x662F;&amp;#x8C03;&amp;#x7528;&amp;#x4E86;&amp;#x6846;&amp;#x67B6;&amp;#xFF0C;&amp;#x9488;&amp;#x5BF9;&amp;#x6BCF;&amp;#x4E2A;&amp;#x51FD;&amp;#x6570;&amp;#x5199;test case&amp;#x5C31;&amp;#x53EF;&amp;#x4EE5;&amp;#x3002;&amp;#x6309;&amp;#x6211;&amp;#x76EE;&amp;#x524D;&amp;#x7684;&amp;#x7406;&amp;#x89E3;&amp;#x6709;&amp;#x4EE5;&amp;#x4E0B;&amp;#x51E0;&amp;#x79CD;&amp;#x6311;&amp;#x6218;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;Test Case&amp;#x5982;&amp;#x4F55;&amp;#x89E3;&amp;#x8026;&amp;#x3002;&amp;#x4E0D;&amp;#x8981;&amp;#x6709;&amp;#x91CD;&amp;#x590D;&amp;#x6D4B;&amp;#x8BD5;(overlap)&amp;#x3002; &lt;br&gt;&amp;#x4F8B;&amp;#x5982;&amp;#xFF1A;&amp;#x5728;&amp;#x5199;A&amp;#x51FD;&amp;#x6570;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5199;&amp;#x4E86;&amp;#x6D4B;&amp;#x8BD5;testA&amp;#xFF0C;B&amp;#x51FD;&amp;#x6570;&amp;#x4F1A;&amp;#x8C03;&amp;#x7528;A&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x90A3;&amp;#x4E48;&amp;#x5728;&amp;#x5199;&amp;#x5B8C;A&amp;#x4E4B;&amp;#x540E;&amp;#x5199;B&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;testB&amp;#x65F6;&amp;#xFF0C;&amp;#x662F;&amp;#x5426;&amp;#x8981;&amp;#x5C06;A mock/fake/stub&amp;#x6389;? &amp;#x5982;&amp;#x679C;&amp;#x4E0D;&amp;#x5C06;A&amp;#x51FD;&amp;#x6570;Fake&amp;#x6389;&amp;#xFF0C;&amp;#x5219;testA&amp;#x548C;testB&amp;#x4E4B;&amp;#x95F4;&amp;#x5C31;&amp;#x662F;&amp;#x6709;overlap&amp;#x3002;&amp;#x6211;&amp;#x8BA4;&amp;#x4E3A;&amp;#x8FD9;&amp;#x4E4B;&amp;#x95F4;&amp;#x53EF;&amp;#x4EE5;&amp;#x6709;&amp;#x53D6;&amp;#x820D;&amp;#xFF0C;&amp;#x6700;&amp;#x4F73;&amp;#x72B6;&amp;#x6001;&amp;#x5E94;&amp;#x5F53;&amp;#x662F;&amp;#x6B64;&amp;#x65F6;&amp;#xFF0C;&amp;#x5C06;testA&amp;#x5220;&amp;#x9664;&amp;#xFF0C;&amp;#x53EA;&amp;#x4FDD;&amp;#x7559;testB&amp;#x3002;&amp;#x4F46;&amp;#x4ECD;&amp;#x5E94;&amp;#x6839;&amp;#x636E;&amp;#x5177;&amp;#x4F53;&amp;#x60C5;&amp;#x51B5;&amp;#x800C;&amp;#x5B9A;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x4F55;&amp;#x9488;&amp;#x5BF9;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#x8FDB;&amp;#x884C;mock&amp;#x5316;&amp;#x3002; &lt;br&gt;&amp;#x4F8B;&amp;#x5982;&amp;#x51FA;&amp;#x73B0;&amp;#x8FD9;&amp;#x6837;&amp;#x7684;&amp;#x8BED;&amp;#x53E5;: &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;B = new A&lt;/code&gt;&amp;#xFF0C;&amp;#x5219;&amp;#x7C7B;B&amp;#x4F9D;&amp;#x8D56;&amp;#x4E8E;&amp;#x7C7B;A&amp;#x3002;&amp;#x4F46;&amp;#x7C7B;A&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x5FC5;&amp;#x8981;&amp;#x7F16;&amp;#x8BD1;&amp;#x8FDB;test&amp;#x3002;&amp;#x56E0;&amp;#x4E3A;&amp;#x4E00;&amp;#x65E6;&amp;#x52A0;&amp;#x5165;A&amp;#xFF0C;&amp;#x5219;&amp;#x52BF;&amp;#x5FC5;&amp;#x4F1A;&amp;#x5F15;&amp;#x5165;&amp;#x66F4;&amp;#x591A;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x800C;&amp;#x5BFC;&amp;#x81F4;test&amp;#x7F16;&amp;#x8BD1;&amp;#x5D29;&amp;#x6E83;&amp;#x3002;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x65E0;&amp;#x7A77;&amp;#x65E0;&amp;#x5C3D;&amp;#x3002;&amp;#x5728;&amp;#x505A;Android&amp;#x7684;&amp;#x5355;&amp;#x5143;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x7528;PowerMock&amp;#x53D6;&amp;#x4EE3;Mockito&amp;#x6765;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x5C06;&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;Fake&amp;#x5316;&amp;#x6210;&amp;#x7C7B;&amp;#x4F3C;&amp;#x5DE5;&amp;#x5382;&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x8FD4;&amp;#x56DE;&amp;#x7C7B;&amp;#x5B9E;&amp;#x4F8B;&amp;#x3002;&amp;#x5177;&amp;#x4F53;&amp;#x53C2;&amp;#x770B;&amp;#x8FD9;&amp;#x7BC7;&amp;#x535A;&amp;#x6587;&lt;a href=&#34;https://zhougy0717.github.io/2016/10/19/Android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Android&amp;#x5355;&amp;#x5143;&amp;#x6D4B;&amp;#x8BD5;&lt;/a&gt;&amp;#x3002; &lt;br&gt;&amp;#x4F46;&amp;#x5B9E;&amp;#x9645;&amp;#x4E0A;&amp;#xFF0C;&amp;#x6309;&amp;#x7167;&amp;#x73B0;&amp;#x5728;&amp;#x7684;&amp;#x7406;&amp;#x89E3;&amp;#xFF0C;&amp;#x5176;&amp;#x5B9E;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x662F;&amp;#x4E0D;&amp;#x53EF;&amp;#x53D6;&amp;#x7684;&amp;#xFF0C;&amp;#x9996;&amp;#x5148;&amp;#x9020;&amp;#x6210;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;spec&amp;#x4E0D;&amp;#x6E05;&amp;#x6670;&amp;#xFF0C;&amp;#x8BD5;&amp;#x60F3;&amp;#x4E00;&amp;#x4E2A;&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x600E;&amp;#x4E48;&amp;#x4F1A;&amp;#x8FD4;&amp;#x56DE;&amp;#x53E6;&amp;#x4E00;&amp;#x4E2A;&amp;#x7C7B;&amp;#x7684;&amp;#x5B9E;&amp;#x4F8B;&amp;#x3002;&amp;#x5176;&amp;#x6B21;&amp;#xFF0C;&amp;#x5728;C++&amp;#x4E2D;&amp;#x5F88;&amp;#x96BE;&amp;#x505A;&amp;#x5230;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x3002;&amp;#x597D;&amp;#x7684;&amp;#x505A;&amp;#x6CD5;&amp;#x5E94;&amp;#x5F53;&amp;#x662F;&amp;#x8FD0;&amp;#x7528;Dependency Injection&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#xFF1A;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;A&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;B&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        A* a = &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;new&lt;/span&gt; A;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7C7B;B&amp;#x5E94;&amp;#x5F53;&amp;#x6539;&amp;#x5199;&amp;#x4E3A;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e; font-style: italic;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    void &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(A*)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5C06;&amp;#x7C7B;A&amp;#x6307;&amp;#x9488;&amp;#x4F20;&amp;#x5165;&amp;#xFF0C;&amp;#x89E3;&amp;#x51B3;dependency&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x3002;&lt;/p&gt;&lt;ol start=&#34;3&#34; style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x4F55;&amp;#x80FD;&amp;#x591F;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x5728;&amp;#x4EFB;&amp;#x610F;&amp;#x73AF;&amp;#x5883;&amp;#x4E0B;&amp;#x5747;&amp;#x8FD4;&amp;#x56DE;&amp;#x540C;&amp;#x6837;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7ED3;&amp;#x679C;&amp;#x3002; &lt;br&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x4E00;&amp;#x822C;&amp;#x6D89;&amp;#x53CA;&amp;#x6D4B;&amp;#x8BD5;&amp;#x73AF;&amp;#x5883;&amp;#x7684;&amp;#x5F71;&amp;#x54CD;&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#x8C03;&amp;#x7528;&amp;#x7F51;&amp;#x7EDC;&amp;#x76F8;&amp;#x5173;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#xFF0C;&amp;#x5728;&amp;#x6CA1;&amp;#x6709;&amp;#x7F51;&amp;#x7EDC;&amp;#x7684;&amp;#x73AF;&amp;#x5883;&amp;#x5C31;&amp;#x6CA1;&amp;#x6CD5;&amp;#x8FDB;&amp;#x884C;&amp;#x3002;&amp;#x518D;&amp;#x4F8B;&amp;#x5982;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#x64CD;&amp;#x4F5C;&amp;#x771F;&amp;#x5B9E;&amp;#x5177;&amp;#x4F53;&amp;#x6587;&amp;#x4EF6;&amp;#xFF0C;&amp;#x5219;&amp;#x8BE5;&amp;#x6587;&amp;#x4EF6;&amp;#x88AB;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5916;&amp;#x4EBA;&amp;#x4E3A;&amp;#x6216;&amp;#x4EE3;&amp;#x7801;&amp;#x4FEE;&amp;#x6539;&amp;#xFF0C;&amp;#x5219;&amp;#x6D4B;&amp;#x8BD5;&amp;#x53EF;&amp;#x80FD;&amp;#x5C31;&amp;#x4F1A;&amp;#x83AB;&amp;#x540D;&amp;#x5931;&amp;#x8D25;&amp;#x3002; &lt;br&gt;&amp;#x9488;&amp;#x5BF9;&amp;#x8FD9;&amp;#x4E9B;&amp;#x60C5;&amp;#x51B5;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x5E94;&amp;#x5F53;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E2D;&amp;#x5C3D;&amp;#x91CF;&amp;#x907F;&amp;#x514D;&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#x524D;&amp;#x8005;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x5E94;&amp;#x5F53;&amp;#x5BF9;&amp;#x7F51;&amp;#x7EDC;&amp;#x63A5;&amp;#x53E3;&amp;#x8FDB;&amp;#x884C;Mock&amp;#x5316;&amp;#xFF0C;&amp;#x540E;&amp;#x8005;&amp;#x5E94;&amp;#x5F53;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7684;setUp&amp;#x548C;tearDown&amp;#x4E2D;&amp;#x751F;&amp;#x6210;&amp;#x865A;&amp;#x5047;&amp;#x6587;&amp;#x4EF6;&amp;#x7528;&amp;#x4E8E;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x5E76;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5B8C;&amp;#x6210;&amp;#x65F6;&amp;#x505A;&amp;#x6E05;&amp;#x7406;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x4F1A;&amp;#x56E0;&amp;#x4E3A;&amp;#x5F88;&amp;#x5C0F;&amp;#x7684;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;&amp;#x6539;&amp;#x52A8;&amp;#xFF0C;&amp;#x800C;&amp;#x5BFC;&amp;#x81F4;&amp;#x5927;&amp;#x9762;&amp;#x79EF;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5931;&amp;#x8D25;&amp;#xFF0C;&amp;#x751A;&amp;#x81F3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5D29;&amp;#x6E83;&amp;#x3002; &lt;br&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5C31;&amp;#x662F;gmock&amp;#x6587;&amp;#x6863;&amp;#x4E2D;&amp;#x63D0;&amp;#x5230;&amp;#x7684;&amp;#x8981;&amp;#x9488;&amp;#x5BF9;&amp;#x63A5;&amp;#x53E3;&amp;#x7F16;&amp;#x7A0B;&amp;#xFF0C;&amp;#x9488;&amp;#x5BF9;&amp;#x63A5;&amp;#x53E3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;Robert C&amp;#xB7;Martin&amp;#x5728;&amp;#x300A;&amp;#x654F;&amp;#x6377;&amp;#x8F6F;&amp;#x4EF6;&amp;#x5F00;&amp;#x53D1;&amp;#xFF0D;&amp;#x539F;&amp;#x5219;&amp;#x3001;&amp;#x6A21;&amp;#x5F0F;&amp;#x4E0E;&amp;#x5B9E;&amp;#x8DF5;&amp;#x300B;&amp;#x4E00;&amp;#x4E66;&amp;#x4E2D;&amp;#x6709;&amp;#x63D0;&amp;#x51FA;&amp;#xFF1A;&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x90FD;&amp;#x5E94;&amp;#x4F9D;&amp;#x8D56;&amp;#x4E8E;&amp;#x62BD;&amp;#x8C61;&amp;#x63A5;&amp;#x53E3;&amp;#x3002;&amp;#x56E0;&amp;#x4E3A;&amp;#x62BD;&amp;#x8C61;&amp;#x63A5;&amp;#x53E3;&amp;#x662F;&amp;#x7ECF;&amp;#x8FC7;&amp;#x62BD;&amp;#x8C61;&amp;#x7684;&amp;#xFF0C;&amp;#x76F8;&amp;#x5BF9;&amp;#x5177;&amp;#x4F53;&amp;#x7684;&amp;#x5B9E;&amp;#x73B0;&amp;#x4EE3;&amp;#x7801;&amp;#x8F83;&amp;#x4E3A;&amp;#x7A33;&amp;#x5B9A;&amp;#x3002;&amp;#x800C;&amp;#x88AB;&amp;#x4F9D;&amp;#x8D56;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x5E94;&amp;#x8BE5;&amp;#x5C3D;&amp;#x53EF;&amp;#x80FD;&amp;#x4FDD;&amp;#x6301;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x8FD9;&amp;#x6837;&amp;#x57FA;&amp;#x4E8E;&amp;#x4E4B;&amp;#x4E0A;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x624D;&amp;#x4E0D;&amp;#x4F1A;&amp;#x56E0;&amp;#x4E3A;&amp;#x4F9D;&amp;#x8D56;&amp;#x7684;&amp;#x6539;&amp;#x52A8;&amp;#x800C;&amp;#x6539;&amp;#x52A8;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0B;&amp;#x9762;&amp;#x5217;&amp;#x51FA;&amp;#x51E0;&amp;#x79CD;&amp;#x6211;&amp;#x5728;&amp;#x5B9E;&amp;#x9645;&amp;#x5199;test case&amp;#x65F6;&amp;#x9047;&amp;#x5230;&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#xFF0C;&amp;#x5728;gmock&amp;#x4E2D;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x65B9;&amp;#x6848;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x6309;&amp;#x7167;&amp;#x51FD;&amp;#x6570;&amp;#x53C2;&amp;#x6570;&amp;#x8FD4;&amp;#x56DE;&amp;#x7ED3;&amp;#x679C; - Fake&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F8B;&amp;#x5982;:&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;class A&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    virtual &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;EXPECT_CALL&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(mockA, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;func&lt;/span&gt;()&lt;/span&gt;)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;WillRepeatedly&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(a+b)&lt;/span&gt;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gmock&amp;#x4E2D;&amp;#x53EF;&amp;#x4EE5;&amp;#x8FD9;&amp;#x6837;&amp;#x505A;&amp;#xFF1A;Using Functions/Methods/Functors as Actions&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Invoke;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockFoo : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; Foo &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    MOCK_METHOD2(Sum, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; y));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    MOCK_METHOD1(ComplexJob, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bool&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; x));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;CalculateSum&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; x + y; &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; Helper &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;ComplexJob&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;MockFoo foo;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;Helper helper;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(foo, Sum(_, _))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(Invoke(CalculateSum));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(foo, ComplexJob(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(Invoke(&amp;amp;helper, &amp;amp;Helper::ComplexJob));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;foo.Sum(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Invokes CalculateSum(5, 6).&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;foo.ComplexJob(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Invokes helper.ComplexJob(10);&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mock non-virtual&amp;#x51FD;&amp;#x6570;&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// A simple packet stream class. None of its members is virtual.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; ConcretePacketStream &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;AppendPacket&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(Packet* new_packet)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt; Packet* &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;GetPacket&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;size_t&lt;/span&gt; packet_number)&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt; NumberOfPackets() &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// A mock packet stream class. It inherits from no other, but defines&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// GetPacket() and NumberOfPackets().&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockPacketStream &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        MOCK_CONST_METHOD1(GetPacket, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt; Packet*(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt; packet_number));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        MOCK_CONST_METHOD0(NumberOfPackets, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketStream&amp;gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;CreateConnection&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(PacketStream* stream)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketStream&amp;gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketReader &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;ReadPackets&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(PacketStream* stream, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;size_t&lt;/span&gt; packet_num)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;MockPacketStream mock_stream;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mock_stream, ...)...;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;.. &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;set&lt;/span&gt; more expectations on mock_stream ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;PacketReader&amp;lt;MockPacketStream&amp;gt; reader(&amp;amp;mock_stream);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;... exercise reader ...&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E3A;&amp;#x4EC0;&amp;#x4E48;&amp;#x8981;&amp;#x8FD9;&amp;#x4E48;&amp;#x505A;&amp;#xFF1F; &lt;br&gt;&amp;#x56E0;&amp;#x4E3A;&amp;#x53EA;&amp;#x80FD;&amp;#x8FD9;&amp;#x4E48;&amp;#x505A;&amp;#x3002;&amp;#x666E;&amp;#x901A;&amp;#x7684;mock&amp;#xFF0C;&amp;#x8981;&amp;#x901A;&amp;#x8FC7;&amp;#x7EE7;&amp;#x627F;&amp;#x88AB;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7C7B;&amp;#xFF0C;&amp;#x5E76;&amp;#x91CD;&amp;#x5199;virtual&amp;#x51FD;&amp;#x6570;&amp;#x6765;&amp;#x5B9E;&amp;#x73B0;&amp;#x3002;&amp;#x800C;&amp;#x4E0A;&amp;#x9762;&amp;#x7684;ConcretePacketStream&amp;#x548C;MockPacketStream&amp;#x5E76;&amp;#x4EFB;&amp;#x4F55;&amp;#x6CA1;&amp;#x6709;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;&amp;#x8BF4;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F20;&amp;#x5165;&amp;#x540E;&amp;#x8005;&amp;#x7684;&amp;#x6307;&amp;#x9488;&amp;#xFF0C;&amp;#x4E0D;&amp;#x7528;reinterpret_cast&amp;#x662F;&amp;#x4E0D;&amp;#x80FD;&amp;#x8F6C;&amp;#x6210;&amp;#x524D;&amp;#x8005;&amp;#x7684;&amp;#x6307;&amp;#x9488;&amp;#x7684;&amp;#x3002; &lt;br&gt;&amp;#x6240;&amp;#x4EE5;&amp;#x60F3;&amp;#x4E00;&amp;#x4E2A;&amp;#x53D8;&amp;#x901A;&amp;#x7684;&amp;#x529E;&amp;#x6CD5;&amp;#xFF0C;&amp;#x7528;&amp;#x6A21;&amp;#x677F;&amp;#x7C7B;&amp;#x6765;&amp;#x5B9A;&amp;#x4E49;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;&amp;#xFF0C;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#x4F20;&amp;#x5165;mock&amp;#x7C7B;&amp;#xFF0C;&amp;#x5728;&amp;#x751F;&amp;#x4EA7;&amp;#x65F6;&amp;#xFF0C;&amp;#x4F20;&amp;#x5165;&amp;#x771F;&amp;#x5B9E;&amp;#x7C7B;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mocking Side Effects&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mutator, MutateInt(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(DoAll(SetArgPointee&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;), Return(true)));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mutator, Mutate(NotNull(), &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(SetArrayArgument&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(values, values + &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7B2C;&amp;#x4E00;&amp;#x4E2A;&amp;#x5C06;MutateInt&amp;#x7B2C;&amp;#x4E00;&amp;#x4E2A;&amp;#x53C2;&amp;#x6570;&amp;#x6307;&amp;#x9488;&amp;#x6307;&amp;#x5411;&amp;#x7684;int&amp;#xFF0C;&amp;#x8BBE;&amp;#x4E3A;5&amp;#xFF0C;&amp;#x5E76;&amp;#x8FD4;&amp;#x56DE;true&amp;#x3002; &lt;br&gt;&amp;#x7B2C;&amp;#x4E8C;&amp;#x4E2A;&amp;#x5C06;values&amp;#x6570;&amp;#x7EC4;&amp;#x7684;[0,5)&amp;#x62F7;&amp;#x8D1D;&amp;#x5230;&amp;#x53C2;&amp;#x6570;1&amp;#x6307;&amp;#x5411;&amp;#x7684;&amp;#x5730;&amp;#x5740;&amp;#x3002; &lt;br&gt;&amp;#x5982;&amp;#x679C;&amp;#x4ECD;&amp;#x9700;&amp;#x8981;&amp;#x8FD4;&amp;#x56DE;&amp;#xFF0C;&amp;#x5219;&amp;#x7528;DoAll&amp;#xFF0C;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mutator, MutateInt(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;      .WillOnce(DoAll(SetArgPointee&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;),&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;                      &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;true&lt;/span&gt;)));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Selecting an Action&amp;#x2019;s Arguments&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Invoke;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;MyIsVisibleInQuadrant1&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; visible, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;string&lt;/span&gt;&amp;amp; name, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; y,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;map&lt;/span&gt;&amp;lt;pair&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;&amp;gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt;&amp;gt;&amp;amp; weight,&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt; min_weight, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt; max_wight) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; IsVisibleInQuadrant1(visible, x, y);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;.&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;..&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(Invoke(MyIsVisibleInQuadrant1)); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Now it works.&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5B9A;&amp;#x4E49;&amp;#x81EA;&amp;#x5DF1;&amp;#x7684;adaptor MyIsVisibleInQuadrant1&amp;#xFF0C;&amp;#x6216;&amp;#x8005;&amp;#x7528;gmock&amp;#x63D0;&amp;#x4F9B;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x4F18;&amp;#x96C5;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:Invoke;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:WithArgs;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mock, Foo(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;.WillOnce(WithArgs&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;3&lt;/span&gt;&amp;gt;(Invoke(IsVisibleInQuadrant1)));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// No need to define your own adaptor.&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mocking Private or Protected Methods&lt;/h4&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Transform&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;Gadget* g&lt;/span&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;protected&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Resume&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;private&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;GetTimeOut&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;MockFoo&lt;/span&gt; : &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        MOCK_METHOD1(Transform, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bool&lt;/span&gt;(Gadget* g));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// The following must be in the public section, even though the&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// methods are protected or private in the base class.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        MOCK_METHOD0(Resume, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        MOCK_METHOD0(GetTimeOut, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;C++ allows a subclass to specify a different access level than the base class on a virtual function.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Misc&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Keep in mind that one doesn&amp;#x2019;t have to verify more than one property in one test. In fact, it&amp;#x2019;s a good style to verify only one &lt;br&gt;thing in one test. If you do that, a bug will likely break only one or two tests instead of dozens&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;When it&amp;#x2019;s being destroyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, &lt;br&gt;and will generate Google Test failures if not. &lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Currently these are only platforms that support the pthreads library (this includes Linux and Mac). &lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x52A0;&amp;#x4E0A;&amp;#x547D;&amp;#x4EE4;&amp;#x884C;&amp;#x53C2;&amp;#x6570;&amp;#x2013;gmock_verbose=info&amp;#x53EF;&amp;#x4EE5;&amp;#x663E;&amp;#x793A;&amp;#x6240;&amp;#x6709;EXPECT_CALL&amp;#x7684;&amp;#x5177;&amp;#x4F53;&amp;#x8C03;&amp;#x7528;&amp;#x60C5;&amp;#x51B5;&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;Some useful tips in gtest&lt;/h2&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Selecting Tests&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;If you set the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;GTEST_FILTER&lt;/strong&gt; environment variable or the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x2013;gtest_filter&lt;/strong&gt; flag to a filter string, Google Test will only run the tests whose full names (in the form of TestCaseName.TestName) match the filter. &lt;br&gt;The format of a filter is a &amp;#x2018;:&amp;#x2019;-separated list of wildcard patterns (called the positive patterns) optionally followed by a &amp;#x2018;-&amp;#x2019; and another &amp;#x2018;:&amp;#x2019;-separated pattern list (called the negative patterns).&lt;/p&gt;&lt;/blockquote&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test Has no flag, and thus runs all its tests.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=* Also runs everything, due to the single match-everything * value.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=FooTest.* Runs everything in test case FooTest.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=&lt;em style=&#34;line-height: 1.6;&#34;&gt;Null&lt;/em&gt;:&lt;em style=&#34;line-height: 1.6;&#34;&gt;Constructor&lt;/em&gt; Runs any test whose full name contains either &amp;#x201C;Null&amp;#x201D; or &amp;#x201C;Constructor&amp;#x201D;.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=-&lt;em style=&#34;line-height: 1.6;&#34;&gt;DeathTest.&lt;/em&gt; Runs all non-death tests.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=FooTest.*-FooTest.Bar Runs everything in test case FooTest except FooTest.Bar&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Temporarily Disabling Tests&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Tests that Foo does Abc.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;TEST(FooTest, DISABLED_DoesAbc) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; DISABLED_BarTest : public ::testing::Test &amp;#123; ... &amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Tests that Bar does Xyz.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;TEST_F(DISABLED_BarTest, DoesXyz) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Temporarily Enabling Disabled Tests&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;just invoke the test program with the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x2013;gtest_also_run_disabled_tests&lt;/strong&gt; flag or set the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;GTEST_ALSO_RUN_DISABLED_TESTS&lt;/strong&gt; environment variable to a value other than 0.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Repeating the Tests&lt;/h3&gt;&lt;table style=&#34;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&#34;&gt;&lt;thead style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=1000&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat foo_test 1000 times and don&amp;#x2019;t stop at failures.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=-1&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;A negative count means repeating forever.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=1000 &amp;#x2013;gtest_break_on_failure&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat foo_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;$ foo_test &amp;#x2013;gtest_repeat=1000 &amp;#x2013;gtest_filter=FooBar&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat the tests whose name matches the filter 1000 times.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;center style=&#34;display:none&#34;&gt;%23%20C/C++%20Test%20Framework%20-%20Google%20Test%20%26%20Google%20Mock%0A@%28myblog%29%5BTDD%2C%20gtest%2C%20gmock%5D%0A%0AGoogle%20Test%uFF0CGoogle%20Mock%u4EE5%u4E0B%u7B80%u79F0gtest%uFF0Cgmock%u3002%0A%u5728%u63A5%u89E6gtest%uFF0Cgmock%u4E4B%u524D%uFF0C%u6D4B%u8BD5C/C++%20code%u4F7F%u7528%5BUnitTest++%5D%28https%3A//github.com/unittest-cpp/unittest-cpp%29%u3002%u8FD9%u662F%u4E00%u4E2A%u5F88%u7B80%u6D01%u7684%u6846%u67B6%uFF0C%u4E0A%u624B%u5F88%u5FEB%u3002%u53C2%u770B%u53E6%u4E00%u7BC7%u535A%u6587%5BUnitTest++%u7B80%u4ECB%5D%28https%3A//zhougy0717.github.io/2016/02/29/UnitTest++%25E7%25AE%2580%25E4%25BB%258B/%29%u3002%u6D4B%u8BD5%u76F8%u5173%u7684%u529F%u80FD%u591F%u7528%uFF0C%u4F46%u662F%u6CA1%u6709mock%u5E93%u3002%u8FD9%u5E26%u6765%u7684%u95EE%u9898%u662F%uFF1A%0A1.%20%u6D4B%u8BD5%u9057%u7559%u4EE3%u7801%u7684%u65F6%u5019%uFF0C%u9700%u8981%u81EA%u884Cfake%u76F8%u5173%u4EE3%u7801%u3002%u8FD9%u4E2A%u5728%u9057%u7559%u7CFB%u7EDF%u5F88%u5E9E%u5927%u65F6%uFF0C%u8981%u9887%u8D39%u5FC3%u529B%u3002%u800C%u4E14%u8FC7%u591A%u6D89%u53CA%u7EC6%u8282%uFF0C%u5BFC%u81F4%u6D4B%u8BD5%u6781%u4E0D%u7A33%u5B9A%uFF0C%u7CFB%u7EDF%u4EE3%u7801%u4EFB%u610F%u7684%u6F14%u8FDB%uFF0C%u90FD%u4F1A%u5BFC%u81F4%u5927%u5806%u7684%u6D4B%u8BD5%u5931%u8D25%uFF0C%u751A%u81F3%u6D4B%u8BD5%u65E0%u6CD5%u8FDB%u884C%u3002%0A2.%20%u6D4B%u8BD5case%u4E4B%u95F4%u65E0%u6CD5%u5F88%u597D%u7684%u89E3%u8026%u3002%u7ED3%u679C%u540C%u6837%u662F%u6D4B%u8BD5%u4E0D%u591F%u7A33%u5B9A%u3002%u672F%u8BED%u662F%u6D4B%u8BD5%u4EE3%u7801%u5F88%u201C%u8106%u5F31%u201D%u3002%0A%0AJava%uFF0CPython%uFF0CJavaScript%u90FD%u6709%u81EA%u5DF1%u7684mock%u5E93%u3002Python%u7684Mock%u7C7B%uFF0CJava%u7684Mockito/PowerMock%uFF0CJavaScript%u7684Sinon%u3002%u4E8E%u662F%uFF0C%u5728%u7F51%u4E0A%u641C%u7D22%u4E86%u4E00%u4E0BC/C++%u7684Mock%u5E93%uFF0C%u4E8E%u662F%u770B%u5230%u4E86gtest%uFF0Cgmock%u3002%u7136%u540E%u5C31%u6709%u4E86%u8FD9%u4E00%u7BC7%u3002%0A%0A%23%23%20%u7B80%u4ECB%0A%u4E0D%u7528%u53BB%u7F51%u4E0A%u8D39%u5FC3%u627E%u6559%u7A0B%uFF0C%u4E24%u4E2A%u9879%u76EE%u7684%u6587%u6863%u90FD%u975E%u5E38%u68D2%u3002%u5165%u53E3%u7EDF%u4E00%u5728%5Bgtest%20GitHub%u9879%u76EE%u4E3B%u9875%5D%28https%3A//github.com/google/googletest%29%u4E0A%u3002%u800C%u4E14%u8BE5%u6587%u6863%u4E0D%u4EC5%u5F88%u597D%u7684%u4ECB%u7ECD%u4E86gtest%uFF0Cgmock%u7684%u7528%u6CD5%uFF0C%u5176%u4E2D%u8FD8%u6D89%u53CA%u4E86%u5F88%u591ATDD%u6216%u8005UnitTest%u7684%u771F%u77E5%u707C%u89C1%uFF0C%u5F88%u503C%u5F97%u8BFB%u4E00%u8BFB%u3002%0A%u8981%u4F7F%u7528gtest%u975E%u5E38%u7B80%u5355%uFF1A%u7F16%u8BD1%u51FAgtest%uFF0Cgmock%uFF0C%u518D%u94FE%u5165%u4F60%u7684%u6D4B%u8BD5%u7A0B%u5E8F%u3002%0A%0A%23%23%23%20%u7F16%u8BD1gtest/gmock%0Agtest%uFF0Cgmock%u5747%u7528cmake%u6765%u7BA1%u7406%u8DE8%u5E73%u53F0%uFF0C%u5148%u7528cmake%u6765%u751F%u6210Makefile%u3002%u7528%u547D%u4EE4%60cmake%20-G%20%22Unix%20Makefiles%22%20/path/to/CMakeList.txt%60%0A%0A%23%23%23%20Makefile%0A%u7136%u540E%u6309%u7167%u4E0B%u9762%u7F16%u5199Makefile%u3002%u6CE8%u610Fgmock_main%u662F%u4E00%u4E2Amain%u51FD%u6570%u6765%u8C03%u7528%u6240%u6709%u7684test%20case%uFF0C%u7701%u5F97%u81EA%u5DF1%u5199main%u51FD%u6570%u4E86%u3002%0A%60%60%60%0ACC%20%3D%20gcc%0ACPP%20%3D%20g++%0ALINK%20%3D%20g++%0ACFLAGS%20%3D%20-g%20-Wall%20-Werror%20-Wextra%20-std%3Dgnu99%0ACPPFLAGS%20%3D%20-g%20-Wall%20-Werror%20-Wextra%0ALIBS%20%3D%20-L./lib%20-lgtest%20-lgmock%20-lgmock_main%20-lpthread%0A%0AC__SOURCES%20%3D%20%24%28wildcard%20*.c%29%0ACPPSOURCES%20%3D%20%24%28wildcard%20*.cpp%29%0AOBJECTS%20%3D%20%24%28patsubst%20%25.c%2C%20%25.o%2C%20%24%28C__SOURCES%29%29%20%24%28patsubst%20%25.cpp%2C%20%25.o%2C%20%24%28CPPSOURCES%29%29%0ATARGET%20%3D%20test_exe%0A%0Afirst%3A%20all%0A%0A%25.o%3A%20%25.c%0A%20%20%20%20%24%28CC%29%20%24%28INCLUDES%29%20-c%20%24%28CFLAGS%29%20-o%20%24@%20%24%3C%0A%0A%25.o%3A%20%25.cpp%0A%20%20%20%20%24%28CPP%29%20%24%28INCLUDES%29%20-c%20%24%28CPPFLAGS%29%20-o%20%24@%20%24%3C%0A%0Aall%3A%20%24%28TARGET%29%0A%0A%24%28TARGET%29%3A%20%24%28OBJECTS%29%0A%20%20%20%20%24%28LINK%29%20%24%28CPPFLAGS%29%20%24%28LIBS%29%20-o%20%24%28TARGET%29%20%24%28OBJECTS%29%0A%0A.PHONY%20%3A%20clean%0A%0Aclean%3A%0A%20%20%20%20rm%20-f%20%24%28TARGET%29%20%24%28OBJECTS%29%0A%60%60%60%0A%0A%23%23%23%20Terms%0A%7C%20Meaning%20%20%20%20%7C%20Google%20Test%20Term%20%7C%20ISTQB%20Term%20%7C%0A%7C%20%3A--------%3A%20%7C%20%3A--------------%3A%20%7C%20%3A--------%3A%20%7C%0A%7C%20Exercise%20a%20particular%20program%20path%20with%20specific%20input%20values%20and%20verify%20the%20results%20%7C%20TEST%28%29%20%7C%20Test%20Case%0A%7CA%20set%20of%20several%20tests%20related%20to%20one%20component%20%7C%20Test%20Case%20%7C%20Test%20Suite%0A%0A%23%23%23%20Test%0A%60%60%60%0A%23include%20%22gtest/gtest.h%22%0A%23include%20%22gmock/gmock.h%22%0A%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0Ausing%20%3A%3Atesting%3A%3ATest%3B%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AAtLeast%3B%0A%0ATEST%28TestCaseName%2C%20should_this_test_do%29%0A%7B%0A%09...%0A%20%20%20%20EXPECT_STREQ%28%22%7B%7D%22%2C%20str%29%3B%0A%7D%0A%60%60%60%0A%u4E2D%u95F4%u7684%u90A3%u5806namespace%u90FD%u662Fgtest/gmock%u5E93%u91CC%u5B9A%u4E49%u7684matcher%u5B8F%u6216%u8005%u5404%u79CD%u6709%u7528%u7684%u5B8F%u3002%0A%0A%23%23%23%20Test%20Fixture%0A%u5728%u6D4B%u8BD5%u6709%u91CD%u590D%u7684%u65F6%u5019%uFF0C%u5C31%u8981%u7528%u5230Test%20Fixture%u4E86%uFF0C%u4E5F%u5C31%u662FsetUp%20/%20tearDown%u3002%0A%60%60%60%0Aclass%20QueueTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%0A%20protected%3A%0A%20%20virtual%20void%20SetUp%28%29%20%7B%0A%20%20%20%20q1_.Enqueue%281%29%3B%0A%20%20%20%20q2_.Enqueue%282%29%3B%0A%20%20%20%20q2_.Enqueue%283%29%3B%0A%20%20%7D%0A%0A%20%20//%20virtual%20void%20TearDown%28%29%20%7B%7D%0A%0A%20%20Queue%3Cint%3E%20q0_%3B%0A%20%20Queue%3Cint%3E%20q1_%3B%0A%20%20Queue%3Cint%3E%20q2_%3B%0A%7D%3B%0A%0ATEST_F%28QueueTest%2C%20IsEmptyInitially%29%20%7B%0A%20%20EXPECT_EQ%280%2C%20q0_.size%28%29%29%3B%0A%7D%0A%0ATEST_F%28QueueTest%2C%20DequeueWorks%29%20%7B%0A%20%20int*%20n%20%3D%20q0_.Dequeue%28%29%3B%0A%20%20EXPECT_EQ%28NULL%2C%20n%29%3B%0A%0A%20%20n%20%3D%20q1_.Dequeue%28%29%3B%0A%20%20ASSERT_TRUE%28n%20%21%3D%20NULL%29%3B%0A%20%20EXPECT_EQ%281%2C%20*n%29%3B%0A%20%20EXPECT_EQ%280%2C%20q1_.size%28%29%29%3B%0A%20%20delete%20n%3B%0A%0A%20%20n%20%3D%20q2_.Dequeue%28%29%3B%0A%20%20ASSERT_TRUE%28n%20%21%3D%20NULL%29%3B%0A%20%20EXPECT_EQ%282%2C%20*n%29%3B%0A%20%20EXPECT_EQ%281%2C%20q2_.size%28%29%29%3B%0A%20%20delete%20n%3B%0A%7D%0A%60%60%60%0A%23%23%23%23%20constructor/destructor%20vs.%20SetUp/TearDown%0A%3EWhen%20you%20need%20to%20write%20per-test%20set-up%20and%20tear-down%20logic%2C%20you%20have%20the%20choice%20between%20using%20the%20test%20fixture%20constructor/destructor%20or%20SetUp%28%29/TearDown%28%29.%20The%20former%20is%20usually%20preferred%2C%20as%20it%20has%20the%20following%20benefits%3A%0A%0A%3E-%20By%20initializing%20a%20member%20variable%20in%20the%20constructor%2C%20we%20have%20the%20option%20to%20make%20it%20const%2C%20which%20helps%20prevent%20accidental%20changes%20to%20its%20value%20and%20makes%20the%20tests%20more%20obviously%20correct.%0A-%20**In%20case%20we%20need%20to%20subclass%20the%20test%20fixture%20class%2C%20the%20subclass%27%20constructor%20is%20guaranteed%20to%20call%20the%20base%20class%27%20constructor%20first%2C%20and%20the%20subclass%27%20destructor%20is%20guaranteed%20to%20call%20the%20base%20class%27%20destructor%20afterward.%20**With%20SetUp%28%29/TearDown%28%29%2C%20a%20subclass%20may%20make%20the%20mistake%20of%20forgetting%20to%20call%20the%20base%20class%27%20SetUp%28%29/TearDown%28%29%20or%20call%20them%20at%20the%20wrong%20moment.%0A%0A%3E%20Benefit%20for%20using%20SetUp/TearDown%3A%0A%0A%3E-%20If%20the%20tear-down%20operation%20could%20throw%20an%20exception%2C%20you%20must%20use%20TearDown%28%29%20as%20opposed%20to%20the%20destructor%2C%20as%20throwing%20in%20a%20destructor%20leads%20to%20undefined%20behavior%20and%20usually%20will%20kill%20your%20program%20right%20away.%20Note%20that%20many%20standard%20libraries%20%28like%20STL%29%20may%20throw%20when%20exceptions%20are%20enabled%20in%20the%20compiler.%20Therefore%20you%20should%20prefer%20TearDown%28%29%20if%20you%20want%20to%20write%20portable%20tests%20that%20work%20with%20or%20without%20exceptions.%0A-%20The%20assertion%20macros%20throw%20an%20exception%20when%20flag%20--gtest_throw_on_failure%20is%20specified.%20Therefore%2C%20you%20shouldn%27t%20use%20Google%20Test%20assertions%20in%20a%20destructor%20if%20you%20plan%20to%20run%20your%20tests%20with%20this%20flag.%0A-%20In%20a%20constructor%20or%20destructor%2C%20you%20cannot%20make%20a%20virtual%20function%20call%20on%20this%20object.%20%28You%20can%20call%20a%20method%20declared%20as%20virtual%2C%20but%20it%20will%20be%20statically%20bound.%29%20Therefore%2C%20if%20you%20need%20to%20call%20a%20method%20that%20will%20be%20overriden%20in%20a%20derived%20class%2C%20you%20have%20to%20use%20SetUp%28%29/TearDown%28%29.%0A%0A%u7B80%u8A00%u4E4B%uFF0C%u5728%u903B%u8F91%u4E0A%uFF0C%u8FD9%u4E24%u7EC4%u7684%u4F5C%u7528%u76F8%u540C%uFF0C%u90FD%u662F%u6BCF%u4E2A%u6D4B%u8BD5%u4E4B%u524D%u4E4B%u540E%u4F1A%u505A%u4E00%u4E9B%u5904%u7406%u5DE5%u4F5C%u3002Constructor/Destructor%u7684%u597D%u5904%u662F%u63D0%u4F9B%u4E86%u7EE7%u627F%u3002setUp/tearDown%u7684%u597D%u5904%u662F%u53EF%u4EE5%u5904%u7406exception%uFF0C%u8FD9%u662F%u4E0D%u80FD%u653E%u5728%u6790%u6784%u51FD%u6570%u91CC%u7684%u3002%0A%23%23%23%20SetUpTestCase%20/%20TearDownTestCase%0ATest%20Case%u7EA7%u522B%u7684SetUp/TearDown%0A%60%60%60%0Aclass%20FooTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%0A%20protected%3A%0A%20%20//%20Per-test-case%20set-up.%0A%20%20//%20Called%20before%20the%20first%20test%20in%20this%20test%20case.%0A%20%20//%20Can%20be%20omitted%20if%20not%20needed.%0A%20%20static%20void%20SetUpTestCase%28%29%20%7B%0A%20%20%20%20shared_resource_%20%3D%20new%20...%3B%0A%20%20%7D%0A%0A%20%20//%20Per-test-case%20tear-down.%0A%20%20//%20Called%20after%20the%20last%20test%20in%20this%20test%20case.%0A%20%20//%20Can%20be%20omitted%20if%20not%20needed.%0A%20%20static%20void%20TearDownTestCase%28%29%20%7B%0A%20%20%20%20delete%20shared_resource_%3B%0A%20%20%20%20shared_resource_%20%3D%20NULL%3B%0A%20%20%7D%0A%0A%20%20//%20You%20can%20define%20per-test%20set-up%20and%20tear-down%20logic%20as%20usual.%0A%20%20virtual%20void%20SetUp%28%29%20%7B%20...%20%7D%0A%20%20virtual%20void%20TearDown%28%29%20%7B%20...%20%7D%0A%0A%20%20//%20Some%20expensive%20resource%20shared%20by%20all%20tests.%0A%20%20static%20T*%20shared_resource_%3B%0A%7D%3B%0A%60%60%60%0A%23%23%23%20SetUp/TearDown%20Environment%20%0A%3E-%20First%2C%20you%20subclass%20the%20%3A%3Atesting%3A%3AEnvironment%20class%20to%20define%20a%20test%20environment%2C%20which%20knows%20how%20to%20set-up%20and%20tear-down%3A%0A%3E-%20Then%2C%20you%20register%20an%20instance%20of%20your%20environment%20class%20with%20Google%20Test%20by%20calling%20the%20%60%3A%3Atesting%3A%3AAddGlobalTestEnvironment%28%29%60%20function%3A%0A%3ENow%2C%20when%20RUN_ALL_TESTS%28%29%20is%20called%2C%20it%20first%20calls%20the%20SetUp%28%29%20method%20of%20the%20environment%20object%2C%20then%20runs%20the%20tests%20if%20there%20was%20no%20fatal%20failures%2C%20and%20finally%20calls%20TearDown%28%29%20of%20the%20environment%20object.%0A-%20It%27s%20OK%20to%20register%20multiple%20environment%20objects.%20In%20this%20case%2C%20their%20SetUp%28%29%20will%20be%20called%20in%20the%20order%20they%20are%20registered%2C%20and%20their%20TearDown%28%29%20will%20be%20called%20in%20the%20reverse%20order.%0A-%20Note%20that%20Google%20Test%20takes%20ownership%20of%20the%20registered%20environment%20objects.%20Therefore%20do%20not%20delete%20them%20by%20yourself.%0A%0A%60%60%60%0Aclass%20Environment%20%7B%0A%20public%3A%0A%20%20virtual%20%7EEnvironment%28%29%20%7B%7D%0A%20%20//%20Override%20this%20to%20define%20how%20to%20set%20up%20the%20environment.%0A%20%20virtual%20void%20SetUp%28%29%20%7B%7D%0A%20%20//%20Override%20this%20to%20define%20how%20to%20tear%20down%20the%20environment.%0A%20%20virtual%20void%20TearDown%28%29%20%7B%7D%0A%7D%3B%0A%0AEnvironment*%20AddGlobalTestEnvironment%28Environment*%20env%29%3B%0A%60%60%60%0A%23%23%23%20%u65AD%u8A00%0A%u6709%u4E24%u79CD%u65AD%u8A00EXPECT%5C_xxx%u548CASSERT%5C_xxx%u3002%u524D%u8005%u4F1A%u8BA9%u6D4B%u8BD5%u7EC8%u6B62%uFF0C%u540E%u8005%u4E0D%u4F1A%uFF0C%u53EA%u4F1A%u8BA9%u6D4B%u8BD5fail%u3002%0A%0A%0A%23%23%20gmock%0A%u4E4B%u6240%u4EE5%u8981%u5207%u5230gtest%uFF0C%u552F%u4E00%u7684%u539F%u56E0%u5C31%u662Fgmock%uFF0C%u6240%u4EE5%u8981%u4E13%u5F00%u4E00%u7AE0%u91CD%u70B9%u4ECB%u7ECD%u4E00%u4E0B%u3002%u6240%u6709%u5185%u5BB9%u5747%u6765%u81EA%u4E8E%u5B98%u65B9%u6587%u6863%u3002%u5185%u5BB9%u6DF1%u5EA6%u7531%u6D45%u5165%u6DF1%uFF0C%u4F9D%u6B21%u5982%u4E0B%uFF1A%0A-%20%5BGoogle%20Mock%20for%20Dummies%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md%29%0A-%20%5BCookBook%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/CookBook.md%29%0A%0A%u6700%u540E%u8FD8%u6709%u53C2%u8003%u624B%u518C%3A%0A-%20%5BCheat%20Sheet%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/CheatSheet.md%29%0A%0A%23%23%23%20%u7B80%u4ECB%0A%3EGoogle%20C++%20Mocking%20Framework%20%28or%20Google%20Mock%20for%20short%29%20is%20a%20library%20%28sometimes%20we%20also%20call%20it%20a%20%22framework%22%20to%20make%20it%20sound%20cool%29%20for%20creating%20mock%20classes%20and%20using%20them.%20It%20does%20to%20C++%20what%20jMock%20and%20EasyMock%20do%20to%20Java.%0A%0A%23%23%23%23%20%u4F55%u4E3AMock%uFF1F%0A%3E**Mocks**%20are%20objects%20pre-programmed%20with%20expectations%2C%20which%20form%20a%20specification%20of%20the%20calls%20they%20are%20expected%20to%20receive.%0A%0A%u76F8%u5E94%u7684%u8FD8%u6709Fake%u548CStub%0A%3E**Fake**%20objects%20have%20working%20implementations%2C%20but%20usually%20take%20some%20shortcut%20%28perhaps%20to%20make%20the%20operations%20less%20expensive%29%2C%20which%20makes%20them%20not%20suitable%20for%20production.%20An%20in-memory%20file%20system%20would%20be%20an%20example%20of%20a%20fake.%0A%0Agmock%u7684%u6587%u6863%u91CC%u53EA%u63D0%u5230%u4E86Fake%uFF0C%u4ECEMartin%20Fowler%u7684%u6587%u7AE0%5BMocks%20Aren%27t%20Stubs%5D%28https%3A//martinfowler.com/articles/mocksArentStubs.html%29%u4E2D%u6458%u5F55%u5982%u4E0B%3A%0A%3E**Stubs**%20provide%20canned%20answers%20to%20calls%20made%20during%20the%20test%2C%20usually%20not%20responding%20at%20all%20to%20anything%20outside%20what%27s%20programmed%20in%20for%20the%20test.%0A%0A%u4E09%u8005%u4F5C%u7528%u76F8%u540C%uFF0C%u90FD%u662F%u6A21%u62DF%u7CFB%u7EDF%u5176%u4ED6%u90E8%u5206%u7684%u529F%u80FD%uFF0C%u8FBE%u5230%u4EE3%u7801%u9694%u79BB%u7684%u6548%u679C%uFF0C%u65B9%u4FBF%u6D4B%u8BD5%u3002%u4F46%u662FMock%u7684%u7279%u70B9%u662F%u66F4OO%u5316%uFF0C%u4E5F%u7B26%u5408TDD%u6216%u8005BDD%u7684%u601D%u60F3%u2014%u2014%u9488%u5BF9%u4E00%u4E2Aobject%u8BBE%u7F6E%u671F%u5F85%uFF0C%u518D%u5BF9%u9F50verify%u3002%0A%0AMocks%20vs.%20Stubs%20-%20from%20Martin%20Fowler%0A%3EIn%20order%20to%20use%20state%20verification%20on%20the%20stub%2C%20I%20need%20to%20make%20some%20extra%20methods%20on%20the%20stub%20to%20help%20with%20verification.%20As%20a%20result%20the%20stub%20implements%20MailService%20but%20adds%20extra%20test%20methods.%0A%0A%3EMock%20objects%20always%20use%20behavior%20verification%2C%20a%20stub%20can%20go%20either%20way.%20Meszaros%20refers%20to%20stubs%20that%20use%20behavior%20verification%20as%20a%20Test%20Spy.%20The%20difference%20is%20in%20how%20exactly%20the%20double%20runs%20and%20verifies%20and%20I%27ll%20leave%20that%20for%20you%20to%20explore%20on%20your%20own.%0A%0A%23%23%23%23%20Getting%20Started%0AClass%20to%20Mock%0A%60%60%60%0Aclass%20Turtle%20%7B%0A%20%20...%0A%20%20virtual%20%7ETurtle%28%29%20%7B%7D%0A%20%20virtual%20void%20PenUp%28%29%20%3D%200%3B%0A%20%20virtual%20void%20PenDown%28%29%20%3D%200%3B%0A%20%20virtual%20void%20Forward%28int%20distance%29%20%3D%200%3B%0A%7D%3B%0A%60%60%60%0AMock%20class%0A%60%60%60%0A%23include%20%22gmock/gmock.h%22%20%20//%20Brings%20in%20Google%20Mock.%0Aclass%20MockTurtle%20%3A%20public%20Turtle%20%7B%0A%20public%3A%0A%20%20...%0A%20%20MOCK_METHOD0%28PenUp%2C%20void%28%29%29%3B%0A%20%20MOCK_METHOD0%28PenDown%2C%20void%28%29%29%3B%0A%20%20MOCK_METHOD1%28Forward%2C%20void%28int%20distance%29%29%3B%0A%7D%3B%0A%60%60%60%0A%u9488%u5BF9%u5F85Mock%u7684Turtle%20class%u8981%u6CE8%u610F%u7684%u662F%3A%0A%3ENote%20that%20the%20**destructor%20of%20Turtle%20must%20be%20virtual**%2C%20as%20is%20the%20case%20for%20all%20classes%20you%20intend%20to%20inherit%20from%20-%20otherwise%20the%20destructor%20of%20the%20derived%20class%20will%20not%20be%20called%20when%20you%20delete%20an%20object%20through%20a%20base%20pointer%2C%20and%20you%27ll%20get%20corrupted%20program%20states%20like%20memory%20leaks.%0A%0AUse%20it%0A%60%60%60%0A%23include%20%22path/to/mock-turtle.h%22%0A%23include%20%22gmock/gmock.h%22%0A%23include%20%22gtest/gtest.h%22%0Ausing%20%3A%3Atesting%3A%3AAtLeast%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%231%0A%0ATEST%28PainterTest%2C%20CanDrawSomething%29%20%7B%0A%20%20MockTurtle%20turtle%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%232%0A%20%20EXPECT_CALL%28turtle%2C%20PenDown%28%29%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%233%0A%20%20%20%20%20%20.Times%28AtLeast%281%29%29%3B%0A%0A%20%20Painter%20painter%28%26turtle%29%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%234%0A%0A%20%20EXPECT_TRUE%28painter.DrawCircle%280%2C%200%2C%2010%29%29%3B%0A%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%235%0A%0Aint%20main%28int%20argc%2C%20char**%20argv%29%20%7B%0A%20%20//%20The%20following%20line%20must%20be%20executed%20to%20initialize%20Google%20Mock%0A%20%20//%20%28and%20Google%20Test%29%20before%20running%20the%20tests.%0A%20%20%3A%3Atesting%3A%3AInitGoogleMock%28%26argc%2C%20argv%29%3B%0A%20%20return%20RUN_ALL_TESTS%28%29%3B%0A%7D%0A%60%60%60%0A%u5982%u679C%u4F60%u613F%u610F%u7684%u8BDD%uFF0C%u53EF%u4EE5%u81EA%u5DF1%u5199main%uFF0C%u5982%u679C%u4F60%u60F3%u5077%u61D2%uFF0C%u8BB0%u5F97%u5728Makefile%u91CClink%20gmock_main%u3002%0A%u6309Google%u7684%u8BF4%u6CD5%uFF0Cgmock%u4E5F%u53EF%u4EE5%u548C%u5176%u4ED6%u6D4B%u8BD5%u6846%u67B6%u517C%u5BB9%uFF0C%u4F46%u603B%u611F%u89C9%u633A%u60AC%u7684%u3002%0A%0A%23%23%23%23%20%u4E00%u4E9B%u6709%u7528%u7684%u5DE5%u5177%0A**Marcher**%0A%60EXPECT_CALL%28turtle%2C%20Forward%28_%29%29%3B%60%0A%26nbsp%3B%26nbsp%3B%26nbsp%3B%26nbsp%3B%20%u4EE5%u4EFB%u610F%u53C2%u6570%u8C03%u7528Forward%0A%60EXPECT_CALL%28turtle%2C%20Forward%28Ge%28100%29%29%29%3B%60%0A%26nbsp%3B%26nbsp%3B%26nbsp%3B%26nbsp%3B%20%u4EE5%u5927%u4E8E100%u7684%u6574%u6570%u8C03%u7528Forward%0A%09%0A**Cardinalities%3A%20How%20Many%20Times%20Will%20It%20Be%20Called%3F**%0A%3E-%20If%20neither%20WillOnce%28%29%20nor%20WillRepeatedly%28%29%20is%20in%20the%20EXPECT_CALL%28%29%2C%20the%20inferred%20cardinality%20is%20Times%281%29.%0A-%20If%20there%20are%20n%20WillOnce%28%29%27s%20but%20no%20WillRepeatedly%28%29%2C%20where%20n%20%3E%3D%201%2C%20the%20cardinality%20is%20Times%28n%29.%0A-%20If%20there%20are%20n%20WillOnce%28%29%27s%20and%20one%20WillRepeatedly%28%29%2C%20where%20n%20%3E%3D%200%2C%20the%20cardinality%20is%20Times%28AtLeast%28n%29%29.%0A%0A%60%60%60%0AEXPECT_CALL%28mockObj%2C%20func%28%29%29%0A%09.Times%28AtLeast%281%29%29%0A%09.WillOnce%28Return%28123%29%29%0A%09.WillRepeatedly%28Return%28456%29%29%0A%60%60%60%0A%u4E0A%u9762%u8FD9%u6BB5%u4EE3%u7801%u8981%u6C42func%u51FD%u6570%u81F3%u5C11%u8FD0%u884C%u4E00%u6B21%uFF0C%u7B2C%u4E00%u6B21%u8FD4%u56DE123%uFF0C%u4E4B%u540E%u6BCF%u6B21%u8FD4%u56DE456%u3002%0A%0A%3E**Important%20note**%3A%20The%20EXPECT_CALL%28%29%20statement%20evaluates%20the%20action%20clause%20only%20once%2C%20even%20though%20the%20action%20may%20be%20performed%20many%20times.%20Therefore%20you%20must%20be%20careful%20about%20side%20effects.%20The%20following%20may%20not%20do%20what%20you%20want%3A%0A%0A%60%60%60%0Aint%20n%20%3D%20100%3B%0AEXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A.Times%284%29%0A.WillRepeatedly%28Return%28n++%29%29%3B%0A%60%60%60%0A%u56E0%u4E3AReturn%u662F%u5B8F%uFF0C%u6240%u4EE5%u53EA%u4F1A%u66FF%u6362%u4E00%u6B21%uFF0C%u6240%u4EE5%u4E0D%u7BA1GetX%u8C03%u7528%u51E0%u6B21%uFF0C%u8FD4%u56DE%u90FD%u662F101%uFF0C%u800C%u4E0D%u662F101%2C102%2C103%2C...%0A%0A**All%20Expectations%20Are%20Sticky**%0A%u6240%u8C13%u7684sticky%u5C31%u662FEXPECT%5C_CALL%u603B%u662F%u751F%u6548%u7684%uFF0C%u9664%u975E%u4F60%u663E%u793A%u7684%u5C06%u5176%u5931%u6548%u3002%u5982%u4E0B%uFF0C%u6240%u6709%u7684EXPECT%5C_CALL%u90FD%u4F1A%u751F%u6548%uFF0C%u90A3%u4E48%u6700%u540E%u4E00%u4E2A%u4F1A%u8986%u76D6%u524D%u9762%u6240%u6709%u7684%uFF0C%u4E5F%u5C31%u662FGetX%u603B%u4F1A%u8FD4%u56DE10%u3002%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0Afor%20%28int%20i%20%3D%20n%3B%20i%20%3E%200%3B%20i--%29%20%7B%0A%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20%20%20.WillOnce%28Return%2810*i%29%29%3B%0A%7D%0A%60%60%60%0A%u5982%u679C%u5E0C%u671B%u4ED6%u8FD4%u56DE%uFF0C30%2C20%2C10%uFF0C...%uFF0C%u5E94%u8BE5%u8FD9%u4E48%u5199%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0Afor%20%28int%20i%20%3D%20n%3B%20i%20%3E%200%3B%20i--%29%20%7B%0A%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20.WillOnce%28Return%2810*i%29%29%0A%20%20%20%20.RetiresOnSaturation%28%29%3B%0A%7D%0A%60%60%60%0A%60RetireOnSaturation%60%u5C31%u662F%u663E%u793A%u7684%u8BA9%u5176%u5931%u6548%u3002%u8FD8%u6709%u4E00%u4E2A%u529E%u6CD5%uFF1A%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AInSequence%3B%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0A%7B%0A%20%20InSequence%20s%3B%0A%0A%20%20for%20%28int%20i%20%3D%201%3B%20i%20%3C%3D%20n%3B%20i++%29%20%7B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20%20%20%20%20.WillOnce%28Return%2810*i%29%29%0A%20%20%20%20%20%20%20%20.RetiresOnSaturation%28%29%3B%0A%20%20%7D%0A%7D%0A%60%60%60%0A%u56E0%u4E3AInSequence%u7684%u5173%u7CFB%uFF0C%u5728%u524D%u9762%u7684EXPECT%5C_CALL%u751F%u6548%u4EE5%u540E%uFF0C%u5C31%u4F1A%u81EA%u52A8%u5931%u6548%uFF0C%u6240%u4EE5%u4E0D%u4F1A%u4EA7%u751F%u8986%u76D6%u7684%u6548%u679C%u3002%0A**Ordered%20vs%20Unordered%20Calls**%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AInSequence%3B...%0ATEST%28FooTest%2C%20DrawsLineSegment%29%20%7B%0A%20%20...%0A%20%20%7B%0A%20%20%20%20InSequence%20dummy%3B%0A%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20PenDown%28%29%29%3B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20Forward%28100%29%29%3B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20PenUp%28%29%29%3B%0A%20%20%7D%0A%20%20Foo%28%29%3B%0A%7D%0A%60%60%60%0A**Expecting%20Partially%20Ordered%20Calls**%0AGoogle%20Mock%20allows%20you%20to%20impose%20an%20arbitrary%20DAG%20%28directed%20acyclic%20graph%29%20on%20the%20calls.%20One%20way%20to%20express%20the%20DAG%20is%20to%0Ause%20the%20After%20clause%20of%20EXPECT_CALL%20.%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3ASequence%3B%0ASequence%20s1%2C%20s2%3B%0AEXPECT_CALL%28foo%2C%20A%28%29%29%0A%09.InSequence%28s1%2C%20s2%29%3B%0AEXPECT_CALL%28bar%2C%20B%28%29%29%0A%09.InSequence%28s1%29%3B%0AEXPECT_CALL%28bar%2C%20C%28%29%29%0A%09.InSequence%28s2%29%3B%0AEXPECT_CALL%28foo%2C%20D%28%29%29%0A%09.InSequence%28s2%29%3B%0A%60%60%60%0Aspecifies%20the%20following%20DAG%20%28where%20s1%20is%20A%20-%3E%20B%20%2C%20and%20s2%20is%20A%20-%3E%20C%20-%3E%20D%20%29%3A%0A%60%60%60%0A%09%20+---%3E%20B%0A%20%20%20%20%20%7C%0AA%20---%7C%0A%09%20%7C%0A%09%20+---%3E%20C%20---%3E%20D%0A%60%60%60%0A**Uninteresting%20Calls**%0A%u8FD9%u662Fgmock%u62A5%u7684warning%u3002%u5F53%u9488%u5BF9%u67D0%u4E00%u4E2A%u5F85%u6D4B%u51FD%u6570%u8BBE%u7F6E%u4E86EXPECT%20spec%uFF0C%u5374%u5E76%u6CA1%u6709%u8C03%u7528%u7684%u65F6%u5019%uFF0C%u5C31%u4F1A%u62A5%u8FD9%u4E2Awarning%u3002%u6B64%u65F6gmock%u8BA4%u4E3A%u4F60%u5BF9%u8BE5%u51FD%u6570%u5E76%u6CA1%u6709%u5174%u8DA3%uFF0C%u6240%u4EE5%u5C31%u4E0D%u9700%u8981%u8FD9%u4E2AEXPECT%20spec%u3002%u5F53%u7136%u4F60%u53EF%u4EE5%u9009%u62E9%u5FFD%u7565%u8FD9%u4E2Awarning%uFF0C%u4F46%u6211%u8BA4%u4E3A%u51FA%u8FD9%u4E2Awarning%u7684%u65F6%u5019%uFF0C%u591A%u534A%u662Ftest%u6F0F%u5199%u4E86%u4EC0%u4E48%u3002%0A%0A**Returning%20Live%20Values%20from%20Mock%20Methods**%0A%60%60%60%0Ausing%20testing%3A%3AByRef%3B%0Ausing%20testing%3A%3AReturn%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0A%09public%3A%0A%09%09MOCK_METHOD0%28GetValue%2C%20int%28%29%29%3B%0A%7D%3B%0A...%0Aint%20x%20%3D%200%3B%0AMockFoo%20foo%3B%0AEXPECT_CALL%28foo%2C%20GetValue%28%29%29%0A%09//%20.WillRepeatedly%28Return%28ByRef%28x%29%29%29%3B%20X%20error%0A%09.WillRepeatedly%28ReturnPointee%28x%29%29%3B%0Ax%20%3D%2042%3B%0AEXPECT_EQ%2842%2C%20foo.GetValue%28%29%29%3B%0A%60%60%60%0A%0A%23%23%23%20%u4E00%u4E9B%u6D4B%u8BD5case%0A%u5199Unit%20Test%u5E76%u4E0D%u50CF%u60F3%u50CF%u7684%u90A3%u4E48%u7B80%u5355%uFF0C%u5E76%u4E0D%u662F%u8C03%u7528%u4E86%u6846%u67B6%uFF0C%u9488%u5BF9%u6BCF%u4E2A%u51FD%u6570%u5199test%20case%u5C31%u53EF%u4EE5%u3002%u6309%u6211%u76EE%u524D%u7684%u7406%u89E3%u6709%u4EE5%u4E0B%u51E0%u79CD%u6311%u6218%uFF1A%0A1.%20Test%20Case%u5982%u4F55%u89E3%u8026%u3002%u4E0D%u8981%u6709%u91CD%u590D%u6D4B%u8BD5%28overlap%29%u3002%0A%u4F8B%u5982%uFF1A%u5728%u5199A%u51FD%u6570%u7684%u65F6%u5019%uFF0C%u5199%u4E86%u6D4B%u8BD5testA%uFF0CB%u51FD%u6570%u4F1A%u8C03%u7528A%u51FD%u6570%uFF0C%u90A3%u4E48%u5728%u5199%u5B8CA%u4E4B%u540E%u5199B%u7684%u6D4B%u8BD5testB%u65F6%uFF0C%u662F%u5426%u8981%u5C06A%20mock/fake/stub%u6389%3F%20%u5982%u679C%u4E0D%u5C06A%u51FD%u6570Fake%u6389%uFF0C%u5219testA%u548CtestB%u4E4B%u95F4%u5C31%u662F%u6709overlap%u3002%u6211%u8BA4%u4E3A%u8FD9%u4E4B%u95F4%u53EF%u4EE5%u6709%u53D6%u820D%uFF0C%u6700%u4F73%u72B6%u6001%u5E94%u5F53%u662F%u6B64%u65F6%uFF0C%u5C06testA%u5220%u9664%uFF0C%u53EA%u4FDD%u7559testB%u3002%u4F46%u4ECD%u5E94%u6839%u636E%u5177%u4F53%u60C5%u51B5%u800C%u5B9A%u3002%0A%0A2.%20%u5982%u4F55%u9488%u5BF9%u4F9D%u8D56%u5173%u7CFB%u8FDB%u884Cmock%u5316%u3002%0A%u4F8B%u5982%u51FA%u73B0%u8FD9%u6837%u7684%u8BED%u53E5%3A%20%60B%20%3D%20new%20A%60%uFF0C%u5219%u7C7BB%u4F9D%u8D56%u4E8E%u7C7BA%u3002%u4F46%u7C7BA%u5E76%u6CA1%u6709%u5FC5%u8981%u7F16%u8BD1%u8FDBtest%u3002%u56E0%u4E3A%u4E00%u65E6%u52A0%u5165A%uFF0C%u5219%u52BF%u5FC5%u4F1A%u5F15%u5165%u66F4%u591A%u4F9D%u8D56%u5173%u7CFB%uFF0C%u800C%u5BFC%u81F4test%u7F16%u8BD1%u5D29%u6E83%u3002%u4F9D%u8D56%u5173%u7CFB%u7684%u89E3%u51B3%u65E0%u7A77%u65E0%u5C3D%u3002%u5728%u505AAndroid%u7684%u5355%u5143%u6D4B%u8BD5%u65F6%uFF0C%u53EF%u4EE5%u7528PowerMock%u53D6%u4EE3Mockito%u6765Mock%u6784%u9020%u51FD%u6570%uFF0C%u5C06%u6784%u9020%u51FD%u6570Fake%u5316%u6210%u7C7B%u4F3C%u5DE5%u5382%u51FD%u6570%uFF0C%u8FD4%u56DE%u7C7B%u5B9E%u4F8B%u3002%u5177%u4F53%u53C2%u770B%u8FD9%u7BC7%u535A%u6587%5BAndroid%u5355%u5143%u6D4B%u8BD5%5D%28https%3A//zhougy0717.github.io/2016/10/19/Android%25E5%258D%2595%25E5%2585%2583%25E6%25B5%258B%25E8%25AF%2595/%29%u3002%0A%u4F46%u5B9E%u9645%u4E0A%uFF0C%u6309%u7167%u73B0%u5728%u7684%u7406%u89E3%uFF0C%u5176%u5B9EMock%u6784%u9020%u51FD%u6570%u662F%u4E0D%u53EF%u53D6%u7684%uFF0C%u9996%u5148%u9020%u6210%u88AB%u6D4B%u4EE3%u7801spec%u4E0D%u6E05%u6670%uFF0C%u8BD5%u60F3%u4E00%u4E2A%u6784%u9020%u51FD%u6570%u600E%u4E48%u4F1A%u8FD4%u56DE%u53E6%u4E00%u4E2A%u7C7B%u7684%u5B9E%u4F8B%u3002%u5176%u6B21%uFF0C%u5728C++%u4E2D%u5F88%u96BE%u505A%u5230Mock%u6784%u9020%u51FD%u6570%u3002%u597D%u7684%u505A%u6CD5%u5E94%u5F53%u662F%u8FD0%u7528Dependency%20Injection%u3002%u4F8B%u5982%uFF1A%0A%60%60%60%0Aclass%20A%20%0A%7B%7D%0A%0Aclass%20B%0A%7B%0A%09void%20func%28%29%0A%09%7B%0A%09%09A*%20a%20%3D%20new%20A%3B%0A%09%7D%0A%7D%0A%60%60%60%0A%u7C7BB%u5E94%u5F53%u6539%u5199%u4E3A%uFF1A%0A%60%60%60%0Aclass%20B%0A%7B%0A%09void%20func%28A*%29%0A%09%7B%0A%09%09...%0A%09%7D%0A%7D%0A%60%60%60%0A%u5C06%u7C7BA%u6307%u9488%u4F20%u5165%uFF0C%u89E3%u51B3dependency%u7684%u95EE%u9898%u3002%0A%0A3.%20%u5982%u4F55%u80FD%u591F%u8BA9%u6D4B%u8BD5%u7A33%u5B9A%uFF0C%u5728%u4EFB%u610F%u73AF%u5883%u4E0B%u5747%u8FD4%u56DE%u540C%u6837%u7684%u6D4B%u8BD5%u7ED3%u679C%u3002%0A%u8FD9%u4E2A%u4E00%u822C%u6D89%u53CA%u6D4B%u8BD5%u73AF%u5883%u7684%u5F71%u54CD%u3002%u4F8B%u5982%u8C03%u7528%u7F51%u7EDC%u76F8%u5173%u7684%u529F%u80FD%uFF0C%u5728%u6CA1%u6709%u7F51%u7EDC%u7684%u73AF%u5883%u5C31%u6CA1%u6CD5%u8FDB%u884C%u3002%u518D%u4F8B%u5982%u6D4B%u8BD5%u65F6%u64CD%u4F5C%u771F%u5B9E%u5177%u4F53%u6587%u4EF6%uFF0C%u5219%u8BE5%u6587%u4EF6%u88AB%u6D4B%u8BD5%u5916%u4EBA%u4E3A%u6216%u4EE3%u7801%u4FEE%u6539%uFF0C%u5219%u6D4B%u8BD5%u53EF%u80FD%u5C31%u4F1A%u83AB%u540D%u5931%u8D25%u3002%0A%u9488%u5BF9%u8FD9%u4E9B%u60C5%u51B5%uFF0C%u6211%u4EEC%u5E94%u5F53%u5728%u6D4B%u8BD5%u4E2D%u5C3D%u91CF%u907F%u514D%u3002%u4F8B%u5982%u524D%u8005%uFF0C%u6211%u4EEC%u5E94%u5F53%u5BF9%u7F51%u7EDC%u63A5%u53E3%u8FDB%u884CMock%u5316%uFF0C%u540E%u8005%u5E94%u5F53%u5728%u6D4B%u8BD5%u7684setUp%u548CtearDown%u4E2D%u751F%u6210%u865A%u5047%u6587%u4EF6%u7528%u4E8E%u6D4B%u8BD5%uFF0C%u5E76%u5728%u6D4B%u8BD5%u5B8C%u6210%u65F6%u505A%u6E05%u7406%u3002%0A%0A4.%20%u4F1A%u56E0%u4E3A%u5F88%u5C0F%u7684%u88AB%u6D4B%u4EE3%u7801%u6539%u52A8%uFF0C%u800C%u5BFC%u81F4%u5927%u9762%u79EF%u6D4B%u8BD5%u5931%u8D25%uFF0C%u751A%u81F3%u6D4B%u8BD5%u5D29%u6E83%u3002%0A%u8FD9%u4E2A%u5C31%u662Fgmock%u6587%u6863%u4E2D%u63D0%u5230%u7684%u8981%u9488%u5BF9%u63A5%u53E3%u7F16%u7A0B%uFF0C%u9488%u5BF9%u63A5%u53E3%u6D4B%u8BD5%u3002Robert%20C%B7Martin%u5728%u300A%u654F%u6377%u8F6F%u4EF6%u5F00%u53D1%uFF0D%u539F%u5219%u3001%u6A21%u5F0F%u4E0E%u5B9E%u8DF5%u300B%u4E00%u4E66%u4E2D%u6709%u63D0%u51FA%uFF1A%u6240%u6709%u7684%u4EE3%u7801%u90FD%u5E94%u4F9D%u8D56%u4E8E%u62BD%u8C61%u63A5%u53E3%u3002%u56E0%u4E3A%u62BD%u8C61%u63A5%u53E3%u662F%u7ECF%u8FC7%u62BD%u8C61%u7684%uFF0C%u76F8%u5BF9%u5177%u4F53%u7684%u5B9E%u73B0%u4EE3%u7801%u8F83%u4E3A%u7A33%u5B9A%u3002%u800C%u88AB%u4F9D%u8D56%u7684%u4EE3%u7801%u5E94%u8BE5%u5C3D%u53EF%u80FD%u4FDD%u6301%u7A33%u5B9A%uFF0C%u8FD9%u6837%u57FA%u4E8E%u4E4B%u4E0A%u7684%u4EE3%u7801%u624D%u4E0D%u4F1A%u56E0%u4E3A%u4F9D%u8D56%u7684%u6539%u52A8%u800C%u6539%u52A8%u3002%0A%0A%u4E0B%u9762%u5217%u51FA%u51E0%u79CD%u6211%u5728%u5B9E%u9645%u5199test%20case%u65F6%u9047%u5230%u7684%u60C5%u51B5%uFF0C%u5728gmock%u4E2D%u7684%u89E3%u51B3%u65B9%u6848%u3002%0A%0A%23%23%23%20%u6309%u7167%u51FD%u6570%u53C2%u6570%u8FD4%u56DE%u7ED3%u679C%20-%20Fake%0A%u4F8B%u5982%3A%0A%60%60%60%0Aclass%20A%0A%7B%0A%09virtual%20int%20func%28int%20a%2C%20int%20b%29%3B%0A%7D%0A%0AEXPECT_CALL%28mockA%2C%20func%28%29%29%0A%09.WillRepeatedly%28a+b%29%3B%0A%60%60%60%0Agmock%u4E2D%u53EF%u4EE5%u8FD9%u6837%u505A%uFF1AUsing%20Functions/Methods/Functors%20as%20Actions%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0Apublic%3A%0A%09MOCK_METHOD2%28Sum%2C%20int%28int%20x%2C%20int%20y%29%29%3B%0A%09MOCK_METHOD1%28ComplexJob%2C%20bool%28int%20x%29%29%3B%0A%7D%3B%0Aint%20CalculateSum%28int%20x%2C%20int%20y%29%20%7B%20return%20x%20+%20y%3B%20%7D%0Aclass%20Helper%20%7B%0Apublic%3A%0A%09bool%20ComplexJob%28int%20x%29%3B%0A%7D%3B%0A...%0AMockFoo%20foo%3B%0AHelper%20helper%3B%0AEXPECT_CALL%28foo%2C%20Sum%28_%2C%20_%29%29%0A%09.WillOnce%28Invoke%28CalculateSum%29%29%3B%0AEXPECT_CALL%28foo%2C%20ComplexJob%28_%29%29%0A%09.WillOnce%28Invoke%28%26helper%2C%20%26Helper%3A%3AComplexJob%29%29%3B%0Afoo.Sum%285%2C%206%29%3B%20//%20Invokes%20CalculateSum%285%2C%206%29.%0Afoo.ComplexJob%2810%29%3B%20//%20Invokes%20helper.ComplexJob%2810%29%3B%0A%60%60%60%0A%0A%23%23%23%20Mock%20non-virtual%u51FD%u6570%0A%60%60%60%0A//%20A%20simple%20packet%20stream%20class.%20None%20of%20its%20members%20is%20virtual.%0Aclass%20ConcretePacketStream%20%7B%0A%09public%3A%0A%09%09void%20AppendPacket%28Packet*%20new_packet%29%3B%0A%09%09const%20Packet*%20GetPacket%28size_t%20packet_number%29%20const%3B%0A%09%09size_t%20NumberOfPackets%28%29%20const%3B%0A%09%09...%0A%7D%3B%0A//%20A%20mock%20packet%20stream%20class.%20It%20inherits%20from%20no%20other%2C%20but%20defines%0A//%20GetPacket%28%29%20and%20NumberOfPackets%28%29.%0Aclass%20MockPacketStream%20%7B%0A%09public%3A%0A%09%09MOCK_CONST_METHOD1%28GetPacket%2C%20const%20Packet*%28size_t%20packet_number%29%29%3B%0A%09%09MOCK_CONST_METHOD0%28NumberOfPackets%2C%20size_t%28%29%29%3B%0A%09%09...%0A%7D%0A%0Atemplate%20%3Cclass%20PacketStream%3E%0Avoid%20CreateConnection%28PacketStream*%20stream%29%20%7B%20...%20%7D%0Atemplate%20%3Cclass%20PacketStream%3E%0Aclass%20PacketReader%20%7B%0A%09public%3A%0A%09void%20ReadPackets%28PacketStream*%20stream%2C%20size_t%20packet_num%29%3B%0A%7D%3B%0A%0AMockPacketStream%20mock_stream%3B%0AEXPECT_CALL%28mock_stream%2C%20...%29...%3B%0A..%20set%20more%20expectations%20on%20mock_stream%20...%0APacketReader%3CMockPacketStream%3E%20reader%28%26mock_stream%29%3B%0A...%20exercise%20reader%20...%0A%60%60%60%0A%u4E3A%u4EC0%u4E48%u8981%u8FD9%u4E48%u505A%uFF1F%0A%u56E0%u4E3A%u53EA%u80FD%u8FD9%u4E48%u505A%u3002%u666E%u901A%u7684mock%uFF0C%u8981%u901A%u8FC7%u7EE7%u627F%u88AB%u6D4B%u8BD5%u7C7B%uFF0C%u5E76%u91CD%u5199virtual%u51FD%u6570%u6765%u5B9E%u73B0%u3002%u800C%u4E0A%u9762%u7684ConcretePacketStream%u548CMockPacketStream%u5E76%u4EFB%u4F55%u6CA1%u6709%u5173%u7CFB%uFF0C%u4E5F%u5C31%u662F%u8BF4%uFF0C%u5982%u679C%u4F20%u5165%u540E%u8005%u7684%u6307%u9488%uFF0C%u4E0D%u7528reinterpret_cast%u662F%u4E0D%u80FD%u8F6C%u6210%u524D%u8005%u7684%u6307%u9488%u7684%u3002%0A%u6240%u4EE5%u60F3%u4E00%u4E2A%u53D8%u901A%u7684%u529E%u6CD5%uFF0C%u7528%u6A21%u677F%u7C7B%u6765%u5B9A%u4E49%u88AB%u6D4B%u4EE3%u7801%uFF0C%u5728%u6D4B%u8BD5%u65F6%u4F20%u5165mock%u7C7B%uFF0C%u5728%u751F%u4EA7%u65F6%uFF0C%u4F20%u5165%u771F%u5B9E%u7C7B%u3002%0A%0A%23%23%23%20Mocking%20Side%20Effects%0A%60%60%60%0AEXPECT_CALL%28mutator%2C%20MutateInt%28_%29%29%0A%09.WillOnce%28DoAll%28SetArgPointee%3C0%3E%285%29%2C%20Return%28true%29%29%29%3B%0AEXPECT_CALL%28mutator%2C%20Mutate%28NotNull%28%29%2C%205%29%29%0A%09.WillOnce%28SetArrayArgument%3C0%3E%28values%2C%20values%20+%205%29%29%3B%0A%60%60%60%0A%u7B2C%u4E00%u4E2A%u5C06MutateInt%u7B2C%u4E00%u4E2A%u53C2%u6570%u6307%u9488%u6307%u5411%u7684int%uFF0C%u8BBE%u4E3A5%uFF0C%u5E76%u8FD4%u56DEtrue%u3002%0A%u7B2C%u4E8C%u4E2A%u5C06values%u6570%u7EC4%u7684%5B0%2C5%29%u62F7%u8D1D%u5230%u53C2%u65701%u6307%u5411%u7684%u5730%u5740%u3002%0A%u5982%u679C%u4ECD%u9700%u8981%u8FD4%u56DE%uFF0C%u5219%u7528DoAll%uFF0C%u5982%u4E0B%uFF1A%0A%60%60%60%0AEXPECT_CALL%28mutator%2C%20MutateInt%28_%29%29%0A%20%20%20%20%20%20.WillOnce%28DoAll%28SetArgPointee%3C0%3E%285%29%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Return%28true%29%29%29%3B%0A%60%60%60%0A%0A%23%23%23%20Selecting%20an%20Action%27s%20Arguments%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Abool%20MyIsVisibleInQuadrant1%28bool%20visible%2C%20const%20string%26%20name%2C%20int%20x%2C%20int%20y%2C%0Aconst%20map%3Cpair%3Cint%2C%20int%3E%2C%20double%3E%26%20weight%2C%0Adouble%20min_weight%2C%20double%20max_wight%29%20%7B%0A%09return%20IsVisibleInQuadrant1%28visible%2C%20x%2C%20y%29%3B%0A%7D.%0A..%0AEXPECT_CALL%28mock%2C%20Foo%28_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%29%29%0A%09.WillOnce%28Invoke%28MyIsVisibleInQuadrant1%29%29%3B%20//%20Now%20it%20works.%0A%60%60%60%0A%u5B9A%u4E49%u81EA%u5DF1%u7684adaptor%20MyIsVisibleInQuadrant1%uFF0C%u6216%u8005%u7528gmock%u63D0%u4F9B%u7684%u65B9%u6CD5%u4F18%u96C5%u7684%u89E3%u51B3%u3002%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Ausing%20%3A%3Atesting%3A%3AWithArgs%3B%0A...%0AEXPECT_CALL%28mock%2C%20Foo%28_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%29%29%0A.WillOnce%28WithArgs%3C0%2C%202%2C%203%3E%28Invoke%28IsVisibleInQuadrant1%29%29%29%3B%0A//%20No%20need%20to%20define%20your%20own%20adaptor.%0A%60%60%60%0A%0A%23%23%23%23%20Mocking%20Private%20or%20Protected%20Methods%0A%60%60%60%0Aclass%20Foo%20%7B%0A%09public%3A%0A%09%09...%0A%09%09virtual%20bool%20Transform%28Gadget*%20g%29%20%3D%200%3B%0A%09protected%3A%0A%09%09virtual%20void%20Resume%28%29%3B%0A%09private%3A%0A%09%09virtual%20int%20GetTimeOut%28%29%3B%0A%7D%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0A%09public%3A%0A%09%09...%0A%09%09MOCK_METHOD1%28Transform%2C%20bool%28Gadget*%20g%29%29%3B%0A%09%09//%20The%20following%20must%20be%20in%20the%20public%20section%2C%20even%20though%20the%0A%09%09//%20methods%20are%20protected%20or%20private%20in%20the%20base%20class.%0A%09%09MOCK_METHOD0%28Resume%2C%20void%28%29%29%3B%0A%09%09MOCK_METHOD0%28GetTimeOut%2C%20int%28%29%29%3B%0A%7D%3B%0A%60%60%60%0A%3EC++%20allows%20a%20subclass%20to%20specify%20a%20different%20access%20level%20than%20the%20base%20class%20on%20a%20virtual%20function.%0A%0A%23%23%23%23%20Misc%0AKeep%20in%20mind%20that%20one%20doesn%27t%20have%20to%20verify%20more%20than%20one%20property%20in%20one%20test.%20In%20fact%2C%20it%27s%20a%20good%20style%20to%20verify%20only%20one%0Athing%20in%20one%20test.%20If%20you%20do%20that%2C%20a%20bug%20will%20likely%20break%20only%20one%20or%20two%20tests%20instead%20of%20dozens%0A%0AWhen%20it%27s%20being%20destroyed%2C%20your%20friendly%20mock%20object%20will%20automatically%20verify%20that%20all%20expectations%20on%20it%20have%20been%20satisfied%2C%0Aand%20will%20generate%20Google%20Test%20failures%20if%20not.%20%0A%0ACurrently%20these%20are%20only%20platforms%20that%20support%20the%20pthreads%20library%20%28this%20includes%20Linux%20and%20Mac%29.%20%0A%0A%u52A0%u4E0A%u547D%u4EE4%u884C%u53C2%u6570--gmock_verbose%3Dinfo%u53EF%u4EE5%u663E%u793A%u6240%u6709EXPECT%5C_CALL%u7684%u5177%u4F53%u8C03%u7528%u60C5%u51B5%u3002%0A%0A%23%23%20Some%20useful%20tips%20in%20gtest%0A%23%23%23%20Selecting%20Tests%0A%3E%20If%20you%20set%20the%20**GTEST_FILTER**%20environment%20variable%20or%20the%20**--gtest_filter**%20flag%20to%20a%20filter%20string%2C%20Google%20Test%20will%20only%20run%20the%20tests%20whose%20full%20names%20%28in%20the%20form%20of%20TestCaseName.TestName%29%20match%20the%20filter.%0A%3E%20The%20format%20of%20a%20filter%20is%20a%20%27%3A%27-separated%20list%20of%20wildcard%20patterns%20%28called%20the%20positive%20patterns%29%20optionally%20followed%20by%20a%20%27-%27%20and%20another%20%27%3A%27-separated%20pattern%20list%20%28called%20the%20negative%20patterns%29.%0A%0A-%20./foo_test%20Has%20no%20flag%2C%20and%20thus%20runs%20all%20its%20tests.%0A-%20./foo_test%20--gtest_filter%3D*%20Also%20runs%20everything%2C%20due%20to%20the%20single%20match-everything%20*%20value.%0A-%20./foo_test%20--gtest_filter%3DFooTest.*%20Runs%20everything%20in%20test%20case%20FooTest.%0A-%20./foo_test%20--gtest_filter%3D*Null*%3A*Constructor*%20Runs%20any%20test%20whose%20full%20name%20contains%20either%20%22Null%22%20or%20%22Constructor%22.%0A-%20./foo_test%20--gtest_filter%3D-*DeathTest.*%20Runs%20all%20non-death%20tests.%0A-%20./foo_test%20--gtest_filter%3DFooTest.*-FooTest.Bar%20Runs%20everything%20in%20test%20case%20FooTest%20except%20FooTest.Bar%0A%0ATemporarily%20Disabling%20Tests%0A%60%60%60%0A//%20Tests%20that%20Foo%20does%20Abc.%0ATEST%28FooTest%2C%20DISABLED_DoesAbc%29%20%7B%20...%20%7D%0A%0Aclass%20DISABLED_BarTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%20...%20%7D%3B%0A%0A//%20Tests%20that%20Bar%20does%20Xyz.%0ATEST_F%28DISABLED_BarTest%2C%20DoesXyz%29%20%7B%20...%20%7D%0A%60%60%60%0A%0ATemporarily%20Enabling%20Disabled%20Tests%0A%3Ejust%20invoke%20the%20test%20program%20with%20the%20**--gtest_also_run_disabled_tests**%20flag%20or%20set%20the%20**GTEST_ALSO_RUN_DISABLED_TESTS**%20environment%20variable%20to%20a%20value%20other%20than%200.%0A%0A%23%23%23%20Repeating%20the%20Tests%0A%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%3A--------%3A%20%7C%20%3A--------------%3A%20%7C%20%3A--------%3A%20%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D1000%20%7C%09Repeat%20foo_test%201000%20times%20and%20don%27t%20stop%20at%20failures.%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D-1%09%7CA%20negative%20count%20means%20repeating%20forever.%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D1000%20--gtest_break_on_failure%09%7C%20Repeat%20foo_test%201000%20times%2C%20stopping%20at%20the%20first%20failure.%20This%20is%20especially%20useful%20when%20running%20under%20a%20debugger%3A%20when%20the%20testfails%2C%20it%20will%20drop%20into%20the%20debugger%20and%20you%20can%20then%20inspect%20variables%20and%20stacks.%7C%0A%7C%24%20foo_test%20--gtest_repeat%3D1000%20--gtest_filter%3DFooBar%09%7C%20Repeat%20the%20tests%20whose%20name%20matches%20the%20filter%201000%20times.%7C&lt;/center&gt;&lt;br&gt;&lt;/div&gt;</content>
        <category term="TDD" />
        <category term="gtest" />
        <category term="gmock" />
        <updated>2017-09-12T09:02:37.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.zhougy.top/2017/09/12/C/C++_Test_Framework_-_Google_Test_&amp;_Google_Mock/</id>
        <title>C/C++ Test Framework - Google Test &amp; Google Mock</title>
        <link rel="alternate" href="https://blog.zhougy.top/2017/09/12/C/C++_Test_Framework_-_Google_Test_&amp;_Google_Mock/"/>
        <content type="html">&lt;!DOCTYPE en-note SYSTEM &#39;http://xml.evernote.com/pub/enml2.dtd&#39;&gt;&lt;div class=&#34;enNote&#34; style=&#34;color: #2c3f51; line-height: 1.6;&#34; title lang=&#34;v2&#34; xml:lang dir&gt;&lt;del style=&#34;position:relative;display:block;z-index:10;&#34;&gt;&lt;a style=&#34;position: absolute;color: #FFF;text-decoration: none;font-size: 12px;height: 25px;border-radius: 0;margin-top: -20px;right: 15px;background: rgba(0, 0, 0, 0);border-left: 10px solid #BB3A34;border-right: 10px solid #BB3A34;border-bottom: 5px solid rgba(0, 0, 0, 0);width: 0;text-indent:-100000px;&#34; href=&#34;http://maxiang.info/#/?provider=evernote&amp;amp;guid=52d299a6-1591-4f5a-b50c-cca38230ecc5&amp;amp;notebook=myblog&#34;&gt;Edit&lt;/a&gt;&lt;/del&gt;&lt;div style=&#34;color: #2c3f51; line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Google Test&amp;#xFF0C;Google Mock&amp;#x4EE5;&amp;#x4E0B;&amp;#x7B80;&amp;#x79F0;gtest&amp;#xFF0C;gmock&amp;#x3002; &lt;br&gt;&amp;#x5728;&amp;#x63A5;&amp;#x89E6;gtest&amp;#xFF0C;gmock&amp;#x4E4B;&amp;#x524D;&amp;#xFF0C;&amp;#x6D4B;&amp;#x8BD5;C/C++ code&amp;#x4F7F;&amp;#x7528;&lt;a href=&#34;https://github.com/unittest-cpp/unittest-cpp&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;UnitTest++&lt;/a&gt;&amp;#x3002;&amp;#x8FD9;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F88;&amp;#x7B80;&amp;#x6D01;&amp;#x7684;&amp;#x6846;&amp;#x67B6;&amp;#xFF0C;&amp;#x4E0A;&amp;#x624B;&amp;#x5F88;&amp;#x5FEB;&amp;#x3002;&amp;#x53C2;&amp;#x770B;&amp;#x53E6;&amp;#x4E00;&amp;#x7BC7;&amp;#x535A;&amp;#x6587;&lt;a href=&#34;https://zhougy0717.github.io/2016/02/29/UnitTest++%E7%AE%80%E4%BB%8B/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;UnitTest++&amp;#x7B80;&amp;#x4ECB;&lt;/a&gt;&amp;#x3002;&amp;#x6D4B;&amp;#x8BD5;&amp;#x76F8;&amp;#x5173;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#x591F;&amp;#x7528;&amp;#xFF0C;&amp;#x4F46;&amp;#x662F;&amp;#x6CA1;&amp;#x6709;mock&amp;#x5E93;&amp;#x3002;&amp;#x8FD9;&amp;#x5E26;&amp;#x6765;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x662F;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;&amp;#x9057;&amp;#x7559;&amp;#x4EE3;&amp;#x7801;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x9700;&amp;#x8981;&amp;#x81EA;&amp;#x884C;fake&amp;#x76F8;&amp;#x5173;&amp;#x4EE3;&amp;#x7801;&amp;#x3002;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5728;&amp;#x9057;&amp;#x7559;&amp;#x7CFB;&amp;#x7EDF;&amp;#x5F88;&amp;#x5E9E;&amp;#x5927;&amp;#x65F6;&amp;#xFF0C;&amp;#x8981;&amp;#x9887;&amp;#x8D39;&amp;#x5FC3;&amp;#x529B;&amp;#x3002;&amp;#x800C;&amp;#x4E14;&amp;#x8FC7;&amp;#x591A;&amp;#x6D89;&amp;#x53CA;&amp;#x7EC6;&amp;#x8282;&amp;#xFF0C;&amp;#x5BFC;&amp;#x81F4;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6781;&amp;#x4E0D;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x7CFB;&amp;#x7EDF;&amp;#x4EE3;&amp;#x7801;&amp;#x4EFB;&amp;#x610F;&amp;#x7684;&amp;#x6F14;&amp;#x8FDB;&amp;#xFF0C;&amp;#x90FD;&amp;#x4F1A;&amp;#x5BFC;&amp;#x81F4;&amp;#x5927;&amp;#x5806;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5931;&amp;#x8D25;&amp;#xFF0C;&amp;#x751A;&amp;#x81F3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65E0;&amp;#x6CD5;&amp;#x8FDB;&amp;#x884C;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;case&amp;#x4E4B;&amp;#x95F4;&amp;#x65E0;&amp;#x6CD5;&amp;#x5F88;&amp;#x597D;&amp;#x7684;&amp;#x89E3;&amp;#x8026;&amp;#x3002;&amp;#x7ED3;&amp;#x679C;&amp;#x540C;&amp;#x6837;&amp;#x662F;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E0D;&amp;#x591F;&amp;#x7A33;&amp;#x5B9A;&amp;#x3002;&amp;#x672F;&amp;#x8BED;&amp;#x662F;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4EE3;&amp;#x7801;&amp;#x5F88;&amp;#x201C;&amp;#x8106;&amp;#x5F31;&amp;#x201D;&amp;#x3002;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Java&amp;#xFF0C;Python&amp;#xFF0C;JavaScript&amp;#x90FD;&amp;#x6709;&amp;#x81EA;&amp;#x5DF1;&amp;#x7684;mock&amp;#x5E93;&amp;#x3002;Python&amp;#x7684;Mock&amp;#x7C7B;&amp;#xFF0C;Java&amp;#x7684;Mockito/PowerMock&amp;#xFF0C;JavaScript&amp;#x7684;Sinon&amp;#x3002;&amp;#x4E8E;&amp;#x662F;&amp;#xFF0C;&amp;#x5728;&amp;#x7F51;&amp;#x4E0A;&amp;#x641C;&amp;#x7D22;&amp;#x4E86;&amp;#x4E00;&amp;#x4E0B;C/C++&amp;#x7684;Mock&amp;#x5E93;&amp;#xFF0C;&amp;#x4E8E;&amp;#x662F;&amp;#x770B;&amp;#x5230;&amp;#x4E86;gtest&amp;#xFF0C;gmock&amp;#x3002;&amp;#x7136;&amp;#x540E;&amp;#x5C31;&amp;#x6709;&amp;#x4E86;&amp;#x8FD9;&amp;#x4E00;&amp;#x7BC7;&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&amp;#x7B80;&amp;#x4ECB;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0D;&amp;#x7528;&amp;#x53BB;&amp;#x7F51;&amp;#x4E0A;&amp;#x8D39;&amp;#x5FC3;&amp;#x627E;&amp;#x6559;&amp;#x7A0B;&amp;#xFF0C;&amp;#x4E24;&amp;#x4E2A;&amp;#x9879;&amp;#x76EE;&amp;#x7684;&amp;#x6587;&amp;#x6863;&amp;#x90FD;&amp;#x975E;&amp;#x5E38;&amp;#x68D2;&amp;#x3002;&amp;#x5165;&amp;#x53E3;&amp;#x7EDF;&amp;#x4E00;&amp;#x5728;&lt;a href=&#34;https://github.com/google/googletest&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;gtest GitHub&amp;#x9879;&amp;#x76EE;&amp;#x4E3B;&amp;#x9875;&lt;/a&gt;&amp;#x4E0A;&amp;#x3002;&amp;#x800C;&amp;#x4E14;&amp;#x8BE5;&amp;#x6587;&amp;#x6863;&amp;#x4E0D;&amp;#x4EC5;&amp;#x5F88;&amp;#x597D;&amp;#x7684;&amp;#x4ECB;&amp;#x7ECD;&amp;#x4E86;gtest&amp;#xFF0C;gmock&amp;#x7684;&amp;#x7528;&amp;#x6CD5;&amp;#xFF0C;&amp;#x5176;&amp;#x4E2D;&amp;#x8FD8;&amp;#x6D89;&amp;#x53CA;&amp;#x4E86;&amp;#x5F88;&amp;#x591A;TDD&amp;#x6216;&amp;#x8005;UnitTest&amp;#x7684;&amp;#x771F;&amp;#x77E5;&amp;#x707C;&amp;#x89C1;&amp;#xFF0C;&amp;#x5F88;&amp;#x503C;&amp;#x5F97;&amp;#x8BFB;&amp;#x4E00;&amp;#x8BFB;&amp;#x3002; &lt;br&gt;&amp;#x8981;&amp;#x4F7F;&amp;#x7528;gtest&amp;#x975E;&amp;#x5E38;&amp;#x7B80;&amp;#x5355;&amp;#xFF1A;&amp;#x7F16;&amp;#x8BD1;&amp;#x51FA;gtest&amp;#xFF0C;gmock&amp;#xFF0C;&amp;#x518D;&amp;#x94FE;&amp;#x5165;&amp;#x4F60;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7A0B;&amp;#x5E8F;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x7F16;&amp;#x8BD1;gtest/gmock&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gtest&amp;#xFF0C;gmock&amp;#x5747;&amp;#x7528;cmake&amp;#x6765;&amp;#x7BA1;&amp;#x7406;&amp;#x8DE8;&amp;#x5E73;&amp;#x53F0;&amp;#xFF0C;&amp;#x5148;&amp;#x7528;cmake&amp;#x6765;&amp;#x751F;&amp;#x6210;Makefile&amp;#x3002;&amp;#x7528;&amp;#x547D;&amp;#x4EE4;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;cmake -G &amp;quot;Unix Makefiles&amp;quot; /path/to/CMakeList.txt&lt;/code&gt;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Makefile&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7136;&amp;#x540E;&amp;#x6309;&amp;#x7167;&amp;#x4E0B;&amp;#x9762;&amp;#x7F16;&amp;#x5199;Makefile&amp;#x3002;&amp;#x6CE8;&amp;#x610F;gmock_main&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;main&amp;#x51FD;&amp;#x6570;&amp;#x6765;&amp;#x8C03;&amp;#x7528;&amp;#x6240;&amp;#x6709;&amp;#x7684;test case&amp;#xFF0C;&amp;#x7701;&amp;#x5F97;&amp;#x81EA;&amp;#x5DF1;&amp;#x5199;main&amp;#x51FD;&amp;#x6570;&amp;#x4E86;&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;CC = gcc&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;CPP = g++&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;LINK = g++&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;CFLAGS = -g -Wall -Werror -Wextra -std=gnu99&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;CPPFLAGS = -g -Wall -Werror -Wextra&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;LIBS = -L./lib -lgtest -lgmock -lgmock_main -lpthread&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;C__SOURCES = $(wildcard *.c)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;CPPSOURCES = $(wildcard *.cpp)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;OBJECTS = $(patsubst %.c, %.o, $(C__SOURCES)) $(patsubst %.cpp, %.o, $(CPPSOURCES))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;TARGET = test_exe&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;first: all&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;%.o: %.c&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    $(CC) $(INCLUDES) -c $(CFLAGS) -o $@ $&amp;lt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;%.o: %.cpp&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    $(CPP) $(INCLUDES) -c $(CPPFLAGS) -o $@ $&amp;lt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;all: $(TARGET)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;$(TARGET): $(OBJECTS)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    $(LINK) $(CPPFLAGS) $(LIBS) -o $(TARGET) $(OBJECTS)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;.PHONY : clean&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;clean:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    rm -f $(TARGET) $(OBJECTS)&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Terms&lt;/h3&gt;&lt;table style=&#34;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&#34;&gt;&lt;thead style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;Meaning&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;Google Test Term&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;ISTQB Term&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Exercise a particular program path with specific input values and verify the results&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;TEST()&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Case&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;A set of several tests related to one component&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Case&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Suite&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Test&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gtest/gtest.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Test;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::AtLeast;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;TEST(TestCaseName, should_this_test_do)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    EXPECT_STREQ(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, str);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E2D;&amp;#x95F4;&amp;#x7684;&amp;#x90A3;&amp;#x5806;namespace&amp;#x90FD;&amp;#x662F;gtest/gmock&amp;#x5E93;&amp;#x91CC;&amp;#x5B9A;&amp;#x4E49;&amp;#x7684;matcher&amp;#x5B8F;&amp;#x6216;&amp;#x8005;&amp;#x5404;&amp;#x79CD;&amp;#x6709;&amp;#x7528;&amp;#x7684;&amp;#x5B8F;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Test Fixture&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6709;&amp;#x91CD;&amp;#x590D;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5C31;&amp;#x8981;&amp;#x7528;&amp;#x5230;Test Fixture&amp;#x4E86;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;setUp / tearDown&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt; : public ::testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Test&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt; protected:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  virtual void &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;SetUp&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    q1_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(1);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(2);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(3);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  // virtual void &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TearDown&lt;/span&gt;() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q0_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q1_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q2_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TEST_F&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;IsEmptyInitially&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(0, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q0_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TEST_F&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;DequeueWorks&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  int* n = q0_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  n = q1_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ASSERT_TRUE&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt; != &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(1, *&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(0, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q1_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  delete n;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  n = q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ASSERT_TRUE&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt; != &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(2, *&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(1, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q2_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  delete n;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;constructor/destructor vs. SetUp/TearDown&lt;/h4&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;When you need to write per-test set-up and tear-down logic, you have the choice between using the test fixture constructor/destructor or SetUp()/TearDown(). The former is usually preferred, as it has the following benefits:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;By initializing a member variable in the constructor, we have the option to make it const, which helps prevent accidental changes to its value and makes the tests more obviously correct.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;In case we need to subclass the test fixture class, the subclass&amp;#x2019; constructor is guaranteed to call the base class&amp;#x2019; constructor first, and the subclass&amp;#x2019; destructor is guaranteed to call the base class&amp;#x2019; destructor afterward. &lt;/strong&gt;With SetUp()/TearDown(), a subclass may make the mistake of forgetting to call the base class&amp;#x2019; SetUp()/TearDown() or call them at the wrong moment.&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;Benefit for using SetUp/TearDown:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If the tear-down operation could throw an exception, you must use TearDown() as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer TearDown() if you want to write portable tests that work with or without exceptions.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The assertion macros throw an exception when flag &amp;#x2013;gtest_throw_on_failure is specified. Therefore, you shouldn&amp;#x2019;t use Google Test assertions in a destructor if you plan to run your tests with this flag.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;In a constructor or destructor, you cannot make a virtual function call on this object. (You can call a method declared as virtual, but it will be statically bound.) Therefore, if you need to call a method that will be overriden in a derived class, you have to use SetUp()/TearDown().&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7B80;&amp;#x8A00;&amp;#x4E4B;&amp;#xFF0C;&amp;#x5728;&amp;#x903B;&amp;#x8F91;&amp;#x4E0A;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E24;&amp;#x7EC4;&amp;#x7684;&amp;#x4F5C;&amp;#x7528;&amp;#x76F8;&amp;#x540C;&amp;#xFF0C;&amp;#x90FD;&amp;#x662F;&amp;#x6BCF;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E4B;&amp;#x524D;&amp;#x4E4B;&amp;#x540E;&amp;#x4F1A;&amp;#x505A;&amp;#x4E00;&amp;#x4E9B;&amp;#x5904;&amp;#x7406;&amp;#x5DE5;&amp;#x4F5C;&amp;#x3002;Constructor/Destructor&amp;#x7684;&amp;#x597D;&amp;#x5904;&amp;#x662F;&amp;#x63D0;&amp;#x4F9B;&amp;#x4E86;&amp;#x7EE7;&amp;#x627F;&amp;#x3002;setUp/tearDown&amp;#x7684;&amp;#x597D;&amp;#x5904;&amp;#x662F;&amp;#x53EF;&amp;#x4EE5;&amp;#x5904;&amp;#x7406;exception&amp;#xFF0C;&amp;#x8FD9;&amp;#x662F;&amp;#x4E0D;&amp;#x80FD;&amp;#x653E;&amp;#x5728;&amp;#x6790;&amp;#x6784;&amp;#x51FD;&amp;#x6570;&amp;#x91CC;&amp;#x7684;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;SetUpTestCase / TearDownTestCase&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Test Case&amp;#x7EA7;&amp;#x522B;&amp;#x7684;SetUp/TearDown&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; FooTest : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; ::testing::Test &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;protected&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Per-test-case set-up.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Called before the first test in this test case.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Can be omitted if not needed.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUpTestCase&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    shared_resource_ = &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;new&lt;/span&gt; ...;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Per-test-case tear-down.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Called after the last test in this test case.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Can be omitted if not needed.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDownTestCase&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;delete&lt;/span&gt; shared_resource_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    shared_resource_ = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// You can define per-test set-up and tear-down logic as usual.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUp&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDown&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Some expensive resource shared by all tests.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;static&lt;/span&gt; T* shared_resource_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;SetUp/TearDown Environment&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;First, you subclass the ::testing::Environment class to define a test environment, which knows how to set-up and tear-down:&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Then, you register an instance of your environment class with Google Test by calling the &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;::testing::AddGlobalTestEnvironment()&lt;/code&gt; function: &lt;br&gt;Now, when RUN_ALL_TESTS() is called, it first calls the SetUp() method of the environment object, then runs the tests if there was no fatal failures, and finally calls TearDown() of the environment object.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;It&amp;#x2019;s OK to register multiple environment objects. In this case, their SetUp() will be called in the order they are registered, and their TearDown() will be called in the reverse order.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Note that Google Test takes ownership of the registered environment objects. Therefore do not delete them by yourself.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; Environment &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;virtual&lt;/span&gt; ~Environment() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Override this to define how to set up the environment.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUp&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Override this to define how to tear down the environment.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDown&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Environment* &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;AddGlobalTestEnvironment&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(Environment* env)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x65AD;&amp;#x8A00;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6709;&amp;#x4E24;&amp;#x79CD;&amp;#x65AD;&amp;#x8A00;EXPECT_xxx&amp;#x548C;ASSERT_xxx&amp;#x3002;&amp;#x524D;&amp;#x8005;&amp;#x4F1A;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7EC8;&amp;#x6B62;&amp;#xFF0C;&amp;#x540E;&amp;#x8005;&amp;#x4E0D;&amp;#x4F1A;&amp;#xFF0C;&amp;#x53EA;&amp;#x4F1A;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;fail&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;gmock&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E4B;&amp;#x6240;&amp;#x4EE5;&amp;#x8981;&amp;#x5207;&amp;#x5230;gtest&amp;#xFF0C;&amp;#x552F;&amp;#x4E00;&amp;#x7684;&amp;#x539F;&amp;#x56E0;&amp;#x5C31;&amp;#x662F;gmock&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x8981;&amp;#x4E13;&amp;#x5F00;&amp;#x4E00;&amp;#x7AE0;&amp;#x91CD;&amp;#x70B9;&amp;#x4ECB;&amp;#x7ECD;&amp;#x4E00;&amp;#x4E0B;&amp;#x3002;&amp;#x6240;&amp;#x6709;&amp;#x5185;&amp;#x5BB9;&amp;#x5747;&amp;#x6765;&amp;#x81EA;&amp;#x4E8E;&amp;#x5B98;&amp;#x65B9;&amp;#x6587;&amp;#x6863;&amp;#x3002;&amp;#x5185;&amp;#x5BB9;&amp;#x6DF1;&amp;#x5EA6;&amp;#x7531;&amp;#x6D45;&amp;#x5165;&amp;#x6DF1;&amp;#xFF0C;&amp;#x4F9D;&amp;#x6B21;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Google Mock for Dummies&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/CookBook.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;CookBook&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6700;&amp;#x540E;&amp;#x8FD8;&amp;#x6709;&amp;#x53C2;&amp;#x8003;&amp;#x624B;&amp;#x518C;:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/CheatSheet.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x7B80;&amp;#x4ECB;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Google C++ Mocking Framework (or Google Mock for short) is a library (sometimes we also call it a &amp;#x201C;framework&amp;#x201D; to make it sound cool) for creating mock classes and using them. It does to C++ what jMock and EasyMock do to Java.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4F55;&amp;#x4E3A;Mock&amp;#xFF1F;&lt;/h4&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Mocks&lt;/strong&gt; are objects pre-programmed with expectations, which form a specification of the calls they are expected to receive.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x76F8;&amp;#x5E94;&amp;#x7684;&amp;#x8FD8;&amp;#x6709;Fake&amp;#x548C;Stub&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Fake&lt;/strong&gt; objects have working implementations, but usually take some shortcut (perhaps to make the operations less expensive), which makes them not suitable for production. An in-memory file system would be an example of a fake.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gmock&amp;#x7684;&amp;#x6587;&amp;#x6863;&amp;#x91CC;&amp;#x53EA;&amp;#x63D0;&amp;#x5230;&amp;#x4E86;Fake&amp;#xFF0C;&amp;#x4ECE;Martin Fowler&amp;#x7684;&amp;#x6587;&amp;#x7AE0;&lt;a href=&#34;https://martinfowler.com/articles/mocksArentStubs.html&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Mocks Aren&amp;#x2019;t Stubs&lt;/a&gt;&amp;#x4E2D;&amp;#x6458;&amp;#x5F55;&amp;#x5982;&amp;#x4E0B;:&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Stubs&lt;/strong&gt; provide canned answers to calls made during the test, usually not responding at all to anything outside what&amp;#x2019;s programmed in for the test.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E09;&amp;#x8005;&amp;#x4F5C;&amp;#x7528;&amp;#x76F8;&amp;#x540C;&amp;#xFF0C;&amp;#x90FD;&amp;#x662F;&amp;#x6A21;&amp;#x62DF;&amp;#x7CFB;&amp;#x7EDF;&amp;#x5176;&amp;#x4ED6;&amp;#x90E8;&amp;#x5206;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#xFF0C;&amp;#x8FBE;&amp;#x5230;&amp;#x4EE3;&amp;#x7801;&amp;#x9694;&amp;#x79BB;&amp;#x7684;&amp;#x6548;&amp;#x679C;&amp;#xFF0C;&amp;#x65B9;&amp;#x4FBF;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;&amp;#x4F46;&amp;#x662F;Mock&amp;#x7684;&amp;#x7279;&amp;#x70B9;&amp;#x662F;&amp;#x66F4;OO&amp;#x5316;&amp;#xFF0C;&amp;#x4E5F;&amp;#x7B26;&amp;#x5408;TDD&amp;#x6216;&amp;#x8005;BDD&amp;#x7684;&amp;#x601D;&amp;#x60F3;&amp;#x2014;&amp;#x2014;&amp;#x9488;&amp;#x5BF9;&amp;#x4E00;&amp;#x4E2A;object&amp;#x8BBE;&amp;#x7F6E;&amp;#x671F;&amp;#x5F85;&amp;#xFF0C;&amp;#x518D;&amp;#x5BF9;&amp;#x9F50;verify&amp;#x3002;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Mocks vs. Stubs - from Martin Fowler&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;In order to use state verification on the stub, I need to make some extra methods on the stub to help with verification. As a result the stub implements MailService but adds extra test methods.&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Mock objects always use behavior verification, a stub can go either way. Meszaros refers to stubs that use behavior verification as a Test Spy. The difference is in how exactly the double runs and verifies and I&amp;#x2019;ll leave that for you to explore on your own.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Getting Started&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Class to Mock&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Turtle&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;virtual&lt;/span&gt; ~Turtle() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;PenUp&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;PenDown&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Forward&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; distance&lt;/span&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Mock class&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Brings in Google Mock.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockTurtle : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; Turtle &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  MOCK_METHOD0(PenUp, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  MOCK_METHOD0(PenDown, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  MOCK_METHOD1(Forward, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; distance));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x9488;&amp;#x5BF9;&amp;#x5F85;Mock&amp;#x7684;Turtle class&amp;#x8981;&amp;#x6CE8;&amp;#x610F;&amp;#x7684;&amp;#x662F;:&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Note that the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;destructor of Turtle must be virtual&lt;/strong&gt;, as is the case for all classes you intend to inherit from - otherwise the destructor of the derived class will not be called when you delete an object through a base pointer, and you&amp;#x2019;ll get corrupted program states like memory leaks.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Use it&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;path/to/mock-turtle.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gtest/gtest.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::AtLeast;                     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #1&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;TEST(PainterTest, CanDrawSomething) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  MockTurtle turtle;                          &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #2&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  EXPECT_CALL(turtle, PenDown())              &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #3&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;      .Times(AtLeast(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Painter &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;painter&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&amp;amp;turtle)&lt;/span&gt;&lt;/span&gt;;                   &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #4&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  EXPECT_TRUE(painter.DrawCircle(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;                                             &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #5&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;char&lt;/span&gt;** argv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// The following line must be executed to initialize Google Mock&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// (and Google Test) before running the tests.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  ::testing::InitGoogleMock(&amp;amp;argc, argv);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; RUN_ALL_TESTS();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x613F;&amp;#x610F;&amp;#x7684;&amp;#x8BDD;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x81EA;&amp;#x5DF1;&amp;#x5199;main&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x60F3;&amp;#x5077;&amp;#x61D2;&amp;#xFF0C;&amp;#x8BB0;&amp;#x5F97;&amp;#x5728;Makefile&amp;#x91CC;link gmock_main&amp;#x3002; &lt;br&gt;&amp;#x6309;Google&amp;#x7684;&amp;#x8BF4;&amp;#x6CD5;&amp;#xFF0C;gmock&amp;#x4E5F;&amp;#x53EF;&amp;#x4EE5;&amp;#x548C;&amp;#x5176;&amp;#x4ED6;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6846;&amp;#x67B6;&amp;#x517C;&amp;#x5BB9;&amp;#xFF0C;&amp;#x4F46;&amp;#x603B;&amp;#x611F;&amp;#x89C9;&amp;#x633A;&amp;#x60AC;&amp;#x7684;&amp;#x3002;&lt;/p&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4E00;&amp;#x4E9B;&amp;#x6709;&amp;#x7528;&amp;#x7684;&amp;#x5DE5;&amp;#x5177;&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Marcher&lt;/strong&gt; &lt;br&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;EXPECT_CALL(turtle, Forward(_));&lt;/code&gt; &lt;br&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0; &amp;#x4EE5;&amp;#x4EFB;&amp;#x610F;&amp;#x53C2;&amp;#x6570;&amp;#x8C03;&amp;#x7528;Forward &lt;br&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;EXPECT_CALL(turtle, Forward(Ge(100)));&lt;/code&gt; &lt;br&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0; &amp;#x4EE5;&amp;#x5927;&amp;#x4E8E;100&amp;#x7684;&amp;#x6574;&amp;#x6570;&amp;#x8C03;&amp;#x7528;Forward&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Cardinalities: How Many Times Will It Be Called?&lt;/strong&gt;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If neither WillOnce() nor WillRepeatedly() is in the EXPECT_CALL(), the inferred cardinality is Times(1).&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If there are n WillOnce()&amp;#x2019;s but no WillRepeatedly(), where n &amp;gt;= 1, the cardinality is Times(n).&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If there are n WillOnce()&amp;#x2019;s and one WillRepeatedly(), where n &amp;gt;= 0, the cardinality is Times(AtLeast(n)).&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mockObj, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .Times(AtLeast(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;123&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillRepeatedly(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;456&lt;/span&gt;))&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0A;&amp;#x9762;&amp;#x8FD9;&amp;#x6BB5;&amp;#x4EE3;&amp;#x7801;&amp;#x8981;&amp;#x6C42;func&amp;#x51FD;&amp;#x6570;&amp;#x81F3;&amp;#x5C11;&amp;#x8FD0;&amp;#x884C;&amp;#x4E00;&amp;#x6B21;&amp;#xFF0C;&amp;#x7B2C;&amp;#x4E00;&amp;#x6B21;&amp;#x8FD4;&amp;#x56DE;123&amp;#xFF0C;&amp;#x4E4B;&amp;#x540E;&amp;#x6BCF;&amp;#x6B21;&amp;#x8FD4;&amp;#x56DE;456&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Important note&lt;/strong&gt;: The EXPECT_CALL() statement evaluates the action clause only once, even though the action may be performed many times. Therefore you must be careful about side effects. The following may not do what you want:&lt;/p&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;n&lt;/span&gt; = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;.Times(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;4&lt;/span&gt;)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;.WillRepeatedly(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;n&lt;/span&gt;++));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x56E0;&amp;#x4E3A;Return&amp;#x662F;&amp;#x5B8F;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x53EA;&amp;#x4F1A;&amp;#x66FF;&amp;#x6362;&amp;#x4E00;&amp;#x6B21;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x4E0D;&amp;#x7BA1;GetX&amp;#x8C03;&amp;#x7528;&amp;#x51E0;&amp;#x6B21;&amp;#xFF0C;&amp;#x8FD4;&amp;#x56DE;&amp;#x90FD;&amp;#x662F;101&amp;#xFF0C;&amp;#x800C;&amp;#x4E0D;&amp;#x662F;101,102,103,&amp;#x2026;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;All Expectations Are Sticky&lt;/strong&gt; &lt;br&gt;&amp;#x6240;&amp;#x8C13;&amp;#x7684;sticky&amp;#x5C31;&amp;#x662F;EXPECT_CALL&amp;#x603B;&amp;#x662F;&amp;#x751F;&amp;#x6548;&amp;#x7684;&amp;#xFF0C;&amp;#x9664;&amp;#x975E;&amp;#x4F60;&amp;#x663E;&amp;#x793A;&amp;#x7684;&amp;#x5C06;&amp;#x5176;&amp;#x5931;&amp;#x6548;&amp;#x3002;&amp;#x5982;&amp;#x4E0B;&amp;#xFF0C;&amp;#x6240;&amp;#x6709;&amp;#x7684;EXPECT_CALL&amp;#x90FD;&amp;#x4F1A;&amp;#x751F;&amp;#x6548;&amp;#xFF0C;&amp;#x90A3;&amp;#x4E48;&amp;#x6700;&amp;#x540E;&amp;#x4E00;&amp;#x4E2A;&amp;#x4F1A;&amp;#x8986;&amp;#x76D6;&amp;#x524D;&amp;#x9762;&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;GetX&amp;#x603B;&amp;#x4F1A;&amp;#x8FD4;&amp;#x56DE;10&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = n; i &amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;      &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x5E0C;&amp;#x671B;&amp;#x4ED6;&amp;#x8FD4;&amp;#x56DE;&amp;#xFF0C;30,20,10&amp;#xFF0C;&amp;#x2026;&amp;#xFF0C;&amp;#x5E94;&amp;#x8BE5;&amp;#x8FD9;&amp;#x4E48;&amp;#x5199;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = n; i &amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.RetiresOnSaturation&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;RetireOnSaturation&lt;/code&gt;&amp;#x5C31;&amp;#x662F;&amp;#x663E;&amp;#x793A;&amp;#x7684;&amp;#x8BA9;&amp;#x5176;&amp;#x5931;&amp;#x6548;&amp;#x3002;&amp;#x8FD8;&amp;#x6709;&amp;#x4E00;&amp;#x4E2A;&amp;#x529E;&amp;#x6CD5;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::InSequence;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;InSequence&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;s&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.RetiresOnSaturation&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x56E0;&amp;#x4E3A;InSequence&amp;#x7684;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x5728;&amp;#x524D;&amp;#x9762;&amp;#x7684;EXPECT_CALL&amp;#x751F;&amp;#x6548;&amp;#x4EE5;&amp;#x540E;&amp;#xFF0C;&amp;#x5C31;&amp;#x4F1A;&amp;#x81EA;&amp;#x52A8;&amp;#x5931;&amp;#x6548;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x4E0D;&amp;#x4F1A;&amp;#x4EA7;&amp;#x751F;&amp;#x8986;&amp;#x76D6;&amp;#x7684;&amp;#x6548;&amp;#x679C;&amp;#x3002; &lt;br&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Ordered vs Unordered Calls&lt;/strong&gt;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::InSequence;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;TEST&lt;/span&gt;(FooTest, DrawsLineSegment) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;InSequence&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;dummy&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, PenDown());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, Forward(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, PenUp());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;Foo&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Expecting Partially Ordered Calls&lt;/strong&gt; &lt;br&gt;Google Mock allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to &lt;br&gt;use the After clause of EXPECT_CALL .&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;using ::testing::Sequence&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;Sequence &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s1&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s2&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(foo, A())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s1, &lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s2&lt;/span&gt;)&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bar, &lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;B())&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s1);&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bar, &lt;/span&gt;C())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s2);&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(foo, D())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s2);&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;specifies the following DAG (where s1 is A -&amp;gt; B , and s2 is A -&amp;gt; C -&amp;gt; D ):&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;B&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;D&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Uninteresting Calls&lt;/strong&gt; &lt;br&gt;&amp;#x8FD9;&amp;#x662F;gmock&amp;#x62A5;&amp;#x7684;warning&amp;#x3002;&amp;#x5F53;&amp;#x9488;&amp;#x5BF9;&amp;#x67D0;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F85;&amp;#x6D4B;&amp;#x51FD;&amp;#x6570;&amp;#x8BBE;&amp;#x7F6E;&amp;#x4E86;EXPECT spec&amp;#xFF0C;&amp;#x5374;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x8C03;&amp;#x7528;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5C31;&amp;#x4F1A;&amp;#x62A5;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#x3002;&amp;#x6B64;&amp;#x65F6;gmock&amp;#x8BA4;&amp;#x4E3A;&amp;#x4F60;&amp;#x5BF9;&amp;#x8BE5;&amp;#x51FD;&amp;#x6570;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x5174;&amp;#x8DA3;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x5C31;&amp;#x4E0D;&amp;#x9700;&amp;#x8981;&amp;#x8FD9;&amp;#x4E2A;EXPECT spec&amp;#x3002;&amp;#x5F53;&amp;#x7136;&amp;#x4F60;&amp;#x53EF;&amp;#x4EE5;&amp;#x9009;&amp;#x62E9;&amp;#x5FFD;&amp;#x7565;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#xFF0C;&amp;#x4F46;&amp;#x6211;&amp;#x8BA4;&amp;#x4E3A;&amp;#x51FA;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x591A;&amp;#x534A;&amp;#x662F;test&amp;#x6F0F;&amp;#x5199;&amp;#x4E86;&amp;#x4EC0;&amp;#x4E48;&amp;#x3002;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Returning Live Values from Mock Methods&lt;/strong&gt;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;using&lt;/span&gt; testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ByRef&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;using&lt;/span&gt; testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Return&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MockFoo&lt;/span&gt; : public &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    public:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MOCK_METHOD0&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;int&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;int x = 0;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MockFoo&lt;/span&gt; foo;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_CALL&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;foo&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    // .&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;WillRepeatedly&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ByRef(x)&lt;/span&gt;)); &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;X&lt;/span&gt; error&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;WillRepeatedly&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ReturnPointee(x)&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;x = 42;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(42, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;foo&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;());&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4E00;&amp;#x4E9B;&amp;#x6D4B;&amp;#x8BD5;case&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5199;Unit Test&amp;#x5E76;&amp;#x4E0D;&amp;#x50CF;&amp;#x60F3;&amp;#x50CF;&amp;#x7684;&amp;#x90A3;&amp;#x4E48;&amp;#x7B80;&amp;#x5355;&amp;#xFF0C;&amp;#x5E76;&amp;#x4E0D;&amp;#x662F;&amp;#x8C03;&amp;#x7528;&amp;#x4E86;&amp;#x6846;&amp;#x67B6;&amp;#xFF0C;&amp;#x9488;&amp;#x5BF9;&amp;#x6BCF;&amp;#x4E2A;&amp;#x51FD;&amp;#x6570;&amp;#x5199;test case&amp;#x5C31;&amp;#x53EF;&amp;#x4EE5;&amp;#x3002;&amp;#x6309;&amp;#x6211;&amp;#x76EE;&amp;#x524D;&amp;#x7684;&amp;#x7406;&amp;#x89E3;&amp;#x6709;&amp;#x4EE5;&amp;#x4E0B;&amp;#x51E0;&amp;#x79CD;&amp;#x6311;&amp;#x6218;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;Test Case&amp;#x5982;&amp;#x4F55;&amp;#x89E3;&amp;#x8026;&amp;#x3002;&amp;#x4E0D;&amp;#x8981;&amp;#x6709;&amp;#x91CD;&amp;#x590D;&amp;#x6D4B;&amp;#x8BD5;(overlap)&amp;#x3002; &lt;br&gt;&amp;#x4F8B;&amp;#x5982;&amp;#xFF1A;&amp;#x5728;&amp;#x5199;A&amp;#x51FD;&amp;#x6570;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5199;&amp;#x4E86;&amp;#x6D4B;&amp;#x8BD5;testA&amp;#xFF0C;B&amp;#x51FD;&amp;#x6570;&amp;#x4F1A;&amp;#x8C03;&amp;#x7528;A&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x90A3;&amp;#x4E48;&amp;#x5728;&amp;#x5199;&amp;#x5B8C;A&amp;#x4E4B;&amp;#x540E;&amp;#x5199;B&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;testB&amp;#x65F6;&amp;#xFF0C;&amp;#x662F;&amp;#x5426;&amp;#x8981;&amp;#x5C06;A mock/fake/stub&amp;#x6389;? &amp;#x5982;&amp;#x679C;&amp;#x4E0D;&amp;#x5C06;A&amp;#x51FD;&amp;#x6570;Fake&amp;#x6389;&amp;#xFF0C;&amp;#x5219;testA&amp;#x548C;testB&amp;#x4E4B;&amp;#x95F4;&amp;#x5C31;&amp;#x662F;&amp;#x6709;overlap&amp;#x3002;&amp;#x6211;&amp;#x8BA4;&amp;#x4E3A;&amp;#x8FD9;&amp;#x4E4B;&amp;#x95F4;&amp;#x53EF;&amp;#x4EE5;&amp;#x6709;&amp;#x53D6;&amp;#x820D;&amp;#xFF0C;&amp;#x6700;&amp;#x4F73;&amp;#x72B6;&amp;#x6001;&amp;#x5E94;&amp;#x5F53;&amp;#x662F;&amp;#x6B64;&amp;#x65F6;&amp;#xFF0C;&amp;#x5C06;testA&amp;#x5220;&amp;#x9664;&amp;#xFF0C;&amp;#x53EA;&amp;#x4FDD;&amp;#x7559;testB&amp;#x3002;&amp;#x4F46;&amp;#x4ECD;&amp;#x5E94;&amp;#x6839;&amp;#x636E;&amp;#x5177;&amp;#x4F53;&amp;#x60C5;&amp;#x51B5;&amp;#x800C;&amp;#x5B9A;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x4F55;&amp;#x9488;&amp;#x5BF9;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#x8FDB;&amp;#x884C;mock&amp;#x5316;&amp;#x3002; &lt;br&gt;&amp;#x4F8B;&amp;#x5982;&amp;#x51FA;&amp;#x73B0;&amp;#x8FD9;&amp;#x6837;&amp;#x7684;&amp;#x8BED;&amp;#x53E5;: &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;B = new A&lt;/code&gt;&amp;#xFF0C;&amp;#x5219;&amp;#x7C7B;B&amp;#x4F9D;&amp;#x8D56;&amp;#x4E8E;&amp;#x7C7B;A&amp;#x3002;&amp;#x4F46;&amp;#x7C7B;A&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x5FC5;&amp;#x8981;&amp;#x7F16;&amp;#x8BD1;&amp;#x8FDB;test&amp;#x3002;&amp;#x56E0;&amp;#x4E3A;&amp;#x4E00;&amp;#x65E6;&amp;#x52A0;&amp;#x5165;A&amp;#xFF0C;&amp;#x5219;&amp;#x52BF;&amp;#x5FC5;&amp;#x4F1A;&amp;#x5F15;&amp;#x5165;&amp;#x66F4;&amp;#x591A;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x800C;&amp;#x5BFC;&amp;#x81F4;test&amp;#x7F16;&amp;#x8BD1;&amp;#x5D29;&amp;#x6E83;&amp;#x3002;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x65E0;&amp;#x7A77;&amp;#x65E0;&amp;#x5C3D;&amp;#x3002;&amp;#x5728;&amp;#x505A;Android&amp;#x7684;&amp;#x5355;&amp;#x5143;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x7528;PowerMock&amp;#x53D6;&amp;#x4EE3;Mockito&amp;#x6765;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x5C06;&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;Fake&amp;#x5316;&amp;#x6210;&amp;#x7C7B;&amp;#x4F3C;&amp;#x5DE5;&amp;#x5382;&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x8FD4;&amp;#x56DE;&amp;#x7C7B;&amp;#x5B9E;&amp;#x4F8B;&amp;#x3002;&amp;#x5177;&amp;#x4F53;&amp;#x53C2;&amp;#x770B;&amp;#x8FD9;&amp;#x7BC7;&amp;#x535A;&amp;#x6587;&lt;a href=&#34;https://zhougy0717.github.io/2016/10/19/Android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Android&amp;#x5355;&amp;#x5143;&amp;#x6D4B;&amp;#x8BD5;&lt;/a&gt;&amp;#x3002; &lt;br&gt;&amp;#x4F46;&amp;#x5B9E;&amp;#x9645;&amp;#x4E0A;&amp;#xFF0C;&amp;#x6309;&amp;#x7167;&amp;#x73B0;&amp;#x5728;&amp;#x7684;&amp;#x7406;&amp;#x89E3;&amp;#xFF0C;&amp;#x5176;&amp;#x5B9E;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x662F;&amp;#x4E0D;&amp;#x53EF;&amp;#x53D6;&amp;#x7684;&amp;#xFF0C;&amp;#x9996;&amp;#x5148;&amp;#x9020;&amp;#x6210;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;spec&amp;#x4E0D;&amp;#x6E05;&amp;#x6670;&amp;#xFF0C;&amp;#x8BD5;&amp;#x60F3;&amp;#x4E00;&amp;#x4E2A;&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x600E;&amp;#x4E48;&amp;#x4F1A;&amp;#x8FD4;&amp;#x56DE;&amp;#x53E6;&amp;#x4E00;&amp;#x4E2A;&amp;#x7C7B;&amp;#x7684;&amp;#x5B9E;&amp;#x4F8B;&amp;#x3002;&amp;#x5176;&amp;#x6B21;&amp;#xFF0C;&amp;#x5728;C++&amp;#x4E2D;&amp;#x5F88;&amp;#x96BE;&amp;#x505A;&amp;#x5230;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x3002;&amp;#x597D;&amp;#x7684;&amp;#x505A;&amp;#x6CD5;&amp;#x5E94;&amp;#x5F53;&amp;#x662F;&amp;#x8FD0;&amp;#x7528;Dependency Injection&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#xFF1A;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;A&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;B&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        A* a = &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;new&lt;/span&gt; A;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7C7B;B&amp;#x5E94;&amp;#x5F53;&amp;#x6539;&amp;#x5199;&amp;#x4E3A;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e; font-style: italic;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    void &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(A*)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5C06;&amp;#x7C7B;A&amp;#x6307;&amp;#x9488;&amp;#x4F20;&amp;#x5165;&amp;#xFF0C;&amp;#x89E3;&amp;#x51B3;dependency&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x3002;&lt;/p&gt;&lt;ol start=&#34;3&#34; style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x4F55;&amp;#x80FD;&amp;#x591F;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x5728;&amp;#x4EFB;&amp;#x610F;&amp;#x73AF;&amp;#x5883;&amp;#x4E0B;&amp;#x5747;&amp;#x8FD4;&amp;#x56DE;&amp;#x540C;&amp;#x6837;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7ED3;&amp;#x679C;&amp;#x3002; &lt;br&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x4E00;&amp;#x822C;&amp;#x6D89;&amp;#x53CA;&amp;#x6D4B;&amp;#x8BD5;&amp;#x73AF;&amp;#x5883;&amp;#x7684;&amp;#x5F71;&amp;#x54CD;&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#x8C03;&amp;#x7528;&amp;#x7F51;&amp;#x7EDC;&amp;#x76F8;&amp;#x5173;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#xFF0C;&amp;#x5728;&amp;#x6CA1;&amp;#x6709;&amp;#x7F51;&amp;#x7EDC;&amp;#x7684;&amp;#x73AF;&amp;#x5883;&amp;#x5C31;&amp;#x6CA1;&amp;#x6CD5;&amp;#x8FDB;&amp;#x884C;&amp;#x3002;&amp;#x518D;&amp;#x4F8B;&amp;#x5982;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#x64CD;&amp;#x4F5C;&amp;#x771F;&amp;#x5B9E;&amp;#x5177;&amp;#x4F53;&amp;#x6587;&amp;#x4EF6;&amp;#xFF0C;&amp;#x5219;&amp;#x8BE5;&amp;#x6587;&amp;#x4EF6;&amp;#x88AB;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5916;&amp;#x4EBA;&amp;#x4E3A;&amp;#x6216;&amp;#x4EE3;&amp;#x7801;&amp;#x4FEE;&amp;#x6539;&amp;#xFF0C;&amp;#x5219;&amp;#x6D4B;&amp;#x8BD5;&amp;#x53EF;&amp;#x80FD;&amp;#x5C31;&amp;#x4F1A;&amp;#x83AB;&amp;#x540D;&amp;#x5931;&amp;#x8D25;&amp;#x3002; &lt;br&gt;&amp;#x9488;&amp;#x5BF9;&amp;#x8FD9;&amp;#x4E9B;&amp;#x60C5;&amp;#x51B5;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x5E94;&amp;#x5F53;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E2D;&amp;#x5C3D;&amp;#x91CF;&amp;#x907F;&amp;#x514D;&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#x524D;&amp;#x8005;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x5E94;&amp;#x5F53;&amp;#x5BF9;&amp;#x7F51;&amp;#x7EDC;&amp;#x63A5;&amp;#x53E3;&amp;#x8FDB;&amp;#x884C;Mock&amp;#x5316;&amp;#xFF0C;&amp;#x540E;&amp;#x8005;&amp;#x5E94;&amp;#x5F53;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7684;setUp&amp;#x548C;tearDown&amp;#x4E2D;&amp;#x751F;&amp;#x6210;&amp;#x865A;&amp;#x5047;&amp;#x6587;&amp;#x4EF6;&amp;#x7528;&amp;#x4E8E;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x5E76;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5B8C;&amp;#x6210;&amp;#x65F6;&amp;#x505A;&amp;#x6E05;&amp;#x7406;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x4F1A;&amp;#x56E0;&amp;#x4E3A;&amp;#x5F88;&amp;#x5C0F;&amp;#x7684;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;&amp;#x6539;&amp;#x52A8;&amp;#xFF0C;&amp;#x800C;&amp;#x5BFC;&amp;#x81F4;&amp;#x5927;&amp;#x9762;&amp;#x79EF;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5931;&amp;#x8D25;&amp;#xFF0C;&amp;#x751A;&amp;#x81F3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5D29;&amp;#x6E83;&amp;#x3002; &lt;br&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5C31;&amp;#x662F;gmock&amp;#x6587;&amp;#x6863;&amp;#x4E2D;&amp;#x63D0;&amp;#x5230;&amp;#x7684;&amp;#x8981;&amp;#x9488;&amp;#x5BF9;&amp;#x63A5;&amp;#x53E3;&amp;#x7F16;&amp;#x7A0B;&amp;#xFF0C;&amp;#x9488;&amp;#x5BF9;&amp;#x63A5;&amp;#x53E3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;Robert C&amp;#xB7;Martin&amp;#x5728;&amp;#x300A;&amp;#x654F;&amp;#x6377;&amp;#x8F6F;&amp;#x4EF6;&amp;#x5F00;&amp;#x53D1;&amp;#xFF0D;&amp;#x539F;&amp;#x5219;&amp;#x3001;&amp;#x6A21;&amp;#x5F0F;&amp;#x4E0E;&amp;#x5B9E;&amp;#x8DF5;&amp;#x300B;&amp;#x4E00;&amp;#x4E66;&amp;#x4E2D;&amp;#x6709;&amp;#x63D0;&amp;#x51FA;&amp;#xFF1A;&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x90FD;&amp;#x5E94;&amp;#x4F9D;&amp;#x8D56;&amp;#x4E8E;&amp;#x62BD;&amp;#x8C61;&amp;#x63A5;&amp;#x53E3;&amp;#x3002;&amp;#x56E0;&amp;#x4E3A;&amp;#x62BD;&amp;#x8C61;&amp;#x63A5;&amp;#x53E3;&amp;#x662F;&amp;#x7ECF;&amp;#x8FC7;&amp;#x62BD;&amp;#x8C61;&amp;#x7684;&amp;#xFF0C;&amp;#x76F8;&amp;#x5BF9;&amp;#x5177;&amp;#x4F53;&amp;#x7684;&amp;#x5B9E;&amp;#x73B0;&amp;#x4EE3;&amp;#x7801;&amp;#x8F83;&amp;#x4E3A;&amp;#x7A33;&amp;#x5B9A;&amp;#x3002;&amp;#x800C;&amp;#x88AB;&amp;#x4F9D;&amp;#x8D56;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x5E94;&amp;#x8BE5;&amp;#x5C3D;&amp;#x53EF;&amp;#x80FD;&amp;#x4FDD;&amp;#x6301;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x8FD9;&amp;#x6837;&amp;#x57FA;&amp;#x4E8E;&amp;#x4E4B;&amp;#x4E0A;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x624D;&amp;#x4E0D;&amp;#x4F1A;&amp;#x56E0;&amp;#x4E3A;&amp;#x4F9D;&amp;#x8D56;&amp;#x7684;&amp;#x6539;&amp;#x52A8;&amp;#x800C;&amp;#x6539;&amp;#x52A8;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0B;&amp;#x9762;&amp;#x5217;&amp;#x51FA;&amp;#x51E0;&amp;#x79CD;&amp;#x6211;&amp;#x5728;&amp;#x5B9E;&amp;#x9645;&amp;#x5199;test case&amp;#x65F6;&amp;#x9047;&amp;#x5230;&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#xFF0C;&amp;#x5728;gmock&amp;#x4E2D;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x65B9;&amp;#x6848;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x6309;&amp;#x7167;&amp;#x51FD;&amp;#x6570;&amp;#x53C2;&amp;#x6570;&amp;#x8FD4;&amp;#x56DE;&amp;#x7ED3;&amp;#x679C; - Fake&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F8B;&amp;#x5982;:&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;class A&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    virtual &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;EXPECT_CALL&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(mockA, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;func&lt;/span&gt;()&lt;/span&gt;)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;WillRepeatedly&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(a+b)&lt;/span&gt;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gmock&amp;#x4E2D;&amp;#x53EF;&amp;#x4EE5;&amp;#x8FD9;&amp;#x6837;&amp;#x505A;&amp;#xFF1A;Using Functions/Methods/Functors as Actions&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Invoke;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockFoo : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; Foo &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    MOCK_METHOD2(Sum, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; y));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    MOCK_METHOD1(ComplexJob, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bool&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; x));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;CalculateSum&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; x + y; &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; Helper &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;ComplexJob&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;MockFoo foo;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;Helper helper;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(foo, Sum(_, _))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(Invoke(CalculateSum));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(foo, ComplexJob(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(Invoke(&amp;amp;helper, &amp;amp;Helper::ComplexJob));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;foo.Sum(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Invokes CalculateSum(5, 6).&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;foo.ComplexJob(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Invokes helper.ComplexJob(10);&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mock non-virtual&amp;#x51FD;&amp;#x6570;&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// A simple packet stream class. None of its members is virtual.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; ConcretePacketStream &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;AppendPacket&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(Packet* new_packet)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt; Packet* &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;GetPacket&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;size_t&lt;/span&gt; packet_number)&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt; NumberOfPackets() &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// A mock packet stream class. It inherits from no other, but defines&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// GetPacket() and NumberOfPackets().&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockPacketStream &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        MOCK_CONST_METHOD1(GetPacket, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt; Packet*(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt; packet_number));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        MOCK_CONST_METHOD0(NumberOfPackets, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketStream&amp;gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;CreateConnection&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(PacketStream* stream)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketStream&amp;gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketReader &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;ReadPackets&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(PacketStream* stream, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;size_t&lt;/span&gt; packet_num)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;MockPacketStream mock_stream;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mock_stream, ...)...;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;.. &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;set&lt;/span&gt; more expectations on mock_stream ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;PacketReader&amp;lt;MockPacketStream&amp;gt; reader(&amp;amp;mock_stream);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;... exercise reader ...&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E3A;&amp;#x4EC0;&amp;#x4E48;&amp;#x8981;&amp;#x8FD9;&amp;#x4E48;&amp;#x505A;&amp;#xFF1F; &lt;br&gt;&amp;#x56E0;&amp;#x4E3A;&amp;#x53EA;&amp;#x80FD;&amp;#x8FD9;&amp;#x4E48;&amp;#x505A;&amp;#x3002;&amp;#x666E;&amp;#x901A;&amp;#x7684;mock&amp;#xFF0C;&amp;#x8981;&amp;#x901A;&amp;#x8FC7;&amp;#x7EE7;&amp;#x627F;&amp;#x88AB;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7C7B;&amp;#xFF0C;&amp;#x5E76;&amp;#x91CD;&amp;#x5199;virtual&amp;#x51FD;&amp;#x6570;&amp;#x6765;&amp;#x5B9E;&amp;#x73B0;&amp;#x3002;&amp;#x800C;&amp;#x4E0A;&amp;#x9762;&amp;#x7684;ConcretePacketStream&amp;#x548C;MockPacketStream&amp;#x5E76;&amp;#x4EFB;&amp;#x4F55;&amp;#x6CA1;&amp;#x6709;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;&amp;#x8BF4;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F20;&amp;#x5165;&amp;#x540E;&amp;#x8005;&amp;#x7684;&amp;#x6307;&amp;#x9488;&amp;#xFF0C;&amp;#x4E0D;&amp;#x7528;reinterpret_cast&amp;#x662F;&amp;#x4E0D;&amp;#x80FD;&amp;#x8F6C;&amp;#x6210;&amp;#x524D;&amp;#x8005;&amp;#x7684;&amp;#x6307;&amp;#x9488;&amp;#x7684;&amp;#x3002; &lt;br&gt;&amp;#x6240;&amp;#x4EE5;&amp;#x60F3;&amp;#x4E00;&amp;#x4E2A;&amp;#x53D8;&amp;#x901A;&amp;#x7684;&amp;#x529E;&amp;#x6CD5;&amp;#xFF0C;&amp;#x7528;&amp;#x6A21;&amp;#x677F;&amp;#x7C7B;&amp;#x6765;&amp;#x5B9A;&amp;#x4E49;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;&amp;#xFF0C;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#x4F20;&amp;#x5165;mock&amp;#x7C7B;&amp;#xFF0C;&amp;#x5728;&amp;#x751F;&amp;#x4EA7;&amp;#x65F6;&amp;#xFF0C;&amp;#x4F20;&amp;#x5165;&amp;#x771F;&amp;#x5B9E;&amp;#x7C7B;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mocking Side Effects&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mutator, MutateInt(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(DoAll(SetArgPointee&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;), Return(true)));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mutator, Mutate(NotNull(), &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(SetArrayArgument&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(values, values + &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7B2C;&amp;#x4E00;&amp;#x4E2A;&amp;#x5C06;MutateInt&amp;#x7B2C;&amp;#x4E00;&amp;#x4E2A;&amp;#x53C2;&amp;#x6570;&amp;#x6307;&amp;#x9488;&amp;#x6307;&amp;#x5411;&amp;#x7684;int&amp;#xFF0C;&amp;#x8BBE;&amp;#x4E3A;5&amp;#xFF0C;&amp;#x5E76;&amp;#x8FD4;&amp;#x56DE;true&amp;#x3002; &lt;br&gt;&amp;#x7B2C;&amp;#x4E8C;&amp;#x4E2A;&amp;#x5C06;values&amp;#x6570;&amp;#x7EC4;&amp;#x7684;[0,5)&amp;#x62F7;&amp;#x8D1D;&amp;#x5230;&amp;#x53C2;&amp;#x6570;1&amp;#x6307;&amp;#x5411;&amp;#x7684;&amp;#x5730;&amp;#x5740;&amp;#x3002; &lt;br&gt;&amp;#x5982;&amp;#x679C;&amp;#x4ECD;&amp;#x9700;&amp;#x8981;&amp;#x8FD4;&amp;#x56DE;&amp;#xFF0C;&amp;#x5219;&amp;#x7528;DoAll&amp;#xFF0C;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mutator, MutateInt(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;      .WillOnce(DoAll(SetArgPointee&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;),&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;                      &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;true&lt;/span&gt;)));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Selecting an Action&amp;#x2019;s Arguments&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Invoke;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;MyIsVisibleInQuadrant1&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; visible, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;string&lt;/span&gt;&amp;amp; name, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; y,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;map&lt;/span&gt;&amp;lt;pair&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;&amp;gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt;&amp;gt;&amp;amp; weight,&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt; min_weight, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt; max_wight) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; IsVisibleInQuadrant1(visible, x, y);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;.&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;..&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(Invoke(MyIsVisibleInQuadrant1)); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Now it works.&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5B9A;&amp;#x4E49;&amp;#x81EA;&amp;#x5DF1;&amp;#x7684;adaptor MyIsVisibleInQuadrant1&amp;#xFF0C;&amp;#x6216;&amp;#x8005;&amp;#x7528;gmock&amp;#x63D0;&amp;#x4F9B;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x4F18;&amp;#x96C5;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:Invoke;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:WithArgs;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mock, Foo(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;.WillOnce(WithArgs&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;3&lt;/span&gt;&amp;gt;(Invoke(IsVisibleInQuadrant1)));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// No need to define your own adaptor.&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mocking Private or Protected Methods&lt;/h4&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Transform&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;Gadget* g&lt;/span&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;protected&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Resume&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;private&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;GetTimeOut&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;MockFoo&lt;/span&gt; : &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        MOCK_METHOD1(Transform, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bool&lt;/span&gt;(Gadget* g));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// The following must be in the public section, even though the&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// methods are protected or private in the base class.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        MOCK_METHOD0(Resume, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        MOCK_METHOD0(GetTimeOut, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;C++ allows a subclass to specify a different access level than the base class on a virtual function.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Misc&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Keep in mind that one doesn&amp;#x2019;t have to verify more than one property in one test. In fact, it&amp;#x2019;s a good style to verify only one &lt;br&gt;thing in one test. If you do that, a bug will likely break only one or two tests instead of dozens&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;When it&amp;#x2019;s being destroyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, &lt;br&gt;and will generate Google Test failures if not. &lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Currently these are only platforms that support the pthreads library (this includes Linux and Mac). &lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x52A0;&amp;#x4E0A;&amp;#x547D;&amp;#x4EE4;&amp;#x884C;&amp;#x53C2;&amp;#x6570;&amp;#x2013;gmock_verbose=info&amp;#x53EF;&amp;#x4EE5;&amp;#x663E;&amp;#x793A;&amp;#x6240;&amp;#x6709;EXPECT_CALL&amp;#x7684;&amp;#x5177;&amp;#x4F53;&amp;#x8C03;&amp;#x7528;&amp;#x60C5;&amp;#x51B5;&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;Some useful tips in gtest&lt;/h2&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Selecting Tests&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;If you set the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;GTEST_FILTER&lt;/strong&gt; environment variable or the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x2013;gtest_filter&lt;/strong&gt; flag to a filter string, Google Test will only run the tests whose full names (in the form of TestCaseName.TestName) match the filter. &lt;br&gt;The format of a filter is a &amp;#x2018;:&amp;#x2019;-separated list of wildcard patterns (called the positive patterns) optionally followed by a &amp;#x2018;-&amp;#x2019; and another &amp;#x2018;:&amp;#x2019;-separated pattern list (called the negative patterns).&lt;/p&gt;&lt;/blockquote&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test Has no flag, and thus runs all its tests.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=* Also runs everything, due to the single match-everything * value.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=FooTest.* Runs everything in test case FooTest.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=&lt;em style=&#34;line-height: 1.6;&#34;&gt;Null&lt;/em&gt;:&lt;em style=&#34;line-height: 1.6;&#34;&gt;Constructor&lt;/em&gt; Runs any test whose full name contains either &amp;#x201C;Null&amp;#x201D; or &amp;#x201C;Constructor&amp;#x201D;.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=-&lt;em style=&#34;line-height: 1.6;&#34;&gt;DeathTest.&lt;/em&gt; Runs all non-death tests.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=FooTest.*-FooTest.Bar Runs everything in test case FooTest except FooTest.Bar&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Temporarily Disabling Tests&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Tests that Foo does Abc.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;TEST(FooTest, DISABLED_DoesAbc) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; DISABLED_BarTest : public ::testing::Test &amp;#123; ... &amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Tests that Bar does Xyz.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;TEST_F(DISABLED_BarTest, DoesXyz) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Temporarily Enabling Disabled Tests&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;just invoke the test program with the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x2013;gtest_also_run_disabled_tests&lt;/strong&gt; flag or set the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;GTEST_ALSO_RUN_DISABLED_TESTS&lt;/strong&gt; environment variable to a value other than 0.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Repeating the Tests&lt;/h3&gt;&lt;table style=&#34;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&#34;&gt;&lt;thead style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=1000&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat foo_test 1000 times and don&amp;#x2019;t stop at failures.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=-1&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;A negative count means repeating forever.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=1000 &amp;#x2013;gtest_break_on_failure&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat foo_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;$ foo_test &amp;#x2013;gtest_repeat=1000 &amp;#x2013;gtest_filter=FooBar&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat the tests whose name matches the filter 1000 times.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;center style=&#34;display:none&#34;&gt;%23%20C/C++%20Test%20Framework%20-%20Google%20Test%20%26%20Google%20Mock%0A@%28myblog%29%5BTDD%2C%20gtest%2C%20gmock%5D%0A%0AGoogle%20Test%uFF0CGoogle%20Mock%u4EE5%u4E0B%u7B80%u79F0gtest%uFF0Cgmock%u3002%0A%u5728%u63A5%u89E6gtest%uFF0Cgmock%u4E4B%u524D%uFF0C%u6D4B%u8BD5C/C++%20code%u4F7F%u7528%5BUnitTest++%5D%28https%3A//github.com/unittest-cpp/unittest-cpp%29%u3002%u8FD9%u662F%u4E00%u4E2A%u5F88%u7B80%u6D01%u7684%u6846%u67B6%uFF0C%u4E0A%u624B%u5F88%u5FEB%u3002%u53C2%u770B%u53E6%u4E00%u7BC7%u535A%u6587%5BUnitTest++%u7B80%u4ECB%5D%28https%3A//zhougy0717.github.io/2016/02/29/UnitTest++%25E7%25AE%2580%25E4%25BB%258B/%29%u3002%u6D4B%u8BD5%u76F8%u5173%u7684%u529F%u80FD%u591F%u7528%uFF0C%u4F46%u662F%u6CA1%u6709mock%u5E93%u3002%u8FD9%u5E26%u6765%u7684%u95EE%u9898%u662F%uFF1A%0A1.%20%u6D4B%u8BD5%u9057%u7559%u4EE3%u7801%u7684%u65F6%u5019%uFF0C%u9700%u8981%u81EA%u884Cfake%u76F8%u5173%u4EE3%u7801%u3002%u8FD9%u4E2A%u5728%u9057%u7559%u7CFB%u7EDF%u5F88%u5E9E%u5927%u65F6%uFF0C%u8981%u9887%u8D39%u5FC3%u529B%u3002%u800C%u4E14%u8FC7%u591A%u6D89%u53CA%u7EC6%u8282%uFF0C%u5BFC%u81F4%u6D4B%u8BD5%u6781%u4E0D%u7A33%u5B9A%uFF0C%u7CFB%u7EDF%u4EE3%u7801%u4EFB%u610F%u7684%u6F14%u8FDB%uFF0C%u90FD%u4F1A%u5BFC%u81F4%u5927%u5806%u7684%u6D4B%u8BD5%u5931%u8D25%uFF0C%u751A%u81F3%u6D4B%u8BD5%u65E0%u6CD5%u8FDB%u884C%u3002%0A2.%20%u6D4B%u8BD5case%u4E4B%u95F4%u65E0%u6CD5%u5F88%u597D%u7684%u89E3%u8026%u3002%u7ED3%u679C%u540C%u6837%u662F%u6D4B%u8BD5%u4E0D%u591F%u7A33%u5B9A%u3002%u672F%u8BED%u662F%u6D4B%u8BD5%u4EE3%u7801%u5F88%u201C%u8106%u5F31%u201D%u3002%0A%0AJava%uFF0CPython%uFF0CJavaScript%u90FD%u6709%u81EA%u5DF1%u7684mock%u5E93%u3002Python%u7684Mock%u7C7B%uFF0CJava%u7684Mockito/PowerMock%uFF0CJavaScript%u7684Sinon%u3002%u4E8E%u662F%uFF0C%u5728%u7F51%u4E0A%u641C%u7D22%u4E86%u4E00%u4E0BC/C++%u7684Mock%u5E93%uFF0C%u4E8E%u662F%u770B%u5230%u4E86gtest%uFF0Cgmock%u3002%u7136%u540E%u5C31%u6709%u4E86%u8FD9%u4E00%u7BC7%u3002%0A%0A%23%23%20%u7B80%u4ECB%0A%u4E0D%u7528%u53BB%u7F51%u4E0A%u8D39%u5FC3%u627E%u6559%u7A0B%uFF0C%u4E24%u4E2A%u9879%u76EE%u7684%u6587%u6863%u90FD%u975E%u5E38%u68D2%u3002%u5165%u53E3%u7EDF%u4E00%u5728%5Bgtest%20GitHub%u9879%u76EE%u4E3B%u9875%5D%28https%3A//github.com/google/googletest%29%u4E0A%u3002%u800C%u4E14%u8BE5%u6587%u6863%u4E0D%u4EC5%u5F88%u597D%u7684%u4ECB%u7ECD%u4E86gtest%uFF0Cgmock%u7684%u7528%u6CD5%uFF0C%u5176%u4E2D%u8FD8%u6D89%u53CA%u4E86%u5F88%u591ATDD%u6216%u8005UnitTest%u7684%u771F%u77E5%u707C%u89C1%uFF0C%u5F88%u503C%u5F97%u8BFB%u4E00%u8BFB%u3002%0A%u8981%u4F7F%u7528gtest%u975E%u5E38%u7B80%u5355%uFF1A%u7F16%u8BD1%u51FAgtest%uFF0Cgmock%uFF0C%u518D%u94FE%u5165%u4F60%u7684%u6D4B%u8BD5%u7A0B%u5E8F%u3002%0A%0A%23%23%23%20%u7F16%u8BD1gtest/gmock%0Agtest%uFF0Cgmock%u5747%u7528cmake%u6765%u7BA1%u7406%u8DE8%u5E73%u53F0%uFF0C%u5148%u7528cmake%u6765%u751F%u6210Makefile%u3002%u7528%u547D%u4EE4%60cmake%20-G%20%22Unix%20Makefiles%22%20/path/to/CMakeList.txt%60%0A%0A%23%23%23%20Makefile%0A%u7136%u540E%u6309%u7167%u4E0B%u9762%u7F16%u5199Makefile%u3002%u6CE8%u610Fgmock_main%u662F%u4E00%u4E2Amain%u51FD%u6570%u6765%u8C03%u7528%u6240%u6709%u7684test%20case%uFF0C%u7701%u5F97%u81EA%u5DF1%u5199main%u51FD%u6570%u4E86%u3002%0A%60%60%60%0ACC%20%3D%20gcc%0ACPP%20%3D%20g++%0ALINK%20%3D%20g++%0ACFLAGS%20%3D%20-g%20-Wall%20-Werror%20-Wextra%20-std%3Dgnu99%0ACPPFLAGS%20%3D%20-g%20-Wall%20-Werror%20-Wextra%0ALIBS%20%3D%20-L./lib%20-lgtest%20-lgmock%20-lgmock_main%20-lpthread%0A%0AC__SOURCES%20%3D%20%24%28wildcard%20*.c%29%0ACPPSOURCES%20%3D%20%24%28wildcard%20*.cpp%29%0AOBJECTS%20%3D%20%24%28patsubst%20%25.c%2C%20%25.o%2C%20%24%28C__SOURCES%29%29%20%24%28patsubst%20%25.cpp%2C%20%25.o%2C%20%24%28CPPSOURCES%29%29%0ATARGET%20%3D%20test_exe%0A%0Afirst%3A%20all%0A%0A%25.o%3A%20%25.c%0A%20%20%20%20%24%28CC%29%20%24%28INCLUDES%29%20-c%20%24%28CFLAGS%29%20-o%20%24@%20%24%3C%0A%0A%25.o%3A%20%25.cpp%0A%20%20%20%20%24%28CPP%29%20%24%28INCLUDES%29%20-c%20%24%28CPPFLAGS%29%20-o%20%24@%20%24%3C%0A%0Aall%3A%20%24%28TARGET%29%0A%0A%24%28TARGET%29%3A%20%24%28OBJECTS%29%0A%20%20%20%20%24%28LINK%29%20%24%28CPPFLAGS%29%20%24%28LIBS%29%20-o%20%24%28TARGET%29%20%24%28OBJECTS%29%0A%0A.PHONY%20%3A%20clean%0A%0Aclean%3A%0A%20%20%20%20rm%20-f%20%24%28TARGET%29%20%24%28OBJECTS%29%0A%60%60%60%0A%0A%23%23%23%20Terms%0A%7C%20Meaning%20%20%20%20%7C%20Google%20Test%20Term%20%7C%20ISTQB%20Term%20%7C%0A%7C%20%3A--------%3A%20%7C%20%3A--------------%3A%20%7C%20%3A--------%3A%20%7C%0A%7C%20Exercise%20a%20particular%20program%20path%20with%20specific%20input%20values%20and%20verify%20the%20results%20%7C%20TEST%28%29%20%7C%20Test%20Case%0A%7CA%20set%20of%20several%20tests%20related%20to%20one%20component%20%7C%20Test%20Case%20%7C%20Test%20Suite%0A%0A%23%23%23%20Test%0A%60%60%60%0A%23include%20%22gtest/gtest.h%22%0A%23include%20%22gmock/gmock.h%22%0A%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0Ausing%20%3A%3Atesting%3A%3ATest%3B%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AAtLeast%3B%0A%0ATEST%28TestCaseName%2C%20should_this_test_do%29%0A%7B%0A%09...%0A%20%20%20%20EXPECT_STREQ%28%22%7B%7D%22%2C%20str%29%3B%0A%7D%0A%60%60%60%0A%u4E2D%u95F4%u7684%u90A3%u5806namespace%u90FD%u662Fgtest/gmock%u5E93%u91CC%u5B9A%u4E49%u7684matcher%u5B8F%u6216%u8005%u5404%u79CD%u6709%u7528%u7684%u5B8F%u3002%0A%0A%23%23%23%20Test%20Fixture%0A%u5728%u6D4B%u8BD5%u6709%u91CD%u590D%u7684%u65F6%u5019%uFF0C%u5C31%u8981%u7528%u5230Test%20Fixture%u4E86%uFF0C%u4E5F%u5C31%u662FsetUp%20/%20tearDown%u3002%0A%60%60%60%0Aclass%20QueueTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%0A%20protected%3A%0A%20%20virtual%20void%20SetUp%28%29%20%7B%0A%20%20%20%20q1_.Enqueue%281%29%3B%0A%20%20%20%20q2_.Enqueue%282%29%3B%0A%20%20%20%20q2_.Enqueue%283%29%3B%0A%20%20%7D%0A%0A%20%20//%20virtual%20void%20TearDown%28%29%20%7B%7D%0A%0A%20%20Queue%3Cint%3E%20q0_%3B%0A%20%20Queue%3Cint%3E%20q1_%3B%0A%20%20Queue%3Cint%3E%20q2_%3B%0A%7D%3B%0A%0ATEST_F%28QueueTest%2C%20IsEmptyInitially%29%20%7B%0A%20%20EXPECT_EQ%280%2C%20q0_.size%28%29%29%3B%0A%7D%0A%0ATEST_F%28QueueTest%2C%20DequeueWorks%29%20%7B%0A%20%20int*%20n%20%3D%20q0_.Dequeue%28%29%3B%0A%20%20EXPECT_EQ%28NULL%2C%20n%29%3B%0A%0A%20%20n%20%3D%20q1_.Dequeue%28%29%3B%0A%20%20ASSERT_TRUE%28n%20%21%3D%20NULL%29%3B%0A%20%20EXPECT_EQ%281%2C%20*n%29%3B%0A%20%20EXPECT_EQ%280%2C%20q1_.size%28%29%29%3B%0A%20%20delete%20n%3B%0A%0A%20%20n%20%3D%20q2_.Dequeue%28%29%3B%0A%20%20ASSERT_TRUE%28n%20%21%3D%20NULL%29%3B%0A%20%20EXPECT_EQ%282%2C%20*n%29%3B%0A%20%20EXPECT_EQ%281%2C%20q2_.size%28%29%29%3B%0A%20%20delete%20n%3B%0A%7D%0A%60%60%60%0A%23%23%23%23%20constructor/destructor%20vs.%20SetUp/TearDown%0A%3EWhen%20you%20need%20to%20write%20per-test%20set-up%20and%20tear-down%20logic%2C%20you%20have%20the%20choice%20between%20using%20the%20test%20fixture%20constructor/destructor%20or%20SetUp%28%29/TearDown%28%29.%20The%20former%20is%20usually%20preferred%2C%20as%20it%20has%20the%20following%20benefits%3A%0A%0A%3E-%20By%20initializing%20a%20member%20variable%20in%20the%20constructor%2C%20we%20have%20the%20option%20to%20make%20it%20const%2C%20which%20helps%20prevent%20accidental%20changes%20to%20its%20value%20and%20makes%20the%20tests%20more%20obviously%20correct.%0A-%20**In%20case%20we%20need%20to%20subclass%20the%20test%20fixture%20class%2C%20the%20subclass%27%20constructor%20is%20guaranteed%20to%20call%20the%20base%20class%27%20constructor%20first%2C%20and%20the%20subclass%27%20destructor%20is%20guaranteed%20to%20call%20the%20base%20class%27%20destructor%20afterward.%20**With%20SetUp%28%29/TearDown%28%29%2C%20a%20subclass%20may%20make%20the%20mistake%20of%20forgetting%20to%20call%20the%20base%20class%27%20SetUp%28%29/TearDown%28%29%20or%20call%20them%20at%20the%20wrong%20moment.%0A%0A%3E%20Benefit%20for%20using%20SetUp/TearDown%3A%0A%0A%3E-%20If%20the%20tear-down%20operation%20could%20throw%20an%20exception%2C%20you%20must%20use%20TearDown%28%29%20as%20opposed%20to%20the%20destructor%2C%20as%20throwing%20in%20a%20destructor%20leads%20to%20undefined%20behavior%20and%20usually%20will%20kill%20your%20program%20right%20away.%20Note%20that%20many%20standard%20libraries%20%28like%20STL%29%20may%20throw%20when%20exceptions%20are%20enabled%20in%20the%20compiler.%20Therefore%20you%20should%20prefer%20TearDown%28%29%20if%20you%20want%20to%20write%20portable%20tests%20that%20work%20with%20or%20without%20exceptions.%0A-%20The%20assertion%20macros%20throw%20an%20exception%20when%20flag%20--gtest_throw_on_failure%20is%20specified.%20Therefore%2C%20you%20shouldn%27t%20use%20Google%20Test%20assertions%20in%20a%20destructor%20if%20you%20plan%20to%20run%20your%20tests%20with%20this%20flag.%0A-%20In%20a%20constructor%20or%20destructor%2C%20you%20cannot%20make%20a%20virtual%20function%20call%20on%20this%20object.%20%28You%20can%20call%20a%20method%20declared%20as%20virtual%2C%20but%20it%20will%20be%20statically%20bound.%29%20Therefore%2C%20if%20you%20need%20to%20call%20a%20method%20that%20will%20be%20overriden%20in%20a%20derived%20class%2C%20you%20have%20to%20use%20SetUp%28%29/TearDown%28%29.%0A%0A%u7B80%u8A00%u4E4B%uFF0C%u5728%u903B%u8F91%u4E0A%uFF0C%u8FD9%u4E24%u7EC4%u7684%u4F5C%u7528%u76F8%u540C%uFF0C%u90FD%u662F%u6BCF%u4E2A%u6D4B%u8BD5%u4E4B%u524D%u4E4B%u540E%u4F1A%u505A%u4E00%u4E9B%u5904%u7406%u5DE5%u4F5C%u3002Constructor/Destructor%u7684%u597D%u5904%u662F%u63D0%u4F9B%u4E86%u7EE7%u627F%u3002setUp/tearDown%u7684%u597D%u5904%u662F%u53EF%u4EE5%u5904%u7406exception%uFF0C%u8FD9%u662F%u4E0D%u80FD%u653E%u5728%u6790%u6784%u51FD%u6570%u91CC%u7684%u3002%0A%23%23%23%20SetUpTestCase%20/%20TearDownTestCase%0ATest%20Case%u7EA7%u522B%u7684SetUp/TearDown%0A%60%60%60%0Aclass%20FooTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%0A%20protected%3A%0A%20%20//%20Per-test-case%20set-up.%0A%20%20//%20Called%20before%20the%20first%20test%20in%20this%20test%20case.%0A%20%20//%20Can%20be%20omitted%20if%20not%20needed.%0A%20%20static%20void%20SetUpTestCase%28%29%20%7B%0A%20%20%20%20shared_resource_%20%3D%20new%20...%3B%0A%20%20%7D%0A%0A%20%20//%20Per-test-case%20tear-down.%0A%20%20//%20Called%20after%20the%20last%20test%20in%20this%20test%20case.%0A%20%20//%20Can%20be%20omitted%20if%20not%20needed.%0A%20%20static%20void%20TearDownTestCase%28%29%20%7B%0A%20%20%20%20delete%20shared_resource_%3B%0A%20%20%20%20shared_resource_%20%3D%20NULL%3B%0A%20%20%7D%0A%0A%20%20//%20You%20can%20define%20per-test%20set-up%20and%20tear-down%20logic%20as%20usual.%0A%20%20virtual%20void%20SetUp%28%29%20%7B%20...%20%7D%0A%20%20virtual%20void%20TearDown%28%29%20%7B%20...%20%7D%0A%0A%20%20//%20Some%20expensive%20resource%20shared%20by%20all%20tests.%0A%20%20static%20T*%20shared_resource_%3B%0A%7D%3B%0A%60%60%60%0A%23%23%23%20SetUp/TearDown%20Environment%20%0A%3E-%20First%2C%20you%20subclass%20the%20%3A%3Atesting%3A%3AEnvironment%20class%20to%20define%20a%20test%20environment%2C%20which%20knows%20how%20to%20set-up%20and%20tear-down%3A%0A%3E-%20Then%2C%20you%20register%20an%20instance%20of%20your%20environment%20class%20with%20Google%20Test%20by%20calling%20the%20%60%3A%3Atesting%3A%3AAddGlobalTestEnvironment%28%29%60%20function%3A%0A%3ENow%2C%20when%20RUN_ALL_TESTS%28%29%20is%20called%2C%20it%20first%20calls%20the%20SetUp%28%29%20method%20of%20the%20environment%20object%2C%20then%20runs%20the%20tests%20if%20there%20was%20no%20fatal%20failures%2C%20and%20finally%20calls%20TearDown%28%29%20of%20the%20environment%20object.%0A-%20It%27s%20OK%20to%20register%20multiple%20environment%20objects.%20In%20this%20case%2C%20their%20SetUp%28%29%20will%20be%20called%20in%20the%20order%20they%20are%20registered%2C%20and%20their%20TearDown%28%29%20will%20be%20called%20in%20the%20reverse%20order.%0A-%20Note%20that%20Google%20Test%20takes%20ownership%20of%20the%20registered%20environment%20objects.%20Therefore%20do%20not%20delete%20them%20by%20yourself.%0A%0A%60%60%60%0Aclass%20Environment%20%7B%0A%20public%3A%0A%20%20virtual%20%7EEnvironment%28%29%20%7B%7D%0A%20%20//%20Override%20this%20to%20define%20how%20to%20set%20up%20the%20environment.%0A%20%20virtual%20void%20SetUp%28%29%20%7B%7D%0A%20%20//%20Override%20this%20to%20define%20how%20to%20tear%20down%20the%20environment.%0A%20%20virtual%20void%20TearDown%28%29%20%7B%7D%0A%7D%3B%0A%0AEnvironment*%20AddGlobalTestEnvironment%28Environment*%20env%29%3B%0A%60%60%60%0A%23%23%23%20%u65AD%u8A00%0A%u6709%u4E24%u79CD%u65AD%u8A00EXPECT%5C_xxx%u548CASSERT%5C_xxx%u3002%u524D%u8005%u4F1A%u8BA9%u6D4B%u8BD5%u7EC8%u6B62%uFF0C%u540E%u8005%u4E0D%u4F1A%uFF0C%u53EA%u4F1A%u8BA9%u6D4B%u8BD5fail%u3002%0A%0A%0A%23%23%20gmock%0A%u4E4B%u6240%u4EE5%u8981%u5207%u5230gtest%uFF0C%u552F%u4E00%u7684%u539F%u56E0%u5C31%u662Fgmock%uFF0C%u6240%u4EE5%u8981%u4E13%u5F00%u4E00%u7AE0%u91CD%u70B9%u4ECB%u7ECD%u4E00%u4E0B%u3002%u6240%u6709%u5185%u5BB9%u5747%u6765%u81EA%u4E8E%u5B98%u65B9%u6587%u6863%u3002%u5185%u5BB9%u6DF1%u5EA6%u7531%u6D45%u5165%u6DF1%uFF0C%u4F9D%u6B21%u5982%u4E0B%uFF1A%0A-%20%5BGoogle%20Mock%20for%20Dummies%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md%29%0A-%20%5BCookBook%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/CookBook.md%29%0A%0A%u6700%u540E%u8FD8%u6709%u53C2%u8003%u624B%u518C%3A%0A-%20%5BCheat%20Sheet%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/CheatSheet.md%29%0A%0A%23%23%23%20%u7B80%u4ECB%0A%3EGoogle%20C++%20Mocking%20Framework%20%28or%20Google%20Mock%20for%20short%29%20is%20a%20library%20%28sometimes%20we%20also%20call%20it%20a%20%22framework%22%20to%20make%20it%20sound%20cool%29%20for%20creating%20mock%20classes%20and%20using%20them.%20It%20does%20to%20C++%20what%20jMock%20and%20EasyMock%20do%20to%20Java.%0A%0A%23%23%23%23%20%u4F55%u4E3AMock%uFF1F%0A%3E**Mocks**%20are%20objects%20pre-programmed%20with%20expectations%2C%20which%20form%20a%20specification%20of%20the%20calls%20they%20are%20expected%20to%20receive.%0A%0A%u76F8%u5E94%u7684%u8FD8%u6709Fake%u548CStub%0A%3E**Fake**%20objects%20have%20working%20implementations%2C%20but%20usually%20take%20some%20shortcut%20%28perhaps%20to%20make%20the%20operations%20less%20expensive%29%2C%20which%20makes%20them%20not%20suitable%20for%20production.%20An%20in-memory%20file%20system%20would%20be%20an%20example%20of%20a%20fake.%0A%0Agmock%u7684%u6587%u6863%u91CC%u53EA%u63D0%u5230%u4E86Fake%uFF0C%u4ECEMartin%20Fowler%u7684%u6587%u7AE0%5BMocks%20Aren%27t%20Stubs%5D%28https%3A//martinfowler.com/articles/mocksArentStubs.html%29%u4E2D%u6458%u5F55%u5982%u4E0B%3A%0A%3E**Stubs**%20provide%20canned%20answers%20to%20calls%20made%20during%20the%20test%2C%20usually%20not%20responding%20at%20all%20to%20anything%20outside%20what%27s%20programmed%20in%20for%20the%20test.%0A%0A%u4E09%u8005%u4F5C%u7528%u76F8%u540C%uFF0C%u90FD%u662F%u6A21%u62DF%u7CFB%u7EDF%u5176%u4ED6%u90E8%u5206%u7684%u529F%u80FD%uFF0C%u8FBE%u5230%u4EE3%u7801%u9694%u79BB%u7684%u6548%u679C%uFF0C%u65B9%u4FBF%u6D4B%u8BD5%u3002%u4F46%u662FMock%u7684%u7279%u70B9%u662F%u66F4OO%u5316%uFF0C%u4E5F%u7B26%u5408TDD%u6216%u8005BDD%u7684%u601D%u60F3%u2014%u2014%u9488%u5BF9%u4E00%u4E2Aobject%u8BBE%u7F6E%u671F%u5F85%uFF0C%u518D%u5BF9%u9F50verify%u3002%0A%0AMocks%20vs.%20Stubs%20-%20from%20Martin%20Fowler%0A%3EIn%20order%20to%20use%20state%20verification%20on%20the%20stub%2C%20I%20need%20to%20make%20some%20extra%20methods%20on%20the%20stub%20to%20help%20with%20verification.%20As%20a%20result%20the%20stub%20implements%20MailService%20but%20adds%20extra%20test%20methods.%0A%0A%3EMock%20objects%20always%20use%20behavior%20verification%2C%20a%20stub%20can%20go%20either%20way.%20Meszaros%20refers%20to%20stubs%20that%20use%20behavior%20verification%20as%20a%20Test%20Spy.%20The%20difference%20is%20in%20how%20exactly%20the%20double%20runs%20and%20verifies%20and%20I%27ll%20leave%20that%20for%20you%20to%20explore%20on%20your%20own.%0A%0A%23%23%23%23%20Getting%20Started%0AClass%20to%20Mock%0A%60%60%60%0Aclass%20Turtle%20%7B%0A%20%20...%0A%20%20virtual%20%7ETurtle%28%29%20%7B%7D%0A%20%20virtual%20void%20PenUp%28%29%20%3D%200%3B%0A%20%20virtual%20void%20PenDown%28%29%20%3D%200%3B%0A%20%20virtual%20void%20Forward%28int%20distance%29%20%3D%200%3B%0A%7D%3B%0A%60%60%60%0AMock%20class%0A%60%60%60%0A%23include%20%22gmock/gmock.h%22%20%20//%20Brings%20in%20Google%20Mock.%0Aclass%20MockTurtle%20%3A%20public%20Turtle%20%7B%0A%20public%3A%0A%20%20...%0A%20%20MOCK_METHOD0%28PenUp%2C%20void%28%29%29%3B%0A%20%20MOCK_METHOD0%28PenDown%2C%20void%28%29%29%3B%0A%20%20MOCK_METHOD1%28Forward%2C%20void%28int%20distance%29%29%3B%0A%7D%3B%0A%60%60%60%0A%u9488%u5BF9%u5F85Mock%u7684Turtle%20class%u8981%u6CE8%u610F%u7684%u662F%3A%0A%3ENote%20that%20the%20**destructor%20of%20Turtle%20must%20be%20virtual**%2C%20as%20is%20the%20case%20for%20all%20classes%20you%20intend%20to%20inherit%20from%20-%20otherwise%20the%20destructor%20of%20the%20derived%20class%20will%20not%20be%20called%20when%20you%20delete%20an%20object%20through%20a%20base%20pointer%2C%20and%20you%27ll%20get%20corrupted%20program%20states%20like%20memory%20leaks.%0A%0AUse%20it%0A%60%60%60%0A%23include%20%22path/to/mock-turtle.h%22%0A%23include%20%22gmock/gmock.h%22%0A%23include%20%22gtest/gtest.h%22%0Ausing%20%3A%3Atesting%3A%3AAtLeast%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%231%0A%0ATEST%28PainterTest%2C%20CanDrawSomething%29%20%7B%0A%20%20MockTurtle%20turtle%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%232%0A%20%20EXPECT_CALL%28turtle%2C%20PenDown%28%29%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%233%0A%20%20%20%20%20%20.Times%28AtLeast%281%29%29%3B%0A%0A%20%20Painter%20painter%28%26turtle%29%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%234%0A%0A%20%20EXPECT_TRUE%28painter.DrawCircle%280%2C%200%2C%2010%29%29%3B%0A%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%235%0A%0Aint%20main%28int%20argc%2C%20char**%20argv%29%20%7B%0A%20%20//%20The%20following%20line%20must%20be%20executed%20to%20initialize%20Google%20Mock%0A%20%20//%20%28and%20Google%20Test%29%20before%20running%20the%20tests.%0A%20%20%3A%3Atesting%3A%3AInitGoogleMock%28%26argc%2C%20argv%29%3B%0A%20%20return%20RUN_ALL_TESTS%28%29%3B%0A%7D%0A%60%60%60%0A%u5982%u679C%u4F60%u613F%u610F%u7684%u8BDD%uFF0C%u53EF%u4EE5%u81EA%u5DF1%u5199main%uFF0C%u5982%u679C%u4F60%u60F3%u5077%u61D2%uFF0C%u8BB0%u5F97%u5728Makefile%u91CClink%20gmock_main%u3002%0A%u6309Google%u7684%u8BF4%u6CD5%uFF0Cgmock%u4E5F%u53EF%u4EE5%u548C%u5176%u4ED6%u6D4B%u8BD5%u6846%u67B6%u517C%u5BB9%uFF0C%u4F46%u603B%u611F%u89C9%u633A%u60AC%u7684%u3002%0A%0A%23%23%23%23%20%u4E00%u4E9B%u6709%u7528%u7684%u5DE5%u5177%0A**Marcher**%0A%60EXPECT_CALL%28turtle%2C%20Forward%28_%29%29%3B%60%0A%26nbsp%3B%26nbsp%3B%26nbsp%3B%26nbsp%3B%20%u4EE5%u4EFB%u610F%u53C2%u6570%u8C03%u7528Forward%0A%60EXPECT_CALL%28turtle%2C%20Forward%28Ge%28100%29%29%29%3B%60%0A%26nbsp%3B%26nbsp%3B%26nbsp%3B%26nbsp%3B%20%u4EE5%u5927%u4E8E100%u7684%u6574%u6570%u8C03%u7528Forward%0A%09%0A**Cardinalities%3A%20How%20Many%20Times%20Will%20It%20Be%20Called%3F**%0A%3E-%20If%20neither%20WillOnce%28%29%20nor%20WillRepeatedly%28%29%20is%20in%20the%20EXPECT_CALL%28%29%2C%20the%20inferred%20cardinality%20is%20Times%281%29.%0A-%20If%20there%20are%20n%20WillOnce%28%29%27s%20but%20no%20WillRepeatedly%28%29%2C%20where%20n%20%3E%3D%201%2C%20the%20cardinality%20is%20Times%28n%29.%0A-%20If%20there%20are%20n%20WillOnce%28%29%27s%20and%20one%20WillRepeatedly%28%29%2C%20where%20n%20%3E%3D%200%2C%20the%20cardinality%20is%20Times%28AtLeast%28n%29%29.%0A%0A%60%60%60%0AEXPECT_CALL%28mockObj%2C%20func%28%29%29%0A%09.Times%28AtLeast%281%29%29%0A%09.WillOnce%28Return%28123%29%29%0A%09.WillRepeatedly%28Return%28456%29%29%0A%60%60%60%0A%u4E0A%u9762%u8FD9%u6BB5%u4EE3%u7801%u8981%u6C42func%u51FD%u6570%u81F3%u5C11%u8FD0%u884C%u4E00%u6B21%uFF0C%u7B2C%u4E00%u6B21%u8FD4%u56DE123%uFF0C%u4E4B%u540E%u6BCF%u6B21%u8FD4%u56DE456%u3002%0A%0A%3E**Important%20note**%3A%20The%20EXPECT_CALL%28%29%20statement%20evaluates%20the%20action%20clause%20only%20once%2C%20even%20though%20the%20action%20may%20be%20performed%20many%20times.%20Therefore%20you%20must%20be%20careful%20about%20side%20effects.%20The%20following%20may%20not%20do%20what%20you%20want%3A%0A%0A%60%60%60%0Aint%20n%20%3D%20100%3B%0AEXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A.Times%284%29%0A.WillRepeatedly%28Return%28n++%29%29%3B%0A%60%60%60%0A%u56E0%u4E3AReturn%u662F%u5B8F%uFF0C%u6240%u4EE5%u53EA%u4F1A%u66FF%u6362%u4E00%u6B21%uFF0C%u6240%u4EE5%u4E0D%u7BA1GetX%u8C03%u7528%u51E0%u6B21%uFF0C%u8FD4%u56DE%u90FD%u662F101%uFF0C%u800C%u4E0D%u662F101%2C102%2C103%2C...%0A%0A**All%20Expectations%20Are%20Sticky**%0A%u6240%u8C13%u7684sticky%u5C31%u662FEXPECT%5C_CALL%u603B%u662F%u751F%u6548%u7684%uFF0C%u9664%u975E%u4F60%u663E%u793A%u7684%u5C06%u5176%u5931%u6548%u3002%u5982%u4E0B%uFF0C%u6240%u6709%u7684EXPECT%5C_CALL%u90FD%u4F1A%u751F%u6548%uFF0C%u90A3%u4E48%u6700%u540E%u4E00%u4E2A%u4F1A%u8986%u76D6%u524D%u9762%u6240%u6709%u7684%uFF0C%u4E5F%u5C31%u662FGetX%u603B%u4F1A%u8FD4%u56DE10%u3002%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0Afor%20%28int%20i%20%3D%20n%3B%20i%20%3E%200%3B%20i--%29%20%7B%0A%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20%20%20.WillOnce%28Return%2810*i%29%29%3B%0A%7D%0A%60%60%60%0A%u5982%u679C%u5E0C%u671B%u4ED6%u8FD4%u56DE%uFF0C30%2C20%2C10%uFF0C...%uFF0C%u5E94%u8BE5%u8FD9%u4E48%u5199%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0Afor%20%28int%20i%20%3D%20n%3B%20i%20%3E%200%3B%20i--%29%20%7B%0A%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20.WillOnce%28Return%2810*i%29%29%0A%20%20%20%20.RetiresOnSaturation%28%29%3B%0A%7D%0A%60%60%60%0A%60RetireOnSaturation%60%u5C31%u662F%u663E%u793A%u7684%u8BA9%u5176%u5931%u6548%u3002%u8FD8%u6709%u4E00%u4E2A%u529E%u6CD5%uFF1A%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AInSequence%3B%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0A%7B%0A%20%20InSequence%20s%3B%0A%0A%20%20for%20%28int%20i%20%3D%201%3B%20i%20%3C%3D%20n%3B%20i++%29%20%7B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20%20%20%20%20.WillOnce%28Return%2810*i%29%29%0A%20%20%20%20%20%20%20%20.RetiresOnSaturation%28%29%3B%0A%20%20%7D%0A%7D%0A%60%60%60%0A%u56E0%u4E3AInSequence%u7684%u5173%u7CFB%uFF0C%u5728%u524D%u9762%u7684EXPECT%5C_CALL%u751F%u6548%u4EE5%u540E%uFF0C%u5C31%u4F1A%u81EA%u52A8%u5931%u6548%uFF0C%u6240%u4EE5%u4E0D%u4F1A%u4EA7%u751F%u8986%u76D6%u7684%u6548%u679C%u3002%0A**Ordered%20vs%20Unordered%20Calls**%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AInSequence%3B...%0ATEST%28FooTest%2C%20DrawsLineSegment%29%20%7B%0A%20%20...%0A%20%20%7B%0A%20%20%20%20InSequence%20dummy%3B%0A%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20PenDown%28%29%29%3B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20Forward%28100%29%29%3B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20PenUp%28%29%29%3B%0A%20%20%7D%0A%20%20Foo%28%29%3B%0A%7D%0A%60%60%60%0A**Expecting%20Partially%20Ordered%20Calls**%0AGoogle%20Mock%20allows%20you%20to%20impose%20an%20arbitrary%20DAG%20%28directed%20acyclic%20graph%29%20on%20the%20calls.%20One%20way%20to%20express%20the%20DAG%20is%20to%0Ause%20the%20After%20clause%20of%20EXPECT_CALL%20.%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3ASequence%3B%0ASequence%20s1%2C%20s2%3B%0AEXPECT_CALL%28foo%2C%20A%28%29%29%0A%09.InSequence%28s1%2C%20s2%29%3B%0AEXPECT_CALL%28bar%2C%20B%28%29%29%0A%09.InSequence%28s1%29%3B%0AEXPECT_CALL%28bar%2C%20C%28%29%29%0A%09.InSequence%28s2%29%3B%0AEXPECT_CALL%28foo%2C%20D%28%29%29%0A%09.InSequence%28s2%29%3B%0A%60%60%60%0Aspecifies%20the%20following%20DAG%20%28where%20s1%20is%20A%20-%3E%20B%20%2C%20and%20s2%20is%20A%20-%3E%20C%20-%3E%20D%20%29%3A%0A%60%60%60%0A%09%20+---%3E%20B%0A%20%20%20%20%20%7C%0AA%20---%7C%0A%09%20%7C%0A%09%20+---%3E%20C%20---%3E%20D%0A%60%60%60%0A**Uninteresting%20Calls**%0A%u8FD9%u662Fgmock%u62A5%u7684warning%u3002%u5F53%u9488%u5BF9%u67D0%u4E00%u4E2A%u5F85%u6D4B%u51FD%u6570%u8BBE%u7F6E%u4E86EXPECT%20spec%uFF0C%u5374%u5E76%u6CA1%u6709%u8C03%u7528%u7684%u65F6%u5019%uFF0C%u5C31%u4F1A%u62A5%u8FD9%u4E2Awarning%u3002%u6B64%u65F6gmock%u8BA4%u4E3A%u4F60%u5BF9%u8BE5%u51FD%u6570%u5E76%u6CA1%u6709%u5174%u8DA3%uFF0C%u6240%u4EE5%u5C31%u4E0D%u9700%u8981%u8FD9%u4E2AEXPECT%20spec%u3002%u5F53%u7136%u4F60%u53EF%u4EE5%u9009%u62E9%u5FFD%u7565%u8FD9%u4E2Awarning%uFF0C%u4F46%u6211%u8BA4%u4E3A%u51FA%u8FD9%u4E2Awarning%u7684%u65F6%u5019%uFF0C%u591A%u534A%u662Ftest%u6F0F%u5199%u4E86%u4EC0%u4E48%u3002%0A%0A**Returning%20Live%20Values%20from%20Mock%20Methods**%0A%60%60%60%0Ausing%20testing%3A%3AByRef%3B%0Ausing%20testing%3A%3AReturn%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0A%09public%3A%0A%09%09MOCK_METHOD0%28GetValue%2C%20int%28%29%29%3B%0A%7D%3B%0A...%0Aint%20x%20%3D%200%3B%0AMockFoo%20foo%3B%0AEXPECT_CALL%28foo%2C%20GetValue%28%29%29%0A%09//%20.WillRepeatedly%28Return%28ByRef%28x%29%29%29%3B%20X%20error%0A%09.WillRepeatedly%28ReturnPointee%28x%29%29%3B%0Ax%20%3D%2042%3B%0AEXPECT_EQ%2842%2C%20foo.GetValue%28%29%29%3B%0A%60%60%60%0A%0A%23%23%23%20%u4E00%u4E9B%u6D4B%u8BD5case%0A%u5199Unit%20Test%u5E76%u4E0D%u50CF%u60F3%u50CF%u7684%u90A3%u4E48%u7B80%u5355%uFF0C%u5E76%u4E0D%u662F%u8C03%u7528%u4E86%u6846%u67B6%uFF0C%u9488%u5BF9%u6BCF%u4E2A%u51FD%u6570%u5199test%20case%u5C31%u53EF%u4EE5%u3002%u6309%u6211%u76EE%u524D%u7684%u7406%u89E3%u6709%u4EE5%u4E0B%u51E0%u79CD%u6311%u6218%uFF1A%0A1.%20Test%20Case%u5982%u4F55%u89E3%u8026%u3002%u4E0D%u8981%u6709%u91CD%u590D%u6D4B%u8BD5%28overlap%29%u3002%0A%u4F8B%u5982%uFF1A%u5728%u5199A%u51FD%u6570%u7684%u65F6%u5019%uFF0C%u5199%u4E86%u6D4B%u8BD5testA%uFF0CB%u51FD%u6570%u4F1A%u8C03%u7528A%u51FD%u6570%uFF0C%u90A3%u4E48%u5728%u5199%u5B8CA%u4E4B%u540E%u5199B%u7684%u6D4B%u8BD5testB%u65F6%uFF0C%u662F%u5426%u8981%u5C06A%20mock/fake/stub%u6389%3F%20%u5982%u679C%u4E0D%u5C06A%u51FD%u6570Fake%u6389%uFF0C%u5219testA%u548CtestB%u4E4B%u95F4%u5C31%u662F%u6709overlap%u3002%u6211%u8BA4%u4E3A%u8FD9%u4E4B%u95F4%u53EF%u4EE5%u6709%u53D6%u820D%uFF0C%u6700%u4F73%u72B6%u6001%u5E94%u5F53%u662F%u6B64%u65F6%uFF0C%u5C06testA%u5220%u9664%uFF0C%u53EA%u4FDD%u7559testB%u3002%u4F46%u4ECD%u5E94%u6839%u636E%u5177%u4F53%u60C5%u51B5%u800C%u5B9A%u3002%0A%0A2.%20%u5982%u4F55%u9488%u5BF9%u4F9D%u8D56%u5173%u7CFB%u8FDB%u884Cmock%u5316%u3002%0A%u4F8B%u5982%u51FA%u73B0%u8FD9%u6837%u7684%u8BED%u53E5%3A%20%60B%20%3D%20new%20A%60%uFF0C%u5219%u7C7BB%u4F9D%u8D56%u4E8E%u7C7BA%u3002%u4F46%u7C7BA%u5E76%u6CA1%u6709%u5FC5%u8981%u7F16%u8BD1%u8FDBtest%u3002%u56E0%u4E3A%u4E00%u65E6%u52A0%u5165A%uFF0C%u5219%u52BF%u5FC5%u4F1A%u5F15%u5165%u66F4%u591A%u4F9D%u8D56%u5173%u7CFB%uFF0C%u800C%u5BFC%u81F4test%u7F16%u8BD1%u5D29%u6E83%u3002%u4F9D%u8D56%u5173%u7CFB%u7684%u89E3%u51B3%u65E0%u7A77%u65E0%u5C3D%u3002%u5728%u505AAndroid%u7684%u5355%u5143%u6D4B%u8BD5%u65F6%uFF0C%u53EF%u4EE5%u7528PowerMock%u53D6%u4EE3Mockito%u6765Mock%u6784%u9020%u51FD%u6570%uFF0C%u5C06%u6784%u9020%u51FD%u6570Fake%u5316%u6210%u7C7B%u4F3C%u5DE5%u5382%u51FD%u6570%uFF0C%u8FD4%u56DE%u7C7B%u5B9E%u4F8B%u3002%u5177%u4F53%u53C2%u770B%u8FD9%u7BC7%u535A%u6587%5BAndroid%u5355%u5143%u6D4B%u8BD5%5D%28https%3A//zhougy0717.github.io/2016/10/19/Android%25E5%258D%2595%25E5%2585%2583%25E6%25B5%258B%25E8%25AF%2595/%29%u3002%0A%u4F46%u5B9E%u9645%u4E0A%uFF0C%u6309%u7167%u73B0%u5728%u7684%u7406%u89E3%uFF0C%u5176%u5B9EMock%u6784%u9020%u51FD%u6570%u662F%u4E0D%u53EF%u53D6%u7684%uFF0C%u9996%u5148%u9020%u6210%u88AB%u6D4B%u4EE3%u7801spec%u4E0D%u6E05%u6670%uFF0C%u8BD5%u60F3%u4E00%u4E2A%u6784%u9020%u51FD%u6570%u600E%u4E48%u4F1A%u8FD4%u56DE%u53E6%u4E00%u4E2A%u7C7B%u7684%u5B9E%u4F8B%u3002%u5176%u6B21%uFF0C%u5728C++%u4E2D%u5F88%u96BE%u505A%u5230Mock%u6784%u9020%u51FD%u6570%u3002%u597D%u7684%u505A%u6CD5%u5E94%u5F53%u662F%u8FD0%u7528Dependency%20Injection%u3002%u4F8B%u5982%uFF1A%0A%60%60%60%0Aclass%20A%20%0A%7B%7D%0A%0Aclass%20B%0A%7B%0A%09void%20func%28%29%0A%09%7B%0A%09%09A*%20a%20%3D%20new%20A%3B%0A%09%7D%0A%7D%0A%60%60%60%0A%u7C7BB%u5E94%u5F53%u6539%u5199%u4E3A%uFF1A%0A%60%60%60%0Aclass%20B%0A%7B%0A%09void%20func%28A*%29%0A%09%7B%0A%09%09...%0A%09%7D%0A%7D%0A%60%60%60%0A%u5C06%u7C7BA%u6307%u9488%u4F20%u5165%uFF0C%u89E3%u51B3dependency%u7684%u95EE%u9898%u3002%0A%0A3.%20%u5982%u4F55%u80FD%u591F%u8BA9%u6D4B%u8BD5%u7A33%u5B9A%uFF0C%u5728%u4EFB%u610F%u73AF%u5883%u4E0B%u5747%u8FD4%u56DE%u540C%u6837%u7684%u6D4B%u8BD5%u7ED3%u679C%u3002%0A%u8FD9%u4E2A%u4E00%u822C%u6D89%u53CA%u6D4B%u8BD5%u73AF%u5883%u7684%u5F71%u54CD%u3002%u4F8B%u5982%u8C03%u7528%u7F51%u7EDC%u76F8%u5173%u7684%u529F%u80FD%uFF0C%u5728%u6CA1%u6709%u7F51%u7EDC%u7684%u73AF%u5883%u5C31%u6CA1%u6CD5%u8FDB%u884C%u3002%u518D%u4F8B%u5982%u6D4B%u8BD5%u65F6%u64CD%u4F5C%u771F%u5B9E%u5177%u4F53%u6587%u4EF6%uFF0C%u5219%u8BE5%u6587%u4EF6%u88AB%u6D4B%u8BD5%u5916%u4EBA%u4E3A%u6216%u4EE3%u7801%u4FEE%u6539%uFF0C%u5219%u6D4B%u8BD5%u53EF%u80FD%u5C31%u4F1A%u83AB%u540D%u5931%u8D25%u3002%0A%u9488%u5BF9%u8FD9%u4E9B%u60C5%u51B5%uFF0C%u6211%u4EEC%u5E94%u5F53%u5728%u6D4B%u8BD5%u4E2D%u5C3D%u91CF%u907F%u514D%u3002%u4F8B%u5982%u524D%u8005%uFF0C%u6211%u4EEC%u5E94%u5F53%u5BF9%u7F51%u7EDC%u63A5%u53E3%u8FDB%u884CMock%u5316%uFF0C%u540E%u8005%u5E94%u5F53%u5728%u6D4B%u8BD5%u7684setUp%u548CtearDown%u4E2D%u751F%u6210%u865A%u5047%u6587%u4EF6%u7528%u4E8E%u6D4B%u8BD5%uFF0C%u5E76%u5728%u6D4B%u8BD5%u5B8C%u6210%u65F6%u505A%u6E05%u7406%u3002%0A%0A4.%20%u4F1A%u56E0%u4E3A%u5F88%u5C0F%u7684%u88AB%u6D4B%u4EE3%u7801%u6539%u52A8%uFF0C%u800C%u5BFC%u81F4%u5927%u9762%u79EF%u6D4B%u8BD5%u5931%u8D25%uFF0C%u751A%u81F3%u6D4B%u8BD5%u5D29%u6E83%u3002%0A%u8FD9%u4E2A%u5C31%u662Fgmock%u6587%u6863%u4E2D%u63D0%u5230%u7684%u8981%u9488%u5BF9%u63A5%u53E3%u7F16%u7A0B%uFF0C%u9488%u5BF9%u63A5%u53E3%u6D4B%u8BD5%u3002Robert%20C%B7Martin%u5728%u300A%u654F%u6377%u8F6F%u4EF6%u5F00%u53D1%uFF0D%u539F%u5219%u3001%u6A21%u5F0F%u4E0E%u5B9E%u8DF5%u300B%u4E00%u4E66%u4E2D%u6709%u63D0%u51FA%uFF1A%u6240%u6709%u7684%u4EE3%u7801%u90FD%u5E94%u4F9D%u8D56%u4E8E%u62BD%u8C61%u63A5%u53E3%u3002%u56E0%u4E3A%u62BD%u8C61%u63A5%u53E3%u662F%u7ECF%u8FC7%u62BD%u8C61%u7684%uFF0C%u76F8%u5BF9%u5177%u4F53%u7684%u5B9E%u73B0%u4EE3%u7801%u8F83%u4E3A%u7A33%u5B9A%u3002%u800C%u88AB%u4F9D%u8D56%u7684%u4EE3%u7801%u5E94%u8BE5%u5C3D%u53EF%u80FD%u4FDD%u6301%u7A33%u5B9A%uFF0C%u8FD9%u6837%u57FA%u4E8E%u4E4B%u4E0A%u7684%u4EE3%u7801%u624D%u4E0D%u4F1A%u56E0%u4E3A%u4F9D%u8D56%u7684%u6539%u52A8%u800C%u6539%u52A8%u3002%0A%0A%u4E0B%u9762%u5217%u51FA%u51E0%u79CD%u6211%u5728%u5B9E%u9645%u5199test%20case%u65F6%u9047%u5230%u7684%u60C5%u51B5%uFF0C%u5728gmock%u4E2D%u7684%u89E3%u51B3%u65B9%u6848%u3002%0A%0A%23%23%23%20%u6309%u7167%u51FD%u6570%u53C2%u6570%u8FD4%u56DE%u7ED3%u679C%20-%20Fake%0A%u4F8B%u5982%3A%0A%60%60%60%0Aclass%20A%0A%7B%0A%09virtual%20int%20func%28int%20a%2C%20int%20b%29%3B%0A%7D%0A%0AEXPECT_CALL%28mockA%2C%20func%28%29%29%0A%09.WillRepeatedly%28a+b%29%3B%0A%60%60%60%0Agmock%u4E2D%u53EF%u4EE5%u8FD9%u6837%u505A%uFF1AUsing%20Functions/Methods/Functors%20as%20Actions%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0Apublic%3A%0A%09MOCK_METHOD2%28Sum%2C%20int%28int%20x%2C%20int%20y%29%29%3B%0A%09MOCK_METHOD1%28ComplexJob%2C%20bool%28int%20x%29%29%3B%0A%7D%3B%0Aint%20CalculateSum%28int%20x%2C%20int%20y%29%20%7B%20return%20x%20+%20y%3B%20%7D%0Aclass%20Helper%20%7B%0Apublic%3A%0A%09bool%20ComplexJob%28int%20x%29%3B%0A%7D%3B%0A...%0AMockFoo%20foo%3B%0AHelper%20helper%3B%0AEXPECT_CALL%28foo%2C%20Sum%28_%2C%20_%29%29%0A%09.WillOnce%28Invoke%28CalculateSum%29%29%3B%0AEXPECT_CALL%28foo%2C%20ComplexJob%28_%29%29%0A%09.WillOnce%28Invoke%28%26helper%2C%20%26Helper%3A%3AComplexJob%29%29%3B%0Afoo.Sum%285%2C%206%29%3B%20//%20Invokes%20CalculateSum%285%2C%206%29.%0Afoo.ComplexJob%2810%29%3B%20//%20Invokes%20helper.ComplexJob%2810%29%3B%0A%60%60%60%0A%0A%23%23%23%20Mock%20non-virtual%u51FD%u6570%0A%60%60%60%0A//%20A%20simple%20packet%20stream%20class.%20None%20of%20its%20members%20is%20virtual.%0Aclass%20ConcretePacketStream%20%7B%0A%09public%3A%0A%09%09void%20AppendPacket%28Packet*%20new_packet%29%3B%0A%09%09const%20Packet*%20GetPacket%28size_t%20packet_number%29%20const%3B%0A%09%09size_t%20NumberOfPackets%28%29%20const%3B%0A%09%09...%0A%7D%3B%0A//%20A%20mock%20packet%20stream%20class.%20It%20inherits%20from%20no%20other%2C%20but%20defines%0A//%20GetPacket%28%29%20and%20NumberOfPackets%28%29.%0Aclass%20MockPacketStream%20%7B%0A%09public%3A%0A%09%09MOCK_CONST_METHOD1%28GetPacket%2C%20const%20Packet*%28size_t%20packet_number%29%29%3B%0A%09%09MOCK_CONST_METHOD0%28NumberOfPackets%2C%20size_t%28%29%29%3B%0A%09%09...%0A%7D%0A%0Atemplate%20%3Cclass%20PacketStream%3E%0Avoid%20CreateConnection%28PacketStream*%20stream%29%20%7B%20...%20%7D%0Atemplate%20%3Cclass%20PacketStream%3E%0Aclass%20PacketReader%20%7B%0A%09public%3A%0A%09void%20ReadPackets%28PacketStream*%20stream%2C%20size_t%20packet_num%29%3B%0A%7D%3B%0A%0AMockPacketStream%20mock_stream%3B%0AEXPECT_CALL%28mock_stream%2C%20...%29...%3B%0A..%20set%20more%20expectations%20on%20mock_stream%20...%0APacketReader%3CMockPacketStream%3E%20reader%28%26mock_stream%29%3B%0A...%20exercise%20reader%20...%0A%60%60%60%0A%u4E3A%u4EC0%u4E48%u8981%u8FD9%u4E48%u505A%uFF1F%0A%u56E0%u4E3A%u53EA%u80FD%u8FD9%u4E48%u505A%u3002%u666E%u901A%u7684mock%uFF0C%u8981%u901A%u8FC7%u7EE7%u627F%u88AB%u6D4B%u8BD5%u7C7B%uFF0C%u5E76%u91CD%u5199virtual%u51FD%u6570%u6765%u5B9E%u73B0%u3002%u800C%u4E0A%u9762%u7684ConcretePacketStream%u548CMockPacketStream%u5E76%u4EFB%u4F55%u6CA1%u6709%u5173%u7CFB%uFF0C%u4E5F%u5C31%u662F%u8BF4%uFF0C%u5982%u679C%u4F20%u5165%u540E%u8005%u7684%u6307%u9488%uFF0C%u4E0D%u7528reinterpret_cast%u662F%u4E0D%u80FD%u8F6C%u6210%u524D%u8005%u7684%u6307%u9488%u7684%u3002%0A%u6240%u4EE5%u60F3%u4E00%u4E2A%u53D8%u901A%u7684%u529E%u6CD5%uFF0C%u7528%u6A21%u677F%u7C7B%u6765%u5B9A%u4E49%u88AB%u6D4B%u4EE3%u7801%uFF0C%u5728%u6D4B%u8BD5%u65F6%u4F20%u5165mock%u7C7B%uFF0C%u5728%u751F%u4EA7%u65F6%uFF0C%u4F20%u5165%u771F%u5B9E%u7C7B%u3002%0A%0A%23%23%23%20Mocking%20Side%20Effects%0A%60%60%60%0AEXPECT_CALL%28mutator%2C%20MutateInt%28_%29%29%0A%09.WillOnce%28DoAll%28SetArgPointee%3C0%3E%285%29%2C%20Return%28true%29%29%29%3B%0AEXPECT_CALL%28mutator%2C%20Mutate%28NotNull%28%29%2C%205%29%29%0A%09.WillOnce%28SetArrayArgument%3C0%3E%28values%2C%20values%20+%205%29%29%3B%0A%60%60%60%0A%u7B2C%u4E00%u4E2A%u5C06MutateInt%u7B2C%u4E00%u4E2A%u53C2%u6570%u6307%u9488%u6307%u5411%u7684int%uFF0C%u8BBE%u4E3A5%uFF0C%u5E76%u8FD4%u56DEtrue%u3002%0A%u7B2C%u4E8C%u4E2A%u5C06values%u6570%u7EC4%u7684%5B0%2C5%29%u62F7%u8D1D%u5230%u53C2%u65701%u6307%u5411%u7684%u5730%u5740%u3002%0A%u5982%u679C%u4ECD%u9700%u8981%u8FD4%u56DE%uFF0C%u5219%u7528DoAll%uFF0C%u5982%u4E0B%uFF1A%0A%60%60%60%0AEXPECT_CALL%28mutator%2C%20MutateInt%28_%29%29%0A%20%20%20%20%20%20.WillOnce%28DoAll%28SetArgPointee%3C0%3E%285%29%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Return%28true%29%29%29%3B%0A%60%60%60%0A%0A%23%23%23%20Selecting%20an%20Action%27s%20Arguments%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Abool%20MyIsVisibleInQuadrant1%28bool%20visible%2C%20const%20string%26%20name%2C%20int%20x%2C%20int%20y%2C%0Aconst%20map%3Cpair%3Cint%2C%20int%3E%2C%20double%3E%26%20weight%2C%0Adouble%20min_weight%2C%20double%20max_wight%29%20%7B%0A%09return%20IsVisibleInQuadrant1%28visible%2C%20x%2C%20y%29%3B%0A%7D.%0A..%0AEXPECT_CALL%28mock%2C%20Foo%28_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%29%29%0A%09.WillOnce%28Invoke%28MyIsVisibleInQuadrant1%29%29%3B%20//%20Now%20it%20works.%0A%60%60%60%0A%u5B9A%u4E49%u81EA%u5DF1%u7684adaptor%20MyIsVisibleInQuadrant1%uFF0C%u6216%u8005%u7528gmock%u63D0%u4F9B%u7684%u65B9%u6CD5%u4F18%u96C5%u7684%u89E3%u51B3%u3002%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Ausing%20%3A%3Atesting%3A%3AWithArgs%3B%0A...%0AEXPECT_CALL%28mock%2C%20Foo%28_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%29%29%0A.WillOnce%28WithArgs%3C0%2C%202%2C%203%3E%28Invoke%28IsVisibleInQuadrant1%29%29%29%3B%0A//%20No%20need%20to%20define%20your%20own%20adaptor.%0A%60%60%60%0A%0A%23%23%23%23%20Mocking%20Private%20or%20Protected%20Methods%0A%60%60%60%0Aclass%20Foo%20%7B%0A%09public%3A%0A%09%09...%0A%09%09virtual%20bool%20Transform%28Gadget*%20g%29%20%3D%200%3B%0A%09protected%3A%0A%09%09virtual%20void%20Resume%28%29%3B%0A%09private%3A%0A%09%09virtual%20int%20GetTimeOut%28%29%3B%0A%7D%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0A%09public%3A%0A%09%09...%0A%09%09MOCK_METHOD1%28Transform%2C%20bool%28Gadget*%20g%29%29%3B%0A%09%09//%20The%20following%20must%20be%20in%20the%20public%20section%2C%20even%20though%20the%0A%09%09//%20methods%20are%20protected%20or%20private%20in%20the%20base%20class.%0A%09%09MOCK_METHOD0%28Resume%2C%20void%28%29%29%3B%0A%09%09MOCK_METHOD0%28GetTimeOut%2C%20int%28%29%29%3B%0A%7D%3B%0A%60%60%60%0A%3EC++%20allows%20a%20subclass%20to%20specify%20a%20different%20access%20level%20than%20the%20base%20class%20on%20a%20virtual%20function.%0A%0A%23%23%23%23%20Misc%0AKeep%20in%20mind%20that%20one%20doesn%27t%20have%20to%20verify%20more%20than%20one%20property%20in%20one%20test.%20In%20fact%2C%20it%27s%20a%20good%20style%20to%20verify%20only%20one%0Athing%20in%20one%20test.%20If%20you%20do%20that%2C%20a%20bug%20will%20likely%20break%20only%20one%20or%20two%20tests%20instead%20of%20dozens%0A%0AWhen%20it%27s%20being%20destroyed%2C%20your%20friendly%20mock%20object%20will%20automatically%20verify%20that%20all%20expectations%20on%20it%20have%20been%20satisfied%2C%0Aand%20will%20generate%20Google%20Test%20failures%20if%20not.%20%0A%0ACurrently%20these%20are%20only%20platforms%20that%20support%20the%20pthreads%20library%20%28this%20includes%20Linux%20and%20Mac%29.%20%0A%0A%u52A0%u4E0A%u547D%u4EE4%u884C%u53C2%u6570--gmock_verbose%3Dinfo%u53EF%u4EE5%u663E%u793A%u6240%u6709EXPECT%5C_CALL%u7684%u5177%u4F53%u8C03%u7528%u60C5%u51B5%u3002%0A%0A%23%23%20Some%20useful%20tips%20in%20gtest%0A%23%23%23%20Selecting%20Tests%0A%3E%20If%20you%20set%20the%20**GTEST_FILTER**%20environment%20variable%20or%20the%20**--gtest_filter**%20flag%20to%20a%20filter%20string%2C%20Google%20Test%20will%20only%20run%20the%20tests%20whose%20full%20names%20%28in%20the%20form%20of%20TestCaseName.TestName%29%20match%20the%20filter.%0A%3E%20The%20format%20of%20a%20filter%20is%20a%20%27%3A%27-separated%20list%20of%20wildcard%20patterns%20%28called%20the%20positive%20patterns%29%20optionally%20followed%20by%20a%20%27-%27%20and%20another%20%27%3A%27-separated%20pattern%20list%20%28called%20the%20negative%20patterns%29.%0A%0A-%20./foo_test%20Has%20no%20flag%2C%20and%20thus%20runs%20all%20its%20tests.%0A-%20./foo_test%20--gtest_filter%3D*%20Also%20runs%20everything%2C%20due%20to%20the%20single%20match-everything%20*%20value.%0A-%20./foo_test%20--gtest_filter%3DFooTest.*%20Runs%20everything%20in%20test%20case%20FooTest.%0A-%20./foo_test%20--gtest_filter%3D*Null*%3A*Constructor*%20Runs%20any%20test%20whose%20full%20name%20contains%20either%20%22Null%22%20or%20%22Constructor%22.%0A-%20./foo_test%20--gtest_filter%3D-*DeathTest.*%20Runs%20all%20non-death%20tests.%0A-%20./foo_test%20--gtest_filter%3DFooTest.*-FooTest.Bar%20Runs%20everything%20in%20test%20case%20FooTest%20except%20FooTest.Bar%0A%0ATemporarily%20Disabling%20Tests%0A%60%60%60%0A//%20Tests%20that%20Foo%20does%20Abc.%0ATEST%28FooTest%2C%20DISABLED_DoesAbc%29%20%7B%20...%20%7D%0A%0Aclass%20DISABLED_BarTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%20...%20%7D%3B%0A%0A//%20Tests%20that%20Bar%20does%20Xyz.%0ATEST_F%28DISABLED_BarTest%2C%20DoesXyz%29%20%7B%20...%20%7D%0A%60%60%60%0A%0ATemporarily%20Enabling%20Disabled%20Tests%0A%3Ejust%20invoke%20the%20test%20program%20with%20the%20**--gtest_also_run_disabled_tests**%20flag%20or%20set%20the%20**GTEST_ALSO_RUN_DISABLED_TESTS**%20environment%20variable%20to%20a%20value%20other%20than%200.%0A%0A%23%23%23%20Repeating%20the%20Tests%0A%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%3A--------%3A%20%7C%20%3A--------------%3A%20%7C%20%3A--------%3A%20%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D1000%20%7C%09Repeat%20foo_test%201000%20times%20and%20don%27t%20stop%20at%20failures.%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D-1%09%7CA%20negative%20count%20means%20repeating%20forever.%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D1000%20--gtest_break_on_failure%09%7C%20Repeat%20foo_test%201000%20times%2C%20stopping%20at%20the%20first%20failure.%20This%20is%20especially%20useful%20when%20running%20under%20a%20debugger%3A%20when%20the%20testfails%2C%20it%20will%20drop%20into%20the%20debugger%20and%20you%20can%20then%20inspect%20variables%20and%20stacks.%7C%0A%7C%24%20foo_test%20--gtest_repeat%3D1000%20--gtest_filter%3DFooBar%09%7C%20Repeat%20the%20tests%20whose%20name%20matches%20the%20filter%201000%20times.%7C&lt;/center&gt;&lt;br&gt;&lt;/div&gt;</content>
        <category term="TDD" />
        <category term="unittest" />
        <category term="gtest" />
        <category term="gmock" />
        <updated>2017-09-12T09:02:37.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.zhougy.top/2016/02/29/UnitTest++%E7%AE%80%E4%BB%8B/</id>
        <title>UnitTest++简介</title>
        <link rel="alternate" href="https://blog.zhougy.top/2016/02/29/UnitTest++%E7%AE%80%E4%BB%8B/"/>
        <content type="html">&lt;!DOCTYPE en-note SYSTEM &#39;http://xml.evernote.com/pub/enml2.dtd&#39;&gt;&lt;div class=&#34;enNote&#34; style=&#34;color: #2c3f51; line-height: 1.6;&#34; title lang=&#34;v2&#34; xml:lang dir&gt;&lt;del style=&#34;position:relative;display:block;z-index:10;&#34;&gt;&lt;a style=&#34;position: absolute;color: #FFF;text-decoration: none;font-size: 12px;height: 25px;border-radius: 0;margin-top: -20px;right: 15px;background: rgba(0, 0, 0, 0);border-left: 10px solid #BB3A34;border-right: 10px solid #BB3A34;border-bottom: 5px solid rgba(0, 0, 0, 0);width: 0;text-indent:-100000px;&#34; href=&#34;http://maxiang.info/#/?provider=evernote_int&amp;amp;guid=ec67fbbb-ad6a-4ffd-9695-7b675b07efde&amp;amp;notebook=%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0&#34;&gt;Edit&lt;/a&gt;&lt;/del&gt;&lt;div style=&#34;color: #2c3f51; line-height: 1.6;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#unittest&amp;#x7B80;&amp;#x4ECB;&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;UnitTest++&amp;#x7B80;&amp;#x4ECB;&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#cmake&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#implement-test-cases&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Implement Test Cases&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#linux-test-harness&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Linux Test Harness&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#mono-graphic-panel-driver&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Mono Graphic Panel Driver&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#&amp;#x6D4B;&amp;#x8BD5;&amp;#x67B6;&amp;#x6784;&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;&amp;#x67B6;&amp;#x6784;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6700;&amp;#x8FD1;&amp;#x62DC;&amp;#x8BFB;&amp;#x4E86;Kent Beck&amp;#x5927;&amp;#x795E;&amp;#x7684;&amp;#x300A;Test-Driven Development By Example&amp;#x300B;&amp;#xFF0C;&amp;#x6709;&amp;#x4E86;&amp;#x8FD9;&amp;#x7BC7;&lt;a href=&#34;https://www.evernote.com/shard/s24/nl/697376807/209575d9-d1bc-4aa6-8a79-3d50bfe3d377/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;&amp;#x8BFB;&amp;#x4E66;&amp;#x7B14;&amp;#x8BB0;&lt;/a&gt;&amp;#x3002;&amp;#x8FD9;&amp;#x672C;&amp;#x4E66;&amp;#x89E3;&amp;#x7B54;&amp;#x4E86;&amp;#x6211;&amp;#x7684;&amp;#x5F88;&amp;#x591A;&amp;#x5F00;&amp;#x53D1;&amp;#x4E2D;&amp;#x9047;&amp;#x5230;&amp;#x7684;&amp;#x56F0;&amp;#x60D1;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x51B3;&amp;#x5B9A;&amp;#x4EE5;&amp;#x540E;&amp;#x8D70;&amp;#x4E0A;TDD&amp;#x7684;&amp;#x9053;&amp;#x8DEF;&amp;#x3002;&amp;#x90A3;&amp;#x4E3A;&amp;#x4EC0;&amp;#x4E48;&amp;#x4F1A;&amp;#x5B66;&amp;#x4E60;UnixTest++&amp;#xFF0C;&amp;#x5176;&amp;#x5B9E;&amp;#x662F;&amp;#x56E0;&amp;#x4E3A;&amp;#x60E0;&amp;#x666E;&amp;#x6253;&amp;#x5370;&amp;#x673A;&amp;#x7684;Phoenix FW&amp;#x91CC;&amp;#x9762;&amp;#x66FE;&amp;#x7ECF;&amp;#x6709;&amp;#x5148;&amp;#x8F88;&amp;#x505A;&amp;#x8FC7;&amp;#x7C7B;&amp;#x4F3C;unit test&amp;#x7684;&amp;#x4E8B;&amp;#x60C5;&amp;#xFF0C;&amp;#x79F0;&amp;#x4E4B;&amp;#x4E3A;Linux Test Harness&amp;#x3002;Harnes&amp;#x662F;&amp;#x9A6C;&amp;#x978D;&amp;#x7684;&amp;#x610F;&amp;#x601D;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E2A;&amp;#x540D;&amp;#x5B57;&amp;#x5E94;&amp;#x8BE5;&amp;#x662F;&amp;#x60E0;&amp;#x666E;&amp;#x4EBA;&amp;#x81EA;&amp;#x5DF1;&amp;#x53D6;&amp;#x7684;&amp;#x3002;&amp;#x8FD9;&amp;#x4E2A;Linux Test Harness&amp;#x5C31;&amp;#x662F;&amp;#x57FA;&amp;#x4E8E;&lt;a href=&#34;https://github.com/unittest-cpp/unittest-cpp&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;UnixTest++&lt;/a&gt;&amp;#x7684;&amp;#x3002;&amp;#x76EE;&amp;#x524D;&amp;#x6211;&amp;#x7528;&amp;#x7684;&amp;#x662F;&amp;#x6700;&amp;#x65B0;&amp;#x7248;&amp;#xFF0C;v1.5.1&amp;#x3002;&amp;#x76EE;&amp;#x5F55;&amp;#x6811;&amp;#x7ED3;&amp;#x6784;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A; &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; AUTHORS &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; &lt;font color=&#34;IndianRed&#34; style=&#34;line-height: 1.6;&#34;&gt;CMakeLists.txt&lt;/font&gt; &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; ChangeLog &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; INSTALL &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; LICENSE &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; Makefile.am &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; README.md &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; &lt;font color=&#34;IndianRed&#34; style=&#34;line-height: 1.6;&#34;&gt;UnitTest++&lt;/font&gt; &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; UnitTest++.pc.in &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; appveyor.yml &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; builds &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; configure.ac &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; docs &lt;br&gt;&amp;#x251C;&amp;#x2500;&amp;#x2500; m4 &lt;br&gt;&amp;#x2502;   &amp;#x251C;&amp;#x2500;&amp;#x2500; ax_cxx_compile_stdcxx.m4 &lt;br&gt;&amp;#x2502;   &amp;#x2514;&amp;#x2500;&amp;#x2500; ax_cxx_compile_stdcxx_11.m4 &lt;br&gt;&amp;#x2514;&amp;#x2500;&amp;#x2500; &lt;font color=&#34;IndianRed&#34; style=&#34;line-height: 1.6;&#34;&gt;tests&lt;/font&gt;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;7 directories, 95 files &lt;br&gt;&amp;#x91CD;&amp;#x8981;&amp;#x7684;&amp;#x6587;&amp;#x4EF6;&amp;#x6216;&amp;#x6587;&amp;#x4EF6;&amp;#x5939;&amp;#x6211;&amp;#x6807;&amp;#x6210;&amp;#x4E86;&amp;#x7EA2;&amp;#x8272;&amp;#x3002;&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;CMakeLists.txt &lt;br&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;UnitTest++&amp;#x662F;&amp;#x57FA;&amp;#x4E8E;CMake&amp;#x7684;&amp;#xFF0C;&amp;#x540E;&amp;#x9762;&amp;#x4F1A;&amp;#x5177;&amp;#x4F53;&amp;#x8BB2;CMake&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E2A;&amp;#x6587;&amp;#x4EF6;&amp;#x5C31;&amp;#x7C7B;&amp;#x4F3C;&amp;#x4E8E;CMake&amp;#x7684;&amp;#x5DE5;&amp;#x7A0B;&amp;#x6587;&amp;#x4EF6;&amp;#x3002;CMake&amp;#x57FA;&amp;#x4E8E;&amp;#x5B83;&amp;#x751F;&amp;#x6210;Makefile&amp;#x6216;&amp;#x8005;&amp;#x5176;&amp;#x4ED6;&amp;#x5F00;&amp;#x53D1;&amp;#x5E73;&amp;#x53F0;&amp;#x7684;&amp;#x5DE5;&amp;#x7A0B;&amp;#x6587;&amp;#x4EF6;&amp;#x3002;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;UnitTest++ &lt;br&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;UnitTest++&amp;#x662F;&amp;#x5F00;&amp;#x6E90;&amp;#x9879;&amp;#x76EE;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E2A;&amp;#x6587;&amp;#x4EF6;&amp;#x5939;&amp;#x5C31;&amp;#x662F;UnitTest++&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#x6E90;&amp;#x7801;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;tests &lt;br&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x662F;UnitTest++&amp;#x672C;&amp;#x8EAB;&amp;#x7684;test case&amp;#x3002;&amp;#x6211;&amp;#x4EEC;&amp;#x5728;&amp;#x5199;&amp;#x81EA;&amp;#x5DF1;&amp;#x7684;test case&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#x5B8C;&amp;#x5168;&amp;#x53EF;&amp;#x4EE5;&amp;#x53C2;&amp;#x8003;&amp;#x522B;&amp;#x4EBA;&amp;#x662F;&amp;#x600E;&amp;#x4E48;&amp;#x5199;&amp;#x7684;&amp;#x3002;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;cmake&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;CMake&lt;/a&gt;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x91CC;&amp;#x6536;&amp;#x96C6;&amp;#x4E86;&amp;#x4E24;&amp;#x7BC7;CMake&amp;#x7684;&amp;#x6587;&amp;#x7AE0;&amp;#xFF0C;&lt;a href=&#34;https://www.evernote.com/shard/s24/nl/697376807/d90d734c-12e4-4664-a0d5-af887f4b8b10/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;CMake&amp;#x4F7F;&amp;#x7528;&amp;#x603B;&amp;#x7ED3;&lt;/a&gt;&amp;#x548C;&lt;a href=&#34;https://www.evernote.com/shard/s24/nl/697376807/50e6782c-3acc-42a7-b582-43fe4a381fc8/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;CMake &amp;#x5165;&amp;#x95E8;&amp;#x5B9E;&amp;#x6218;&lt;/a&gt; &lt;br&gt;CMake&amp;#x610F;&amp;#x4E3A;Cross-platform Make&amp;#xFF0C;&amp;#x53EF;&amp;#x7528;&amp;#x4E8E;&amp;#x7BA1;&amp;#x7406;C/C++&amp;#x5DE5;&amp;#x7A0B;&amp;#x3002;&amp;#x4F60;&amp;#x6216;&amp;#x8BB8;&amp;#x542C;&amp;#x8FC7;&amp;#x597D;&amp;#x51E0;&amp;#x79CD; Make &amp;#x5DE5;&amp;#x5177;&amp;#xFF0C;&amp;#x4F8B;&amp;#x5982; GNU Make &amp;#xFF0C;QT &amp;#x7684; qmake &amp;#xFF0C;&amp;#x5FAE;&amp;#x8F6F;&amp;#x7684; MS nmake&amp;#xFF0C;BSD Make&amp;#xFF08;pmake&amp;#xFF09;&amp;#xFF0C;Makepp&amp;#xFF0C;&amp;#x7B49;&amp;#x7B49;&amp;#x3002;&amp;#x8FD9;&amp;#x4E9B; Make &amp;#x5DE5;&amp;#x5177;&amp;#x9075;&amp;#x5FAA;&amp;#x7740;&amp;#x4E0D;&amp;#x540C;&amp;#x7684;&amp;#x89C4;&amp;#x8303;&amp;#x548C;&amp;#x6807;&amp;#x51C6;&amp;#xFF0C;&amp;#x6240;&amp;#x6267;&amp;#x884C;&amp;#x7684; Makefile &amp;#x683C;&amp;#x5F0F;&amp;#x4E5F;&amp;#x5343;&amp;#x5DEE;&amp;#x4E07;&amp;#x522B;&amp;#x3002;&amp;#x8FD9;&amp;#x6837;&amp;#x5C31;&amp;#x5E26;&amp;#x6765;&amp;#x4E86;&amp;#x4E00;&amp;#x4E2A;&amp;#x4E25;&amp;#x5CFB;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#xFF1A;&amp;#x5982;&amp;#x679C;&amp;#x8F6F;&amp;#x4EF6;&amp;#x60F3;&amp;#x8DE8;&amp;#x5E73;&amp;#x53F0;&amp;#xFF0C;&amp;#x5FC5;&amp;#x987B;&amp;#x8981;&amp;#x4FDD;&amp;#x8BC1;&amp;#x80FD;&amp;#x591F;&amp;#x5728;&amp;#x4E0D;&amp;#x540C;&amp;#x5E73;&amp;#x53F0;&amp;#x7F16;&amp;#x8BD1;&amp;#x3002;&amp;#x800C;&amp;#x5982;&amp;#x679C;&amp;#x4F7F;&amp;#x7528;&amp;#x4E0A;&amp;#x9762;&amp;#x7684; Make &amp;#x5DE5;&amp;#x5177;&amp;#xFF0C;&amp;#x5C31;&amp;#x5F97;&amp;#x4E3A;&amp;#x6BCF;&amp;#x4E00;&amp;#x79CD;&amp;#x6807;&amp;#x51C6;&amp;#x5199;&amp;#x4E00;&amp;#x6B21; Makefile &amp;#xFF0C;&amp;#x8FD9;&amp;#x5C06;&amp;#x662F;&amp;#x4E00;&amp;#x4EF6;&amp;#x8BA9;&amp;#x4EBA;&amp;#x6293;&amp;#x72C2;&amp;#x7684;&amp;#x5DE5;&amp;#x4F5C;&amp;#x3002;&amp;#x5C31;&amp;#x662F;&amp;#x9488;&amp;#x5BF9;&amp;#x8FD9;&amp;#x4E2A;&amp;#x95EE;&amp;#x9898;&amp;#x6240;&amp;#x8BBE;&amp;#x8BA1;&amp;#x7684;&amp;#x5DE5;&amp;#x5177;&amp;#x3002;&amp;#x5B83;&amp;#x9996;&amp;#x5148;&amp;#x5141;&amp;#x8BB8;&amp;#x5F00;&amp;#x53D1;&amp;#x8005;&amp;#x7F16;&amp;#x5199;&amp;#x4E00;&amp;#x79CD;&amp;#x5E73;&amp;#x53F0;&amp;#x65E0;&amp;#x5173;&amp;#x7684; CMakeList.txt &amp;#x6587;&amp;#x4EF6;&amp;#x6765;&amp;#x5B9A;&amp;#x5236;&amp;#x6574;&amp;#x4E2A;&amp;#x7F16;&amp;#x8BD1;&amp;#x6D41;&amp;#x7A0B;&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x518D;&amp;#x6839;&amp;#x636E;&amp;#x76EE;&amp;#x6807;&amp;#x7528;&amp;#x6237;&amp;#x7684;&amp;#x5E73;&amp;#x53F0;&amp;#x8FDB;&amp;#x4E00;&amp;#x6B65;&amp;#x751F;&amp;#x6210;&amp;#x6240;&amp;#x9700;&amp;#x7684;&amp;#x672C;&amp;#x5730;&amp;#x5316; Makefile &amp;#x548C;&amp;#x5DE5;&amp;#x7A0B;&amp;#x6587;&amp;#x4EF6;&amp;#xFF0C;&amp;#x5982; Unix &amp;#x7684; Makefile &amp;#x6216; Windows &amp;#x7684; Visual Studio &amp;#x5DE5;&amp;#x7A0B;&amp;#x3002;&amp;#x4ECE;&amp;#x800C;&amp;#x505A;&amp;#x5230;&amp;#x201C;Write once, run everywhere&amp;#x201D;&amp;#x3002; &lt;br&gt;&amp;#x5728; linux &amp;#x5E73;&amp;#x53F0;&amp;#x4E0B;&amp;#x4F7F;&amp;#x7528; CMake &amp;#x751F;&amp;#x6210; Makefile &amp;#x5E76;&amp;#x7F16;&amp;#x8BD1;&amp;#x7684;&amp;#x6D41;&amp;#x7A0B;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x7F16;&amp;#x5199; CMake &amp;#x914D;&amp;#x7F6E;&amp;#x6587;&amp;#x4EF6; &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;CMakeLists.txt&lt;/code&gt; &amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6267;&amp;#x884C;&amp;#x547D;&amp;#x4EE4;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;cmake -G &amp;quot;Unix Makefiles&amp;quot; &amp;lt;PATH&amp;gt;&lt;/code&gt;&amp;#x751F;&amp;#x6210;Unix&amp;#x8BC6;&amp;#x522B;&amp;#x7684;Makefile[^support]&amp;#xFF0C;&amp;lt;PATH&amp;gt;&amp;#x662F; CMakeLists.txt &amp;#x6240;&amp;#x5728;&amp;#x7684;&amp;#x76EE;&amp;#x5F55;&amp;#x3002;&amp;#x4E5F;&amp;#x53EF;&amp;#x4EE5;&amp;#x7528;ccmake&amp;#xFF0C;ccmake &amp;#x548C; cmake &amp;#x7684;&amp;#x533A;&amp;#x522B;&amp;#x5728;&amp;#x4E8E;&amp;#x524D;&amp;#x8005;&amp;#x63D0;&amp;#x4F9B;&amp;#x4E86;&amp;#x4E00;&amp;#x4E2A;&amp;#x4EA4;&amp;#x4E92;&amp;#x5F0F;&amp;#x7684;&amp;#x754C;&amp;#x9762;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x4F7F;&amp;#x7528; make &amp;#x547D;&amp;#x4EE4;&amp;#x8FDB;&amp;#x884C;&amp;#x7F16;&amp;#x8BD1;&amp;#x3002; &lt;br&gt;&amp;#x4EE5;UnitTest++&amp;#x81EA;&amp;#x5E26;&amp;#x7684;CMakeLists.txt&amp;#x4E3A;&amp;#x4F8B;&amp;#xFF1A;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;cmake_minimum_required&lt;/span&gt;(VERSION &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;2.8&lt;/span&gt;.&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;project&lt;/span&gt;(UnitTest++)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;# get the main sources&lt;/span&gt;&lt;br&gt;file(GLOB headers_ RELATIVE &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;CMAKE_CURRENT_SOURCE_DIR&amp;#125;&lt;/span&gt; UnitTest++/*.h)&lt;br&gt;file(GLOB sources_ RELATIVE &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;CMAKE_CURRENT_SOURCE_DIR&amp;#125;&lt;/span&gt; UnitTest++/*.cpp)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;source_group&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; FILES &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;headers_&amp;#125;&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;sources_&amp;#125;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;# get platform specific sources&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;if&lt;/span&gt; (WIN32)&lt;br&gt;    &lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;add_definitions&lt;/span&gt;(-D_CRT_SECURE_NO_DEPRECATE)&lt;br&gt;    &lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;set&lt;/span&gt;(platformDir_ Win32)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;else&lt;/span&gt;()&lt;br&gt;    &lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;set&lt;/span&gt;(platformDir_ Posix)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;endif&lt;/span&gt;(WIN32)&lt;br&gt;&lt;br&gt;file(GLOB platformHeaders_ RELATIVE &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;CMAKE_CURRENT_SOURCE_DIR&amp;#125;&lt;/span&gt; UnitTest++/&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;platformDir_&amp;#125;&lt;/span&gt;/*.h)&lt;br&gt;file(GLOB platformSources_ RELATIVE &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;CMAKE_CURRENT_SOURCE_DIR&amp;#125;&lt;/span&gt; UnitTest++/&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;platformDir_&amp;#125;&lt;/span&gt;/*.cpp)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;source_group&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;platformDir_&amp;#125;&lt;/span&gt; FILES &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;platformHeaders_&amp;#125;&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;platformSources_&amp;#125;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;# create the lib&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;add_library&lt;/span&gt;(UnitTest++ STATIC &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;headers_&amp;#125;&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;sources_&amp;#125;&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;platformHeaders_&amp;#125;&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;platformSources_&amp;#125;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;# build the test runner&lt;/span&gt;&lt;br&gt;file(GLOB TEST_SRCS RELATIVE &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;CMAKE_CURRENT_SOURCE_DIR&amp;#125;&lt;/span&gt; tests/*.cpp tests/*.h)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;source_group&lt;/span&gt;( &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; FILES &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;TEST_SRCS&amp;#125;&lt;/span&gt;)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;add_executable&lt;/span&gt;(TestUnitTest++ &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;TEST_SRCS&amp;#125;&lt;/span&gt;)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;include_directories&lt;/span&gt;(.)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;UTPP_USE_PLUS_SIGN&amp;#125;&lt;/span&gt;)&lt;br&gt;    &lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;set_target_properties&lt;/span&gt;(TestUnitTest++ PROPERTIES OUTPUT_NAME TestUnitTest++)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;endif&lt;/span&gt;()&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;target_link_libraries&lt;/span&gt;(TestUnitTest++ UnitTest++)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;# run unit tests as post build step&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;add_custom_command&lt;/span&gt;(TARGET TestUnitTest++&lt;br&gt;    POST_BUILD COMMAND TestUnitTest++&lt;br&gt;    COMMENT &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;Running unit tests&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;set, file, add_library&amp;#x7B49;&amp;#x7B49;&amp;#x90FD;&amp;#x662F;&amp;#x547D;&amp;#x4EE4;&amp;#xFF0C;&amp;#x5177;&amp;#x4F53;&amp;#x547D;&amp;#x4EE4;&amp;#x53EF;&amp;#x4EE5;&amp;#x53C2;&amp;#x8003;&amp;#x8FD9;&amp;#x4E2A;&amp;#x7B14;&amp;#x8BB0;&lt;a href=&#34;https://www.evernote.com/shard/s24/nl/697376807/d90d734c-12e4-4664-a0d5-af887f4b8b10/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;CMake&amp;#x4F7F;&amp;#x7528;&amp;#x603B;&amp;#x7ED3;&lt;/a&gt;&amp;#x3002;&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;add_library(UnitTest++&amp;#x2026;)&amp;#x5C06;UnitTest++&amp;#x4EE3;&amp;#x7801;&amp;#x7F16;&amp;#x8BD1;&amp;#x6210;&amp;#x9759;&amp;#x6001;&amp;#x5E93;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;add_executable(TestUnitTest++ &amp;#x2026;)&amp;#x751F;&amp;#x6210;UnitTest++&amp;#x5E94;&amp;#x7528;&amp;#x6587;&amp;#x4EF6;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;target_link_libraries(TestUnitTest++ UnitTest++)&amp;#x5C06;&amp;#x524D;&amp;#x9762;&amp;#x751F;&amp;#x6210;&amp;#x7684;libUnitTest++.a&amp;#x94FE;&amp;#x5165;TestUnitTest++&amp;#x53EF;&amp;#x6267;&amp;#x884C;&amp;#x6587;&amp;#x4EF6;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;add_custom_command(TARGET TestUnitTest++&amp;#x2026;)&amp;#x8FD9;&amp;#x4E00;&amp;#x884C;&amp;#x51B3;&amp;#x5B9A;&amp;#x4E86;&amp;#x8FD0;&amp;#x884C;make&amp;#x65F6;&amp;#xFF0C;&amp;#x989D;&amp;#x5916;&amp;#x8C03;&amp;#x7528;&amp;#x7684;&amp;#x547D;&amp;#x4EE4;&amp;#x3002;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://www.evernote.com/shard/s24/nl/697376807/d90d734c-12e4-4664-a0d5-af887f4b8b10/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;CMake&amp;#x4F7F;&amp;#x7528;&amp;#x603B;&amp;#x7ED3;&lt;/a&gt;&amp;#x8FD9;&amp;#x7BC7;&amp;#x7B14;&amp;#x8BB0;&amp;#x91CC;&amp;#x63D0;&amp;#x5230;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x6309;&amp;#x7167;&amp;#x5B98;&amp;#x65B9;&amp;#x6587;&amp;#x6863;&amp;#x7684;&amp;#x8BF4;&amp;#x6CD5;&amp;#xFF0C;&amp;#x4E0D;&amp;#x5EFA;&amp;#x8BAE;&amp;#x4F7F;&amp;#x7528;file&amp;#x7684;GLOB&amp;#x6307;&amp;#x4EE4;&amp;#x6765;&amp;#x6536;&amp;#x96C6;&amp;#x5DE5;&amp;#x7A0B;&amp;#x7684;&amp;#x6E90;&amp;#x6587;&amp;#x4EF6;&amp;#xFF0C;&amp;#x539F;&amp;#x6587;&amp;#x89E3;&amp;#x91CA;&amp;#x5982;&amp;#x4E0B; &lt;br&gt;&lt;font color=&#34;Blue&#34; style=&#34;line-height: 1.6;&#34;&gt;We do not recommend using GLOB to collect a list of source files from your source tree. If no CMakeLists.txt file changes when a source is added or removed then the generated build system cannot know when to ask CMake to regenerate.&lt;/font&gt; &lt;br&gt;&amp;#x5927;&amp;#x610F;&amp;#x5C31;&amp;#x662F;&amp;#xFF0C;GLOB&amp;#x6536;&amp;#x96C6;&amp;#x7684;&amp;#x6E90;&amp;#x6587;&amp;#x4EF6;&amp;#x589E;&amp;#x52A0;&amp;#x6216;&amp;#x5220;&amp;#x9664;&amp;#xFF0C;&amp;#x800C;CMakeLists.txt&amp;#x6CA1;&amp;#x6709;&amp;#x53D1;&amp;#x751F;&amp;#x4FEE;&amp;#x6539;&amp;#x65F6;&amp;#xFF0C;CMake&amp;#x4E0D;&amp;#x80FD;&amp;#x8BC6;&amp;#x522B;&amp;#x8FD9;&amp;#x4E9B;&amp;#x6587;&amp;#x4EF6;&amp;#x3002;&amp;#x5176;&amp;#x5B9E;&amp;#xFF0C;&amp;#x5F53;CMakeLists.txt&amp;#x4F7F;&amp;#x7528;aux_source_directory&amp;#x548C;file glob&amp;#x67E5;&amp;#x627E;&amp;#x5DE5;&amp;#x7A0B;&amp;#x6E90;&amp;#x6587;&amp;#x4EF6;&amp;#x65F6;&amp;#xFF0C;&lt;b style=&#34;font-weight: bold;&#34;&gt;&lt;font color=&#34;IndianRed&#34; style=&#34;line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x6DFB;&amp;#x52A0;&amp;#x6216;&amp;#x5220;&amp;#x9664;&amp;#x6E90;&amp;#x6587;&amp;#x4EF6;&amp;#xFF0C;&amp;#x90FD;&amp;#x9700;&amp;#x8981;&amp;#x91CD;&amp;#x65B0;&amp;#x8FD0;&amp;#x884C;CMake&lt;/font&gt;&lt;/b&gt;&amp;#x3002;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;cmake &amp;#x5982;&amp;#x4F55;&amp;#x7F16;&amp;#x51FA;&amp;#x53EF;&amp;#x4EE5;GDB&amp;#x7684;&amp;#x7A0B;&amp;#x5E8F;&amp;#xFF1F;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;cmake -DCMAKE_BUILD_TYPE=Debug CMakeList.txt&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;implement-test-cases&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Implement Test Cases&lt;/a&gt;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Test Case&amp;#x7684;&amp;#x7F16;&amp;#x5199;&amp;#x901A;&amp;#x8FC7;UnixTest++&amp;#x672C;&amp;#x8EAB;&amp;#x7684;&amp;#x5B8F;&amp;#x5F15;&amp;#x5165;&amp;#xFF1A;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;    SUITE(MyUnitTests)&lt;br&gt;    &amp;#123;&lt;br&gt;        TEST(StarterTest)&lt;br&gt;        &amp;#123;&lt;br&gt;            MonoGraphCpInit(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;false&lt;/span&gt;);&lt;br&gt;            CHECK(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;true&lt;/span&gt;);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD0;&amp;#x884C;make&amp;#x4E4B;&amp;#x540E;&amp;#x7684;&amp;#x8F93;&amp;#x51FA;&amp;#x4E3A;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Running unit tests &lt;br&gt;Success: 2 tests passed. &lt;br&gt;Test time: 7.54 seconds. &lt;br&gt;[100%] Built target MyTest&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;TEST&amp;#x5B8F;&amp;#x5F15;&amp;#x5165;&amp;#x7684;&amp;#x5C31;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;test case&amp;#xFF0C;SUITE&amp;#x5B8F;&amp;#x5F15;&amp;#x5165;&amp;#x7684;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5957;&amp;#x4EF6;&amp;#x3002;&amp;#x9ED8;&amp;#x8BA4;&amp;#x60C5;&amp;#x51B5;&amp;#x4E0B;&amp;#xFF0C;&amp;#x6240;&amp;#x6709;&amp;#x7528;SUITE&amp;#x6216;&amp;#x8005;TEST&amp;#x5B9A;&amp;#x4E49;&amp;#x7684;case&amp;#x90FD;&amp;#x4F1A;&amp;#x88AB;&amp;#x8FD0;&amp;#x884C;&amp;#xFF0C;&amp;#x770B;main code&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #a6e22e;&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;char&lt;/span&gt; *[])&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;   &lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; UnitTest::RunAllTests();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x56E0;&amp;#x4E3A;&amp;#x6211;&amp;#x4EEC;&amp;#x6709;UnitTest++&amp;#x7684;&amp;#x6E90;&amp;#x7801;&amp;#xFF0C;&amp;#x5176;&amp;#x5B9E;&amp;#x60F3;&amp;#x600E;&amp;#x4E48;&amp;#x6D4B;&amp;#x90FD;&amp;#x53EF;&amp;#x4EE5;&amp;#x3002;&amp;#x7ECF;&amp;#x8FC7;&amp;#x5B66;&amp;#x4E60;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x60F3;&amp;#x8C03;&amp;#x7528;&amp;#x6307;&amp;#x5B9A;case&amp;#x7684;main code&amp;#x53EF;&amp;#x4EE5;&amp;#x5982;&amp;#x4E0B;&amp;#x7F16;&amp;#x5199;&amp;#xFF1A;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;   UnitTest::TestReporterStdout reporter;&lt;br&gt;   UnitTest::&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;TestRunner &lt;span style=&#34;line-height: 1.6; color: #a6e22e;&#34;&gt;runner&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(reporter)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;   &lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; runner.RunTestsIf(UnitTest::Test::GetTestList(), &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;MyUnitTests&amp;quot;&lt;/span&gt;, UnitTest::True(), &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x6BB5;code&amp;#x8C03;&amp;#x7528;&amp;#x4E86;&amp;#x540D;&amp;#x5B57;&amp;#x53EB;MyUnitTests&amp;#x7684;SUITE&amp;#x4E2D;&amp;#x6240;&amp;#x6709;case&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;linux-test-harness&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Linux Test Harness&lt;/a&gt;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Phoenix FW&amp;#x91CC;&amp;#x9762;&amp;#x7684;Linux Test Harness&amp;#x662F;&amp;#x57FA;&amp;#x4E8E;UnixTest++&amp;#x7684;&amp;#x3002;&amp;#x53EF;&amp;#x4EE5;&amp;#x53C2;&amp;#x8003;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;components/GCP/JsonDataModel/linux_test_harness/Makefile&lt;/code&gt;&amp;#x3002;&amp;#x5176;&amp;#x4E2D;&amp;#x7528;&amp;#x5230;&amp;#x7684;UnixTest++&amp;#x662F;v1.4&amp;#x7684;&amp;#xFF0C;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x7528;&amp;#x5230;cmake&amp;#x6765;&amp;#x6784;&amp;#x5EFA;&amp;#x3002;&amp;#x800C;&amp;#x662F;&amp;#x81EA;&amp;#x5DF1;&amp;#x6784;&amp;#x5EFA;&amp;#x7684;Makefile&amp;#x6765;&amp;#x7F16;&amp;#x8BD1;&amp;#x3002;&amp;#x8FD0;&amp;#x7528;&amp;#x6700;&amp;#x65B0;&amp;#x7684;cmake&amp;#x6765;&amp;#x642D;&amp;#x5EFA;Unit Test&amp;#x73AF;&amp;#x5883;&amp;#x611F;&amp;#x89C9;&amp;#x66F4;&amp;#x7B80;&amp;#x5355;&amp;#xFF0C;&amp;#x800C;&amp;#x4E14;&amp;#x7ADF;&amp;#x7136;&amp;#x8FD8;&amp;#x80FD;&amp;#x6709;&amp;#x5E73;&amp;#x53F0;&amp;#x79FB;&amp;#x690D;&amp;#x6027;&amp;#xFF0C;&amp;#x867D;&amp;#x7136;&amp;#x76EE;&amp;#x524D;&amp;#x5BF9;&amp;#x6211;&amp;#x4EEC;&amp;#x6CA1;&amp;#x7528;&amp;#xFF0C;&amp;#x4E0D;&amp;#x8FC7;&amp;#x8FD8;&amp;#x662F;&amp;#x5F88;&amp;#x8D5E;&amp;#x7684;&amp;#x3002;&amp;#x5C06;UnixTest++&amp;#x7F16;&amp;#x8BD1;&amp;#x5230;&amp;#x53EF;&amp;#x7528;&amp;#x8FD8;&amp;#x662F;&amp;#x633A;&amp;#x7B80;&amp;#x5355;&amp;#x7684;&amp;#xFF0C;&amp;#x4F46;&amp;#x662F;&amp;#x8981;&amp;#x6574;&amp;#x5408;Phoenix code&amp;#x6709;&amp;#x90A3;&amp;#x4E48;&amp;#x4E00;&amp;#x70B9;&amp;#x9EBB;&amp;#x70E6;&amp;#x3002;&amp;#x5148;&amp;#x8BB2;&amp;#x4E00;&amp;#x4E0B;&amp;#x6211;&amp;#x4EEC;&amp;#x7684;&amp;#x4F7F;&amp;#x7528;&amp;#x573A;&amp;#x666F;&amp;#xFF0C;&amp;#x6D4B;&amp;#x8BD5;Mono Graphic Panel Driver&amp;#x3002;&amp;#x518D;&amp;#x5C06;&amp;#x5177;&amp;#x4F53;&amp;#x642D;&amp;#x5EFA;&amp;#x7684;&amp;#x601D;&amp;#x8DEF;&amp;#x548C;&amp;#x4E00;&amp;#x4E9B;&amp;#x5C0F;tips&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;mono-graphic-panel-driver&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Mono Graphic Panel Driver&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x91CC;&amp;#x6709;&amp;#x4E00;&amp;#x7BC7;&amp;#x76F8;&amp;#x5173;&amp;#x7B14;&amp;#x8BB0;&lt;a href=&#34;https://www.evernote.com/shard/s24/nl/2724128/9cf701b0-e736-43d5-9411-923afacf2344&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Pheonix_Display&lt;/a&gt;&amp;#x3002;&amp;#x6211;&amp;#x5176;&amp;#x5B9E;&amp;#x60F3;&amp;#x505A;&amp;#x7684;&amp;#x662F;&amp;#x5728;Mono Graphic Panel Driver&amp;#x4E2D;&amp;#x6DFB;&amp;#x52A0;&amp;#x4E00;&amp;#x4E2A;Recovery Thread&amp;#x3002;&amp;#x5148;&amp;#x770B;&amp;#x4E0B;&amp;#x6E90;&amp;#x7801;&amp;#x67B6;&amp;#x6784;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;[benzhou@plslx111 phx]$ ls components/bsp/control_panel/ &lt;br&gt;abc  buttonLed  ccpi  clcd  inc  &lt;font color=&#34;IndianRed&#34; style=&#34;line-height: 1.6;&#34;&gt;monoGraph&lt;/font&gt;  obj  pub  src&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;monoGraph&lt;/code&gt;&amp;#x4E2D;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x4F1A;&amp;#x8C03;&amp;#x7528;&amp;#x5230;abc&amp;#x6587;&amp;#x4EF6;&amp;#x5939;&amp;#x4E0B;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x3002;&amp;#x6240;&amp;#x4EE5;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;linux_test_harness&lt;/code&gt;&amp;#x5C31;&amp;#x653E;&amp;#x5728;&amp;#x8FD9;&amp;#x4E2A;&amp;#x6587;&amp;#x4EF6;&amp;#x5939;&amp;#x4E0B;&amp;#x3002;&amp;#x5E76;&amp;#x4E14;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;abc&lt;/code&gt;&amp;#x548C;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;monoGraph&lt;/code&gt;&amp;#x4E2D;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x9700;&amp;#x8981;&amp;#x88AB;&amp;#x94FE;&amp;#x63A5;&amp;#x5230;&amp;#x6211;&amp;#x4EEC;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7A0B;&amp;#x5E8F;&amp;#x4E2D;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;&amp;#x6D4B;&amp;#x8BD5;&amp;#x67B6;&amp;#x6784;&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;&amp;#x67B6;&amp;#x6784;&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6700;&amp;#x540E;&amp;#x6211;&amp;#x4EEC;&amp;#x7684;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;CMakeLists.txt&lt;/code&gt;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;cmake_minimum_required&lt;/span&gt;(VERSION &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;2.8&lt;/span&gt;.&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;project&lt;/span&gt;(MyTest)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;set&lt;/span&gt;(CMAKE_C_COMPILER &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;g++&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;# enable gdb&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;set&lt;/span&gt;(CMAKE_BUILD_TYPE &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;Debug&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;set&lt;/span&gt;(CMAKE_CXX_FLAGS_DEBUG &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;$ENV&amp;#123;CXXFLAGS&amp;#125; -O0 -Wall -g -ggdb&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;set&lt;/span&gt;(CMAKE_CXX_FLAGS_RELEASE &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;$ENV&amp;#123;CXXFLAGS&amp;#125; -O3 -Wall&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;set&lt;/span&gt;(PHX_DIR &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;$&amp;#123;CMAKE_CURRENT_SOURCE_DIR&amp;#125;/../../../../../&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;include_directories&lt;/span&gt;(..)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;include_directories&lt;/span&gt;(stubs)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;include_directories&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;components/bsp/control_panel/monoGraph/pub/)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;include_directories&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;components/bsp/control_panel/monoGraph/inc/)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;include_directories&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;components/bsp/control_panel/abc/pub/)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;include_directories&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;components/bsp/control_panel/abc/inc/)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;include_directories&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;components/bsp/control_panel/pub/)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;include_directories&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;components/bsp/control_panel/inc/)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;include_directories&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;components/primboot/pub/)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;# get Phoenix code&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;#file(GLOB PHX_SRCS RELATIVE $&amp;#123;CMAKE_CURRENT_SOURCE_DIR&amp;#125; ../../../src/*.cpp ../../../src/*.c)&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;aux_source_directory&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;/components/bsp/control_panel/abc/src PHX_ABC)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;aux_source_directory&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;/components/bsp/control_panel/monoGraph/src PHX_MONO)&lt;br&gt;list(APPEND PHX_SRCS&lt;br&gt;    &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_ABC&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_MONO&amp;#125;&lt;/span&gt;&lt;br&gt;)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;add_library&lt;/span&gt; (PhxFunctions STATIC &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_SRCS&amp;#125;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;# get the Phoenix stub sources&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;aux_source_directory&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;/components/bsp/control_panel/linux_test_harness/mytests/stubs PHX_STUBS)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;add_library&lt;/span&gt; (StubFunctions STATIC &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_STUBS&amp;#125;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;# get the main sources&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;aux_source_directory&lt;/span&gt;(&lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;PHX_DIR&amp;#125;&lt;/span&gt;/components/bsp/control_panel/linux_test_harness/mytests TEST_SRCS)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;add_executable&lt;/span&gt;(MyTest &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;$&amp;#123;TEST_SRCS&amp;#125;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;target_link_libraries&lt;/span&gt;(MyTest&lt;br&gt;    pthread&lt;br&gt;    UnitTest++&lt;br&gt;    PhxFunctions&lt;br&gt;    StubFunctions&lt;br&gt;)&lt;br&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #75715e;&#34;&gt;# run unit tests as post build step&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;add_custom_command&lt;/span&gt;(TARGET MyTest&lt;br&gt;    POST_BUILD COMMAND MyTest&lt;br&gt;    COMMENT &lt;span style=&#34;line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;Running unit tests&amp;quot;&lt;/span&gt;&lt;br&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x9664;&amp;#x4E86;UnitTest++&amp;#x6846;&amp;#x67B6;&amp;#x672C;&amp;#x8EAB;&amp;#x7684;&amp;#x5E93;libUnitTest++.a&amp;#x548C;&amp;#x94FE;&amp;#x5165;&amp;#x4E86;&amp;#x4E00;&amp;#x4E2A;pthread&amp;#x5E93;&amp;#x4EE5;&amp;#x5916;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x8FD8;&amp;#x5B9A;&amp;#x4E49;&amp;#x4E86;&amp;#x53E6;&amp;#x5916;&amp;#x4E24;&amp;#x4E2A;&amp;#x5E93;PhxFunctions&amp;#x548C;StubFunctions&amp;#x3002;&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;PhxFunctions&amp;#x662F;&amp;#x6211;&amp;#x4EEC;&amp;#x60F3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7684;code&amp;#xFF0C;&amp;#x5373;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;abc&lt;/code&gt;&amp;#x548C;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;monoGraph&lt;/code&gt;&amp;#x6587;&amp;#x4EF6;&amp;#x5939;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;StubFunctions&amp;#x662F;&amp;#x4E3A;&amp;#x4E86;&amp;#x7F16;&amp;#x8BD1;&amp;#x901A;&amp;#x8FC7;&amp;#xFF0C;&amp;#x5B9A;&amp;#x4E49;&amp;#x7684;&amp;#x4E00;&amp;#x4E9B;&amp;#x5B58;&amp;#x6839;&amp;#x51FD;&amp;#x6570;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E3B;&amp;#x8981;&amp;#x9700;&amp;#x8981;&amp;#x6CE8;&amp;#x610F;&amp;#x7684;&amp;#x662F;&amp;#x600E;&amp;#x4E48;&amp;#x5B9A;&amp;#x4E49;&amp;#x8FD9;&amp;#x4E9B;&amp;#x5B58;&amp;#x6839;&amp;#x6587;&amp;#x4EF6;&amp;#x548C;&amp;#x51FD;&amp;#x6570;&amp;#x3002;&amp;#x6839;&amp;#x636E;&amp;#x6211;&amp;#x7684;&amp;#x7ECF;&amp;#x9A8C;&amp;#x548C;TDD&amp;#x601D;&amp;#x60F3;(&amp;#x4E0D;&amp;#x8981;&amp;#x4E3A;&amp;#x4E86;&amp;#x660E;&amp;#x5929;&amp;#x8BBE;&amp;#x8BA1;)&amp;#xFF0C;&amp;#x5E94;&amp;#x8BE5;&amp;#x6CE8;&amp;#x610F;&amp;#xFF1A;&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x6709;&amp;#x627E;&amp;#x4E0D;&amp;#x5230;&amp;#x7684;&amp;#x5934;&amp;#x6587;&amp;#x4EF6;&amp;#xFF0C;&amp;#x5728;stubs&amp;#x6587;&amp;#x4EF6;&amp;#x5939;&amp;#x91CC;&amp;#x52A0;&amp;#x4E00;&amp;#x4E2A;&amp;#x7A7A;&amp;#x6587;&amp;#x4EF6;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x6709;&amp;#x627E;&amp;#x4E0D;&amp;#x5230;&amp;#x7684;&amp;#x7C7B;&amp;#x58F0;&amp;#x660E;&amp;#xFF0C;&amp;#x4ECE;FW&amp;#x627E;&amp;#x5230;&amp;#x7C7B;&amp;#x5B9A;&amp;#x4E49;&amp;#x62F7;&amp;#x8D1D;&amp;#x8FC7;&amp;#x6765;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x6709;&amp;#x627E;&amp;#x4E0D;&amp;#x5230;&amp;#x5B9A;&amp;#x4E49;&amp;#x7684;&amp;#x51FD;&amp;#x6570;&amp;#x7684;&amp;#x94FE;&amp;#x63A5;&amp;#x9519;&amp;#x8BEF;&amp;#xFF0C;&amp;#x5C31;&amp;#x5728;stub.cpp&amp;#x4E2D;&amp;#x5B9A;&amp;#x4E49;&amp;#x7A7A;&amp;#x51FD;&amp;#x6570;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x5C06;&amp;#x6765;&amp;#x53D1;&amp;#x73B0;&amp;#x9700;&amp;#x8981;&amp;#x8C03;&amp;#x7528;&amp;#x771F;&amp;#x5B9E;&amp;#x7684;FW&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x5C31;&amp;#x9700;&amp;#x8981;&amp;#x5C06;&amp;#x90A3;&amp;#x4E2A;&amp;#x51FD;&amp;#x6570;&amp;#x6240;&amp;#x5728;&amp;#x7684;&amp;#x6E90;&amp;#x7801;&amp;#x6587;&amp;#x4EF6;&amp;#x7F16;&amp;#x8BD1;&amp;#x6210;&amp;#x5E93;&amp;#x94FE;&amp;#x63A5;&amp;#x8FDB;&amp;#x6765;&amp;#x3002;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;center style=&#34;display:none&#34;&gt;%23UnitTest++%u7B80%u4ECB%0A@%28%u5B66%u4E60%u7B14%u8BB0%29%5BTDD%2C%20Programming%2C%20unittest%5D%0A%0A%5BTOC%5D%0A%0A%u6700%u8FD1%u62DC%u8BFB%u4E86Kent%20Beck%u5927%u795E%u7684%u300ATest-Driven%20Development%20By%20Example%u300B%uFF0C%u6709%u4E86%u8FD9%u7BC7%5B%u8BFB%u4E66%u7B14%u8BB0%5D%28https%3A//www.evernote.com/shard/s24/nl/697376807/209575d9-d1bc-4aa6-8a79-3d50bfe3d377/%29%u3002%u8FD9%u672C%u4E66%u89E3%u7B54%u4E86%u6211%u7684%u5F88%u591A%u5F00%u53D1%u4E2D%u9047%u5230%u7684%u56F0%u60D1%uFF0C%u6240%u4EE5%u51B3%u5B9A%u4EE5%u540E%u8D70%u4E0ATDD%u7684%u9053%u8DEF%u3002%u90A3%u4E3A%u4EC0%u4E48%u4F1A%u5B66%u4E60UnixTest++%uFF0C%u5176%u5B9E%u662F%u56E0%u4E3A%u60E0%u666E%u6253%u5370%u673A%u7684Phoenix%20FW%u91CC%u9762%u66FE%u7ECF%u6709%u5148%u8F88%u505A%u8FC7%u7C7B%u4F3Cunit%20test%u7684%u4E8B%u60C5%uFF0C%u79F0%u4E4B%u4E3ALinux%20Test%20Harness%u3002Harnes%u662F%u9A6C%u978D%u7684%u610F%u601D%uFF0C%u8FD9%u4E2A%u540D%u5B57%u5E94%u8BE5%u662F%u60E0%u666E%u4EBA%u81EA%u5DF1%u53D6%u7684%u3002%u8FD9%u4E2ALinux%20Test%20Harness%u5C31%u662F%u57FA%u4E8E%5BUnixTest++%5D%28https%3A//github.com/unittest-cpp/unittest-cpp%29%u7684%u3002%u76EE%u524D%u6211%u7528%u7684%u662F%u6700%u65B0%u7248%uFF0Cv1.5.1%u3002%u76EE%u5F55%u6811%u7ED3%u6784%u5982%u4E0B%uFF1A%0A%u251C%u2500%u2500%20AUTHORS%0A%u251C%u2500%u2500%20%3Cfont%20color%3D%22IndianRed%22%3ECMakeLists.txt%3C/font%3E%0A%u251C%u2500%u2500%20ChangeLog%0A%u251C%u2500%u2500%20INSTALL%0A%u251C%u2500%u2500%20LICENSE%0A%u251C%u2500%u2500%20Makefile.am%0A%u251C%u2500%u2500%20README.md%0A%u251C%u2500%u2500%20%3Cfont%20color%3D%22IndianRed%22%3EUnitTest++%3C/font%3E%0A%u251C%u2500%u2500%20UnitTest++.pc.in%0A%u251C%u2500%u2500%20appveyor.yml%0A%u251C%u2500%u2500%20builds%0A%u251C%u2500%u2500%20configure.ac%0A%u251C%u2500%u2500%20docs%0A%u251C%u2500%u2500%20m4%0A%u2502%20%20%20%u251C%u2500%u2500%20ax_cxx_compile_stdcxx.m4%0A%u2502%20%20%20%u2514%u2500%u2500%20ax_cxx_compile_stdcxx_11.m4%0A%u2514%u2500%u2500%20%3Cfont%20color%3D%22IndianRed%22%3Etests%3C/font%3E%0A%0A7%20directories%2C%2095%20files%0A%u91CD%u8981%u7684%u6587%u4EF6%u6216%u6587%u4EF6%u5939%u6211%u6807%u6210%u4E86%u7EA2%u8272%u3002%0A-%20CMakeLists.txt%0A%09-%20UnitTest++%u662F%u57FA%u4E8ECMake%u7684%uFF0C%u540E%u9762%u4F1A%u5177%u4F53%u8BB2CMake%uFF0C%u8FD9%u4E2A%u6587%u4EF6%u5C31%u7C7B%u4F3C%u4E8ECMake%u7684%u5DE5%u7A0B%u6587%u4EF6%u3002CMake%u57FA%u4E8E%u5B83%u751F%u6210Makefile%u6216%u8005%u5176%u4ED6%u5F00%u53D1%u5E73%u53F0%u7684%u5DE5%u7A0B%u6587%u4EF6%u3002%0A-%20UnitTest++%0A%09-%20UnitTest++%u662F%u5F00%u6E90%u9879%u76EE%uFF0C%u8FD9%u4E2A%u6587%u4EF6%u5939%u5C31%u662FUnitTest++%u6240%u6709%u7684%u6E90%u7801%0A-%20tests%0A%09-%20%u8FD9%u4E2A%u662FUnitTest++%u672C%u8EAB%u7684test%20case%u3002%u6211%u4EEC%u5728%u5199%u81EA%u5DF1%u7684test%20case%u7684%u65F6%u5019%u5B8C%u5168%u53EF%u4EE5%u53C2%u8003%u522B%u4EBA%u662F%u600E%u4E48%u5199%u7684%u3002%0A%0A%23%23CMake%0A%u8FD9%u91CC%u6536%u96C6%u4E86%u4E24%u7BC7CMake%u7684%u6587%u7AE0%uFF0C%5BCMake%u4F7F%u7528%u603B%u7ED3%5D%28https%3A//www.evernote.com/shard/s24/nl/697376807/d90d734c-12e4-4664-a0d5-af887f4b8b10/%29%u548C%5BCMake%20%u5165%u95E8%u5B9E%u6218%5D%28https%3A//www.evernote.com/shard/s24/nl/697376807/50e6782c-3acc-42a7-b582-43fe4a381fc8/%29%0ACMake%u610F%u4E3ACross-platform%20Make%uFF0C%u53EF%u7528%u4E8E%u7BA1%u7406C/C++%u5DE5%u7A0B%u3002%u4F60%u6216%u8BB8%u542C%u8FC7%u597D%u51E0%u79CD%20Make%20%u5DE5%u5177%uFF0C%u4F8B%u5982%20GNU%20Make%20%uFF0CQT%20%u7684%20qmake%20%uFF0C%u5FAE%u8F6F%u7684%20MS%20nmake%uFF0CBSD%20Make%uFF08pmake%uFF09%uFF0CMakepp%uFF0C%u7B49%u7B49%u3002%u8FD9%u4E9B%20Make%20%u5DE5%u5177%u9075%u5FAA%u7740%u4E0D%u540C%u7684%u89C4%u8303%u548C%u6807%u51C6%uFF0C%u6240%u6267%u884C%u7684%20Makefile%20%u683C%u5F0F%u4E5F%u5343%u5DEE%u4E07%u522B%u3002%u8FD9%u6837%u5C31%u5E26%u6765%u4E86%u4E00%u4E2A%u4E25%u5CFB%u7684%u95EE%u9898%uFF1A%u5982%u679C%u8F6F%u4EF6%u60F3%u8DE8%u5E73%u53F0%uFF0C%u5FC5%u987B%u8981%u4FDD%u8BC1%u80FD%u591F%u5728%u4E0D%u540C%u5E73%u53F0%u7F16%u8BD1%u3002%u800C%u5982%u679C%u4F7F%u7528%u4E0A%u9762%u7684%20Make%20%u5DE5%u5177%uFF0C%u5C31%u5F97%u4E3A%u6BCF%u4E00%u79CD%u6807%u51C6%u5199%u4E00%u6B21%20Makefile%20%uFF0C%u8FD9%u5C06%u662F%u4E00%u4EF6%u8BA9%u4EBA%u6293%u72C2%u7684%u5DE5%u4F5C%u3002%u5C31%u662F%u9488%u5BF9%u8FD9%u4E2A%u95EE%u9898%u6240%u8BBE%u8BA1%u7684%u5DE5%u5177%u3002%u5B83%u9996%u5148%u5141%u8BB8%u5F00%u53D1%u8005%u7F16%u5199%u4E00%u79CD%u5E73%u53F0%u65E0%u5173%u7684%20CMakeList.txt%20%u6587%u4EF6%u6765%u5B9A%u5236%u6574%u4E2A%u7F16%u8BD1%u6D41%u7A0B%uFF0C%u7136%u540E%u518D%u6839%u636E%u76EE%u6807%u7528%u6237%u7684%u5E73%u53F0%u8FDB%u4E00%u6B65%u751F%u6210%u6240%u9700%u7684%u672C%u5730%u5316%20Makefile%20%u548C%u5DE5%u7A0B%u6587%u4EF6%uFF0C%u5982%20Unix%20%u7684%20Makefile%20%u6216%20Windows%20%u7684%20Visual%20Studio%20%u5DE5%u7A0B%u3002%u4ECE%u800C%u505A%u5230%u201CWrite%20once%2C%20run%20everywhere%u201D%u3002%0A%09%u5728%20linux%20%u5E73%u53F0%u4E0B%u4F7F%u7528%20CMake%20%u751F%u6210%20Makefile%20%u5E76%u7F16%u8BD1%u7684%u6D41%u7A0B%u5982%u4E0B%uFF1A%0A1.%20%u7F16%u5199%20CMake%20%u914D%u7F6E%u6587%u4EF6%20%60CMakeLists.txt%60%20%u3002%0A2.%20%u6267%u884C%u547D%u4EE4%60cmake%20-G%20%22Unix%20Makefiles%22%20%3CPATH%3E%60%u751F%u6210Unix%u8BC6%u522B%u7684Makefile%5B%5Esupport%5D%uFF0C%26lt%3BPATH%26gt%3B%u662F%20CMakeLists.txt%20%u6240%u5728%u7684%u76EE%u5F55%u3002%u4E5F%u53EF%u4EE5%u7528ccmake%uFF0Cccmake%20%u548C%20cmake%20%u7684%u533A%u522B%u5728%u4E8E%u524D%u8005%u63D0%u4F9B%u4E86%u4E00%u4E2A%u4EA4%u4E92%u5F0F%u7684%u754C%u9762%u3002%0A3.%20%u4F7F%u7528%20make%20%u547D%u4EE4%u8FDB%u884C%u7F16%u8BD1%u3002%0A%u4EE5UnitTest++%u81EA%u5E26%u7684CMakeLists.txt%u4E3A%u4F8B%uFF1A%0A%60%60%60cmake%0Acmake_minimum_required%28VERSION%202.8.1%29%0Aproject%28UnitTest++%29%0A%0A%23%20get%20the%20main%20sources%0Afile%28GLOB%20headers_%20RELATIVE%20%24%7BCMAKE_CURRENT_SOURCE_DIR%7D%20UnitTest++/*.h%29%0Afile%28GLOB%20sources_%20RELATIVE%20%24%7BCMAKE_CURRENT_SOURCE_DIR%7D%20UnitTest++/*.cpp%29%0Asource_group%28%22%22%20FILES%20%24%7Bheaders_%7D%20%24%7Bsources_%7D%29%0A%0A%23%20get%20platform%20specific%20sources%0Aif%20%28WIN32%29%0A%20%20%20%20add_definitions%28-D_CRT_SECURE_NO_DEPRECATE%29%0A%20%20%20%20set%28platformDir_%20Win32%29%0Aelse%28%29%0A%20%20%20%20set%28platformDir_%20Posix%29%0Aendif%28WIN32%29%0A%0Afile%28GLOB%20platformHeaders_%20RELATIVE%20%24%7BCMAKE_CURRENT_SOURCE_DIR%7D%20UnitTest++/%24%7BplatformDir_%7D/*.h%29%0Afile%28GLOB%20platformSources_%20RELATIVE%20%24%7BCMAKE_CURRENT_SOURCE_DIR%7D%20UnitTest++/%24%7BplatformDir_%7D/*.cpp%29%0Asource_group%28%24%7BplatformDir_%7D%20FILES%20%24%7BplatformHeaders_%7D%20%24%7BplatformSources_%7D%29%0A%0A%23%20create%20the%20lib%0Aadd_library%28UnitTest++%20STATIC%20%24%7Bheaders_%7D%20%24%7Bsources_%7D%20%24%7BplatformHeaders_%7D%20%24%7BplatformSources_%7D%29%0A%0A%23%20build%20the%20test%20runner%0Afile%28GLOB%20TEST_SRCS%20RELATIVE%20%24%7BCMAKE_CURRENT_SOURCE_DIR%7D%20tests/*.cpp%20tests/*.h%29%0Asource_group%28%20%22%22%20FILES%20%24%7BTEST_SRCS%7D%29%0Aadd_executable%28TestUnitTest++%20%24%7BTEST_SRCS%7D%29%0Ainclude_directories%28.%29%0A%0Aif%28%24%7BUTPP_USE_PLUS_SIGN%7D%29%0A%20%20%20%20set_target_properties%28TestUnitTest++%20PROPERTIES%20OUTPUT_NAME%20TestUnitTest++%29%0Aendif%28%29%0A%0Atarget_link_libraries%28TestUnitTest++%20UnitTest++%29%0A%0A%23%20run%20unit%20tests%20as%20post%20build%20step%0Aadd_custom_command%28TARGET%20TestUnitTest++%0A%20%20%20%20POST_BUILD%20COMMAND%20TestUnitTest++%0A%20%20%20%20COMMENT%20%22Running%20unit%20tests%22%29%0A%60%60%60%0Aset%2C%20file%2C%20add_library%u7B49%u7B49%u90FD%u662F%u547D%u4EE4%uFF0C%u5177%u4F53%u547D%u4EE4%u53EF%u4EE5%u53C2%u8003%u8FD9%u4E2A%u7B14%u8BB0%5BCMake%u4F7F%u7528%u603B%u7ED3%5D%28https%3A//www.evernote.com/shard/s24/nl/697376807/d90d734c-12e4-4664-a0d5-af887f4b8b10/%29%u3002%0A-%20add_library%28UnitTest++...%29%u5C06UnitTest++%u4EE3%u7801%u7F16%u8BD1%u6210%u9759%u6001%u5E93%0A-%20add_executable%28TestUnitTest++%20...%29%u751F%u6210UnitTest++%u5E94%u7528%u6587%u4EF6%0A-%20target_link_libraries%28TestUnitTest++%20UnitTest++%29%u5C06%u524D%u9762%u751F%u6210%u7684libUnitTest++.a%u94FE%u5165TestUnitTest++%u53EF%u6267%u884C%u6587%u4EF6%u3002%0A-%20add_custom_command%28TARGET%20TestUnitTest++...%29%u8FD9%u4E00%u884C%u51B3%u5B9A%u4E86%u8FD0%u884Cmake%u65F6%uFF0C%u989D%u5916%u8C03%u7528%u7684%u547D%u4EE4%u3002%0A%0A%5BCMake%u4F7F%u7528%u603B%u7ED3%5D%28https%3A//www.evernote.com/shard/s24/nl/697376807/d90d734c-12e4-4664-a0d5-af887f4b8b10/%29%u8FD9%u7BC7%u7B14%u8BB0%u91CC%u63D0%u5230%uFF1A%0A%3E%u6309%u7167%u5B98%u65B9%u6587%u6863%u7684%u8BF4%u6CD5%uFF0C%u4E0D%u5EFA%u8BAE%u4F7F%u7528file%u7684GLOB%u6307%u4EE4%u6765%u6536%u96C6%u5DE5%u7A0B%u7684%u6E90%u6587%u4EF6%uFF0C%u539F%u6587%u89E3%u91CA%u5982%u4E0B%0A%3Cfont%20color%3D%22Blue%22%3EWe%20do%20not%20recommend%20using%20GLOB%20to%20collect%20a%20list%20of%20source%20files%20from%20your%20source%20tree.%20If%20no%20CMakeLists.txt%20file%20changes%20when%20a%20source%20is%20added%20or%20removed%20then%20the%20generated%20build%20system%20cannot%20know%20when%20to%20ask%20CMake%20to%20regenerate.%3C/font%3E%0A%u5927%u610F%u5C31%u662F%uFF0CGLOB%u6536%u96C6%u7684%u6E90%u6587%u4EF6%u589E%u52A0%u6216%u5220%u9664%uFF0C%u800CCMakeLists.txt%u6CA1%u6709%u53D1%u751F%u4FEE%u6539%u65F6%uFF0CCMake%u4E0D%u80FD%u8BC6%u522B%u8FD9%u4E9B%u6587%u4EF6%u3002%u5176%u5B9E%uFF0C%u5F53CMakeLists.txt%u4F7F%u7528aux_source_directory%u548Cfile%20glob%u67E5%u627E%u5DE5%u7A0B%u6E90%u6587%u4EF6%u65F6%uFF0C%3Cb%3E%3Cfont%20color%3D%22IndianRed%22%3E%u5982%u679C%u6DFB%u52A0%u6216%u5220%u9664%u6E90%u6587%u4EF6%uFF0C%u90FD%u9700%u8981%u91CD%u65B0%u8FD0%u884CCMake%3C/font%3E%3C/b%3E%u3002%0A%0Acmake%20%u5982%u4F55%u7F16%u51FA%u53EF%u4EE5GDB%u7684%u7A0B%u5E8F%uFF1F%0A%3E%60cmake%20-DCMAKE_BUILD_TYPE%3DDebug%20CMakeList.txt%60%0A%23%23Implement%20Test%20Cases%0ATest%20Case%u7684%u7F16%u5199%u901A%u8FC7UnixTest++%u672C%u8EAB%u7684%u5B8F%u5F15%u5165%uFF1A%0A%60%60%60cpp%0A%20%20%20%20SUITE%28MyUnitTests%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20TEST%28StarterTest%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20MonoGraphCpInit%28false%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20CHECK%28true%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%60%60%60%0A%u8FD0%u884Cmake%u4E4B%u540E%u7684%u8F93%u51FA%u4E3A%uFF1A%0A%3ERunning%20unit%20tests%0ASuccess%3A%202%20tests%20passed.%0ATest%20time%3A%207.54%20seconds.%0A%5B100%25%5D%20Built%20target%20MyTest%0A%0ATEST%u5B8F%u5F15%u5165%u7684%u5C31%u662F%u4E00%u4E2Atest%20case%uFF0CSUITE%u5B8F%u5F15%u5165%u7684%u662F%u4E00%u4E2A%u6D4B%u8BD5%u5957%u4EF6%u3002%u9ED8%u8BA4%u60C5%u51B5%u4E0B%uFF0C%u6240%u6709%u7528SUITE%u6216%u8005TEST%u5B9A%u4E49%u7684case%u90FD%u4F1A%u88AB%u8FD0%u884C%uFF0C%u770Bmain%20code%u3002%0A%60%60%60cpp%0Aint%20main%28int%2C%20const%20char%20*%5B%5D%29%0A%7B%0A%20%20%20return%20UnitTest%3A%3ARunAllTests%28%29%3B%0A%7D%0A%60%60%60%0A%u56E0%u4E3A%u6211%u4EEC%u6709UnitTest++%u7684%u6E90%u7801%uFF0C%u5176%u5B9E%u60F3%u600E%u4E48%u6D4B%u90FD%u53EF%u4EE5%u3002%u7ECF%u8FC7%u5B66%u4E60%uFF0C%u5982%u679C%u60F3%u8C03%u7528%u6307%u5B9Acase%u7684main%20code%u53EF%u4EE5%u5982%u4E0B%u7F16%u5199%uFF1A%0A%60%60%60cpp%0A%20%20%20UnitTest%3A%3ATestReporterStdout%20reporter%3B%0A%20%20%20UnitTest%3A%3ATestRunner%20runner%28reporter%29%3B%0A%20%20%20return%20runner.RunTestsIf%28UnitTest%3A%3ATest%3A%3AGetTestList%28%29%2C%20%22MyUnitTests%22%2C%20UnitTest%3A%3ATrue%28%29%2C%200%29%3B%0A%60%60%60%0A%u8FD9%u6BB5code%u8C03%u7528%u4E86%u540D%u5B57%u53EBMyUnitTests%u7684SUITE%u4E2D%u6240%u6709case%u3002%0A%0A%23%23Linux%20Test%20Harness%0APhoenix%20FW%u91CC%u9762%u7684Linux%20Test%20Harness%u662F%u57FA%u4E8EUnixTest++%u7684%u3002%u53EF%u4EE5%u53C2%u8003%60components/GCP/JsonDataModel/linux_test_harness/Makefile%60%u3002%u5176%u4E2D%u7528%u5230%u7684UnixTest++%u662Fv1.4%u7684%uFF0C%u5E76%u6CA1%u6709%u7528%u5230cmake%u6765%u6784%u5EFA%u3002%u800C%u662F%u81EA%u5DF1%u6784%u5EFA%u7684Makefile%u6765%u7F16%u8BD1%u3002%u8FD0%u7528%u6700%u65B0%u7684cmake%u6765%u642D%u5EFAUnit%20Test%u73AF%u5883%u611F%u89C9%u66F4%u7B80%u5355%uFF0C%u800C%u4E14%u7ADF%u7136%u8FD8%u80FD%u6709%u5E73%u53F0%u79FB%u690D%u6027%uFF0C%u867D%u7136%u76EE%u524D%u5BF9%u6211%u4EEC%u6CA1%u7528%uFF0C%u4E0D%u8FC7%u8FD8%u662F%u5F88%u8D5E%u7684%u3002%u5C06UnixTest++%u7F16%u8BD1%u5230%u53EF%u7528%u8FD8%u662F%u633A%u7B80%u5355%u7684%uFF0C%u4F46%u662F%u8981%u6574%u5408Phoenix%20code%u6709%u90A3%u4E48%u4E00%u70B9%u9EBB%u70E6%u3002%u5148%u8BB2%u4E00%u4E0B%u6211%u4EEC%u7684%u4F7F%u7528%u573A%u666F%uFF0C%u6D4B%u8BD5Mono%20Graphic%20Panel%20Driver%u3002%u518D%u5C06%u5177%u4F53%u642D%u5EFA%u7684%u601D%u8DEF%u548C%u4E00%u4E9B%u5C0Ftips%u3002%0A%0A%23%23%23Mono%20Graphic%20Panel%20Driver%0A%u8FD9%u91CC%u6709%u4E00%u7BC7%u76F8%u5173%u7B14%u8BB0%5BPheonix_Display%5D%28https%3A//www.evernote.com/shard/s24/nl/2724128/9cf701b0-e736-43d5-9411-923afacf2344%29%u3002%u6211%u5176%u5B9E%u60F3%u505A%u7684%u662F%u5728Mono%20Graphic%20Panel%20Driver%u4E2D%u6DFB%u52A0%u4E00%u4E2ARecovery%20Thread%u3002%u5148%u770B%u4E0B%u6E90%u7801%u67B6%u6784%uFF1A%0A%3E%5Bbenzhou@plslx111%20phx%5D%24%20ls%20components/bsp/control_panel/%0Aabc%20%20buttonLed%20%20ccpi%20%20clcd%20%20inc%20%20%3Cfont%20color%3D%22IndianRed%22%3EmonoGraph%3C/font%3E%20%20obj%20%20pub%20%20src%0A%0A%60monoGraph%60%u4E2D%u7684%u4EE3%u7801%u4F1A%u8C03%u7528%u5230abc%u6587%u4EF6%u5939%u4E0B%u7684%u4EE3%u7801%u3002%u6240%u4EE5%60linux_test_harness%60%u5C31%u653E%u5728%u8FD9%u4E2A%u6587%u4EF6%u5939%u4E0B%u3002%u5E76%u4E14%60abc%60%u548C%60monoGraph%60%u4E2D%u7684%u4EE3%u7801%u9700%u8981%u88AB%u94FE%u63A5%u5230%u6211%u4EEC%u7684%u6D4B%u8BD5%u7A0B%u5E8F%u4E2D%u3002%0A%0A%23%23%23%u6D4B%u8BD5%u67B6%u6784%0A%u6700%u540E%u6211%u4EEC%u7684%60CMakeLists.txt%60%u5982%u4E0B%uFF1A%0A%60%60%60cmake%0Acmake_minimum_required%28VERSION%202.8.1%29%0Aproject%28MyTest%29%0A%0Aset%28CMAKE_C_COMPILER%20%22g++%22%29%0A%0A%23%20enable%20gdb%0Aset%28CMAKE_BUILD_TYPE%20%22Debug%22%29%0Aset%28CMAKE_CXX_FLAGS_DEBUG%20%22%24ENV%7BCXXFLAGS%7D%20-O0%20-Wall%20-g%20-ggdb%22%29%0Aset%28CMAKE_CXX_FLAGS_RELEASE%20%22%24ENV%7BCXXFLAGS%7D%20-O3%20-Wall%22%29%0A%0Aset%28PHX_DIR%20%22%24%7BCMAKE_CURRENT_SOURCE_DIR%7D/../../../../../%22%29%0A%0Ainclude_directories%28..%29%0Ainclude_directories%28stubs%29%0Ainclude_directories%28%24%7BPHX_DIR%7Dcomponents/bsp/control_panel/monoGraph/pub/%29%0Ainclude_directories%28%24%7BPHX_DIR%7Dcomponents/bsp/control_panel/monoGraph/inc/%29%0Ainclude_directories%28%24%7BPHX_DIR%7Dcomponents/bsp/control_panel/abc/pub/%29%0Ainclude_directories%28%24%7BPHX_DIR%7Dcomponents/bsp/control_panel/abc/inc/%29%0Ainclude_directories%28%24%7BPHX_DIR%7Dcomponents/bsp/control_panel/pub/%29%0Ainclude_directories%28%24%7BPHX_DIR%7Dcomponents/bsp/control_panel/inc/%29%0Ainclude_directories%28%24%7BPHX_DIR%7Dcomponents/primboot/pub/%29%0A%0A%23%20get%20Phoenix%20code%0A%23file%28GLOB%20PHX_SRCS%20RELATIVE%20%24%7BCMAKE_CURRENT_SOURCE_DIR%7D%20../../../src/*.cpp%20../../../src/*.c%29%0Aaux_source_directory%28%24%7BPHX_DIR%7D/components/bsp/control_panel/abc/src%20PHX_ABC%29%0Aaux_source_directory%28%24%7BPHX_DIR%7D/components/bsp/control_panel/monoGraph/src%20PHX_MONO%29%0Alist%28APPEND%20PHX_SRCS%0A%20%20%20%20%24%7BPHX_ABC%7D%0A%20%20%20%20%24%7BPHX_MONO%7D%0A%29%0Aadd_library%20%28PhxFunctions%20STATIC%20%24%7BPHX_SRCS%7D%29%0A%0A%23%20get%20the%20Phoenix%20stub%20sources%0Aaux_source_directory%28%24%7BPHX_DIR%7D/components/bsp/control_panel/linux_test_harness/mytests/stubs%20PHX_STUBS%29%0Aadd_library%20%28StubFunctions%20STATIC%20%24%7BPHX_STUBS%7D%29%0A%0A%23%20get%20the%20main%20sources%0Aaux_source_directory%28%24%7BPHX_DIR%7D/components/bsp/control_panel/linux_test_harness/mytests%20TEST_SRCS%29%0A%0Aadd_executable%28MyTest%20%24%7BTEST_SRCS%7D%29%0A%0Atarget_link_libraries%28MyTest%0A%20%20%20%20pthread%0A%20%20%20%20UnitTest++%0A%20%20%20%20PhxFunctions%0A%20%20%20%20StubFunctions%0A%29%0A%0A%23%20run%20unit%20tests%20as%20post%20build%20step%0Aadd_custom_command%28TARGET%20MyTest%0A%20%20%20%20POST_BUILD%20COMMAND%20MyTest%0A%20%20%20%20COMMENT%20%22Running%20unit%20tests%22%0A%29%0A%60%60%60%0A%u9664%u4E86UnitTest++%u6846%u67B6%u672C%u8EAB%u7684%u5E93libUnitTest++.a%u548C%u94FE%u5165%u4E86%u4E00%u4E2Apthread%u5E93%u4EE5%u5916%uFF0C%u6211%u4EEC%u8FD8%u5B9A%u4E49%u4E86%u53E6%u5916%u4E24%u4E2A%u5E93PhxFunctions%u548CStubFunctions%u3002%0A-%20PhxFunctions%u662F%u6211%u4EEC%u60F3%u6D4B%u8BD5%u7684code%uFF0C%u5373%60abc%60%u548C%60monoGraph%60%u6587%u4EF6%u5939%0A-%20StubFunctions%u662F%u4E3A%u4E86%u7F16%u8BD1%u901A%u8FC7%uFF0C%u5B9A%u4E49%u7684%u4E00%u4E9B%u5B58%u6839%u51FD%u6570%0A%0A%u4E3B%u8981%u9700%u8981%u6CE8%u610F%u7684%u662F%u600E%u4E48%u5B9A%u4E49%u8FD9%u4E9B%u5B58%u6839%u6587%u4EF6%u548C%u51FD%u6570%u3002%u6839%u636E%u6211%u7684%u7ECF%u9A8C%u548CTDD%u601D%u60F3%28%u4E0D%u8981%u4E3A%u4E86%u660E%u5929%u8BBE%u8BA1%29%uFF0C%u5E94%u8BE5%u6CE8%u610F%uFF1A%0A-%20%u5982%u679C%u6709%u627E%u4E0D%u5230%u7684%u5934%u6587%u4EF6%uFF0C%u5728stubs%u6587%u4EF6%u5939%u91CC%u52A0%u4E00%u4E2A%u7A7A%u6587%u4EF6%0A-%20%u5982%u679C%u6709%u627E%u4E0D%u5230%u7684%u7C7B%u58F0%u660E%uFF0C%u4ECEFW%u627E%u5230%u7C7B%u5B9A%u4E49%u62F7%u8D1D%u8FC7%u6765%0A-%20%u5982%u679C%u6709%u627E%u4E0D%u5230%u5B9A%u4E49%u7684%u51FD%u6570%u7684%u94FE%u63A5%u9519%u8BEF%uFF0C%u5C31%u5728stub.cpp%u4E2D%u5B9A%u4E49%u7A7A%u51FD%u6570%u3002%0A-%20%u5982%u679C%u5C06%u6765%u53D1%u73B0%u9700%u8981%u8C03%u7528%u771F%u5B9E%u7684FW%u51FD%u6570%uFF0C%u5C31%u9700%u8981%u5C06%u90A3%u4E2A%u51FD%u6570%u6240%u5728%u7684%u6E90%u7801%u6587%u4EF6%u7F16%u8BD1%u6210%u5E93%u94FE%u63A5%u8FDB%u6765%u3002&lt;/center&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
        <category term="TDD" />
        <category term="unittest" />
        <category term="Programming" />
        <updated>2016-02-29T00:03:53.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.zhougy.top/2016/02/16/Test-Driven_Development/</id>
        <title>Test-Driven Development</title>
        <link rel="alternate" href="https://blog.zhougy.top/2016/02/16/Test-Driven_Development/"/>
        <content type="html">&lt;!DOCTYPE en-note SYSTEM &#39;http://xml.evernote.com/pub/enml2.dtd&#39;&gt;&lt;div class=&#34;enNote&#34; style=&#34;color: #2c3f51; font-family: &amp;apos;Helvetica Neue&amp;apos;, Arial, &amp;apos;Hiragino Sans GB&amp;apos;, STHeiti, &amp;apos;Microsoft YaHei&amp;apos;, &amp;apos;WenQuanYi Micro Hei&amp;apos;, SimSun, Song, sans-serif; line-height: 1.6;&#34; title lang=&#34;v2&#34; xml:lang dir&gt;&lt;del style=&#34;position:relative;display:block;z-index:10;&#34;&gt;&lt;a style=&#34;position: absolute;color: #FFF;text-decoration: none;font-size: 12px;height: 25px;border-radius: 0;margin-top: -20px;right: 15px;background: rgba(0, 0, 0, 0);border-left: 10px solid #BB3A34;border-right: 10px solid #BB3A34;border-bottom: 5px solid rgba(0, 0, 0, 0);width: 0;text-indent:-100000px;&#34; href=&#34;http://maxiang.io/#/?provider=evernote_int&amp;amp;guid=209575d9-d1bc-4aa6-8a79-3d50bfe3d377&amp;amp;notebook=%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0&#34;&gt;Edit&lt;/a&gt;&lt;/del&gt;&lt;div style=&#34;color: #2c3f51; font-family: &amp;apos;Helvetica Neue&amp;apos;, Arial, &amp;apos;Hiragino Sans GB&amp;apos;, STHeiti, &amp;apos;Microsoft YaHei&amp;apos;, &amp;apos;WenQuanYi Micro Hei&amp;apos;, SimSun, Song, sans-serif; line-height: 1.6;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; color: rgba(44,63,81,0.3); line-height: 1.6;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; background-color: #f9f2f4; white-space: normal; padding: 2px 5px; border-radius: 0; color: #fff; background: rgba(44,63,81,0.3); margin-right: 6px;&#34;&gt;&amp;#x5B66;&amp;#x4E60;&amp;#x7B14;&amp;#x8BB0;&lt;/code&gt; &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; background-color: #f9f2f4; white-space: normal; padding: 2px 5px; color: rgba(44,63,81,0.5); border-radius: 0; background: rgba(102,128,153,0.075);&#34;&gt;Programming&lt;/code&gt; &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; background-color: #f9f2f4; white-space: normal; padding: 2px 5px; color: rgba(44,63,81,0.5); border-radius: 0; background: rgba(102,128,153,0.075);&#34;&gt;TDD&lt;/code&gt; &lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#test-driven-development&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Test-Driven Development&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#chapter-25-test-driven-development-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 25. Test-Driven Development Patterns&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#isolated-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Isolated Test&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#test-list&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Test List&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#test-first&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Test First&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#chapter-26-red-bar-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 26. Red Bar Patterns&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#one-step-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;One Step Test&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#starter-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Starter Test&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#explanation-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Explanation Test&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#learning-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Learning Test&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#regression-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Regression Test&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#break&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Break&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#do-over&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Do Over&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#chapter-27-testing-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 27. Testing Patterns&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#child-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Child Test&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#mock-object&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Mock Object&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#self-shunt&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Self Shunt&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#log-string&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Log String&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#crash-test-dummy&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Crash Test Dummy&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#broken-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Broken Test&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#clean-check-in&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Clean Check-in&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#chapter-28-green-bar-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 28. Green Bar Patterns&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#fake-it-til-you-make-it&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Fake It (&amp;#x2018;Til You Make It)&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#triangulate&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Triangulate&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#one-to-many&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;One to Many&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#chapter-29-xunit-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 29. xUnit Patterns&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#assertion&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Assertion&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#fixture&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Fixture&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#external-fixture&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;External Fixture&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#test-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Test Method&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#exception-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Exception Test&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#all-tests&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;All Tests&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#chapter-30-design-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 30. Design Patterns&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#command&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Command&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#value-object&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Value Object&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#null-object&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Null Object&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#template-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Template Method&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#pluggable-object&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Pluggable Object&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#pluggable-selector&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Pluggable Selector&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#factory-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Factory Method&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#imposter&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Imposter&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#composite&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Composite&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#collecting-parameter&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Collecting Parameter&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#singleton&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Singleton&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#chapter-31-refactoring&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 31. Refactoring&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#reconcile-differences&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Reconcile Differences&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#isolate-change&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Isolate Change&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#migrate-data&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Migrate Data&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#extract-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Extract Method&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#how&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#why&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Why&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#inline-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Inline Method&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#extract-interface&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Extract Interface&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#how-1&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#why-1&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Why&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#move-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Move Method&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#method-object&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Method Object&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#how-2&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#why-2&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Why&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#add-parameter&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Add Parameter&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#method-parameter-to-constructor-parameter&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Method Parameter to Constructor Parameter&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#chapter-32-mastering-tdd&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 32. Mastering TDD&lt;/a&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#what-dont-you-have-to-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;What don&amp;#x2019;t you have to test?&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#how-do-you-know-if-you-have-good-tests&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How do you know if you have good tests?&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#how-does-tdd-lead-to-frameworks&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How does TDD lead to frameworks?&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#how-much-feedback-do-you-need&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How much feedback do you need?&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#when-should-you-delete-tests&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;When should you delete tests?&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#can-you-drive-development-with-application-level-tests&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Can you drive development with application-level tests?&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#how-do-you-switch-to-tdd-midstream&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How do you switch to TDD midstream?&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;#how-does-tdd-relate-to-the-practices-of-extreme-programming&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How does TDD relate to the practices of Extreme Programming?&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6700;&amp;#x8FD1;&amp;#x5728;&amp;#x8BFB;Kent Beck&amp;#x7684;&amp;#x300A;Test-Driven Development By Example&amp;#x300B;&amp;#xFF0C;&amp;#x8BA9;&amp;#x6211;&amp;#x5BF9;&amp;#x8F6F;&amp;#x4EF6;&amp;#x5F00;&amp;#x53D1;&amp;#x6709;&amp;#x4E86;&amp;#x65B0;&amp;#x7684;&amp;#x8BA4;&amp;#x8BC6;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5199;test&amp;#x5E76;&amp;#x4E0D;&amp;#x4E3A;&amp;#x4E86;&amp;#x6D4B;&amp;#x8BD5;&amp;#x800C;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x662F;&amp;#x4E3A;&amp;#x4E86;&amp;#x589E;&amp;#x5F3A;&amp;#x5BF9;&amp;#x7A0B;&amp;#x5E8F;&amp;#x7684;&amp;#x4FE1;&amp;#x5FC3;&amp;#xFF0C;&amp;#x51CF;&amp;#x5C11;&amp;#x7126;&amp;#x8651;&amp;#x3002;&amp;#x90A3;&amp;#x4E48;&amp;#x5982;&amp;#x4F55;&amp;#x51CF;&amp;#x5C11;&amp;#x7126;&amp;#x8651;&amp;#x5462;&amp;#xFF0C;&amp;#x662F;&amp;#x901A;&amp;#x8FC7;&amp;#x4E00;&amp;#x6B21;&amp;#x53EA;&amp;#x5173;&amp;#x5FC3;&amp;#x4E00;&amp;#x4EF6;&amp;#x4E8B;&amp;#x60C5;&amp;#x3002;&amp;#x5982;&amp;#x4F55;&amp;#x4E00;&amp;#x6B21;&amp;#x53EA;&amp;#x5173;&amp;#x5FC3;&amp;#x4E00;&amp;#x4EF6;&amp;#x4E8B;&amp;#x60C5;&amp;#xFF0C;&amp;#x8FD9;&amp;#x5C31;&amp;#x662F;TDD&amp;#x3002;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x672C;&amp;#x4E66;&amp;#x5206;&amp;#x4E09;&amp;#x4E2A;&amp;#x90E8;&amp;#x5206;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The Money Example&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The xUnit Example&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Patterns for Test-Driven Development &lt;br&gt;&amp;#x524D;&amp;#x4E24;&amp;#x4E2A;&amp;#x90E8;&amp;#x5206;&amp;#x8BB2;&amp;#x4E86;&amp;#x4E24;&amp;#x4E2A;&amp;#x4F8B;&amp;#x5B50;&amp;#xFF0C;&amp;#x6765;&amp;#x9610;&amp;#x8FF0;&amp;#x5982;&amp;#x4F55;&amp;#x8FDB;&amp;#x884C;TDD&amp;#x5F00;&amp;#x53D1;&amp;#xFF0C;&amp;#x6700;&amp;#x540E;&amp;#x4E00;&amp;#x4E2A;&amp;#x90E8;&amp;#x5206;&amp;#x7B97;&amp;#x662F;&amp;#x603B;&amp;#x7ED3;&amp;#xFF0C;&amp;#x5168;&amp;#x4E66;&amp;#x7684;&amp;#x7CBE;&amp;#x534E;&amp;#x6240;&amp;#x5728;&amp;#x3002;&amp;#x672C;&amp;#x6587;&amp;#x4E0D;&amp;#x6253;&amp;#x7B97;&amp;#x8BB2;&amp;#x8FD9;&amp;#x4E24;&amp;#x4E2A;&amp;#x4F8B;&amp;#x5B50;&amp;#x4E86;&amp;#xFF0C;&amp;#x56E0;&amp;#x4E3A;&amp;#x4F8B;&amp;#x5B50;&amp;#x6700;&amp;#x597D;&amp;#x81EA;&amp;#x5DF1;&amp;#x624B;&amp;#x5199;&amp;#x4E00;&amp;#x904D;&amp;#xFF0C;&amp;#x624D;&amp;#x53EF;&amp;#x4EE5;&amp;#x52A0;&amp;#x6DF1;&amp;#x4E86;&amp;#x89E3;&amp;#x3002;&amp;#x672C;&amp;#x6587;&amp;#x4E3B;&amp;#x8981;&amp;#x6458;&amp;#x5F55;&amp;#x4E00;&amp;#x4E9B;TDD&amp;#x7684;&amp;#x6A21;&amp;#x5F0F;&amp;#x65B9;&amp;#x6CD5;(pattern)&amp;#x3002;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0B;&amp;#x9762;&amp;#x8FD9;&amp;#x6BB5;&amp;#x8BDD;&amp;#x6765;&amp;#x81EA;&amp;#x7B2C;&amp;#x4E00;&amp;#x7AE0;&amp;#xFF0C;&amp;#x63D0;&amp;#x7EB2;&amp;#x6308;&amp;#x9886;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;My goal is for you to see the rhythm of Test-Driven Development (TDD), which can be summed up as follows.&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Quickly add a test.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Run all tests and see the new one fail.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Make a little change.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Run all tests and see them all succeed.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Refactor to remove duplication.&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;The surprises are likely to include.&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;How each test can cover a &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;small increment&lt;/strong&gt; of functionality.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;How &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;small and ugly the changes&lt;/strong&gt; can be to make the new tests run.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;How often the tests are run.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;How many teensy-weensy steps make up the refactorings.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x5C31;&amp;#x662F;TDD&amp;#x7684;&amp;#x7CBE;&amp;#x9AD3;&amp;#x3002;&amp;#x6309;&amp;#x4F5C;&amp;#x8005;&amp;#x7684;&amp;#x8BF4;&amp;#x6CD5;&amp;#x5C31;&amp;#x662F;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;Green/Red/Green/Refactor&lt;/code&gt;&amp;#x8282;&amp;#x594F;&amp;#x3002; &lt;br&gt;&amp;#x8FD9;&amp;#x4E5F;&amp;#x56DE;&amp;#x7B54;&amp;#x4E86;&amp;#x6211;&amp;#x4E00;&amp;#x76F4;&amp;#x4EE5;&amp;#x6765;&amp;#x7684;&amp;#x56F0;&amp;#x6270;&amp;#xFF0C;&amp;#x5230;&amp;#x5E95;&amp;#x5E94;&amp;#x8BE5;&amp;#x5982;&amp;#x4F55;&amp;#x8BBE;&amp;#x8BA1;&amp;#x4E00;&amp;#x6BB5;&amp;#x7A0B;&amp;#x5E8F;&amp;#xFF0C;&amp;#x5230;&amp;#x5E95;&amp;#x8981;&amp;#x8003;&amp;#x8651;&amp;#x591A;&amp;#x5C11;&amp;#x79CD;&amp;#x60C5;&amp;#x51B5;&amp;#x3002;&amp;#x6309;&amp;#x7167;TDD&amp;#x7684;&amp;#x5EFA;&amp;#x8BAE;&amp;#x5C31;&amp;#x662F;&amp;#xFF0C;&amp;#x9996;&amp;#x5148;&amp;#x5199;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x4EE3;&amp;#x7801;&amp;#x600E;&amp;#x4E48;&amp;#x5FEB;&amp;#x600E;&amp;#x4E48;&amp;#x6765;&amp;#xFF0C;&amp;#x4E0D;&amp;#x7BA1;&amp;#x6709;&amp;#x591A;ugly&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x5982;&amp;#x679C;&amp;#x53D1;&amp;#x73B0;&amp;#x91CD;&amp;#x590D;&amp;#xFF0C;&amp;#x53CA;&amp;#x65F6;&amp;#x505A;&amp;#x91CD;&amp;#x6784;&amp;#x3002;&amp;#x4E0D;&amp;#x8981;&amp;#x8003;&amp;#x8651;&amp;#x4EC0;&amp;#x4E48;&amp;#x6269;&amp;#x5C55;&amp;#x6027;&amp;#x4E4B;&amp;#x7C7B;&amp;#x7684;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E2A;&amp;#x8BBE;&amp;#x8BA1;&amp;#x65B9;&amp;#x5F0F;&amp;#x672C;&amp;#x8EAB;&amp;#x5C31;&amp;#x80FD;&amp;#x63D0;&amp;#x4F9B;&amp;#x3002;&amp;#x56E0;&amp;#x4E3A;&amp;#x5B83;&amp;#x63D0;&amp;#x9AD8;&amp;#x4E86;&amp;#x8FD0;&amp;#x884C;&amp;#x6D4B;&amp;#x8BD5;&amp;#x548C;&amp;#x91CD;&amp;#x6784;&amp;#x7684;&amp;#x9891;&amp;#x7387;&amp;#xFF0C;&amp;#x65E2;&amp;#x63D0;&amp;#x5347;&amp;#x4E86;&amp;#x7F16;&amp;#x7801;&amp;#x8005;&amp;#x5BF9;&amp;#x7A0B;&amp;#x5E8F;&amp;#x7684;&amp;#x4FE1;&amp;#x5FC3;&amp;#xFF0C;&amp;#x4E5F;&amp;#x964D;&amp;#x4F4E;&amp;#x4E86;&amp;#x4E0D;&amp;#x5408;&amp;#x7406;&amp;#x8BBE;&amp;#x8BA1;&amp;#x7684;&amp;#x53EF;&amp;#x80FD;&amp;#x6027;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;chapter-25-test-driven-development-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 25. Test-Driven Development Patterns&lt;/a&gt;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E66;&amp;#x4E2D;&amp;#x5F15;&amp;#x5165;&amp;#x4E86;&amp;#x5F88;&amp;#x591A;&amp;#x5F71;&amp;#x50CF;&amp;#x56FE;(Influence Diagram)&amp;#xFF0C;&amp;#x5F88;&amp;#x5F62;&amp;#x8C61;&amp;#x7684;&amp;#x8BF4;&amp;#x660E;&amp;#x4E86;&amp;#xFF0C;&amp;#x5F15;&amp;#x5165;TDD&amp;#x80FD;&amp;#x7ED9;&amp;#x6211;&amp;#x4EEC;&amp;#x65E5;&amp;#x5E38;&amp;#x7684;&amp;#x5F00;&amp;#x53D1;&amp;#x5DE5;&amp;#x4F5C;&amp;#x5F15;&amp;#x5165;&amp;#x4EC0;&amp;#x4E48;&amp;#x597D;&amp;#x5904;&amp;#x3002; &lt;br&gt;&lt;img class=&#34;enMedia&#34; src=&#34;/images/Test-Driven Development/1455616022147.png&#34; hash=&#34;ee396bc2e1f7e786de1ec9ab19d445e4&#34; align alt longdesc width height border hspace vspace usemap style=&#34;border: 0; vertical-align: middle; max-width: 100%;&#34; title lang xml:lang dir&gt;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;This is a positive feedback loop. &lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The more stress you feel, the less testing you will do. &lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The less testing you do, the more errors you will make. &lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The more errors you make, the more stress you feel. &lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Rinse and repeat.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;isolated-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Isolated Test&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x80FD;&amp;#x5C06;&amp;#x5927;&amp;#x5757;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5206;&amp;#x5272;&amp;#x6210;&amp;#x677E;&amp;#x8026;&amp;#x5408;&amp;#x7684;&amp;#x5C0F;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E0D;&amp;#x5BB9;&amp;#x6613;&amp;#xFF0C;&amp;#x4F46;&amp;#x662F;&amp;#x597D;&amp;#x5904;&amp;#x5927;&amp;#x5927;&amp;#x7684;&amp;#x3002;&amp;#x4F5C;&amp;#x8005;&amp;#x8BF4;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;I never knew exactly how to achieve high cohesion and loose coupling regularly until I started writing isolated tests.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;test-list&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Test List&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6211;&amp;#x4EEC;&amp;#x8981;&amp;#x600E;&amp;#x4E48;&amp;#x5F00;&amp;#x59CB;TDD&amp;#x5462;&amp;#xFF1F;&amp;#x4F5C;&amp;#x8005;&amp;#x7ED9;&amp;#x51FA;&amp;#x4E86;&amp;#x5F88;&amp;#x5177;&amp;#x64CD;&amp;#x4F5C;&amp;#x6027;&amp;#x7684;&amp;#x5EFA;&amp;#x8BAE;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;Before you begin, write a list of all the tests you know you will have to write. &lt;br&gt;&amp;#x8FD9;&amp;#x4E2A;list&amp;#x4E0A;&amp;#x5199;&amp;#x70B9;&amp;#x4EC0;&amp;#x4E48;&amp;#x5462;&amp;#xFF1F;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Put on the list examples of every operation that you know you need to implement. &amp;#x8981;&amp;#x54EA;&amp;#x4E9B;&amp;#x64CD;&amp;#x4F5C;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;for those operations that don&amp;#x2019;t already exist, put the null version of that operation on the list.&amp;#x54EA;&amp;#x4E9B;&amp;#x64CD;&amp;#x4F5C;&amp;#x6CA1;&amp;#x5B9E;&amp;#x73B0;&amp;#xFF0C;&amp;#x5199;&amp;#x4E0A;&amp;#x5B58;&amp;#x6839;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;List all of the refactorings that you think you will have to do in order to have clean code at the end of this session. &amp;#x5B8C;&amp;#x6210;&amp;#x4E4B;&amp;#x540E;&amp;#xFF0C;&amp;#x5217;&amp;#x51FA;&amp;#x9700;&amp;#x8981;&amp;#x91CD;&amp;#x6784;&amp;#x7684;&amp;#x5730;&amp;#x65B9;&amp;#x3002;&amp;#x800C;&amp;#x5982;&amp;#x679C;&amp;#x6709;&amp;#x5927;&amp;#x7684;&amp;#x91CD;&amp;#x6784;&amp;#x7684;&amp;#x9700;&amp;#x8981;&amp;#x65F6;&amp;#xFF0C;&amp;#x653E;&amp;#x5230;later list&amp;#x91CC;&amp;#x9762;&amp;#xFF0C;&amp;#x628A;&amp;#x624B;&amp;#x91CC;&amp;#x7684;&amp;#x4E8B;&amp;#x60C5;&amp;#x5904;&amp;#x7406;&amp;#x5B8C;&amp;#xFF0C;&amp;#x518D;&amp;#x53BB;&amp;#x5904;&amp;#x7406;&amp;#x5927;&amp;#x7684;&amp;#x91CD;&amp;#x6784;&amp;#x3002;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x770B;&amp;#x4F5C;&amp;#x8005;&amp;#x65F6;&amp;#x523B;&amp;#x5728;&amp;#x5F3A;&amp;#x8C03;TDD&amp;#x5C31;&amp;#x662F;tiny steps&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;The pure form of TDD, wherein you are never more than one change away from a green bar, is like that three-out-of-four rule.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;test-first&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Test First&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4EC0;&amp;#x4E48;&amp;#x65F6;&amp;#x5019;&amp;#x5199;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF1F; &lt;br&gt;&amp;#x7B54;&amp;#xFF1A;&amp;#x5728;&amp;#x5199;code&amp;#x4E4B;&amp;#x524D;&amp;#xFF0C;&amp;#x56E0;&amp;#x4E3A;&amp;#x4E00;&amp;#x65E6;&amp;#x4F60;&amp;#x5F00;&amp;#x59CB;&amp;#x5199;code&amp;#xFF0C;&amp;#x4F60;&amp;#x53EF;&amp;#x80FD;&amp;#x5C31;&amp;#x8EAB;&amp;#x9677;&amp;#x6CE5;&amp;#x6F6D;&amp;#xFF0C;&amp;#x65E0;&amp;#x6687;&amp;#x987E;&amp;#x53CA;test case&amp;#x4E86;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;chapter-26-red-bar-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 26. Red Bar Patterns&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;one-step-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;One Step Test&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Each test should represent one step toward your overall goal.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;starter-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Starter Test&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x4F55;&amp;#x5F00;&amp;#x59CB;&amp;#x5199;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF1F;&amp;#x4E0D;&amp;#x8981;&amp;#x4E00;&amp;#x5F00;&amp;#x59CB;&amp;#x5C31;&amp;#x60F3;&amp;#x5199;&amp;#x4E00;&amp;#x4E2A;&amp;#x771F;&amp;#x6B63;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x56E0;&amp;#x4E3A;&amp;#x8FD9;&amp;#x6837;&amp;#x4F1A;&amp;#x4E00;&amp;#x6B21;&amp;#x9762;&amp;#x5BF9;&amp;#x592A;&amp;#x591A;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x3002;&amp;#x4F5C;&amp;#x8005;&amp;#x5EFA;&amp;#x8BAE;&amp;#x5C1D;&amp;#x8BD5;&amp;#x4ECE;&amp;#x4E00;&amp;#x4E2A;&amp;#x7B80;&amp;#x5355;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x8F93;&amp;#x5165;&amp;#x8F93;&amp;#x51FA;&amp;#x5F00;&amp;#x59CB;&amp;#x3002;&amp;#x8FD9;&amp;#x6837;&amp;#x4EE5;&amp;#x4FBF;&amp;#x4E8E;&amp;#x4F60;&amp;#x4ECE;Greenxun&amp;#x8FC5;&amp;#x901F;&amp;#x5F00;&amp;#x59CB;&amp;#x4F60;&amp;#x7684;Green/Red/Green/Refactor&amp;#x8282;&amp;#x594F;&amp;#x3002;&amp;#x4F5C;&amp;#x8005;&amp;#x4E3E;&amp;#x4E86;&amp;#x4E00;&amp;#x4E2A;&amp;#x4EA7;&amp;#x751F;&amp;#x591A;&amp;#x8FB9;&amp;#x5F62;&amp;#x7684;&amp;#x4F8B;&amp;#x5B50;&amp;#xFF1A;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;Reducer r= &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Reducer(&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Polygon()); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;assertEquals(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, reducer.result().npoints);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0D;&amp;#x592A;&amp;#x61C2;&amp;#x8FD9;&amp;#x4E2A;&amp;#x95EE;&amp;#x9898;&amp;#xFF0C;&amp;#x4E0D;&amp;#x8FC7;&amp;#x53EF;&amp;#x4EE5;&amp;#x4ECE;&amp;#x4E2D;&amp;#x770B;&amp;#x51FA;&amp;#x4F5C;&amp;#x8005;&amp;#x5BF9;TDD&amp;#x7684;&amp;#x89E3;&amp;#x91CA;&amp;#x3002;&amp;#x95EE;&amp;#x9898;&amp;#x672C;&amp;#x8EAB;&amp;#x662F;&amp;#x8981;&amp;#x89E3;&amp;#x4E00;&amp;#x4E2A;&amp;#x964D;&amp;#x4F4E;&amp;#x591A;&amp;#x8FB9;&amp;#x5F62;&amp;#x8FB9;&amp;#x6570;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x3002;&amp;#x4F5C;&amp;#x8005;&amp;#x7684;&amp;#x542F;&amp;#x52A8;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5C31;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x201C;0&amp;#x201D;&amp;#x8FB9;&amp;#x591A;&amp;#x8FB9;&amp;#x5F62;&amp;#xFF0C;&amp;#x90A3;&amp;#x7ED3;&amp;#x679C;&amp;#x4E00;&amp;#x5B9A;&amp;#x662F;&amp;#x201D;0&amp;#x201D;&amp;#x8FB9;&amp;#x591A;&amp;#x8FB9;&amp;#x5F62;&amp;#x3002;&amp;#x5BF9;&amp;#x5B9E;&amp;#x9645;&amp;#x610F;&amp;#x4E49;&amp;#x5F88;&amp;#x8352;&amp;#x8BDE;&amp;#xFF0C;&amp;#x4F46;&amp;#x5BF9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6765;&amp;#x8BF4;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x4E0D;&amp;#x9519;&amp;#x7684;&amp;#x5F00;&amp;#x59CB;&amp;#x3002;&amp;#x7B26;&amp;#x5408;&amp;#x6211;&amp;#x4EEC;&amp;#x7684;&amp;#x9884;&amp;#x671F;&amp;#xFF0C;&amp;#x7B80;&amp;#x5355;&amp;#x800C;&amp;#x4E14;&amp;#x53C8;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;represent one step toward your overall goal&lt;/code&gt;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;explanation-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Explanation Test&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E00;&amp;#x7AE0;&amp;#x662F;&amp;#x5728;&amp;#x8BF4;&amp;#x5982;&amp;#x4F55;&amp;#x4E0D;&amp;#x7528;&amp;#x5F3A;&amp;#x8FEB;&amp;#x7684;&amp;#x624B;&amp;#x6BB5;&amp;#x8BA9;&amp;#x975E;TDD&amp;#x7684;&amp;#x56E2;&amp;#x961F;&amp;#x6210;&amp;#x5458;&amp;#x80FD;&amp;#x8F6C;&amp;#x5411;TDD&amp;#x3002;&amp;#x5F53;&amp;#x5F00;&amp;#x53D1;&amp;#x8005;&amp;#x5411;&amp;#x4F60;&amp;#x89E3;&amp;#x91CA;&amp;#x4ED6;&amp;#x7684;&amp;#x7A0B;&amp;#x5E8F;&amp;#x65F6;&amp;#xFF0C;&amp;#x4F60;&amp;#x90FD;&amp;#x53EF;&amp;#x4EE5;&amp;#x5C06;&amp;#x4E4B;&amp;#x8F6C;&amp;#x5316;&amp;#x4E3A;test case&amp;#x3002; &lt;br&gt;&amp;#x672C;&amp;#x4E66;&amp;#x8FD8;&amp;#x6709;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F88;&amp;#x6709;&amp;#x7279;&amp;#x8272;&amp;#x7684;&amp;#x5730;&amp;#x65B9;&amp;#x662F;&amp;#xFF0C;&amp;#x8D2F;&amp;#x7A7F;&amp;#x5168;&amp;#x6587;&amp;#xFF0C;&amp;#x4F5C;&amp;#x8005;&amp;#x603B;&amp;#x662F;&amp;#x5728;&amp;#x7ECF;&amp;#x610F;&amp;#x4E0D;&amp;#x7ECF;&amp;#x610F;&amp;#x95F4;&amp;#x6D41;&amp;#x9732;&amp;#x7740;&amp;#x5404;&amp;#x79CD;&amp;#x5B9D;&amp;#x8D35;&amp;#x7684;&amp;#x5DE5;&amp;#x4F5C;&amp;#x7ECF;&amp;#x9A8C;&amp;#xFF1A;&amp;#x5982;&amp;#x4F55;&amp;#x957F;&amp;#x671F;&amp;#x4FDD;&amp;#x6301;&amp;#x66F4;&amp;#x9AD8;&amp;#x6548;&amp;#x7684;&amp;#x7F16;&amp;#x7A0B;&amp;#xFF1F;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x662F;&amp;#x7ECF;&amp;#x7406;&amp;#xFF0C;&amp;#x4F60;&amp;#x5982;&amp;#x4F55;&amp;#x4E0E;&amp;#x4F60;&amp;#x7684;&amp;#x56E2;&amp;#x961F;&amp;#x6210;&amp;#x5458;&amp;#x4E00;&amp;#x8D77;&amp;#x5DE5;&amp;#x4F5C;&amp;#xFF1F;&amp;#x7B49;&amp;#x7B49;&amp;#x3002;&amp;#x8FD9;&amp;#x4E00;&amp;#x7AE0;&amp;#x5C31;&amp;#x6709;&amp;#x8FD9;&amp;#x6837;&amp;#x4E00;&amp;#x53E5;&amp;#x8BDD;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;If you&amp;#x2019;re a manager or a leader, you can&amp;#x2019;t force anyone to change the way they work. &lt;br&gt;What can you do? A simple start is to start asking for explanations in terms of test cases: &amp;#x201C;Let me see if I understand what you&amp;#x2019;re saying.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;learning-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Learning Test&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E00;&amp;#x7AE0;&amp;#x8BB2;&amp;#x4E86;&amp;#x6D4B;&amp;#x8BD5;&amp;#x9A71;&amp;#x52A8;&amp;#x5F00;&amp;#x53D1;&amp;#x9488;&amp;#x5BF9;&amp;#x96C6;&amp;#x6210;&amp;#x7B2C;&amp;#x4E09;&amp;#x65B9;&amp;#x5E93;&amp;#x7684;&amp;#x4F18;&amp;#x52BF;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;regression-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Regression Test&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x56DE;&amp;#x5F52;&amp;#x6D4B;&amp;#x8BD5;&lt;/strong&gt;&amp;#x662F;&amp;#x6307;&amp;#x4FEE;&amp;#x6539;&amp;#x4E86;&amp;#x65E7;&amp;#x4EE3;&amp;#x7801;&amp;#x540E;&amp;#xFF0C;&amp;#x91CD;&amp;#x65B0;&amp;#x8FDB;&amp;#x884C;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4EE5;&amp;#x786E;&amp;#x8BA4;&amp;#x4FEE;&amp;#x6539;&amp;#x6CA1;&amp;#x6709;&amp;#x5F15;&amp;#x5165;&amp;#x65B0;&amp;#x7684;&amp;#x9519;&amp;#x8BEF;&amp;#x6216;&amp;#x5BFC;&amp;#x81F4;&amp;#x5176;&amp;#x4ED6;&amp;#x4EE3;&amp;#x7801;&amp;#x4EA7;&amp;#x751F;&amp;#x9519;&amp;#x8BEF;&amp;#x3002; &lt;br&gt;&amp;#x81EA;&amp;#x52A8;&amp;#x56DE;&amp;#x5F52;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5C06;&amp;#x5927;&amp;#x5E45;&amp;#x964D;&amp;#x4F4E;&amp;#x7CFB;&amp;#x7EDF;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3001;&amp;#x7EF4;&amp;#x62A4;&amp;#x5347;&amp;#x7EA7;&amp;#x7B49;&amp;#x9636;&amp;#x6BB5;&amp;#x7684;&amp;#x6210;&amp;#x672C;&amp;#x3002;&amp;#x56DE;&amp;#x5F52;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4F5C;&amp;#x4E3A;&amp;#x8F6F;&amp;#x4EF6;&amp;#x751F;&amp;#x547D;&amp;#x5468;&amp;#x671F;&amp;#x7684;&amp;#x4E00;&amp;#x4E2A;&amp;#x7EC4;&amp;#x6210;&amp;#x90E8;&amp;#x5206;&amp;#xFF0C;&amp;#x5728;&amp;#x6574;&amp;#x4E2A;&amp;#x8F6F;&amp;#x4EF6;&amp;#x6D4B;&amp;#x8BD5;&amp;#x8FC7;&amp;#x7A0B;&amp;#x4E2D;&amp;#x5360;&amp;#x6709;&amp;#x5F88;&amp;#x5927;&amp;#x7684;&amp;#x5DE5;&amp;#x4F5C;&amp;#x91CF;&amp;#x6BD4;&amp;#x91CD;&amp;#xFF0C;&amp;#x8F6F;&amp;#x4EF6;&amp;#x5F00;&amp;#x53D1;&amp;#x7684;&amp;#x5404;&amp;#x4E2A;&amp;#x9636;&amp;#x6BB5;&amp;#x90FD;&amp;#x4F1A;&amp;#x8FDB;&amp;#x884C;&amp;#x591A;&amp;#x6B21;&amp;#x56DE;&amp;#x5F52;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;&amp;#x5728;&amp;#x6E10;&amp;#x8FDB;&amp;#x548C;&amp;#x5FEB;&amp;#x901F;&amp;#x8FED;&amp;#x4EE3;&amp;#x5F00;&amp;#x53D1;&amp;#x4E2D;&amp;#xFF0C;&amp;#x65B0;&amp;#x7248;&amp;#x672C;&amp;#x7684;&amp;#x8FDE;&amp;#x7EED;&amp;#x53D1;&amp;#x5E03;&amp;#x4F7F;&amp;#x56DE;&amp;#x5F52;&amp;#x6D4B;&amp;#x8BD5;&amp;#x8FDB;&amp;#x884C;&amp;#x7684;&amp;#x66F4;&amp;#x52A0;&amp;#x9891;&amp;#x7E41;&amp;#xFF0C;&amp;#x800C;&amp;#x5728;&amp;#x6781;&amp;#x7AEF;&amp;#x7F16;&amp;#x7A0B;&amp;#x65B9;&amp;#x6CD5;&amp;#x4E2D;&amp;#xFF0C;&amp;#x66F4;&amp;#x662F;&amp;#x8981;&amp;#x6C42;&amp;#x6BCF;&amp;#x5929;&amp;#x90FD;&amp;#x8FDB;&amp;#x884C;&amp;#x82E5;&amp;#x5E72;&amp;#x6B21;&amp;#x56DE;&amp;#x5F52;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;&amp;#x56E0;&amp;#x6B64;&amp;#xFF0C;&amp;#x901A;&amp;#x8FC7;&amp;#x9009;&amp;#x62E9;&amp;#x6B63;&amp;#x786E;&amp;#x7684;&amp;#x56DE;&amp;#x5F52;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7B56;&amp;#x7565;&amp;#x6765;&amp;#x6539;&amp;#x8FDB;&amp;#x56DE;&amp;#x5F52;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7684;&amp;#x6548;&amp;#x7387;&amp;#x548C;&amp;#x6709;&amp;#x6548;&amp;#x6027;&amp;#x662F;&amp;#x975E;&amp;#x5E38;&amp;#x6709;&amp;#x610F;&amp;#x4E49;&amp;#x7684;&amp;#x3002; &lt;br&gt;&amp;#x2014;&amp;#x2014; &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x767E;&amp;#x5EA6;&amp;#x767E;&amp;#x79D1;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x672C;&amp;#x4E66;&amp;#x8BB2;&amp;#x7684;&amp;#x56DE;&amp;#x5F52;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6982;&amp;#x5FF5;&amp;#x53EF;&amp;#x80FD;&amp;#x7565;&amp;#x6709;&amp;#x4E0D;&amp;#x540C;&amp;#x3002;&amp;#x6309;&amp;#x7167;&amp;#x6211;&amp;#x7684;&amp;#x7406;&amp;#x89E3;&amp;#xFF0C;&amp;#x4F5C;&amp;#x8005;&amp;#x662F;&amp;#x60F3;&amp;#x8BF4;&amp;#xFF0C;&amp;#x5728;&amp;#x8FDB;&amp;#x884C;&amp;#x5B8C;&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#x7F16;&amp;#x7801;&amp;#x4EE5;&amp;#x540E;&amp;#xFF0C;&amp;#x4F60;&amp;#x5DF2;&amp;#x7ECF;&amp;#x5BF9;&amp;#x4F60;&amp;#x7684;&amp;#x8981;&amp;#x5B9E;&amp;#x73B0;&amp;#x7684;&amp;#x6240;&amp;#x6709;&amp;#x4E1C;&amp;#x897F;&amp;#x5B8C;&amp;#x6210;&amp;#x4E86;unknown&lt;span style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;word-wrap: normal; vertical-align: middle; font-style: normal; font-weight: normal; margin: 0; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; padding: 0; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; line-height: 1.6; display: inline-block; font-size: 100%;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: inline-block; white-space: nowrap; padding: 1px 0px;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: inline-block; position: relative; width: 2.169ex; height: 0.964ex; vertical-align: 0.12ex;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;&lt;img class=&#34;enMedia&#34; src=&#34;/images/Test-Driven Development/SVGc430acae44d6c4874bd268c48184baa7&#34; hash=&#34;f4a4c9b133ba2d97b64f72acf87add23&#34; align alt longdesc width=&#34;15.75&#34; height=&#34;8.75&#34; border hspace vspace usemap style=&#34;border: 0; vertical-align: middle; max-width: 100%; margin-top: 0; margin-bottom: 0;&#34; title lang xml:lang dir&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;known&amp;#x7684;&amp;#x8FC7;&amp;#x7A0B;&amp;#x3002;&amp;#x90A3;&amp;#x4E48;&amp;#x73B0;&amp;#x5728;&amp;#xFF0C;&amp;#x4F60;&amp;#x53EF;&amp;#x4EE5;&amp;#x56DE;&amp;#x8FC7;&amp;#x5934;&amp;#x770B;&amp;#x770B;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x8FD9;&amp;#x65F6;&amp;#x5019;&amp;#x91CD;&amp;#x65B0;&amp;#x5199;&amp;#x4E00;&amp;#x4EFD;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4F60;&amp;#x5E94;&amp;#x8BE5;&amp;#x5199;&amp;#x4EC0;&amp;#x4E48;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x56DE;&amp;#x5230;&amp;#x4F60;&amp;#x9488;&amp;#x5BF9;&amp;#x8FD9;&amp;#x4E2A;&amp;#x7CFB;&amp;#x7EDF;&amp;#x7684;&amp;#x6700;&amp;#x521D;&amp;#x7684;&amp;#x60F3;&amp;#x6CD5;&amp;#x6765;&amp;#x5BF9;&amp;#x6574;&amp;#x4E2A;&amp;#x7CFB;&amp;#x7EDF;&amp;#x505A;&amp;#x4E00;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;&amp;#x4EE5;&amp;#x671F;&amp;#x5BF9;&amp;#x6574;&amp;#x4E2A;&amp;#x7CFB;&amp;#x7EDF;&amp;#x6709;&amp;#x4E2A;&amp;#x6574;&amp;#x4F53;&amp;#x7684;&amp;#x8BC4;&amp;#x4EF7;&amp;#x3002;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;break&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Break&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x52B3;&amp;#x9038;&amp;#x7ED3;&amp;#x5408;&amp;#x5BF9;&amp;#x7A0B;&amp;#x5E8F;&amp;#x5458;&amp;#x662F;&amp;#x975E;&amp;#x5E38;&amp;#x975E;&amp;#x5E38;&amp;#x975E;&amp;#x5E38;&amp;#x91CD;&amp;#x8981;&amp;#x7684;&amp;#xFF01;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Shower Methodology&lt;/strong&gt;:If you know what to type, then type. If you don&amp;#x2019;t know what to type, then take a shower, and stay in the shower until you know what to type. &lt;br&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;TDD Rule&lt;/strong&gt;: If you don&amp;#x2019;t know what to type, then Fake It. If the &lt;br&gt;right design still isn&amp;#x2019;t clear, then Triangulate. &lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x770B;&amp;#x770B;&amp;#x4F5C;&amp;#x8005;&amp;#x63D0;&amp;#x5021;&amp;#x7684;&amp;#x65F6;&amp;#x95F4;&amp;#x7BA1;&amp;#x7406;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;At the scale of hours, keep a water bottle by your keyboard so that biology provides the motivation for regular breaks.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;At the scale of a day, commitments after regular work hours can help you to stop when you need sleep before progress.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;At the scale of a week, weekend commitments help get your conscious, energysucking thoughts off work. (My wife swears I get my best ideas on Friday evening.)&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;At the scale of a year, mandatory vacation policies help you refresh yourself completely. The French do this right&amp;#x2014;two contiguous weeks of vacation aren&amp;#x2019;t enough. You spend the first week decompressing, and the second week getting ready to go back to work. Therefore, three weeks, or better four, are necessary for you to be your most effective the rest of the year.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;do-over&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Do Over&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;What do you do when you are feeling lost? Throw away the code and start over. &lt;br&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x5728;&amp;#x8FD9;&amp;#x4E00;&amp;#x7AE0;&amp;#x544A;&amp;#x8BC9;&amp;#x4F60;&amp;#xFF0C;&amp;#x4E0D;&amp;#x8981;&amp;#x5728;&amp;#x6CE5;&amp;#x6F6D;&amp;#x8D8A;&amp;#x9677;&amp;#x8D8A;&amp;#x6DF1;&amp;#xFF0C;&amp;#x4E0D;&amp;#x8981;&amp;#x5BB3;&amp;#x6015;&amp;#x91CD;&amp;#x65B0;&amp;#x5F00;&amp;#x59CB;&amp;#x3002;&amp;#x6362;&amp;#x4E2A;&amp;#x4F19;&amp;#x4F34;&amp;#xFF0C;&amp;#x6362;&amp;#x4E2A;&amp;#x601D;&amp;#x8DEF;&amp;#xFF0C;&amp;#x4F60;&amp;#x53EF;&amp;#x80FD;&amp;#x6709;&amp;#x66F4;&amp;#x597D;&amp;#x7684;&amp;#x53D1;&amp;#x73B0;&amp;#x3002;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;chapter-27-testing-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 27. Testing Patterns&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;child-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Child Test&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x91CC;&amp;#x8BF4;&amp;#x7684;&amp;#x662F;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x89C9;&amp;#x5F97;&amp;#x8FD9;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x592A;&amp;#x5927;&amp;#xFF0C;&amp;#x90A3;&amp;#x5C31;&amp;#x8981;&amp;#x628A;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5927;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7834;&amp;#x6210;&amp;#x82E5;&amp;#x5E72;&amp;#x4E2A;&amp;#x5C0F;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x770B;&amp;#x770B;&amp;#x6709;&amp;#x6CA1;&amp;#x6709;&amp;#x8FDB;&amp;#x5C55;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;mock-object&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Mock Object&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;How do you test an object that relies on an expensive or complicated resource? Create a fake version of the resource that answers constants. &lt;br&gt;If you want to use Mock Objects, you can&amp;#x2019;t easily store expensive resources in global variables.&amp;#x8981;&amp;#x8BB0;&amp;#x5F97;&amp;#x6E05;&amp;#x7406;&amp;#x73B0;&amp;#x573A;&amp;#xFF0C;&amp;#x5426;&amp;#x5219;&amp;#x4E07;&amp;#x4E00;&amp;#x5176;&amp;#x4ED6;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x628A;&amp;#x4ED6;&amp;#x5F53;&amp;#x4F5C;&amp;#x771F;&amp;#x7684;object&amp;#x5728;&amp;#x4F7F;&amp;#x7528;&amp;#xFF0C;&amp;#x5C31;&amp;#x4F1A;&amp;#x51FA;&amp;#x5927;&amp;#x95EE;&amp;#x9898;&amp;#x3002;&amp;#x6240;&amp;#x4EE5;&amp;#x7F16;&amp;#x7801;&amp;#x6700;&amp;#x57FA;&amp;#x672C;&amp;#x7684;&amp;#x51C6;&amp;#x5219;&amp;#x662F;&amp;#x5C11;&amp;#x7528;&amp;#x5168;&amp;#x5C40;&amp;#x53D8;&amp;#x91CF;&amp;#x3002; &lt;br&gt;Mock Objects encourage you down the path of carefully considering the visibility of every object, reducing the coupling in your designs. &amp;#x8FD9;&amp;#x91CC;&amp;#x8BF4;&amp;#x7684;&amp;#x662F;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x7528;Mock Object&amp;#xFF0C;&amp;#x4F60;&amp;#x5C31;&amp;#x8981;&amp;#x601D;&amp;#x8003;&amp;#x6211;&amp;#x5230;&amp;#x5E95;&amp;#x8BE5;&amp;#x4E0D;&amp;#x8BE5;&amp;#x628A;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5E9E;&amp;#x7136;&amp;#x5927;&amp;#x7269;&amp;#x66B4;&amp;#x9732;&amp;#x7ED9;&amp;#x8FD9;&amp;#x6BB5;&amp;#x4EE3;&amp;#x7801;&amp;#x3002;&amp;#x8FD9;&amp;#x79CD;&amp;#x601D;&amp;#x8003;&amp;#x6709;&amp;#x52A9;&amp;#x4E8E;&amp;#x51CF;&amp;#x5C0F;&amp;#x8026;&amp;#x5408;&amp;#x6027;&amp;#x3002;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;self-shunt&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Self Shunt&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;How do you test that one object communicates correctly with another? Have the object under test communicate with the test case instead of with the object it expects.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Without Self Shunt&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;# ResultListenerTest&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;testNotification&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(self)&lt;/span&gt;:&lt;/span&gt; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    result= TestResult() &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;    listener= ResultListener() &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;    result.addListener(listener) &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;    WasRun(&lt;span style=&#34;line-height: 1.6; color: #df5000;&#34;&gt;&amp;quot;testMethod&amp;quot;&lt;/span&gt;).run(result)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt; == listener.count &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;8.&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;9.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;# ResultListener&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;10.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #a6e22e; font-style: italic;&#34;&gt;ResultListener&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;11.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(self)&lt;/span&gt;:&lt;/span&gt; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;12.&lt;/span&gt;        self.count= &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;13.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;startTest&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(self)&lt;/span&gt;:&lt;/span&gt; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;14.&lt;/span&gt;        self.count= self.count + &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;With Self Shunt&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;# ResultListenerTest&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;testNotification&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(self)&lt;/span&gt;:&lt;/span&gt; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    self.count= &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;    result= TestResult()&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;    result.addListener(self)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;    WasRun(&lt;span style=&#34;line-height: 1.6; color: #df5000;&#34;&gt;&amp;quot;testMethod&amp;quot;&lt;/span&gt;).run(result) &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt; == self.count&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;8.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;startTest&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;9.&lt;/span&gt;    self.count= self.count + &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x91CC;&amp;#x4E3E;&amp;#x5F97;&amp;#x4F8B;&amp;#x5B50;&amp;#x4E0D;&amp;#x662F;&amp;#x5F88;&amp;#x660E;&amp;#x767D;&amp;#x3002;&amp;#x4E2D;&amp;#x6587;&amp;#x8BD1;&amp;#x672C;&amp;#x91CC;&amp;#xFF0C;&amp;#x5C06;self shunt&amp;#x7FFB;&amp;#x8BD1;&amp;#x6210;&amp;#x81EA;&amp;#x5206;&amp;#x6D41;&amp;#xFF0C;&amp;#x611F;&amp;#x89C9;&amp;#x4E5F;&amp;#x662F;&amp;#x5B57;&amp;#x9762;&amp;#x7FFB;&amp;#x8BD1;&amp;#x3002;&amp;#x6211;&amp;#x7406;&amp;#x89E3;&amp;#x8FD9;&amp;#x91CC;&amp;#x60F3;&amp;#x8BF4;&amp;#x7684;&amp;#x662F;&amp;#xFF0C;&amp;#x4E0D;&amp;#x4E00;&amp;#x5B9A;&amp;#x8981;&amp;#x5B9A;&amp;#x4E49;&amp;#x4E00;&amp;#x4E2A;&amp;#x7C7B;&amp;#x6765;&amp;#x505A;&amp;#x5F53;&amp;#x524D;&amp;#x88AB;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7C7B;&amp;#x6765;&amp;#x505A;&amp;#x7684;&amp;#x4E8B;&amp;#x60C5;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x5728;test case&amp;#x91CC;&amp;#x9762;&amp;#x7528;&amp;#x8BE5;&amp;#x7C7B;&amp;#x66B4;&amp;#x9732;&amp;#x7684;&amp;#x63A5;&amp;#x53E3;&amp;#x6765;&amp;#x505A;&amp;#x4E8B;&amp;#x60C5;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Self Shunt may require that you use &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Extract Interface&lt;/strong&gt; to get an interface to implement. You will have to decide whether extracting the interface is easier, or if testing the existing class as a &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;black box&lt;/strong&gt; is easier.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x91CC;&amp;#x53C8;&amp;#x770B;&amp;#x6655;&amp;#x4E86;&amp;#xFF0C;self shunt&amp;#x8DDF;extract interface&amp;#x6709;&amp;#x5565;&amp;#x5173;&amp;#x7CFB;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5F53;&amp;#x6211;&amp;#x4EEC;&amp;#x6CE8;&amp;#x610F;&amp;#x5230;&amp;#x5728;&amp;#x6211;&amp;#x4EEC;&amp;#x4EE3;&amp;#x7801;&amp;#x7ED3;&amp;#x6784;&amp;#x4E2D;&amp;#x8D85;&amp;#x8FC7;&amp;#x4E00;&amp;#x4E2A;&amp;#x7C7B;&amp;#x4F7F;&amp;#x7528;&amp;#x5230;&amp;#x53E6;&amp;#x4E00;&amp;#x4E2A;&amp;#x7279;&amp;#x6B8A;&amp;#x7C7B;&amp;#x4E2D;&amp;#x7684;&amp;#x540C;&amp;#x4E00;&amp;#x4E2A;&amp;#x65B9;&amp;#x6CD5;&amp;#x65F6;&amp;#xFF0C;&amp;#x6B64;&amp;#x65F6;&amp;#x5E94;&amp;#x8BE5;&amp;#x5C06;&amp;#x8BE5;&amp;#x7C7B;&amp;#x4E2D;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x63D0;&amp;#x53D6;&amp;#x51FA;&amp;#x6765;&amp;#x653E;&amp;#x5230;&amp;#x4E00;&amp;#x4E2A;&amp;#x63A5;&amp;#x53E3;&amp;#xFF08;interface&amp;#xFF09;&amp;#x4E2D;&amp;#xFF0C;&amp;#x5E76;&amp;#x5BF9;&amp;#x5916;&amp;#x63D0;&amp;#x4F9B;&amp;#x8FD9;&amp;#x4E2A;&amp;#x63A5;&amp;#x53E3;&amp;#x4EE5;&amp;#x4FBF;&amp;#x88AB;&amp;#x7528;&amp;#x6237;&amp;#x7C7B;&amp;#x8BBF;&amp;#x95EE;&amp;#x3001;&amp;#x4F7F;&amp;#x7528;&amp;#xFF0C;&amp;#x8FD9;&amp;#x6837;&amp;#x6709;&amp;#x5229;&amp;#x4E8E;&amp;#x6253;&amp;#x7834;&amp;#x539F;&amp;#x6765;&amp;#x591A;&amp;#x4E2A;&amp;#x7C7B;&amp;#x4E0E;&amp;#x8FD9;&amp;#x4E2A;&amp;#x7279;&amp;#x6B8A;&amp;#x7C7B;&amp;#x7684;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#x3002;&amp;#x8FD9;&amp;#x4E2A;&amp;#x91CD;&amp;#x6784;&amp;#x624B;&amp;#x6CD5;&amp;#x5F88;&amp;#x5BB9;&amp;#x6613;&amp;#x5B9E;&amp;#x73B0;&amp;#xFF0C;&amp;#x66F4;&amp;#x91CD;&amp;#x8981;&amp;#x7684;&amp;#x662F;&amp;#x8FD9;&amp;#x6837;&amp;#x505A;&amp;#x6709;&amp;#x5229;&amp;#x4E8E;&amp;#x677E;&amp;#x8026;&amp;#x5408;&amp;#x3002; &amp;#x2014;&amp;#x2014;&amp;#x7F51;&amp;#x7EDC;&amp;#x4E0A;&amp;#x7684;&amp;#x89E3;&amp;#x91CA;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6211;&amp;#x89C9;&amp;#x5F97;&amp;#x8FD9;&amp;#x91CC;&amp;#x4F5C;&amp;#x8005;&amp;#x63D0;&amp;#x5230;&amp;#x7684;extract interface&amp;#xFF0C;&amp;#x5E76;&amp;#x4E0D;&amp;#x662F;&amp;#x6211;&amp;#x4EEC;&amp;#x8BF4;&amp;#x7684;&amp;#x91CD;&amp;#x6784;&amp;#x91CC;&amp;#x7684;extract interface&amp;#x3002;&amp;#x8FD9;&amp;#x91CC;&amp;#x8BF4;&amp;#x8981;&amp;#x6D4B;&amp;#x8BD5;A&amp;#x7C7B;&amp;#x548C;B&amp;#x7C7B;&amp;#x901A;&amp;#x4FE1;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x4E0D;&amp;#x76F4;&amp;#x63A5;&amp;#x7528;B&amp;#x7C7B;&amp;#xFF0C;&amp;#x800C;&amp;#x7528;test case&amp;#x4E0E;A&amp;#x7C7B;&amp;#x901A;&amp;#x4FE1;&amp;#xFF0C;&amp;#x4EE5;&amp;#x6D4B;&amp;#x8BD5;&amp;#x901A;&amp;#x4FE1;&amp;#x7684;A&amp;#x7C7B;&amp;#x7AEF;&amp;#x63A5;&amp;#x53E3;&amp;#x662F;&amp;#x5426;&amp;#x6B63;&amp;#x786E;&amp;#x3002;extract interface&amp;#x8BF4;&amp;#x7684;&amp;#x662F;&amp;#x4ECE;B&amp;#x7C7B;&amp;#x4E2D;extract&amp;#x63A5;&amp;#x53E3;&amp;#x51FA;&amp;#x6765;&amp;#x5230;test case&amp;#x4E2D;&amp;#x53BB;implement&amp;#x3002;&amp;#x6216;&amp;#x8005;&amp;#x628A;B&amp;#x7C7B;&amp;#x76F4;&amp;#x63A5;&amp;#x5F53;&amp;#x9ED1;&amp;#x76D2;&amp;#x5B50;&amp;#x5728;test case&amp;#x4E2D;&amp;#x4F7F;&amp;#x7528;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;log-string&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Log String&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5F88;&amp;#x6709;&amp;#x7528;&amp;#x3002;&amp;#x6709;&amp;#x4E9B;&amp;#x51FD;&amp;#x6570;&amp;#x6216;&amp;#x8005;&amp;#x8FC7;&amp;#x7A0B;&amp;#x662F;&amp;#x6CA1;&amp;#x6709;&amp;#x8FD4;&amp;#x56DE;&amp;#x503C;&amp;#x7684;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x5C31;&amp;#x53EF;&amp;#x4EE5;&amp;#x7528;Log String&amp;#x7684;&amp;#x65B9;&amp;#x5F0F;&amp;#x6765;&amp;#x67E5;&amp;#x770B;&amp;#x8BE5;&amp;#x8FC7;&amp;#x7A0B;&amp;#x6216;&amp;#x51FD;&amp;#x6570;&amp;#x6709;&amp;#x6CA1;&amp;#x6709;&amp;#x88AB;&amp;#x8C03;&amp;#x7528;&amp;#x3002;&amp;#x7C7B;&amp;#x4F3C;&amp;#x6211;&amp;#x4EEC;&amp;#x770B;trace log&amp;#x4E00;&amp;#x6837;&amp;#xFF0C;&amp;#x901A;&amp;#x8FC7;&amp;#x770B;trace log&amp;#x80FD;&amp;#x77E5;&amp;#x9053;&amp;#x673A;&amp;#x5668;&amp;#x6267;&amp;#x884C;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x662F;&amp;#x5426;&amp;#x6B63;&amp;#x786E;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;crash-test-dummy&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Crash Test Dummy&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;How do you test error code that is unlikely to be invoked? Invoke it anyway with a special object that throws an exception instead of doing real work.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;broken-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Broken Test&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x7ECF;&amp;#x5E38;&amp;#x80FD;&amp;#x7ED9;&amp;#x51FA;&amp;#x4E00;&amp;#x4E9B;&amp;#x5F88;&amp;#x5B9E;&amp;#x7528;&amp;#x7684;&amp;#x5C0F;&amp;#x7ECF;&amp;#x9A8C;&amp;#xFF0C;&amp;#x8FD9;&amp;#x91CC;&amp;#x53C8;&amp;#x6765;&amp;#x4E86;&amp;#xFF0C;&amp;#x770B;&amp;#x4E0B;&amp;#x9762;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;How do you leave a programming session when you&amp;#x2019;re programming alone? Leave the last test broken.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5F53;&amp;#x4F60;&amp;#x8981;&amp;#x8F6C;&amp;#x53BB;&amp;#x505A;&amp;#x53E6;&amp;#x5916;&amp;#x4E00;&amp;#x4EF6;&amp;#x4E8B;&amp;#x60C5;&amp;#xFF0C;&amp;#x800C;&amp;#x624B;&amp;#x5934;&amp;#x4E0A;&amp;#x7684;&amp;#x4E8B;&amp;#x60C5;&amp;#x53C8;&amp;#x6CA1;&amp;#x7ED3;&amp;#x675F;&amp;#x65F6;&amp;#x600E;&amp;#x4E48;&amp;#x529E;&amp;#xFF1F;&amp;#x8BA9;&amp;#x6700;&amp;#x540E;&amp;#x4E00;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6545;&amp;#x610F;&amp;#x7684;&amp;#x4E0D;&amp;#x901A;&amp;#x8FC7;&amp;#x3002;&amp;#x8FD9;&amp;#x6837;&amp;#x4E0B;&amp;#x6B21;&amp;#x5C31;&amp;#x77E5;&amp;#x9053;&amp;#x4ECE;&amp;#x54EA;&amp;#x513F;&amp;#x5F00;&amp;#x59CB;&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x80FD;&amp;#x8FC5;&amp;#x901F;&amp;#x4E0A;&amp;#x624B;&amp;#x3002;&amp;#x918D;&amp;#x9190;&amp;#x704C;&amp;#x9876;&amp;#x554A;&amp;#xFF01;&amp;#x4EE5;&amp;#x524D;&amp;#x90FD;&amp;#x662F;&amp;#x8BA4;&amp;#x4E3A;&amp;#x505A;&amp;#x53E6;&amp;#x5916;&amp;#x4E00;&amp;#x4EF6;&amp;#x4E8B;&amp;#x60C5;&amp;#x4E4B;&amp;#x524D;&amp;#x8981;&amp;#x628A;&amp;#x624B;&amp;#x5934;&amp;#x4E0A;&amp;#x7684;&amp;#x4E8B;&amp;#x60C5;&amp;#x5F04;&amp;#x7684;&amp;#x5C3D;&amp;#x5584;&amp;#x5C3D;&amp;#x7F8E;&amp;#xFF0C;&amp;#x5176;&amp;#x5B9E;&amp;#x4E0D;&amp;#x7136;&amp;#x3002;&amp;#x600E;&amp;#x4E48;&amp;#x505A;&amp;#x5229;&amp;#x4E8E;&amp;#x540E;&amp;#x671F;&amp;#x7EE7;&amp;#x7EED;&amp;#x8FDB;&amp;#x884C;&amp;#xFF0C;&amp;#x90A3;&amp;#x5C31;&amp;#x5E94;&amp;#x8BE5;&amp;#x600E;&amp;#x4E48;&amp;#x505A;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;clean-check-in&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Clean Check-in&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;You will occasionally find a test broken in the integration suite when you try to check in. What to do? &lt;br&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;The simplest rule&lt;/strong&gt; is to just throw away your work and start over. The broken test is pretty strong evidence that you didn&amp;#x2019;t know enough to program what you just programmed. &lt;br&gt;&amp;#x4EC0;&amp;#x4E48;&amp;#x4EC0;&amp;#x4E48;&amp;#xFF1F;&amp;#x7ADF;&amp;#x7136;&amp;#x8981;&amp;#x6211;&amp;#x4EEC;&amp;#x6254;&amp;#x6389;&amp;#x6211;&amp;#x4EEC;&amp;#x505A;&amp;#x7684;&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x91CD;&amp;#x65B0;&amp;#x5F00;&amp;#x59CB;&amp;#x3002;&amp;#x5C31;&amp;#x56E0;&amp;#x4E3A;&amp;#x6211;&amp;#x4EEC;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x548C;integration&amp;#x6D4B;&amp;#x8BD5;&amp;#x7ED3;&amp;#x679C;&amp;#x4E0D;&amp;#x4E00;&amp;#x81F4;&amp;#x3002; &lt;br&gt;&amp;#x5927;&amp;#x5E08;&amp;#x7684;&amp;#x8BDD;&amp;#x603B;&amp;#x662F;&amp;#x6709;&amp;#x9053;&amp;#x7406;&amp;#x7684;&amp;#xFF0C;&amp;#x4EE5;&amp;#x540E;&amp;#x8981;&amp;#x597D;&amp;#x597D;&amp;#x8003;&amp;#x8651;&amp;#x8FD9;&amp;#x4E00;&amp;#x70B9;&amp;#x3002;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;chapter-28-green-bar-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 28. Green Bar Patterns&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;fake-it-til-you-make-it&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Fake It (&amp;#x2018;Til You Make It)&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x505A;&amp;#x5047;&amp;#x4EE3;&amp;#x7801;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x901A;&amp;#x8FC7;&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x518D;&amp;#x4E00;&amp;#x9879;&amp;#x4E00;&amp;#x9879;&amp;#x5730;&amp;#x5B8C;&amp;#x6210;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;triangulate&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Triangulate&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x63D0;&amp;#x5230;&amp;#x7684;&amp;#x6240;&amp;#x8C13;&amp;#x4E09;&amp;#x89D2;&amp;#x6CD5;&amp;#x3002;&amp;#x901A;&amp;#x4FD7;&amp;#x7684;&amp;#x8BF4;&amp;#xFF0C;&amp;#x5C31;&amp;#x662F;&amp;#x53EA;&amp;#x5728;&amp;#x5FC5;&amp;#x8981;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#x505A;&amp;#x62BD;&amp;#x8C61;&amp;#x6216;&amp;#x901A;&amp;#x7528;&amp;#x5316;&amp;#x5904;&amp;#x7406;&amp;#x3002;&amp;#x901A;&amp;#x5E38;&amp;#x662F;&amp;#x5728;TDD&amp;#x7684;&amp;#x91CD;&amp;#x6784;&amp;#x8FD9;&amp;#x4E00;&amp;#x6B65;&amp;#x5B8C;&amp;#x6210;&amp;#x8FD9;&amp;#x4E2A;&amp;#x62BD;&amp;#x8C61;&amp;#x7684;&amp;#x8FC7;&amp;#x7A0B;&amp;#x3002;&amp;#x518D;&amp;#x901A;&amp;#x4FD7;&amp;#x70B9;&amp;#x8BF4;&amp;#xFF0C;&amp;#x5C31;&amp;#x662F;&amp;#x591A;&amp;#x5F04;&amp;#x51E0;&amp;#x4E2A;case&amp;#xFF0C;&amp;#x518D;&amp;#x603B;&amp;#x7ED3;&amp;#x5171;&amp;#x540C;&amp;#x70B9;&amp;#xFF0C;&amp;#x4E4B;&amp;#x540E;&amp;#x505A;&amp;#x62BD;&amp;#x8C61; &lt;br&gt;&amp;#x4ECE;&amp;#x53E6;&amp;#x4E00;&amp;#x4E2A;&amp;#x89D2;&amp;#x5EA6;&amp;#xFF0C;&amp;#x4F5C;&amp;#x8005;&amp;#x53C8;&amp;#x8BF4;&amp;#x4E86;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;I only use Triangulation when I&amp;#x2019;m really, really unsure about the correct abstraction for the calculation. Otherwise I rely on either Obvious Implementation or Fake It.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;one-to-many&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;One to Many&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;How do you implement an operation that works with collections of objects? Implement it without the collections first, then make it work with collections.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E2D;&amp;#x5FC3;&amp;#x601D;&amp;#x60F3;&amp;#x8FD8;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#xFF0C;&amp;#x4ECE;&amp;#x663E;&amp;#x800C;&amp;#x6613;&amp;#x89C1;&amp;#x7684;&amp;#x5730;&amp;#x65B9;&amp;#x5F00;&amp;#x59CB;&amp;#xFF0C;&amp;#x6BCF;&amp;#x6B21;&amp;#x53EA;&amp;#x505A;&amp;#x4E00;&amp;#x5C0F;&amp;#x6B65;&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x4E00;&amp;#x6B65;&amp;#x4E00;&amp;#x6B65;&amp;#x5230;&amp;#x8FBE;&amp;#x6700;&amp;#x7EC8;&amp;#x7684;&amp;#x76EE;&amp;#x7684;&amp;#x5730;&amp;#x3002;&amp;#x770B;&amp;#x4E0B;&amp;#x9762;&amp;#x7684;&amp;#x4F8B;&amp;#x5B50;&amp;#xFF1A;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// 1. fake code&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;testSum&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    assertEquals(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;, sum(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;)); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;&amp;#125; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;return&lt;/span&gt; value;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;8.&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;9.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// 2. add arrays&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;10.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;testSum&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;11.&lt;/span&gt;    assertEquals(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;, sum(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;int&lt;/span&gt;[] &amp;#123;&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;&amp;#125;));&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;12.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;13.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; value, &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt;[] values)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;14.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;return&lt;/span&gt; value;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;15.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;16.&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;17.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// 3. add real sum functionality&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;18.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;testSum&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;19.&lt;/span&gt;    assertEquals(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;, sum(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;int&lt;/span&gt;[] &amp;#123;&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;&amp;#125;));&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;20.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;21.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; value, &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt;[] values)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;22.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;int&lt;/span&gt; sum= &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;23.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;int&lt;/span&gt; i= &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i&amp;lt;values.length; i++)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;24.&lt;/span&gt;        sum += values[i];&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;25.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;return&lt;/span&gt; sum;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;26.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;27.&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;28.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// 4. delete unnecessary code&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;29.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;testSum&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;30.&lt;/span&gt;    assertEquals(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;, sum(&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;int&lt;/span&gt;[] &amp;#123;&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;&amp;#125;));&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;31.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;32.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;( &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt;[] values)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;33.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;int&lt;/span&gt; sum= &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;34.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;int&lt;/span&gt; i= &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i&amp;lt;values.length; i++)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;35.&lt;/span&gt;        sum += values[i];&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;36.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;return&lt;/span&gt; sum; sum;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;37.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7EC6;&amp;#x7EC6;&amp;#x4F53;&amp;#x4F1A;&amp;#x5176;&amp;#x95F4;&amp;#x7684;&amp;#x5DEE;&amp;#x522B;&amp;#x5427;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;chapter-29-xunit-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 29. xUnit Patterns&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;assertion&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Assertion&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;How do you check that tests worked correctly?  &lt;br&gt;Write boolean expressions that automate your judgment about whether the code worked.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x5728;&amp;#x8FD9;&amp;#x4E00;&amp;#x7AE0;&amp;#x53C8;&amp;#x7ED9;&amp;#x51FA;&amp;#x4E86;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F88;&amp;#x6709;&amp;#x6307;&amp;#x5BFC;&amp;#x610F;&amp;#x4E49;&amp;#x7684;&amp;#x89C2;&amp;#x70B9;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5C3D;&amp;#x91CF;&amp;#x4E0D;&amp;#x8981;&amp;#x505A;&amp;#x767D;&amp;#x76D2;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x60F3;&amp;#x505A;&amp;#xFF0C;&amp;#x8BF4;&amp;#x660E;&amp;#x4F60;&amp;#x7684;&amp;#x8BBE;&amp;#x8BA1;&amp;#x6709;&amp;#x95EE;&amp;#x9898;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;fixture&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Fixture&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x91CC;&amp;#x4F5C;&amp;#x8005;&amp;#x629B;&amp;#x51FA;&amp;#x4E86;&amp;#x4E00;&amp;#x4E2A;&amp;#x95EE;&amp;#x9898;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x6709;&amp;#x591A;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6709;&amp;#x7C7B;&amp;#x4F3C;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x600E;&amp;#x4E48;&amp;#x529E;&amp;#xFF1F;&amp;#x4E24;&amp;#x4E2A;&amp;#x9009;&amp;#x62E9;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;test case&amp;#x7C7B;&amp;#x5B9A;&amp;#x4E49;&amp;#x4E2D;&amp;#x62BD;&amp;#x8C61;&amp;#x51FA;&amp;#x7C7B;&amp;#x4F3C;setUp&amp;#x7684;&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x6765;&amp;#x505A;&amp;#x91CD;&amp;#x590D;&amp;#x7684;&amp;#x5DE5;&amp;#x4F5C;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6216;&amp;#x8005;&amp;#x7528;&amp;#x7C7B;&amp;#x4F3C;&amp;#x4EE3;&amp;#x7801;&amp;#x751F;&amp;#x6210;&amp;#x5668;&amp;#x7684;&amp;#x4E1C;&amp;#x897F;&amp;#x6765;&amp;#x4E3A;&amp;#x6240;&amp;#x6709;&amp;#x9700;&amp;#x8981;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x751F;&amp;#x6210;fixture&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x65B9;&amp;#x6CD5;1&amp;#x6709;&amp;#x65F6;&amp;#x5019;&amp;#x66F4;&amp;#x7B26;&amp;#x5408;DRY&amp;#x539F;&amp;#x5219;&amp;#xFF0C;&amp;#x4F46;&amp;#x5B83;&amp;#x7684;&amp;#x7F3A;&amp;#x70B9;&amp;#x662F;&amp;#xFF0C;&amp;#x4F60;&amp;#x8981;&amp;#x8BB0;&amp;#x4F4F;setUp&amp;#x91CC;&amp;#x9762;&amp;#x5230;&amp;#x5E95;&amp;#x505A;&amp;#x4E86;&amp;#x4EC0;&amp;#x4E48;&amp;#x3002;&amp;#x4E24;&amp;#x79CD;&amp;#x65B9;&amp;#x6CD5;&amp;#x90FD;&amp;#x53EF;&amp;#x4EE5;&amp;#xFF0C;&amp;#x9009;&amp;#x62E9;&amp;#x66F4;&amp;#x5408;&amp;#x9002;&amp;#x7684;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;external-fixture&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;External Fixture&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6240;&amp;#x8C13;&amp;#x7684;&amp;#x5916;&amp;#x90E8;fixture&amp;#xFF0C;&amp;#x5C31;&amp;#x662F;&amp;#x8981;&amp;#x4FDD;&amp;#x8BC1;&amp;#x6D4B;&amp;#x8BD5;&amp;#x80FD;&amp;#x6062;&amp;#x590D;&amp;#x73AF;&amp;#x5883;&amp;#x914D;&amp;#x7F6E;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5728;&amp;#x6240;&amp;#x6709;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5F00;&amp;#x59CB;&amp;#x524D;&amp;#x8C03;setUp&amp;#xFF0C;&amp;#x6240;&amp;#x6709;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7ED3;&amp;#x675F;&amp;#x540E;&amp;#x8C03;tearDown&amp;#x3002;&amp;#x8FD9;&amp;#x5C31;&amp;#x662F;External Fixture&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;test-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Test Method&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E00;&amp;#x8282;&amp;#x9488;&amp;#x5BF9;&amp;#x5982;&amp;#x4F55;&amp;#x5199;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65B9;&amp;#x6CD5;&amp;#x7ED9;&amp;#x51FA;&amp;#x4E86;&amp;#x4E00;&amp;#x4E9B;&amp;#x5EFA;&amp;#x8BAE;&amp;#x3002;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;hierarchy &lt;br&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Module &lt;span style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;word-wrap: normal; vertical-align: middle; font-style: normal; font-weight: normal; margin: 0; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; padding: 0; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; line-height: 1.6; display: inline-block; font-size: 100%;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: inline-block; white-space: nowrap; padding: 1px 0px;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: inline-block; position: relative; width: 2.169ex; height: 0.964ex; vertical-align: 0.12ex;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;&lt;img class=&#34;enMedia&#34; src=&#34;/images/Test-Driven Development/SVGc430acae44d6c4874bd268c48184baa7&#34; hash=&#34;f4a4c9b133ba2d97b64f72acf87add23&#34; align alt longdesc width=&#34;15.75&#34; height=&#34;8.75&#34; border hspace vspace usemap style=&#34;border: 0; vertical-align: middle; max-width: 100%; margin-top: 0; margin-bottom: 0;&#34; title lang xml:lang dir&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; Framework&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Class &lt;span style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;word-wrap: normal; vertical-align: middle; font-style: normal; font-weight: normal; margin: 0; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; padding: 0; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; line-height: 1.6; display: inline-block; font-size: 100%;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: inline-block; white-space: nowrap; padding: 1px 0px;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: inline-block; position: relative; width: 2.169ex; height: 0.964ex; vertical-align: 0.12ex;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;&lt;img class=&#34;enMedia&#34; src=&#34;/images/Test-Driven Development/SVGc430acae44d6c4874bd268c48184baa7&#34; hash=&#34;f4a4c9b133ba2d97b64f72acf87add23&#34; align alt longdesc width=&#34;15.75&#34; height=&#34;8.75&#34; border hspace vspace usemap style=&#34;border: 0; vertical-align: middle; max-width: 100%; margin-top: 0; margin-bottom: 0;&#34; title lang xml:lang dir&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; internal fixture&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Method &lt;span style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;word-wrap: normal; vertical-align: middle; font-style: normal; font-weight: normal; margin: 0; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; padding: 0; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; line-height: 1.6; display: inline-block; font-size: 100%;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: inline-block; white-space: nowrap; padding: 1px 0px;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: inline-block; position: relative; width: 2.169ex; height: 0.964ex; vertical-align: 0.12ex;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;&lt;img class=&#34;enMedia&#34; src=&#34;/images/Test-Driven Development/SVGc430acae44d6c4874bd268c48184baa7&#34; hash=&#34;f4a4c9b133ba2d97b64f72acf87add23&#34; align alt longdesc width=&#34;15.75&#34; height=&#34;8.75&#34; border hspace vspace usemap style=&#34;border: 0; vertical-align: middle; max-width: 100%; margin-top: 0; margin-bottom: 0;&#34; title lang xml:lang dir&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; test case&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x540D;&amp;#x5B57;&amp;#x957F;&amp;#x6CA1;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x8981;&amp;#x8BA9;&amp;#x4EE5;&amp;#x540E;&amp;#x7684;&amp;#x8BFB;&amp;#x8005;&amp;#x6709;&amp;#x8DB3;&amp;#x591F;&amp;#x7684;&amp;#x7EBF;&amp;#x7D22;&amp;#x77E5;&amp;#x9053;&amp;#x4E3A;&amp;#x4EC0;&amp;#x4E48;&amp;#x8981;&amp;#x5199;&amp;#x8FD9;&amp;#x4E2A;test&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4EE3;&amp;#x7801;&amp;#x8981;&amp;#x591F;&amp;#x76F4;&amp;#x89C9;&amp;#xFF0C;&amp;#x8981;&amp;#x591F;&amp;#x7B80;&amp;#x6D01;&amp;#xFF08;&amp;#x6700;&amp;#x77ED;3&amp;#x884C;&amp;#xFF09; &lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6CE8;&amp;#x91CA;&amp;#x91CC;&amp;#x5199;outline&amp;#xFF0C;&amp;#x4E00;&amp;#x9897;&amp;#x661F;&amp;#x8868;&amp;#x793A;&amp;#x4E00;&amp;#x7EA7;&amp;#xFF0C;&amp;#x4F5C;&amp;#x8005;&amp;#x8BF4;&amp;#x4ED6;&amp;#x4E00;&amp;#x822C;&amp;#x5199;2-3&amp;#x7EA7;outline&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;/* Adding to tuple spaces. */&lt;/span&gt; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;/* Taking from tuple spaces. */&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;/** Taking a non-existent tuple. **/&lt;/span&gt; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;/** Taking an existing tuple. **/&lt;/span&gt; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;/** Taking multiple tuples. **/&lt;/span&gt; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;/* Reading from tuple space. */&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;exception-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Exception Test&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E00;&amp;#x8282;&amp;#x8BF4;&amp;#x7684;&amp;#x662F;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x5F85;&amp;#x6D4B;&amp;#x7684;&amp;#x51FD;&amp;#x6570;&amp;#x9700;&amp;#x8981;&amp;#x629B;&amp;#x51FA;&amp;#x5F02;&amp;#x5E38;&amp;#xFF0C;&amp;#x7528;&amp;#x5982;&amp;#x4E0B;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#xFF1A;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;testMissingRate&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;        exchange.findRate(&lt;span style=&#34;line-height: 1.6; color: #df5000;&#34;&gt;&amp;quot;USD&amp;quot;&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #df5000;&#34;&gt;&amp;quot;GBP&amp;quot;&lt;/span&gt;); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;        fail(); &lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// &amp;#x5982;&amp;#x679C;&amp;#x6CA1;&amp;#x629B;&amp;#x5F02;&amp;#x5E38;&amp;#x5C31;fail&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;    &amp;#125; &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;catch&lt;/span&gt; (IllegalArgumentException expected) &amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;    &amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;all-tests&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;All Tests&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;How do you run all tests together? Make a suite of all the suites&amp;#x2014;one for each package, and one aggregating the package tests for the whole application.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #a6e22e; font-style: italic;&#34;&gt;AllTests&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// &amp;#x8FD9;&amp;#x91CC;&amp;#x6709;&amp;#x4E2A;main&amp;#xFF0C;&amp;#x65B9;&amp;#x4FBF;&amp;#x76F4;&amp;#x63A5;&amp;#x8C03;&amp;#x7528;&amp;#x7A0B;&amp;#x5E8F;&amp;#x5F00;&amp;#x59CB;&amp;#x6D4B;&amp;#x8BD5;&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;        junit.swingui.TestRunner.run(AllTests.class); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;    &amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// &amp;#x8FD9;&amp;#x91CC;&amp;#x6709;&amp;#x4E2A;suite&amp;#x5305;&amp;#x542B;&amp;#x4E86;&amp;#x6240;&amp;#x6709;test case&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; Test &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;suite&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;8.&lt;/span&gt;        TestSuite result= &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; TestSuite(&lt;span style=&#34;line-height: 1.6; color: #df5000;&#34;&gt;&amp;quot;TFD tests&amp;quot;&lt;/span&gt;); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;9.&lt;/span&gt;        result.addTestSuite(MoneyTest.class); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;10.&lt;/span&gt;        result.addTestSuite(ExchangeTest.class); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;11.&lt;/span&gt;        result.addTestSuite(IdentityRateTest.class); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;12.&lt;/span&gt;        &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;return&lt;/span&gt; result;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;13.&lt;/span&gt;    &amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;14.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;chapter-30-design-patterns&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 30. Design Patterns&lt;/a&gt;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x5728;&amp;#x8FD9;&amp;#x4E00;&amp;#x7AE0;&amp;#x5F15;&amp;#x5165;&amp;#x4E86;&amp;#x4E00;&amp;#x4E9B;TDD&amp;#x4E2D;&amp;#x4F1A;&amp;#x7528;&amp;#x5230;&amp;#x7684;&amp;#x8BBE;&amp;#x8BA1;&amp;#x6A21;&amp;#x5F0F;&amp;#x3002;&amp;#x6709;&amp;#x4E9B;&amp;#x662F;&amp;#x5199;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#x7528;&amp;#x7684;&amp;#xFF0C;&amp;#x6709;&amp;#x7684;&amp;#x662F;&amp;#x91CD;&amp;#x6784;&amp;#x65F6;&amp;#x7528;&amp;#x7684;&amp;#xFF0C;&amp;#x6709;&amp;#x7684;&amp;#x4E24;&amp;#x8005;&amp;#x7686;&amp;#x53EF;&amp;#x3002;&amp;#x4E0B;&amp;#x9762;&amp;#x662F;&amp;#x672C;&amp;#x7AE0;&amp;#x6240;&amp;#x6709;&amp;#x6A21;&amp;#x5F0F;&amp;#x7684;&amp;#x603B;&amp;#x7EB2;&amp;#x3002; &lt;br&gt;&lt;img class=&#34;enMedia&#34; src=&#34;/images/Test-Driven Development/1456036251528.png&#34; hash=&#34;402527467e6ed105cea7216a79760204&#34; align alt longdesc width height border hspace vspace usemap style=&#34;border: 0; vertical-align: middle; max-width: 100%;&#34; title lang xml:lang dir&gt;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;command&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Command&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;What do you do when you need the invocation of a computation to be more complicated than a simple method call? &lt;br&gt;Make an object for the computation and invoke it.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x91CC;&amp;#x6240;&amp;#x8BF4;&amp;#x7684;&amp;#x547D;&amp;#x4EE4;&amp;#x662F;&amp;#x8BF4;&amp;#xFF0C;&amp;#x628A;&amp;#x8981;&amp;#x8C03;&amp;#x7528;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x5C01;&amp;#x88C5;&amp;#x6210;&amp;#x4E00;&amp;#x4E2A;object&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x8C03;&amp;#x7528;&amp;#x90A3;&amp;#x4E2A;object&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;value-object&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Value Object&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x628A;&amp;#x4E00;&amp;#x4E9B;&amp;#x5E38;&amp;#x91CF;&amp;#x53C2;&amp;#x6570;&amp;#x505A;&amp;#x6210;object&amp;#x6765;&amp;#x4F20;&amp;#x9012;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;When implementing a Value Object, every operation has to return a fresh object,  &lt;br&gt;All Value Objects have to implement equality &lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;null-object&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Null Object&lt;/a&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;setReadOnly&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;    SecurityManager guard = System.getSecurityManager(); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;if&lt;/span&gt; (guard != &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;null&lt;/span&gt;) &amp;#123; ) &amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;        guard.canWrite(path);&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;    &amp;#125; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;return&lt;/span&gt; fileSystem.setReadOnly(&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0A;&amp;#x9762;&amp;#x8FD9;&amp;#x4E2A;&amp;#x4F8B;&amp;#x5B50;getSecurityManager&amp;#x5728;&amp;#x4E0D;&amp;#x6210;&amp;#x529F;&amp;#x65F6;&amp;#x8FD4;&amp;#x56DE;Null&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x8C03;&amp;#x7528;&amp;#x8005;&amp;#x518D;&amp;#x5224;&amp;#x65AD;&amp;#x8FD4;&amp;#x56DE;&amp;#x503C;&amp;#x4EE5;&amp;#x51B3;&amp;#x5B9A;&amp;#x4F1A;&amp;#x4E0D;&amp;#x4F1A;&amp;#x7528;&amp;#x7A7A;&amp;#x6307;&amp;#x9488;&amp;#x6765;&amp;#x8C03;&amp;#x7528;&amp;#x6210;&amp;#x5458;&amp;#x53D8;&amp;#x91CF;&amp;#x3002; &lt;br&gt;&amp;#x8FD9;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F88;&amp;#x5E38;&amp;#x89C1;&amp;#x7684;&amp;#x505A;&amp;#x6CD5;&amp;#xFF0C;&amp;#x8FD9;&amp;#x6837;&amp;#x505A;&amp;#x4E0D;&amp;#x597D;&amp;#x7684;&amp;#x662F;&amp;#xFF0C;&amp;#x901A;&amp;#x5E38;&amp;#x8FD9;&amp;#x79CD;&amp;#x5224;&amp;#x65AD;&amp;#x4F1A;&amp;#x975E;&amp;#x5E38;&amp;#x975E;&amp;#x5E38;&amp;#x591A;&amp;#xFF0C;&amp;#x800C;&amp;#x4E14;&amp;#x7ED9;&amp;#x4EBA;&amp;#x4E00;&amp;#x79CD;&amp;#x201C;&amp;#x4F1A;&amp;#x4E0D;&amp;#x4F1A;&amp;#x6709;&amp;#x54EA;&amp;#x91CC;&amp;#x6CA1;&amp;#x5224;&amp;#x65AD;&amp;#xFF0C;&amp;#x4EE5;&amp;#x540E;&amp;#x4F1A;&amp;#x5BFC;&amp;#x81F4;crash&amp;#xFF1F;&amp;#x201D;&amp;#x7684;&amp;#x62C5;&amp;#x5FE7;&amp;#x3002; &lt;br&gt;Null Object&amp;#x8BBE;&amp;#x8BA1;&amp;#x6A21;&amp;#x5F0F;&amp;#x5C31;&amp;#x662F;&amp;#x8BA9;getSecurityManager&amp;#x8FD4;&amp;#x56DE;&amp;#x4E00;&amp;#x4E2A;&amp;#x7279;&amp;#x6B8A;&amp;#x7684;object&amp;#x6765;&amp;#x53D6;&amp;#x4EE3;Null&amp;#xFF0C;&amp;#x8FD9;&amp;#x6837;&amp;#x8BA9;&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#x64CD;&amp;#x4F5C;&amp;#x90FD;&amp;#x7EDF;&amp;#x4E00;&amp;#xFF0C;&amp;#x4EE5;&amp;#x51CF;&amp;#x5C11;&amp;#x91CD;&amp;#x590D;&amp;#x4EE3;&amp;#x7801;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;template-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Template Method&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6A21;&amp;#x677F;&amp;#x65B9;&amp;#x6CD5;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;When you find two variants of a sequence in two subclasses, you need to gradually move them closer together. Once you&amp;#x2019;ve extracted the parts that are different from other methods, what you are left with is the Template Method. &lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// TestCase&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;runBare&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;&amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    setUp(); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;try&lt;/span&gt; &amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;        runTest();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;    &amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;8.&lt;/span&gt;        tearDown();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;9.&lt;/span&gt;    &amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;10.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;pluggable-object&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Pluggable Object&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E2D;&amp;#x6587;&amp;#x8BD1;&amp;#x540D;&amp;#x4E3A;&amp;#x63D2;&amp;#x5165;&amp;#x5F0F;&amp;#x5BF9;&amp;#x8C61;&amp;#x3002;&amp;#x5F88;&amp;#x96BE;&amp;#x7406;&amp;#x89E3;&amp;#x54EA;&amp;#x91CC;&amp;#x6709;&amp;#x8FD9;&amp;#x4E2A;&amp;#x6240;&amp;#x8C13;&amp;#x7684;&amp;#x201C;&amp;#x63D2;&amp;#x5165;&amp;#x201D;&amp;#x3002;&amp;#x8FD9;&amp;#x4E2A;&amp;#x8BBE;&amp;#x8BA1;&amp;#x6A21;&amp;#x5F0F;&amp;#x6838;&amp;#x5FC3;&amp;#x7684;&amp;#x601D;&amp;#x60F3;&amp;#x5C31;&amp;#x662F;&amp;#x6D88;&amp;#x9664;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;if...else...&lt;/code&gt;&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#x3002; &lt;br&gt;&amp;#x770B;&amp;#x4F5C;&amp;#x8005;&amp;#x7684;&amp;#x4F8B;&amp;#x5B50;&amp;#xFF0C;&amp;#x89E3;&amp;#x91CA;&amp;#x7684;&amp;#x5F88;&amp;#x6E05;&amp;#x695A;&amp;#xFF1A;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// Without Pluggable Object&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;Figure selected; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;mouseDown&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;    selected= findFigure();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;if&lt;/span&gt; (selected != &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// &amp;#x5230;&amp;#x5904;&amp;#x662F;null&amp;#x5224;&amp;#x65AD;&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;        select(selected); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;8.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;mouseMove&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;9.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;if&lt;/span&gt; (selected != &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;null&lt;/span&gt;)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;10.&lt;/span&gt;        move(selected); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;11.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;12.&lt;/span&gt;        moveSelectionRectangle(); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;13.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;14.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;mouseUp&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;15.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;if&lt;/span&gt; (selected == &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;null&lt;/span&gt;)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;16.&lt;/span&gt;        selectAll();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;17.&lt;/span&gt;&amp;#125; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;18.&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;19.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// With Pluggable Object&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;20.&lt;/span&gt;SelectionMode mode;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;21.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;mouseDown&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;22.&lt;/span&gt;    selected= findFigure();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;23.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// &amp;#x5168;&amp;#x90E8;&amp;#x5F52;&amp;#x7ED3;&amp;#x5230;mode&amp;#x5B50;&amp;#x7C7B;&amp;#x91CC;&amp;#x9762;&amp;#x53BB;&amp;#x5904;&amp;#x7406;&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;24.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;if&lt;/span&gt; (selected != &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;null&lt;/span&gt;)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;25.&lt;/span&gt;        mode= SingleSelection(selected);&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;26.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;27.&lt;/span&gt;        mode= MultipleSelection();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;28.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;29.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;mouseMove&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;30.&lt;/span&gt;    mode.mouseMove();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;31.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;32.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;mouseUp&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;33.&lt;/span&gt;    mode.mouseUp();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;34.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;pluggable-selector&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Pluggable Selector&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E00;&amp;#x8282;&amp;#x7684;&amp;#x8BBE;&amp;#x8BA1;&amp;#x6A21;&amp;#x5F0F;&amp;#x548C;&amp;#x4E0A;&amp;#x4E00;&amp;#x8282;&amp;#x7684;&amp;#x6781;&amp;#x4E3A;&amp;#x7C7B;&amp;#x4F3C;&amp;#x3002;&amp;#x8FD9;&amp;#x6B21;&amp;#x8981;&amp;#x5904;&amp;#x7406;&amp;#x6389;&amp;#x7684;&amp;#x662F;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;switch...case...&lt;/code&gt;&amp;#x800C;&amp;#x53C8;&amp;#x4E0D;&amp;#x7528;&amp;#x5B50;&amp;#x7C7B;&amp;#x7EE7;&amp;#x627F;&amp;#x7684;&amp;#x65B9;&amp;#x5F0F;&amp;#x6765;&amp;#x52A8;&amp;#x6001;&amp;#x8C03;&amp;#x7528;&amp;#x3002;&amp;#x8FD9;&amp;#x91CC;&amp;#x4F7F;&amp;#x7528;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x53EB;&amp;#x53CD;&amp;#x5C04;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x53CD;&amp;#x5C04;&amp;#xFF1A;&amp;#x901A;&amp;#x8FC7;&amp;#x81EA;&amp;#x8EAB;&amp;#x7684;&amp;#x5C5E;&amp;#x6027;&amp;#xFF08;&amp;#x5982;&amp;#x7C7B;&amp;#x540D;&amp;#xFF0C;&amp;#x65B9;&amp;#x6CD5;&amp;#x540D;&amp;#xFF09;&amp;#x6765;&amp;#x505A;&amp;#x76F8;&amp;#x5173;&amp;#x903B;&amp;#x8F91;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x540C;&amp;#x6837;&amp;#x770B;&amp;#x4F5C;&amp;#x8005;&amp;#x7684;&amp;#x4F8B;&amp;#x5B50;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;    Method runMethod= getClass().getMethod(printMessage, &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;null&lt;/span&gt;);&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    runMethod.invoke(&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Class[&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;]);&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x770B;&amp;#x5230;&amp;#x4E86;&amp;#x6CA1;getClass&amp;#xFF0C;getMethod&amp;#xFF0C;&amp;#x8FD9;&amp;#x5C31;&amp;#x662F;&amp;#x53CD;&amp;#x5C04;&amp;#x3002;&amp;#x6709;&amp;#x4E86;&amp;#x8FD9;&amp;#x4E2A;&amp;#x51FD;&amp;#x6570;&amp;#x65E2;&amp;#x4E0D;&amp;#x9700;&amp;#x8981;switch&amp;#x6765;&amp;#x8C03;&amp;#x7528;&amp;#x4E0D;&amp;#x540C;&amp;#x7684;printxxx&amp;#x51FD;&amp;#x6570;(printHtml, printXml&amp;#x2026;)&amp;#xFF0C;&amp;#x4E5F;&amp;#x4E0D;&amp;#x9700;&amp;#x8981;&amp;#x5B9A;&amp;#x4E49;&amp;#x5B50;&amp;#x7C7B;&amp;#x6765;&amp;#x8C03;&amp;#x7528;&amp;#x4E0D;&amp;#x540C;&amp;#x7684;print&amp;#x51FD;&amp;#x6570;&amp;#x3002; &lt;br&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x5728;&amp;#x672C;&amp;#x8282;&amp;#x6700;&amp;#x540E;&amp;#x7ED9;&amp;#x51FA;&amp;#x4E86;&amp;#x4E00;&amp;#x6BB5;&amp;#x5FE0;&amp;#x544A;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Pluggable Selector can definitely be overused. The biggest problem with it is tracing code to see whether a method is invoked. Use Pluggable Selector only when you are cleaning up a fairly straightforward situation in which each of a bunch of &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;subclasses has only one method.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;factory-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Factory Method&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x8BF4;&amp;#x5DE5;&amp;#x5382;&amp;#x65B9;&amp;#x6CD5;&amp;#x63D0;&amp;#x4F9B;&amp;#x4E86;&amp;#x7075;&amp;#x6D3B;&amp;#x6027;&amp;#x3002;&amp;#x6211;&amp;#x662F;&amp;#x6CA1;&amp;#x770B;&amp;#x51FA;&amp;#x6765;&amp;#x3002;&amp;#x5BF9;&amp;#x6BD4;&amp;#x4E0B;&amp;#x9762;&amp;#x4E24;&amp;#x6BB5;&amp;#x4EE3;&amp;#x7801;&amp;#xFF0C;&amp;#x8FD9;&amp;#x91CC;&amp;#x589E;&amp;#x52A0;&amp;#x4E86;&amp;#x7075;&amp;#x6D3B;&amp;#x6027;&amp;#xFF1F;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;testMultiplication&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;    Dollar five= Dollar five= &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Dollar(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;);&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    assertEquals(&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Dollar(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;), five.times(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;2&lt;/span&gt;)); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;    assertEquals(&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Dollar(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;15&lt;/span&gt;), five.times(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;3&lt;/span&gt;));&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;testMultiplication&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;8.&lt;/span&gt;    Dollar five = Money.dollar(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;); &lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// &amp;#x5DE5;&amp;#x5382;&amp;#x65B9;&amp;#x6CD5;&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;9.&lt;/span&gt;    assertEquals(&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Dollar(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;), five.times(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;2&lt;/span&gt;)); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;10.&lt;/span&gt;    assertEquals(&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Dollar(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;15&lt;/span&gt;), five.times(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;3&lt;/span&gt;)); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;11.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;12.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// Money&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;13.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; Dollar &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;dollar&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;( Dollar dollar(&lt;span style=&#34;line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; amount)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;14.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Dollar(amount);&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;15.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x6700;&amp;#x540E;&amp;#x7ED9;&amp;#x51FA;&amp;#x4E86;&amp;#x4E00;&amp;#x70B9;&amp;#x5FE0;&amp;#x544A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;You have to remember that the method is really creating an object, even though it doesn&amp;#x2019;t look like a constructor. Use Factory Method only when you need the flexibility it creates. &lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;imposter&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Imposter&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E2D;&amp;#x6587;&amp;#x8BD1;&amp;#x540D;&amp;#x4E3A;&amp;#x5192;&amp;#x540D;&amp;#x9876;&amp;#x66FF;&amp;#x3002;&amp;#x6839;&amp;#x636E;&amp;#x6587;&amp;#x4E2D;&amp;#x7684;&amp;#x9610;&amp;#x8FF0;&amp;#xFF0C;&amp;#x6211;&amp;#x7406;&amp;#x89E3;&amp;#x8FD9;&amp;#x91CC;&amp;#x8BB2;&amp;#x7684;&amp;#x4E0D;&amp;#x662F;&amp;#x4E00;&amp;#x79CD;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x8BBE;&amp;#x8BA1;&lt;/strong&gt;&amp;#x6A21;&amp;#x5F0F;&amp;#xFF0C;&amp;#x800C;&amp;#x53EA;&amp;#x662F;&amp;#x4E00;&amp;#x79CD;&amp;#x6A21;&amp;#x5F0F;&amp;#xFF0C;&amp;#x4E00;&amp;#x79CD;&amp;#x7279;&amp;#x6B8A;&amp;#x60C5;&amp;#x51B5;&amp;#x3002;&amp;#x6307;&amp;#x7684;&amp;#x662F;&amp;#x5982;&amp;#x679C;&amp;#x67D0;&amp;#x4E00;&amp;#x6BB5;&amp;#x4EE3;&amp;#x7801;&amp;#xFF0C;&amp;#x53EA;&amp;#x5C06;&amp;#x5176;&amp;#x4E2D;&amp;#x7684;&amp;#x4E00;&amp;#x4E2A;&amp;#x540D;&amp;#x5B57;&amp;#xFF08;&amp;#x7C7B;&amp;#x3001;&amp;#x65B9;&amp;#x6CD5;&amp;#x6216;&amp;#x8005;&amp;#x53D8;&amp;#x91CF;&amp;#x7B49;&amp;#x7B49;&amp;#xFF09;&amp;#x66FF;&amp;#x6362;&amp;#x6210;&amp;#x53E6;&amp;#x5916;&amp;#x4E00;&amp;#x4E2A;&amp;#x540D;&amp;#x5B57;&amp;#xFF0C;&amp;#x5C31;&amp;#x80FD;&amp;#x5F97;&amp;#x5230;&amp;#x4E00;&amp;#x6BB5;&amp;#x65B0;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#xFF0C;&amp;#x79F0;&amp;#x4E3A;&amp;#x5192;&amp;#x540D;&amp;#x9876;&amp;#x66FF;&amp;#x3002;&amp;#x53D1;&amp;#x73B0;&amp;#x53EF;&amp;#x4EE5;Imposter&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#xFF0C;&amp;#x5176;&amp;#x5B9E;&amp;#x5C31;&amp;#x662F;&amp;#x53D1;&amp;#x73B0;&amp;#x91CD;&amp;#x590D;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// &amp;#x4E0B;&amp;#x9762;&amp;#x8FD9;&amp;#x4E24;&amp;#x6BB5;&amp;#x4EE3;&amp;#x7801;&amp;#x5C31;&amp;#x53EA;&amp;#x662F;&amp;#x5C06;RectangleFigure&amp;#x6362;&amp;#x6210;OvalFigure&amp;#xFF0C;&amp;#x6B64;&amp;#x662F;&amp;#x4E3A;Imposter&amp;#x5192;&amp;#x540D;&amp;#x9876;&amp;#x66FF;&amp;#x3002;&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;testRectangle() &amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    Drawing d= &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Drawing();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;    d.addFigure(&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; RectangleFigure(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;)); RectangleFigure(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;));&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;    RecordingMedium brush= &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; RecordingMedium(); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;    d.display(brush); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;    assertEquals(&lt;span style=&#34;line-height: 1.6; color: #df5000;&#34;&gt;&amp;quot;rectangle 0 10 50 100\n&amp;quot;&lt;/span&gt;, brush.log());&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;8.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;9.&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;10.&lt;/span&gt;testOval() &amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;11.&lt;/span&gt;    Drawing d= &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; Drawing();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;12.&lt;/span&gt;    d.addFigure(&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; OvalFigure(&lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;)); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;13.&lt;/span&gt;    RecordingMedium brush= &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;new&lt;/span&gt; RecordingMedium(); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;14.&lt;/span&gt;    d.display(brush);&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;15.&lt;/span&gt;    assertEquals(&lt;span style=&#34;line-height: 1.6; color: #df5000;&#34;&gt;&amp;quot;oval 0 10 50 100\n&amp;quot;&lt;/span&gt;, brush.log()); &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;16.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x8FD8;&amp;#x63D0;&amp;#x5230;&amp;#x53E6;&amp;#x5916;&amp;#x4E24;&amp;#x4E2A;&amp;#x5728;&amp;#x91CD;&amp;#x6784;&amp;#x4E2D;&amp;#x7ECF;&amp;#x5E38;&amp;#x7528;&amp;#x5230;&amp;#x7684;&amp;#x8BBE;&amp;#x8BA1;&amp;#x6A21;&amp;#x5F0F;&amp;#xFF0C;&amp;#x672C;&amp;#x8D28;&amp;#x5176;&amp;#x5B9E;&amp;#x5C31;&amp;#x662F;Imposter &amp;#x2014;&amp;#x2014; Null Object &amp;amp; Composite&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;composite&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Composite&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6839;&amp;#x636E;&amp;#x4E0A;&amp;#x4E00;&amp;#x7AE0;&amp;#x4F5C;&amp;#x8005;&amp;#x7684;&amp;#x89C2;&amp;#x70B9;&amp;#xFF0C;&amp;#x7EC4;&amp;#x5408;&amp;#x5176;&amp;#x5B9E;&amp;#x5C31;&amp;#x662F;&amp;#x4E00;&amp;#x79CD;&amp;#x5192;&amp;#x540D;&amp;#x9876;&amp;#x66FF;&amp;#x3002;&amp;#x4F5C;&amp;#x8005;&amp;#x5728;&amp;#x672C;&amp;#x8282;&amp;#x5F00;&amp;#x5934;&amp;#x8BF4;&amp;#x4E86;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;How do you implement &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;an object&lt;/strong&gt; whose behavior is the composition of the behavior of a list of other objects? Make it an &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Imposter&lt;/strong&gt; for &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;the component objects&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8BA9;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5BF9;&amp;#x8C61;&amp;#x79F0;&amp;#x4E3A;&amp;#x7EC4;&amp;#x6210;&amp;#x4ED6;&amp;#x7684;&amp;#x5BF9;&amp;#x8C61;&amp;#x7684;&amp;#x5192;&amp;#x540D;&amp;#x9876;&amp;#x66FF;&amp;#x8005;&amp;#x3002;&amp;#x8BF4;&amp;#x8D77;&amp;#x6765;&amp;#x5F88;&amp;#x62D7;&amp;#x53E3;&amp;#x3002;&amp;#x770B;&amp;#x4F8B;&amp;#x5B50;&amp;#xFF1A;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// Transaction&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;Transaction(Money value) &amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;this&lt;/span&gt;.value= value;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #969896;&#34;&gt;// Account&lt;/span&gt;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;Transaction transactions[];&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;Money &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;balance&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;8.&lt;/span&gt;    Money sum= Money.zero();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;9.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;int&lt;/span&gt; i= &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i &amp;lt; transactions.length; i++) &lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;10.&lt;/span&gt;        sum= sum.plus(transactions[i].value);&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;11.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;return&lt;/span&gt; sum;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;12.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5199;&amp;#x6CD5;&amp;#x7684;&amp;#x7F3A;&amp;#x70B9;&amp;#x662F;&amp;#xFF0C;&amp;#x5F53;&amp;#x8981;&amp;#x7B97;OverallAccount&amp;#x65F6;&amp;#xFF0C;&amp;#x6CA1;&amp;#x8F99;&amp;#x4E86;&amp;#xFF0C;&amp;#x8981;&amp;#x5B9A;&amp;#x4E49;&amp;#x4E00;&amp;#x4E2A;&amp;#x65B0;&amp;#x7C7B;&amp;#x6765;&amp;#x5904;&amp;#x7406;&amp;#x3002;&amp;#x4E00;&amp;#x4E2A;OverallAccount&amp;#x662F;&amp;#x4E00;&amp;#x7EC4;Account&amp;#x3002;&amp;#x4F46;OverallAccount&amp;#x5176;&amp;#x5B9E;&amp;#x8981;&amp;#x505A;&amp;#x7684;&amp;#x4E5F;&amp;#x662F;&amp;#x4E00;&amp;#x79CD;&amp;#x7D2F;&amp;#x52A0;&amp;#xFF0C;&amp;#x548C;Account&amp;#x505A;&amp;#x7684;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x4EC0;&amp;#x4E48;&amp;#x533A;&amp;#x522B;&amp;#x3002;&amp;#x8FD9;&amp;#x5C31;&amp;#x662F;&amp;#x91CD;&amp;#x590D;&amp;#x3002; &lt;br&gt;&amp;#x89E3;&amp;#x51B3;&amp;#x7684;&amp;#x529E;&amp;#x6CD5;&amp;#x5C31;&amp;#x662F;&amp;#x6240;&amp;#x8C13;&amp;#x7684;Composite&amp;#x3002;&amp;#x628A;&amp;#x8981;&amp;#x7D2F;&amp;#x52A0;&amp;#x7684;&amp;#x4E1C;&amp;#x897F;&amp;#x62BD;&amp;#x8C61;&amp;#x51FA;&amp;#x6765;&amp;#x79F0;&amp;#x4E3A;Holdings&amp;#xFF0C;Account&amp;#x7D2F;&amp;#x52A0;&amp;#x7684;&amp;#x662F;Holdings&amp;#xFF0C;OverallAccount&amp;#x7D2F;&amp;#x52A0;&amp;#x7684;&amp;#x4E5F;&amp;#x662F;Holdings&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #333333; display: block; background: white; overflow-x: auto; padding: 1.3em 2em;&#34;&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;1.&lt;/span&gt;Holding holdings[];&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;2.&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f92672;&#34;&gt;Money &lt;span style=&#34;line-height: 1.6; color: #795da3;&#34;&gt;balance&lt;/span&gt;&lt;span style=&#34;line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;3.&lt;/span&gt;    Money sum= Money.zero();&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;4.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;for&lt;/span&gt; ( (&lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;int&lt;/span&gt; i= &lt;span style=&#34;line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i &amp;lt; holdings.length; i++)&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;5.&lt;/span&gt;    sum= sum.plus(holdings[i].balance());&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;6.&lt;/span&gt;    &lt;span style=&#34;line-height: 1.6; color: #a71d5d;&#34;&gt;return&lt;/span&gt; sum;&lt;br&gt;&lt;span style=&#34;line-height: 1.6; display: none; color: #969896;&#34;&gt;7.&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5199;&amp;#x5230;&amp;#x8FD9;&amp;#x91CC;&amp;#xFF0C;&amp;#x6211;&amp;#x4ECD;&amp;#x7136;&amp;#x4E0D;&amp;#x662F;&amp;#x7279;&amp;#x522B;&amp;#x660E;&amp;#x767D;&amp;#x4F55;&amp;#x4E3A;Composite&amp;#xFF08;&amp;#x62FC;&amp;#x5408;&amp;#xFF0C;&amp;#x590D;&amp;#x5408;&amp;#x7684;&amp;#x610F;&amp;#x601D;&amp;#xFF09;&amp;#x3002;&amp;#x4F46;&amp;#x6211;&amp;#x4EEC;&amp;#x662F;&amp;#x7AD9;&amp;#x5728;&amp;#x5DE8;&amp;#x4EBA;&amp;#x7684;&amp;#x80A9;&amp;#x8180;&amp;#x4E0A;&amp;#xFF0C;&amp;#x5BF9;&amp;#x6BD4;&amp;#x9605;&amp;#x8BFB;&amp;#x4E86;&amp;#x4E2D;&amp;#x6587;&amp;#x8BD1;&amp;#x672C;&amp;#x540E;&amp;#x6709;&amp;#x4E86;&amp;#x4E00;&amp;#x70B9;&amp;#x70B9;&amp;#x611F;&amp;#x89C9;&amp;#x3002;&amp;#x8FD9;&amp;#x4E2A;&amp;#x8BBE;&amp;#x8BA1;&amp;#x6A21;&amp;#x5F0F;&amp;#x7684;&amp;#x4E2D;&amp;#x6587;&amp;#x8BD1;&amp;#x540D;&amp;#x4E3A;-&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x9012;&amp;#x5F52;&amp;#x7EC4;&amp;#x5408;&lt;/strong&gt;&amp;#x3002;&amp;#x6240;&amp;#x8C13;&amp;#x9012;&amp;#x5F52;&amp;#xFF0C;&amp;#x5E94;&amp;#x5F53;&amp;#x6307;&amp;#x7684;&amp;#x662F;&amp;#xFF0C;&amp;#x901A;&amp;#x8FC7;&amp;#x6982;&amp;#x5FF5;&amp;#x4E0A;&amp;#x7684;&amp;#x62BD;&amp;#x8C61;&amp;#xFF0C;&amp;#x5C06;&amp;#x4E00;&amp;#x4E2A;&amp;#x5927;&amp;#x7684;&amp;#x6DF7;&amp;#x5408;&amp;#x7C7B;&amp;#x5199;&amp;#x6210;&amp;#x4E00;&amp;#x4E9B;&amp;#x66F4;&amp;#x62BD;&amp;#x8C61;&amp;#x7684;&amp;#x6982;&amp;#x5FF5;&amp;#x7684;&amp;#x7EC4;&amp;#x5408;&amp;#x3002;&amp;#x4F8B;&amp;#x5982;: &lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;OvreallAccount &amp;lt;- Account &amp;lt;- Transactions &lt;br&gt;OverallAccount &amp;lt;- Holding &amp;amp; Account &amp;lt;-Holding&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x901A;&amp;#x8FC7;&amp;#x9012;&amp;#x5F52;&amp;#x5730;&amp;#x5C06;OverallAccount&amp;#x5192;&amp;#x540D;&amp;#x9876;&amp;#x66FF;&amp;#x6210;Holding&amp;#xFF0C;&amp;#x4ECE;&amp;#x800C;&amp;#x4F7F;OverallAccount&amp;#x6210;&amp;#x4E3A;&amp;#x4E00;&amp;#x4E2A;Account&amp;#x6765;&amp;#x8FBE;&amp;#x5230;&amp;#x6D88;&amp;#x9664;&amp;#x91CD;&amp;#x590D;&amp;#x3002; &lt;br&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x5728;&amp;#x672C;&amp;#x8282;&amp;#x6700;&amp;#x540E;&amp;#x7ED9;&amp;#x51FA;&amp;#x4E86;&amp;#x4F55;&amp;#x65F6;&amp;#x4F7F;&amp;#x7528;Composite&amp;#x7684;&amp;#x5EFA;&amp;#x8BAE;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;As is obvious from this discussion, I&amp;#x2019;m still not able to articulate how to guess when a collection of objects is just a collection of objects and when you really have a Composite. The good news is, since you&amp;#x2019;re getting good at refactoring, &lt;b style=&#34;font-weight: bold;&#34;&gt;&lt;font color=&#34;IndianRed&#34; style=&#34;line-height: 1.6;&#34;&gt;the moment the duplication appears&lt;/font&gt;&lt;/b&gt;, you can introduce Composite and watch program complexity disappear.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;collecting-parameter&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Collecting Parameter&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x770B;&amp;#x4E0D;&amp;#x61C2;&amp;#xFF0C;&amp;#x4E0D;&amp;#x77E5;&amp;#x6240;&amp;#x4E91;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;singleton&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Singleton&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5C31;&amp;#x662F;&amp;#x5F88;&amp;#x8457;&amp;#x540D;&amp;#x7684;&amp;#x5355;&amp;#x4F8B;&amp;#x6A21;&amp;#x5F0F;&amp;#xFF0C;&amp;#x7ECF;&amp;#x5E38;&amp;#x4F1A;&amp;#x7528;&amp;#x5230;&amp;#x3002;&amp;#x4F5C;&amp;#x8005;&amp;#x6CA1;&amp;#x6709;&amp;#x8BE6;&amp;#x52A0;&amp;#x9610;&amp;#x91CA;&amp;#xFF0C;&amp;#x53EA;&amp;#x662F;&amp;#x544A;&amp;#x8BEB;&amp;#x8BFB;&amp;#x8005;&amp;#x4E0D;&amp;#x8981;&amp;#x7528;&amp;#x5168;&amp;#x5C40;&amp;#x53D8;&amp;#x91CF;(global variable)&amp;#x3002;&amp;#x6211;&amp;#x731C;&amp;#x4F5C;&amp;#x8005;&amp;#x7684;&amp;#x610F;&amp;#x601D;&amp;#x662F;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x8981;&amp;#x7528;&amp;#x5168;&amp;#x5C40;&amp;#x53D8;&amp;#x91CF;&amp;#xFF0C;&amp;#x5C31;&amp;#x7528;&amp;#x5355;&amp;#x4F8B;&amp;#x6A21;&amp;#x5F0F;&amp;#x7684;&amp;#x7C7B;&amp;#x5BF9;&amp;#x8C61;&amp;#x5427;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;chapter-31-refactoring&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 31. Refactoring&lt;/a&gt;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5728;TDD&amp;#x4E2D;&amp;#xFF0C;&amp;#x91CD;&amp;#x6784;&amp;#x8981;&amp;#x505A;&amp;#x7684;&amp;#x5C31;&amp;#x662F;&amp;#xFF0C;&amp;#x4FDD;&amp;#x8BC1;&amp;#x6240;&amp;#x6709;&amp;#x6D4B;&amp;#x8BD5;&amp;#x901A;&amp;#x8FC7;&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#x4E0B;&amp;#xFF0C;&amp;#x964D;&amp;#x4F4E;&amp;#x91CD;&amp;#x590D;&amp;#xFF08;code&amp;#x4E4B;&amp;#x95F4;&amp;#xFF0C;code&amp;#x4E0E;test&amp;#x4E4B;&amp;#x95F4;&amp;#xFF09;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;reconcile-differences&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Reconcile Differences&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;How do you unify two similar looking pieces of code? Gradually bring them closer. Unify them only when they are absolutely identical. &amp;#x4E0D;&amp;#x8981;&amp;#x5F3A;&amp;#x5236;&amp;#x6574;&amp;#x5408;&amp;#xFF0C;&amp;#x7B49;&amp;#x4ED6;&amp;#x4EEC;&amp;#x5B8C;&amp;#x5168;&amp;#x76F8;&amp;#x7B49;&amp;#x4E86;&amp;#x518D;&amp;#x8BF4;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Such a leap-of-faith refactoring is exactly what we&amp;#x2019;re trying to avoid with our strategy of small steps and concrete feedback. Although you can&amp;#x2019;t always avoid leapy refactorings, you can reduce their incidence. &amp;#x4E0D;&amp;#x8981;&amp;#x505A;&amp;#x8DE8;&amp;#x8D8A;&amp;#x5F0F;&amp;#x7684;&amp;#x91CD;&amp;#x6784;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Sometimes you need to approach reconciling differences backward&amp;#x2014;that is, think about how the last step of the change could be trivial, then work backward. &amp;#x53CD;&amp;#x5411;&amp;#x601D;&amp;#x8003;&amp;#xFF0C;&amp;#x5C3D;&amp;#x91CF;&amp;#x8BA9;&amp;#x6BCF;&amp;#x4E00;&amp;#x6B65;&amp;#x90FD;&amp;#x975E;&amp;#x5E38;&amp;#x5C0F;(trivial)&amp;#xFF0C;&amp;#x8FD9;&amp;#x6837;&amp;#x65B9;&amp;#x4FBF;&amp;#x56DE;&amp;#x9000;&amp;#x3002;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;isolate-change&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Isolate Change&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x9694;&amp;#x79BB;&amp;#x6539;&amp;#x52A8;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;&amp;#x6211;&amp;#x4EEC;&amp;#x901A;&amp;#x5E38;&amp;#x505A;&amp;#x7684;&amp;#x4E00;&amp;#x4E9B;&amp;#x62BD;&amp;#x8C61;&amp;#x5C01;&amp;#x88C5;&amp;#x3002;&amp;#x628A;&amp;#x53D8;&amp;#x5316;&amp;#x7684;&amp;#x90E8;&amp;#x5206;&amp;#x7528;&amp;#x63A5;&amp;#x53E3;&amp;#x5305;&amp;#x88C5;&amp;#x8D77;&amp;#x6765;&amp;#xFF0C;&amp;#x8FD9;&amp;#x6837;&amp;#x5C31;&amp;#x8FBE;&amp;#x5230;&amp;#x4E86;&amp;#x9694;&amp;#x79BB;&amp;#x7684;&amp;#x6548;&amp;#x679C;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Some possible ways to isolate change are Extract Method (the most common), Extract Object, and Method Object.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;migrate-data&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Migrate Data&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0D;&amp;#x77E5;&amp;#x6240;&amp;#x4E91;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;extract-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Extract Method&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;How do you make a long, complicated method easier to read? Turn a small part of it into a separate method and call the new method. &amp;#x5C06;&amp;#x4E00;&amp;#x4E2A;&amp;#x5927;&amp;#x51FD;&amp;#x6570;&amp;#x6253;&amp;#x788E;&amp;#xFF0C;&amp;#x4ECE;&amp;#x4E2D;&amp;#x63D0;&amp;#x53D6;&amp;#x4E00;&amp;#x4E9B;&amp;#x65B9;&amp;#x6CD5;&amp;#x51FA;&amp;#x6765;&amp;#x3002;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;how&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How&lt;/a&gt;&lt;/h4&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Find a region of the method that would make sense as its own method. Bodies of &lt;br&gt;loop, whole loops, and branches of conditionals are common candidates for extraction.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Make sure that there are no assignments to temporary variables declared outside the &lt;br&gt;scope of the region to be extracted.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Copy the code from the old method to the new method. Compile it.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;For each temporary variable or parameter of the original method used in the new &lt;br&gt;method, add a parameter to the new method.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Call the new method from the original method.&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;why&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Why&lt;/a&gt;&lt;/h4&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x589E;&amp;#x5F3A;&amp;#x53EF;&amp;#x8BFB;&amp;#x6027;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6D88;&amp;#x9664;&amp;#x91CD;&amp;#x590D;&amp;#xFF0C;&amp;#x5F53;&amp;#x4F60;&amp;#x53D1;&amp;#x73B0;&amp;#x6709;&amp;#x4E24;&amp;#x4E2A;&amp;#x5927;&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x6709;&amp;#x4E00;&amp;#x90E8;&amp;#x5206;&amp;#x662F;&amp;#x76F8;&amp;#x540C;&amp;#x7684;&amp;#xFF0C;&amp;#x90A3;&amp;#x5C31;&amp;#x53EF;&amp;#x4EE5;&amp;#x63D0;&amp;#x53D6;&amp;#x51FA;&amp;#x6765;&amp;#x79F0;&amp;#x4E3A;&amp;#x65B0;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x901A;&amp;#x8FC7;inline&amp;#x628A;&amp;#x4E00;&amp;#x5806;&amp;#x51FD;&amp;#x6570;&amp;#x653E;&amp;#x5728;&amp;#x4E00;&amp;#x8D77;&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x770B;&amp;#x770B;&amp;#x54EA;&amp;#x91CC;&amp;#x53EF;&amp;#x4EE5;extract &amp;#xFF08;&amp;#x8FD9;&amp;#x4E00;&amp;#x70B9;&amp;#x6211;&amp;#x611F;&amp;#x89C9;&amp;#x5E94;&amp;#x8BE5;&amp;#x653E;&amp;#x5728;How&amp;#x91CC;&amp;#x9762;&amp;#xFF0C;&amp;#x4F5C;&amp;#x8005;&amp;#x662F;&amp;#x60F3;&amp;#x627F;&amp;#x4E0A;&amp;#x542F;&amp;#x4E0B;&amp;#xFF0C;&amp;#x5C06;inline&amp;#x5427;&amp;#xFF09;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;inline-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Inline Method&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;inline&amp;#x5F88;&amp;#x7384;&amp;#x4E4E;&amp;#xFF0C;&amp;#x5176;&amp;#x5B9E;&amp;#x5C31;&amp;#x662F;&amp;#x628A;&amp;#x51FD;&amp;#x6570;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x590D;&amp;#x5236;&amp;#x5230;&amp;#x8C03;&amp;#x7528;&amp;#x7684;&amp;#x5730;&amp;#x65B9;&amp;#x3002;&amp;#x597D;&amp;#x5904;&amp;#x662F;&amp;#x4EC0;&amp;#x4E48;&amp;#xFF0C;&amp;#x4F5C;&amp;#x8005;&amp;#x6709;&amp;#x8BDD;&amp;#x8BF4;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;You might like the second version better, or you might not. The point to note here is that you can use Inline Method to play around with the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;flow of control&lt;/strong&gt;.  &lt;br&gt;&amp;#x5176;&amp;#x5B9E;&amp;#x5C31;&amp;#x662F;&amp;#x8BA9;&amp;#x4F60;&amp;#x628A;&amp;#x62BD;&amp;#x8C61;&amp;#x51FA;&amp;#x6765;&amp;#x7684;&amp;#x4E1C;&amp;#x897F;&amp;#x653E;&amp;#x5230;&amp;#x4E00;&amp;#x8D77;&amp;#x91CD;&amp;#x65B0;&amp;#x62BD;&amp;#x8C61;&amp;#xFF0C;&amp;#x770B;&amp;#x770B;&amp;#x4F1A;&amp;#x4E0D;&amp;#x4F1A;&amp;#x6709;&amp;#x66F4;&amp;#x597D;&amp;#x7684;&amp;#x7ED3;&amp;#x679C;&amp;#x3002;&amp;#x8FD9;&amp;#x4E5F;&amp;#x662F;&amp;#x4E00;&amp;#x79CD;&amp;#x91CD;&amp;#x6784;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x3002;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;extract-interface&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Extract Interface&lt;/a&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;how-1&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How&lt;/a&gt;&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x4F55;&amp;#x5C06;&amp;#x4E00;&amp;#x4E2A;&amp;#x7C7B;&amp;#x62BD;&amp;#x8C61;&amp;#x6210;&amp;#x4E00;&amp;#x4E2A;interface&amp;#x3002;&amp;#x6240;&amp;#x8C13;&amp;#x7684;interface&amp;#x5C31;&amp;#x662F;&amp;#x53EA;&amp;#x6709;&amp;#x7EAF;&amp;#x865A;&amp;#x51FD;&amp;#x6570;&amp;#x7684;&amp;#x7C7B;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Declare an interface. Sometimes the name of the existing class should be the name of the interface, in which case you should first rename the class.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Have the existing class implement the interface.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Add the necessary methods to the interface, expanding the visibility of the methods in the class if necessary.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Change type declarations from the class to the interface where possible.&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;why-1&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Why&lt;/a&gt;&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x91CC;&amp;#x63D0;&amp;#x5230;&amp;#x4E86;&amp;#x4E24;&amp;#x79CD;&amp;#x60C5;&amp;#x51B5;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x5F53;&amp;#x4F60;&amp;#x9700;&amp;#x8981;&amp;#x62BD;&amp;#x8C61;&amp;#x51FA;&amp;#x7236;&amp;#x7C7B;&amp;#x65F6;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x5F53;&amp;#x4F60;&amp;#x7528;&amp;#x4E86;Mock Object&amp;#xFF0C;&amp;#x73B0;&amp;#x5728;&amp;#x8981;&amp;#x4E3A;&amp;#x8FD9;&amp;#x4E2A;mock object&amp;#x62BD;&amp;#x8C61;&amp;#x51FA;&amp;#x4E00;&amp;#x4E2A;&amp;#x771F;&amp;#x6B63;&amp;#x7684;&amp;#x63A5;&amp;#x53E3;&amp;#x65F6;&amp;#x3002;&amp;#x4F5C;&amp;#x8005;&amp;#x8FD9;&amp;#x91CC;&amp;#x63D0;&amp;#x5230;&amp;#x4E86;&amp;#x4E00;&amp;#x4E2A;&amp;#x5C0F;&amp;#x6280;&amp;#x5DE7;&amp;#xFF0C;&amp;#x5728;&amp;#x8FD9;&amp;#x79CD;&amp;#x60C5;&amp;#x51B5;&amp;#x4E0B;&amp;#x547D;&amp;#x540D;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x5934;&amp;#x75BC;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x3002;&amp;#x4E0D;&amp;#x59A8;&amp;#x5C31;&amp;#x628A;&amp;#x65B0;&amp;#x7684;interface&amp;#x79F0;&amp;#x4E3A;IXXX&amp;#xFF0C;&amp;#x4F8B;&amp;#x5982;&amp;#xFF0C;&amp;#x539F;&amp;#x6765;&amp;#x7684;&amp;#x53EB;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;File&lt;/code&gt;&amp;#xFF0C;&amp;#x65B0;&amp;#x7684;&amp;#x63A5;&amp;#x53E3;&amp;#x5C31;&amp;#x79F0;&amp;#x4E3A;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;IFile&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;move-method&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Move Method&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5176;&amp;#x5B9E;&amp;#x5C31;&amp;#x662F;&amp;#x628A;&amp;#x4E00;&amp;#x4E2A;&amp;#x7C7B;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x79FB;&amp;#x5230;&amp;#x53E6;&amp;#x5916;&amp;#x4E00;&amp;#x4E2A;&amp;#x7C7B;&amp;#x91CC;&amp;#x9762;&amp;#x3002;&amp;#x4F46;&amp;#x4F5C;&amp;#x8005;&amp;#x63D0;&amp;#x5230;&amp;#x4E86;&amp;#x4E00;&amp;#x79CD;&amp;#x60C5;&amp;#x51B5;&amp;#x4E0B;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E2A;&amp;#x65B9;&amp;#x6CD5;&amp;#x4E0D;&amp;#x9002;&amp;#x7528;&amp;#x3002;&amp;#x5C31;&amp;#x662F;&amp;#x8FD9;&amp;#x4E2A;&amp;#x65B9;&amp;#x6CD5;&amp;#x4FEE;&amp;#x6539;&amp;#x4E86;&amp;#x539F;&amp;#x5148;&amp;#x90A3;&amp;#x4E2A;&amp;#x7C7B;&amp;#x7684;&amp;#x6570;&amp;#x636E;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;method-object&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Method Object&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x8BDD;&amp;#x9898;&amp;#x597D;&amp;#x50CF;&amp;#x5F88;&amp;#x65B0;&amp;#x9C9C;&amp;#xFF0C;&amp;#x4E4B;&amp;#x524D;&amp;#x770B;&amp;#x5230;&amp;#x8FC7;&amp;#x5F88;&amp;#x591A;&amp;#x6B21;&amp;#xFF0C;&amp;#x4F46;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x6DF1;&amp;#x7A76;&amp;#x3002;&amp;#x5148;&amp;#x770B;&amp;#x770B;How&amp;#xFF1A;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;how-2&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How&lt;/a&gt;&lt;/h4&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Create an object with the same parameters as the method.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Make the local variables also instance variables of the object.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Create one method called run(), whose body is the same as the body of the original method.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;In the original method, create a new object and invoke run().&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6709;&amp;#x4EC0;&amp;#x4E48;&amp;#x597D;&amp;#x5904;&amp;#xFF1F;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;why-2&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Why&lt;/a&gt;&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E24;&amp;#x4E2A;&amp;#x597D;&amp;#x5904;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x5728;&amp;#x6DFB;&amp;#x52A0;&amp;#x590D;&amp;#x6742;&amp;#x903B;&amp;#x8F91;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x6709;&amp;#x5BF9;&amp;#x4E00;&amp;#x4E2A;&amp;#x8FC7;&amp;#x7A0B;&amp;#x6709;&amp;#x591A;&amp;#x79CD;&amp;#x65B9;&amp;#x6CD5;&amp;#xFF0C;&amp;#x90A3;&amp;#x521B;&amp;#x5EFA;&amp;#x4E00;&amp;#x4E2A;&amp;#x65B9;&amp;#x6CD5;&amp;#x5BF9;&amp;#x8C61;&amp;#xFF0C;&amp;#x518D;&amp;#x6269;&amp;#x5C55;&amp;#x8D77;&amp;#x6765;&amp;#x5C31;&amp;#x5F88;&amp;#x7B80;&amp;#x5355;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x5728;&amp;#x4E00;&amp;#x4E2A;&amp;#x590D;&amp;#x6742;&amp;#x51FD;&amp;#x6570;&amp;#x91CC;extract interface&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x901A;&amp;#x5E38;&amp;#x4E00;&amp;#x6BB5;code&amp;#x9700;&amp;#x8981;5&amp;#xFF0C;6&amp;#x4E2A;&amp;#x53C2;&amp;#x6570;&amp;#xFF0C;&amp;#x8FD9;&amp;#x6837;&amp;#x7684;&amp;#x8BDD;&amp;#xFF0C;&amp;#x867D;&amp;#x7136;&amp;#x51FD;&amp;#x6570;&amp;#x62BD;&amp;#x53D6;&amp;#x51FA;&amp;#x6765;&amp;#x4E86;&amp;#xFF0C;&amp;#x4F46;&amp;#x662F;&amp;#x5199;&amp;#x6CD5;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x7B80;&amp;#x5316;&amp;#x591A;&amp;#x5C11;&amp;#x3002;&amp;#x8FD9;&amp;#x65F6;&amp;#x5019;&amp;#x5982;&amp;#x679C;&amp;#x6709;&amp;#x65B9;&amp;#x6CD5;&amp;#x5BF9;&amp;#x8C61;&amp;#xFF0C;&amp;#x5219;&amp;#x5728;&amp;#x7C7B;&amp;#x91CC;&amp;#x9762;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x72EC;&amp;#x7ACB;&amp;#x7684;&amp;#x540D;&amp;#x5B57;&amp;#x7A7A;&amp;#x95F4;&amp;#xFF0C;&amp;#x4F1A;&amp;#x63D0;&amp;#x4F9B;&amp;#x989D;&amp;#x5916;&amp;#x7684;&amp;#x4FBF;&amp;#x5229;&amp;#x3002;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;add-parameter&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Add Parameter&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5C31;&amp;#x662F;&amp;#x52A0;&amp;#x4E00;&amp;#x4E2A;&amp;#x53C2;&amp;#x6570;&amp;#xFF0C;&amp;#x6CA1;&amp;#x4EC0;&amp;#x4E48;&amp;#x7279;&amp;#x522B;&amp;#x7684;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;method-parameter-to-constructor-parameter&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Method Parameter to Constructor Parameter&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5C31;&amp;#x662F;&amp;#x628A;&amp;#x65B9;&amp;#x6CD5;&amp;#x8C03;&amp;#x7528;&amp;#x7684;&amp;#x53C2;&amp;#x6570;&amp;#xFF0C;&amp;#x53D8;&amp;#x6210;&amp;#x7C7B;&amp;#x6210;&amp;#x5458;&amp;#x53D8;&amp;#x91CF;&amp;#x3002;&amp;#x4E3A;&amp;#x4EC0;&amp;#x4E48;&amp;#x8981;&amp;#x8FD9;&amp;#x4E48;&amp;#x505A;&amp;#xFF1F;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;If you pass the same parameter to several different methods in the same object, then you can simplify the API by passing the parameter once (eliminating duplication). You can run this refactoring in reverse if you find that an instance variable is used in only one method.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x65B9;&amp;#x6CD5;&amp;#x7B80;&amp;#x5355;&amp;#x5B9E;&amp;#x7528;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&lt;a name=&#34;chapter-32-mastering-tdd&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Chapter 32. Mastering TDD&lt;/a&gt;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7ECF;&amp;#x8FC7;31&amp;#x7AE0;&amp;#x7684;&amp;#x5B66;&amp;#x4E60;&amp;#xFF0C;&amp;#x4F5C;&amp;#x8005;&amp;#x8BA4;&amp;#x4E3A;&amp;#x6211;&amp;#x4EEC;&amp;#x5DF2;&amp;#x7ECF;&amp;#x5B8C;&amp;#x5B8C;&amp;#x5168;&amp;#x5168;&amp;#x6709;&amp;#x80FD;&amp;#x529B;&amp;#x6210;&amp;#x4E3A;&amp;#x4E00;&amp;#x4E2A;&amp;#x5408;&amp;#x683C;&amp;#x7684;TDD&amp;#x7A0B;&amp;#x5E8F;&amp;#x5458;&amp;#x4E86;&amp;#x3002;&amp;#x5728;&amp;#x8FD9;&amp;#x4E00;&amp;#x7AE0;&amp;#x91CC;&amp;#xFF0C;&amp;#x4F5C;&amp;#x8005;&amp;#x53C8;&amp;#x603B;&amp;#x7ED3;&amp;#x51FA;&amp;#x5F88;&amp;#x591A;TDD&amp;#x521D;&amp;#x5B66;&amp;#x8005;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#xFF0C;&amp;#x7ED9;&amp;#x4E88;&amp;#x56DE;&amp;#x7B54;&amp;#x3002;&amp;#x7B54;&amp;#x6848;&amp;#x90FD;&amp;#x662F;&amp;#x4E00;&amp;#x4E9B;&amp;#x5F88;&amp;#x5B9E;&amp;#x7528;&amp;#x7684;&amp;#x5FE0;&amp;#x544A;&amp;#xFF0C;&amp;#x7279;&amp;#x6458;&amp;#x53D6;&amp;#x5982;&amp;#x4E0B;&amp;#x3002;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;what-dont-you-have-to-test&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;What don&amp;#x2019;t you have to test?&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F5C;&amp;#x8005;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x76F2;&amp;#x76EE;&amp;#x5F3A;&amp;#x8C03;&amp;#x6D4B;&amp;#x8BD5;&amp;#x91CD;&amp;#x8981;&amp;#xFF0C;&amp;#x4E5F;&amp;#x6CA1;&amp;#x6709;&amp;#x8BF4;&amp;#x4EFB;&amp;#x4F55;&amp;#x5730;&amp;#x65B9;&amp;#x90FD;&amp;#x8981;&amp;#x5199;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;&amp;#x4F5C;&amp;#x8005;&amp;#x8BF4;&amp;#xFF1A;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Unless you have reason to distrust it, don&amp;#x2019;t test code from others.  &lt;br&gt;&amp;#x201C;Write tests until fear is transformed into boredom.&amp;#x201D;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x53EA;&amp;#x5728;&amp;#x4F60;&amp;#x4E0D;&amp;#x76F8;&amp;#x4FE1;&amp;#x4F60;&amp;#x7684;code&amp;#x65F6;&amp;#xFF0C;&amp;#x5BF9;&amp;#x4ED6;&amp;#x8FDB;&amp;#x884C;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E5F;&amp;#x4E0D;&amp;#x662F;&amp;#x4E3A;&amp;#x4E86;&amp;#x6D4B;&amp;#x8BD5;&amp;#x800C;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x6216;&amp;#x8005;&amp;#x4E3A;&amp;#x4E86;&amp;#x4EE3;&amp;#x7801;&amp;#x7684;&amp;#x5065;&amp;#x58EE;&amp;#xFF0C;&amp;#x6D4B;&amp;#x8BD5;&amp;#x53EA;&amp;#x662F;&amp;#x4E3A;&amp;#x4E86;&amp;#x51CF;&amp;#x5C11;&amp;#x4F60;&amp;#x7684;&amp;#x7126;&amp;#x8651;&amp;#x3002;&amp;#x8BA9;&amp;#x4F60;&amp;#x4E0D;&amp;#x8981;&amp;#x4ECE;&amp;#x62C5;&amp;#x5FC3;&amp;#x53D8;&amp;#x6210;&amp;#x70E6;&amp;#x8E81;&amp;#xFF0C;&amp;#x4EC5;&amp;#x6B64;&amp;#x800C;&amp;#x5DF2;&amp;#x3002; &lt;br&gt;&amp;#x54CE;&amp;#xFF01;&amp;#x771F;&amp;#x662F;&amp;#x918D;&amp;#x9190;&amp;#x704C;&amp;#x9876;&amp;#xFF01;&amp;#x76F8;&amp;#x89C1;&amp;#x6068;&amp;#x665A;&amp;#xFF01;&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;how-do-you-know-if-you-have-good-tests&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How do you know if you have good tests?&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4EC0;&amp;#x4E48;&amp;#x6837;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E0D;&amp;#x597D;&amp;#xFF1F;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Long setup code. &amp;#x5982;&amp;#x679C;&amp;#x4E3A;&amp;#x4E86;&amp;#x505A;&amp;#x4E00;&amp;#x4E2A;&amp;#x7B80;&amp;#x5355;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x53EF;&amp;#x80FD;&amp;#x53EA;&amp;#x6709;&amp;#x51E0;&amp;#x884C;&amp;#x65AD;&amp;#x8A00;&amp;#xFF0C;&amp;#x800C;&amp;#x4E3A;&amp;#x6B64;&amp;#x521B;&amp;#x5EFA;&amp;#x4E00;&amp;#x4E2A;&amp;#x5DE8;&amp;#x5927;&amp;#x7684;&amp;#x5BF9;&amp;#x8C61;&amp;#xFF0C;&amp;#x90A3;&amp;#x8BF4;&amp;#x660E;&amp;#x54EA;&amp;#x91CC;&amp;#x80AF;&amp;#x5B9A;&amp;#x51FA;&amp;#x95EE;&amp;#x9898;&amp;#x4E86;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Setup duplication. &amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x53D1;&amp;#x73B0;&amp;#x6709;&amp;#x51E0;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x62E5;&amp;#x6709;&amp;#x76F8;&amp;#x540C;&amp;#x6216;&amp;#x76F8;&amp;#x4F3C;&amp;#x7684;setup&amp;#x4EE3;&amp;#x7801;&amp;#xFF0C;&amp;#x90A3;&amp;#x8BF4;&amp;#x660E;&amp;#x4F60;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E2D;&amp;#x6709;&amp;#x91CD;&amp;#x590D;&amp;#x7684;&amp;#x5730;&amp;#x65B9;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Long running tests. TDD tests that run a long time won&amp;#x2019;t be run often. Suites that take longer than ten minutes &lt;br&gt;inevitably get trimmed. &amp;#x4E00;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5957;&amp;#x4EF6;&amp;#x4E0D;&amp;#x8981;&amp;#x8D85;&amp;#x8FC7;&amp;#x5341;&amp;#x5206;&amp;#x949F;&amp;#x3002;&amp;#x5426;&amp;#x5219;&amp;#xFF0C;&amp;#x53CD;&amp;#x590D;&amp;#x8FD0;&amp;#x884C;&amp;#x7684;&amp;#x673A;&amp;#x4F1A;&amp;#x5C31;&amp;#x4F1A;&amp;#x6025;&amp;#x5267;&amp;#x964D;&amp;#x4F4E;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Fragile tests. Tests that break unexpectedly suggest that one part of the application is surprisingly affecting another part. &amp;#x5982;&amp;#x679C;&amp;#x6D4B;&amp;#x8BD5;&amp;#x88AB;&amp;#x65E0;&amp;#x60C5;&amp;#x6253;&amp;#x65AD;&amp;#xFF0C;&amp;#x8BF4;&amp;#x660E;&amp;#x4F60;&amp;#x7684;&amp;#x7A0B;&amp;#x5E8F;&amp;#x91CC;&amp;#x6709;&amp;#x8026;&amp;#x5408;&amp;#x3002;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;how-does-tdd-lead-to-frameworks&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How does TDD lead to frameworks?&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x53C8;&amp;#x88AB;&amp;#x918D;&amp;#x9190;&amp;#x704C;&amp;#x9876;&amp;#x4E86;&amp;#xFF01;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;TDD appears to stand this advice on its head: &lt;b style=&#34;font-weight: bold;&#34;&gt;&lt;font color=&#34;IndianRed&#34; style=&#34;line-height: 1.6;&#34;&gt;&amp;#x201C;Code for tomorrow, design for today.&amp;#x201D; &lt;/font&gt;&lt;/b&gt;Here&amp;#x2019;s what happens in practice. &amp;#x4E0D;&amp;#x8981;&amp;#x4E3A;&amp;#x672A;&amp;#x6765;&amp;#x8003;&amp;#x8651;&amp;#x90A3;&amp;#x4E48;&amp;#x591A;&amp;#xFF0C;&amp;#x7B80;&amp;#x5355;&amp;#x7684;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x901A;&amp;#x8FC7;&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x53CA;&amp;#x65F6;&amp;#x7684;&amp;#x505A;&amp;#x91CD;&amp;#x6784;&amp;#x6D88;&amp;#x9664;&amp;#x91CD;&amp;#x590D;&amp;#xFF0C;&amp;#x53CD;&amp;#x800C;&amp;#x80FD;&amp;#x8FBE;&amp;#x5230;&amp;#x66F4;&amp;#x597D;&amp;#x7684;&amp;#x8BBE;&amp;#x8BA1;&amp;#x6846;&amp;#x67B6;&amp;#xFF08;frameworks&amp;#xFF09;&amp;#x3002;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;how-much-feedback-do-you-need&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How much feedback do you need?&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x91CC;&amp;#x8BF4;&amp;#x7684;&amp;#x548C;&amp;#x4E4B;&amp;#x524D;&amp;#x4E00;&amp;#x76F4;&amp;#x5F3A;&amp;#x8C03;&amp;#x7684;&amp;#x601D;&amp;#x60F3;&amp;#x5F88;&amp;#x4E00;&amp;#x81F4;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;If our knowledge of the implementation gives us confidence even without a test, then we will not write that test. &lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;when-should-you-delete-tests&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;When should you delete tests?&lt;/a&gt;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The first criterion for your tests is &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;confidence&lt;/strong&gt;. Never delete a test if it reduces your confidence in the behavior of the system.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The second criterion is &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;communication&lt;/strong&gt;. If you have two tests that exercise the same path through the code, but they speak to different scenarios for a reader, leave them alone.&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;can-you-drive-development-with-application-level-tests&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Can you drive development with application-level tests?&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0D;&amp;#x8981;&amp;#x5C1D;&amp;#x8BD5;&amp;#x505A;&amp;#x5E94;&amp;#x7528;&amp;#x7EA7;&amp;#x522B;&amp;#x7684;test&lt;/p&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;how-do-you-switch-to-tdd-midstream&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How do you switch to TDD midstream?&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x8FD9;&amp;#x4E5F;&amp;#x662F;&amp;#x6211;&amp;#x60F3;&amp;#x95EE;&amp;#x7684;&amp;#xFF0C;&amp;#x4F5C;&amp;#x8005;&amp;#x7684;&amp;#x56DE;&amp;#x7B54;&amp;#x662F;&amp;#x8FD9;&amp;#x672C;&amp;#x4E66;&amp;#x5C31;&amp;#x662F;&amp;#x4E3A;&amp;#x4E86;&amp;#x8FD9;&amp;#x4E2A;&amp;#x800C;&amp;#x5199;&amp;#x7684;&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;There is a whole book (or books) to be written about switching to TDD when you have lots of code. What follows is necessarily only a teaser.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x600E;&amp;#x4E48;&amp;#x505A;&amp;#xFF1F;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;So first we have to decide to limit the scope of our changes. &lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Second, we have to break the deadlock between tests and refactoring.  &lt;br&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x600E;&amp;#x4E48;&amp;#x83B7;&amp;#x5F97;feedback &lt;br&gt;1) We can get feedback other ways than with tests, like working very carefully and with a partner.  &lt;br&gt;2) We can get feedback at a gross level, like system-level tests that we know aren&amp;#x2019;t adequate but give us some confidence. With this feedback, we can make the areas we have to change more accepting of change.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&lt;a name=&#34;how-does-tdd-relate-to-the-practices-of-extreme-programming&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;How does TDD relate to the practices of Extreme Programming?&lt;/a&gt;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x540D;&amp;#x8BCD;&amp;#x89E3;&amp;#x91CA;&amp;#xFF1A;&lt;a href=&#34;http://baike.baidu.com/link?url=NgfFcw4hxjOQHRtEArm4buq177_Xw562MDhrOykDcd-0EOv1xB_Oz3eslAn9X65cFdUel2xI7tTiqB3Gqyz3Ja&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Extreme Programming - XP&lt;/a&gt;&amp;#x6781;&amp;#x9650;&amp;#x7F16;&amp;#x7A0B;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x6781;&amp;#x9650;&amp;#x7F16;&amp;#x7A0B;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x8F7B;&amp;#x91CF;&amp;#x7EA7;&amp;#x7684;&amp;#x3001;&amp;#x7075;&amp;#x5DE7;&amp;#x7684;&amp;#x8F6F;&amp;#x4EF6;&amp;#x5F00;&amp;#x53D1;&amp;#x65B9;&amp;#x6CD5;&amp;#xFF1B;&amp;#x540C;&amp;#x65F6;&amp;#x5B83;&amp;#x4E5F;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x975E;&amp;#x5E38;&amp;#x4E25;&amp;#x8C28;&amp;#x548C;&amp;#x5468;&amp;#x5BC6;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x3002;&amp;#x5B83;&amp;#x7684;&amp;#x57FA;&amp;#x7840;&amp;#x548C;&amp;#x4EF7;&amp;#x503C;&amp;#x89C2;&amp;#x662F;&amp;#x4EA4;&amp;#x6D41;&amp;#x3001;&amp;#x6734;&amp;#x7D20;&amp;#x3001;&amp;#x53CD;&amp;#x9988;&amp;#x548C;&amp;#x52C7;&amp;#x6C14;&amp;#xFF1B;&amp;#x5373;&amp;#xFF0C;&amp;#x4EFB;&amp;#x4F55;&amp;#x4E00;&amp;#x4E2A;&amp;#x8F6F;&amp;#x4EF6;&amp;#x9879;&amp;#x76EE;&amp;#x90FD;&amp;#x53EF;&amp;#x4EE5;&amp;#x4ECE;&amp;#x56DB;&amp;#x4E2A;&amp;#x65B9;&amp;#x9762;&amp;#x5165;&amp;#x624B;&amp;#x8FDB;&amp;#x884C;&amp;#x6539;&amp;#x5584;&amp;#xFF1A;&amp;#x52A0;&amp;#x5F3A;&amp;#x4EA4;&amp;#x6D41;&amp;#xFF1B;&amp;#x4ECE;&amp;#x7B80;&amp;#x5355;&amp;#x505A;&amp;#x8D77;&amp;#xFF1B;&amp;#x5BFB;&amp;#x6C42;&amp;#x53CD;&amp;#x9988;&amp;#xFF1B;&amp;#x52C7;&amp;#x4E8E;&amp;#x5B9E;&amp;#x4E8B;&amp;#x6C42;&amp;#x662F;&amp;#x3002;XP&amp;#x662F;&amp;#x4E00;&amp;#x79CD;&amp;#x8FD1;&amp;#x87BA;&amp;#x65CB;&amp;#x5F0F;&amp;#x7684;&amp;#x5F00;&amp;#x53D1;&amp;#x65B9;&amp;#x6CD5;&amp;#xFF0C;&amp;#x5B83;&amp;#x5C06;&amp;#x590D;&amp;#x6742;&amp;#x7684;&amp;#x5F00;&amp;#x53D1;&amp;#x8FC7;&amp;#x7A0B;&amp;#x5206;&amp;#x89E3;&amp;#x4E3A;&amp;#x4E00;&amp;#x4E2A;&amp;#x4E2A;&amp;#x76F8;&amp;#x5BF9;&amp;#x6BD4;&amp;#x8F83;&amp;#x7B80;&amp;#x5355;&amp;#x7684;&amp;#x5C0F;&amp;#x5468;&amp;#x671F;&amp;#xFF1B;&amp;#x901A;&amp;#x8FC7;&amp;#x79EF;&amp;#x6781;&amp;#x7684;&amp;#x4EA4;&amp;#x6D41;&amp;#x3001;&amp;#x53CD;&amp;#x9988;&amp;#x4EE5;&amp;#x53CA;&amp;#x5176;&amp;#x5B83;&amp;#x4E00;&amp;#x7CFB;&amp;#x5217;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#xFF0C;&amp;#x5F00;&amp;#x53D1;&amp;#x4EBA;&amp;#x5458;&amp;#x548C;&amp;#x5BA2;&amp;#x6237;&amp;#x53EF;&amp;#x4EE5;&amp;#x975E;&amp;#x5E38;&amp;#x6E05;&amp;#x695A;&amp;#x5F00;&amp;#x53D1;&amp;#x8FDB;&amp;#x5EA6;&amp;#x3001;&amp;#x53D8;&amp;#x5316;&amp;#x3001;&amp;#x5F85;&amp;#x89E3;&amp;#x51B3;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x548C;&amp;#x6F5C;&amp;#x5728;&amp;#x7684;&amp;#x56F0;&amp;#x96BE;&amp;#x7B49;&amp;#xFF0C;&amp;#x5E76;&amp;#x6839;&amp;#x636E;&amp;#x5B9E;&amp;#x9645;&amp;#x60C5;&amp;#x51B5;&amp;#x53CA;&amp;#x65F6;&amp;#x5730;&amp;#x8C03;&amp;#x6574;&amp;#x5F00;&amp;#x53D1;&amp;#x8FC7;&amp;#x7A0B;&amp;#x3002;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;TDD&amp;#x4E0E;XP&amp;#x7684;&amp;#x5171;&amp;#x901A;&amp;#x4E4B;&amp;#x5904;&amp;#xFF1A;&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Pairing&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Work fresh&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Continuous integration&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Simple design&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Refactoring&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Continuous delivery&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;center style=&#34;display:none&#34;&gt;%23Test-Driven%20Development%0A@%28%u5B66%u4E60%u7B14%u8BB0%29%5BProgramming%2C%20TDD%5D%0A%0A%5BTOC%5D%0A%0A%u6700%u8FD1%u5728%u8BFBKent%20Beck%u7684%u300ATest-Driven%20Development%20By%20Example%u300B%uFF0C%u8BA9%u6211%u5BF9%u8F6F%u4EF6%u5F00%u53D1%u6709%u4E86%u65B0%u7684%u8BA4%u8BC6%u3002%0A%3E%u5199test%u5E76%u4E0D%u4E3A%u4E86%u6D4B%u8BD5%u800C%u6D4B%u8BD5%uFF0C%u662F%u4E3A%u4E86%u589E%u5F3A%u5BF9%u7A0B%u5E8F%u7684%u4FE1%u5FC3%uFF0C%u51CF%u5C11%u7126%u8651%u3002%u90A3%u4E48%u5982%u4F55%u51CF%u5C11%u7126%u8651%u5462%uFF0C%u662F%u901A%u8FC7%u4E00%u6B21%u53EA%u5173%u5FC3%u4E00%u4EF6%u4E8B%u60C5%u3002%u5982%u4F55%u4E00%u6B21%u53EA%u5173%u5FC3%u4E00%u4EF6%u4E8B%u60C5%uFF0C%u8FD9%u5C31%u662FTDD%u3002%0A%0A%u672C%u4E66%u5206%u4E09%u4E2A%u90E8%u5206%0A1.%20The%20Money%20Example%0A2.%20The%20xUnit%20Example%0A3.%20Patterns%20for%20Test-Driven%20Development%0A%u524D%u4E24%u4E2A%u90E8%u5206%u8BB2%u4E86%u4E24%u4E2A%u4F8B%u5B50%uFF0C%u6765%u9610%u8FF0%u5982%u4F55%u8FDB%u884CTDD%u5F00%u53D1%uFF0C%u6700%u540E%u4E00%u4E2A%u90E8%u5206%u7B97%u662F%u603B%u7ED3%uFF0C%u5168%u4E66%u7684%u7CBE%u534E%u6240%u5728%u3002%u672C%u6587%u4E0D%u6253%u7B97%u8BB2%u8FD9%u4E24%u4E2A%u4F8B%u5B50%u4E86%uFF0C%u56E0%u4E3A%u4F8B%u5B50%u6700%u597D%u81EA%u5DF1%u624B%u5199%u4E00%u904D%uFF0C%u624D%u53EF%u4EE5%u52A0%u6DF1%u4E86%u89E3%u3002%u672C%u6587%u4E3B%u8981%u6458%u5F55%u4E00%u4E9BTDD%u7684%u6A21%u5F0F%u65B9%u6CD5%28pattern%29%u3002%0A%0A%u4E0B%u9762%u8FD9%u6BB5%u8BDD%u6765%u81EA%u7B2C%u4E00%u7AE0%uFF0C%u63D0%u7EB2%u6308%u9886%uFF1A%0A%3EMy%20goal%20is%20for%20you%20to%20see%20the%20rhythm%20of%20Test-Driven%20Development%20%28TDD%29%2C%20which%20can%20be%20summed%20up%20as%20follows.%0A%3E%201.%20Quickly%20add%20a%20test.%0A%3E%202.%20Run%20all%20tests%20and%20see%20the%20new%20one%20fail.%0A%3E%203.%20Make%20a%20little%20change.%0A%3E%204.%20Run%20all%20tests%20and%20see%20them%20all%20succeed.%0A%3E%205.%20Refactor%20to%20remove%20duplication.%0A%0A%3EThe%20surprises%20are%20likely%20to%20include.%0A%3E%20*%20How%20each%20test%20can%20cover%20a%20**small%20increment**%20of%20functionality.%0A%3E%20*%20How%20**small%20and%20ugly%20the%20changes**%20can%20be%20to%20make%20the%20new%20tests%20run.%0A%3E%20*%20How%20often%20the%20tests%20are%20run.%0A%3E%20*%20How%20many%20teensy-weensy%20steps%20make%20up%20the%20refactorings.%0A%0A%u8FD9%u5C31%u662FTDD%u7684%u7CBE%u9AD3%u3002%u6309%u4F5C%u8005%u7684%u8BF4%u6CD5%u5C31%u662F%60Green/Red/Green/Refactor%60%u8282%u594F%u3002%0A%u8FD9%u4E5F%u56DE%u7B54%u4E86%u6211%u4E00%u76F4%u4EE5%u6765%u7684%u56F0%u6270%uFF0C%u5230%u5E95%u5E94%u8BE5%u5982%u4F55%u8BBE%u8BA1%u4E00%u6BB5%u7A0B%u5E8F%uFF0C%u5230%u5E95%u8981%u8003%u8651%u591A%u5C11%u79CD%u60C5%u51B5%u3002%u6309%u7167TDD%u7684%u5EFA%u8BAE%u5C31%u662F%uFF0C%u9996%u5148%u5199%u6D4B%u8BD5%uFF0C%u7136%u540E%u4EE3%u7801%u600E%u4E48%u5FEB%u600E%u4E48%u6765%uFF0C%u4E0D%u7BA1%u6709%u591Augly%uFF0C%u7136%u540E%u5982%u679C%u53D1%u73B0%u91CD%u590D%uFF0C%u53CA%u65F6%u505A%u91CD%u6784%u3002%u4E0D%u8981%u8003%u8651%u4EC0%u4E48%u6269%u5C55%u6027%u4E4B%u7C7B%u7684%uFF0C%u8FD9%u4E2A%u8BBE%u8BA1%u65B9%u5F0F%u672C%u8EAB%u5C31%u80FD%u63D0%u4F9B%u3002%u56E0%u4E3A%u5B83%u63D0%u9AD8%u4E86%u8FD0%u884C%u6D4B%u8BD5%u548C%u91CD%u6784%u7684%u9891%u7387%uFF0C%u65E2%u63D0%u5347%u4E86%u7F16%u7801%u8005%u5BF9%u7A0B%u5E8F%u7684%u4FE1%u5FC3%uFF0C%u4E5F%u964D%u4F4E%u4E86%u4E0D%u5408%u7406%u8BBE%u8BA1%u7684%u53EF%u80FD%u6027%u3002%0A%0A%23%23Chapter%2025.%20Test-Driven%20Development%20Patterns%0A%u4E66%u4E2D%u5F15%u5165%u4E86%u5F88%u591A%u5F71%u50CF%u56FE%28Influence%20Diagram%29%uFF0C%u5F88%u5F62%u8C61%u7684%u8BF4%u660E%u4E86%uFF0C%u5F15%u5165TDD%u80FD%u7ED9%u6211%u4EEC%u65E5%u5E38%u7684%u5F00%u53D1%u5DE5%u4F5C%u5F15%u5165%u4EC0%u4E48%u597D%u5904%u3002%0A%21%5BAlt%20text%5D%28./1455616022147.png%29%0A%3EThis%20is%20a%20positive%20feedback%20loop.%20%0A%3E-%20The%20more%20stress%20you%20feel%2C%20the%20less%20testing%20you%20will%20do.%20%0A%3E-%20The%20less%20testing%20you%20do%2C%20the%20more%20errors%20you%20will%20make.%20%0A%3E-%20The%20more%20errors%20you%20make%2C%20the%20more%20stress%20you%20feel.%20%0A%3E-%20Rinse%20and%20repeat.%0A%0A%23%23%23Isolated%20Test%0A%u80FD%u5C06%u5927%u5757%u7684%u6D4B%u8BD5%u5206%u5272%u6210%u677E%u8026%u5408%u7684%u5C0F%u6D4B%u8BD5%u4E0D%u5BB9%u6613%uFF0C%u4F46%u662F%u597D%u5904%u5927%u5927%u7684%u3002%u4F5C%u8005%u8BF4%uFF1A%0A%3EI%20never%20knew%20exactly%20how%20to%20achieve%20high%20cohesion%20and%20loose%20coupling%20regularly%20until%20I%20started%20writing%20isolated%20tests.%0A%23%23%23Test%20List%0A%u6211%u4EEC%u8981%u600E%u4E48%u5F00%u59CBTDD%u5462%uFF1F%u4F5C%u8005%u7ED9%u51FA%u4E86%u5F88%u5177%u64CD%u4F5C%u6027%u7684%u5EFA%u8BAE%uFF1A%0A%3EBefore%20you%20begin%2C%20write%20a%20list%20of%20all%20the%20tests%20you%20know%20you%20will%20have%20to%20write.%0A%u8FD9%u4E2Alist%u4E0A%u5199%u70B9%u4EC0%u4E48%u5462%uFF1F%0A%3E%201.%20Put%20on%20the%20list%20examples%20of%20every%20operation%20that%20you%20know%20you%20need%20to%20implement.%20%u8981%u54EA%u4E9B%u64CD%u4F5C%u3002%0A%3E%202.%20for%20those%20operations%20that%20don%27t%20already%20exist%2C%20put%20the%20null%20version%20of%20that%20operation%20on%20the%20list.%u54EA%u4E9B%u64CD%u4F5C%u6CA1%u5B9E%u73B0%uFF0C%u5199%u4E0A%u5B58%u6839%u3002%0A%3E%203.%20List%20all%20of%20the%20refactorings%20that%20you%20think%20you%20will%20have%20to%20do%20in%20order%20to%20have%20clean%20code%20at%20the%20end%20of%20this%20session.%20%u5B8C%u6210%u4E4B%u540E%uFF0C%u5217%u51FA%u9700%u8981%u91CD%u6784%u7684%u5730%u65B9%u3002%u800C%u5982%u679C%u6709%u5927%u7684%u91CD%u6784%u7684%u9700%u8981%u65F6%uFF0C%u653E%u5230later%20list%u91CC%u9762%uFF0C%u628A%u624B%u91CC%u7684%u4E8B%u60C5%u5904%u7406%u5B8C%uFF0C%u518D%u53BB%u5904%u7406%u5927%u7684%u91CD%u6784%u3002%0A%0A%u770B%u4F5C%u8005%u65F6%u523B%u5728%u5F3A%u8C03TDD%u5C31%u662Ftiny%20steps%uFF1A%0A%3E%20The%20pure%20form%20of%20TDD%2C%20wherein%20you%20are%20never%20more%20than%20one%20change%20away%20from%20a%20green%20bar%2C%20is%20like%20that%20three-out-of-four%20rule.%0A%23%23%23Test%20First%0A%u4EC0%u4E48%u65F6%u5019%u5199%u6D4B%u8BD5%uFF1F%0A%u7B54%uFF1A%u5728%u5199code%u4E4B%u524D%uFF0C%u56E0%u4E3A%u4E00%u65E6%u4F60%u5F00%u59CB%u5199code%uFF0C%u4F60%u53EF%u80FD%u5C31%u8EAB%u9677%u6CE5%u6F6D%uFF0C%u65E0%u6687%u987E%u53CAtest%20case%u4E86%u3002%0A%0A%23%23Chapter%2026.%20Red%20Bar%20Patterns%0A%23%23%23One%20Step%20Test%0A%3EEach%20test%20should%20represent%20one%20step%20toward%20your%20overall%20goal.%0A%23%23%23Starter%20Test%0A%u5982%u4F55%u5F00%u59CB%u5199%u6D4B%u8BD5%uFF1F%u4E0D%u8981%u4E00%u5F00%u59CB%u5C31%u60F3%u5199%u4E00%u4E2A%u771F%u6B63%u7684%u6D4B%u8BD5%uFF0C%u56E0%u4E3A%u8FD9%u6837%u4F1A%u4E00%u6B21%u9762%u5BF9%u592A%u591A%u7684%u95EE%u9898%u3002%u4F5C%u8005%u5EFA%u8BAE%u5C1D%u8BD5%u4ECE%u4E00%u4E2A%u7B80%u5355%u7684%u6D4B%u8BD5%u8F93%u5165%u8F93%u51FA%u5F00%u59CB%u3002%u8FD9%u6837%u4EE5%u4FBF%u4E8E%u4F60%u4ECEGreenxun%u8FC5%u901F%u5F00%u59CB%u4F60%u7684Green/Red/Green/Refactor%u8282%u594F%u3002%u4F5C%u8005%u4E3E%u4E86%u4E00%u4E2A%u4EA7%u751F%u591A%u8FB9%u5F62%u7684%u4F8B%u5B50%uFF1A%0A%60%60%60%20java%0AReducer%20r%3D%20new%20Reducer%28new%20Polygon%28%29%29%3B%20%0AassertEquals%280%2C%20reducer.result%28%29.npoints%29%3B%0A%60%60%60%0A%u4E0D%u592A%u61C2%u8FD9%u4E2A%u95EE%u9898%uFF0C%u4E0D%u8FC7%u53EF%u4EE5%u4ECE%u4E2D%u770B%u51FA%u4F5C%u8005%u5BF9TDD%u7684%u89E3%u91CA%u3002%u95EE%u9898%u672C%u8EAB%u662F%u8981%u89E3%u4E00%u4E2A%u964D%u4F4E%u591A%u8FB9%u5F62%u8FB9%u6570%u7684%u95EE%u9898%u3002%u4F5C%u8005%u7684%u542F%u52A8%u6D4B%u8BD5%u5C31%u662F%u4E00%u4E2A%u201C0%u201D%u8FB9%u591A%u8FB9%u5F62%uFF0C%u90A3%u7ED3%u679C%u4E00%u5B9A%u662F%220%22%u8FB9%u591A%u8FB9%u5F62%u3002%u5BF9%u5B9E%u9645%u610F%u4E49%u5F88%u8352%u8BDE%uFF0C%u4F46%u5BF9%u6D4B%u8BD5%u6765%u8BF4%u662F%u4E00%u4E2A%u4E0D%u9519%u7684%u5F00%u59CB%u3002%u7B26%u5408%u6211%u4EEC%u7684%u9884%u671F%uFF0C%u7B80%u5355%u800C%u4E14%u53C8%60represent%20one%20step%20toward%20your%20overall%20goal%60%u3002%0A%23%23%23Explanation%20Test%0A%u8FD9%u4E00%u7AE0%u662F%u5728%u8BF4%u5982%u4F55%u4E0D%u7528%u5F3A%u8FEB%u7684%u624B%u6BB5%u8BA9%u975ETDD%u7684%u56E2%u961F%u6210%u5458%u80FD%u8F6C%u5411TDD%u3002%u5F53%u5F00%u53D1%u8005%u5411%u4F60%u89E3%u91CA%u4ED6%u7684%u7A0B%u5E8F%u65F6%uFF0C%u4F60%u90FD%u53EF%u4EE5%u5C06%u4E4B%u8F6C%u5316%u4E3Atest%20case%u3002%0A%u672C%u4E66%u8FD8%u6709%u4E00%u4E2A%u5F88%u6709%u7279%u8272%u7684%u5730%u65B9%u662F%uFF0C%u8D2F%u7A7F%u5168%u6587%uFF0C%u4F5C%u8005%u603B%u662F%u5728%u7ECF%u610F%u4E0D%u7ECF%u610F%u95F4%u6D41%u9732%u7740%u5404%u79CD%u5B9D%u8D35%u7684%u5DE5%u4F5C%u7ECF%u9A8C%uFF1A%u5982%u4F55%u957F%u671F%u4FDD%u6301%u66F4%u9AD8%u6548%u7684%u7F16%u7A0B%uFF1F%u5982%u679C%u4F60%u662F%u7ECF%u7406%uFF0C%u4F60%u5982%u4F55%u4E0E%u4F60%u7684%u56E2%u961F%u6210%u5458%u4E00%u8D77%u5DE5%u4F5C%uFF1F%u7B49%u7B49%u3002%u8FD9%u4E00%u7AE0%u5C31%u6709%u8FD9%u6837%u4E00%u53E5%u8BDD%uFF1A%0A%3EIf%20you%27re%20a%20manager%20or%20a%20leader%2C%20you%20can%27t%20force%20anyone%20to%20change%20the%20way%20they%20work.%0A%3EWhat%20can%20you%20do%3F%20A%20simple%20start%20is%20to%20start%20asking%20for%20explanations%20in%20terms%20of%20test%20cases%3A%20%22Let%20me%20see%20if%20I%20understand%20what%20you%27re%20saying.%0A%0A%23%23%23Learning%20Test%0A%u8FD9%u4E00%u7AE0%u8BB2%u4E86%u6D4B%u8BD5%u9A71%u52A8%u5F00%u53D1%u9488%u5BF9%u96C6%u6210%u7B2C%u4E09%u65B9%u5E93%u7684%u4F18%u52BF%u3002%0A%23%23%23Regression%20Test%0A%3E**%u56DE%u5F52%u6D4B%u8BD5**%u662F%u6307%u4FEE%u6539%u4E86%u65E7%u4EE3%u7801%u540E%uFF0C%u91CD%u65B0%u8FDB%u884C%u6D4B%u8BD5%u4EE5%u786E%u8BA4%u4FEE%u6539%u6CA1%u6709%u5F15%u5165%u65B0%u7684%u9519%u8BEF%u6216%u5BFC%u81F4%u5176%u4ED6%u4EE3%u7801%u4EA7%u751F%u9519%u8BEF%u3002%0A%3E%u81EA%u52A8%u56DE%u5F52%u6D4B%u8BD5%u5C06%u5927%u5E45%u964D%u4F4E%u7CFB%u7EDF%u6D4B%u8BD5%u3001%u7EF4%u62A4%u5347%u7EA7%u7B49%u9636%u6BB5%u7684%u6210%u672C%u3002%u56DE%u5F52%u6D4B%u8BD5%u4F5C%u4E3A%u8F6F%u4EF6%u751F%u547D%u5468%u671F%u7684%u4E00%u4E2A%u7EC4%u6210%u90E8%u5206%uFF0C%u5728%u6574%u4E2A%u8F6F%u4EF6%u6D4B%u8BD5%u8FC7%u7A0B%u4E2D%u5360%u6709%u5F88%u5927%u7684%u5DE5%u4F5C%u91CF%u6BD4%u91CD%uFF0C%u8F6F%u4EF6%u5F00%u53D1%u7684%u5404%u4E2A%u9636%u6BB5%u90FD%u4F1A%u8FDB%u884C%u591A%u6B21%u56DE%u5F52%u6D4B%u8BD5%u3002%u5728%u6E10%u8FDB%u548C%u5FEB%u901F%u8FED%u4EE3%u5F00%u53D1%u4E2D%uFF0C%u65B0%u7248%u672C%u7684%u8FDE%u7EED%u53D1%u5E03%u4F7F%u56DE%u5F52%u6D4B%u8BD5%u8FDB%u884C%u7684%u66F4%u52A0%u9891%u7E41%uFF0C%u800C%u5728%u6781%u7AEF%u7F16%u7A0B%u65B9%u6CD5%u4E2D%uFF0C%u66F4%u662F%u8981%u6C42%u6BCF%u5929%u90FD%u8FDB%u884C%u82E5%u5E72%u6B21%u56DE%u5F52%u6D4B%u8BD5%u3002%u56E0%u6B64%uFF0C%u901A%u8FC7%u9009%u62E9%u6B63%u786E%u7684%u56DE%u5F52%u6D4B%u8BD5%u7B56%u7565%u6765%u6539%u8FDB%u56DE%u5F52%u6D4B%u8BD5%u7684%u6548%u7387%u548C%u6709%u6548%u6027%u662F%u975E%u5E38%u6709%u610F%u4E49%u7684%u3002%0A%u2014%u2014%20**%u767E%u5EA6%u767E%u79D1**%0A%0A%u672C%u4E66%u8BB2%u7684%u56DE%u5F52%u6D4B%u8BD5%u6982%u5FF5%u53EF%u80FD%u7565%u6709%u4E0D%u540C%u3002%u6309%u7167%u6211%u7684%u7406%u89E3%uFF0C%u4F5C%u8005%u662F%u60F3%u8BF4%uFF0C%u5728%u8FDB%u884C%u5B8C%u6240%u6709%u7684%u7F16%u7801%u4EE5%u540E%uFF0C%u4F60%u5DF2%u7ECF%u5BF9%u4F60%u7684%u8981%u5B9E%u73B0%u7684%u6240%u6709%u4E1C%u897F%u5B8C%u6210%u4E86unknown%24%5Crightarrow%20%24known%u7684%u8FC7%u7A0B%u3002%u90A3%u4E48%u73B0%u5728%uFF0C%u4F60%u53EF%u4EE5%u56DE%u8FC7%u5934%u770B%u770B%uFF0C%u5982%u679C%u8FD9%u65F6%u5019%u91CD%u65B0%u5199%u4E00%u4EFD%u6D4B%u8BD5%u4F60%u5E94%u8BE5%u5199%u4EC0%u4E48%u3002%0A%0A%3E%u56DE%u5230%u4F60%u9488%u5BF9%u8FD9%u4E2A%u7CFB%u7EDF%u7684%u6700%u521D%u7684%u60F3%u6CD5%u6765%u5BF9%u6574%u4E2A%u7CFB%u7EDF%u505A%u4E00%u4E2A%u6D4B%u8BD5%u3002%u4EE5%u671F%u5BF9%u6574%u4E2A%u7CFB%u7EDF%u6709%u4E2A%u6574%u4F53%u7684%u8BC4%u4EF7%u3002%0A%23%23%23Break%0A%u52B3%u9038%u7ED3%u5408%u5BF9%u7A0B%u5E8F%u5458%u662F%u975E%u5E38%u975E%u5E38%u975E%u5E38%u91CD%u8981%u7684%uFF01%0A%3E%20**Shower%20Methodology**%3AIf%20you%20know%20what%20to%20type%2C%20then%20type.%20If%20you%20don%27t%20know%20what%20to%20type%2C%20then%20take%20a%20shower%2C%20and%20stay%20in%20the%20shower%20until%20you%20know%20what%20to%20type.%0A%3E**TDD%20Rule**%3A%20If%20you%20don%27t%20know%20what%20to%20type%2C%20then%20Fake%20It.%20If%20the%0Aright%20design%20still%20isn%27t%20clear%2C%20then%20Triangulate.%20%0A%0A%u770B%u770B%u4F5C%u8005%u63D0%u5021%u7684%u65F6%u95F4%u7BA1%u7406%0A%3E*%20At%20the%20scale%20of%20hours%2C%20keep%20a%20water%20bottle%20by%20your%20keyboard%20so%20that%20biology%20provides%20the%20motivation%20for%20regular%20breaks.%0A%3E*%20At%20the%20scale%20of%20a%20day%2C%20commitments%20after%20regular%20work%20hours%20can%20help%20you%20to%20stop%20when%20you%20need%20sleep%20before%20progress.%0A%3E*%20At%20the%20scale%20of%20a%20week%2C%20weekend%20commitments%20help%20get%20your%20conscious%2C%20energysucking%20thoughts%20off%20work.%20%28My%20wife%20swears%20I%20get%20my%20best%20ideas%20on%20Friday%20evening.%29%0A%3E*%20At%20the%20scale%20of%20a%20year%2C%20mandatory%20vacation%20policies%20help%20you%20refresh%20yourself%20completely.%20The%20French%20do%20this%20right%u2014two%20contiguous%20weeks%20of%20vacation%20aren%27t%20enough.%20You%20spend%20the%20first%20week%20decompressing%2C%20and%20the%20second%20week%20getting%20ready%20to%20go%20back%20to%20work.%20Therefore%2C%20three%20weeks%2C%20or%20better%20four%2C%20are%20necessary%20for%20you%20to%20be%20your%20most%20effective%20the%20rest%20of%20the%20year.%0A%23%23%23Do%20Over%0A%3EWhat%20do%20you%20do%20when%20you%20are%20feeling%20lost%3F%20Throw%20away%20the%20code%20and%20start%20over.%0A%u4F5C%u8005%u5728%u8FD9%u4E00%u7AE0%u544A%u8BC9%u4F60%uFF0C%u4E0D%u8981%u5728%u6CE5%u6F6D%u8D8A%u9677%u8D8A%u6DF1%uFF0C%u4E0D%u8981%u5BB3%u6015%u91CD%u65B0%u5F00%u59CB%u3002%u6362%u4E2A%u4F19%u4F34%uFF0C%u6362%u4E2A%u601D%u8DEF%uFF0C%u4F60%u53EF%u80FD%u6709%u66F4%u597D%u7684%u53D1%u73B0%u3002%0A%23%23Chapter%2027.%20Testing%20Patterns%0A%23%23%23Child%20Test%0A%u8FD9%u91CC%u8BF4%u7684%u662F%uFF0C%u5982%u679C%u4F60%u89C9%u5F97%u8FD9%u4E2A%u6D4B%u8BD5%u592A%u5927%uFF0C%u90A3%u5C31%u8981%u628A%u8FD9%u4E2A%u5927%u7684%u6D4B%u8BD5%u7834%u6210%u82E5%u5E72%u4E2A%u5C0F%u7684%u6D4B%u8BD5%uFF0C%u7136%u540E%u770B%u770B%u6709%u6CA1%u6709%u8FDB%u5C55%u3002%0A%23%23%23Mock%20Object%0A%3EHow%20do%20you%20test%20an%20object%20that%20relies%20on%20an%20expensive%20or%20complicated%20resource%3F%20Create%20a%20fake%20version%20of%20the%20resource%20that%20answers%20constants.%0A%3EIf%20you%20want%20to%20use%20Mock%20Objects%2C%20you%20can%27t%20easily%20store%20expensive%20resources%20in%20global%20variables.%u8981%u8BB0%u5F97%u6E05%u7406%u73B0%u573A%uFF0C%u5426%u5219%u4E07%u4E00%u5176%u4ED6%u7684%u4EE3%u7801%u628A%u4ED6%u5F53%u4F5C%u771F%u7684object%u5728%u4F7F%u7528%uFF0C%u5C31%u4F1A%u51FA%u5927%u95EE%u9898%u3002%u6240%u4EE5%u7F16%u7801%u6700%u57FA%u672C%u7684%u51C6%u5219%u662F%u5C11%u7528%u5168%u5C40%u53D8%u91CF%u3002%0A%3EMock%20Objects%20encourage%20you%20down%20the%20path%20of%20carefully%20considering%20the%20visibility%20of%20every%20object%2C%20reducing%20the%20coupling%20in%20your%20designs.%20%u8FD9%u91CC%u8BF4%u7684%u662F%uFF0C%u5982%u679C%u4F60%u7528Mock%20Object%uFF0C%u4F60%u5C31%u8981%u601D%u8003%u6211%u5230%u5E95%u8BE5%u4E0D%u8BE5%u628A%u8FD9%u4E2A%u5E9E%u7136%u5927%u7269%u66B4%u9732%u7ED9%u8FD9%u6BB5%u4EE3%u7801%u3002%u8FD9%u79CD%u601D%u8003%u6709%u52A9%u4E8E%u51CF%u5C0F%u8026%u5408%u6027%u3002%0A%23%23%23Self%20Shunt%0A%3EHow%20do%20you%20test%20that%20one%20object%20communicates%20correctly%20with%20another%3F%20Have%20the%20object%20under%20test%20communicate%20with%20the%20test%20case%20instead%20of%20with%20the%20object%20it%20expects.%0A%0A**Without%20Self%20Shunt**%0A%60%60%60python%0A%23%20ResultListenerTest%0Adef%20testNotification%28self%29%3A%20%0A%09result%3D%20TestResult%28%29%20%0A%09listener%3D%20ResultListener%28%29%20%0A%09result.addListener%28listener%29%20%0A%09WasRun%28%22testMethod%22%29.run%28result%29%0A%09assert%201%20%3D%3D%20listener.count%20%0A%0A%23%20ResultListener%0Aclass%20ResultListener%3A%0A%09def%20__init__%28self%29%3A%20%0A%09%09self.count%3D%200%20%0A%09def%20startTest%28self%29%3A%20%0A%09%09self.count%3D%20self.count%20+%201%20%0A%60%60%60%0A%0A**With%20Self%20Shunt**%0A%60%60%60python%0A%23%20ResultListenerTest%0Adef%20testNotification%28self%29%3A%20%0A%09self.count%3D%200%20%0A%09result%3D%20TestResult%28%29%0A%09result.addListener%28self%29%0A%09WasRun%28%22testMethod%22%29.run%28result%29%20%0A%09assert%201%20%3D%3D%20self.count%0Adef%20startTest%28self%29%3A%0A%09self.count%3D%20self.count%20+%201%0A%60%60%60%0A%0A%u8FD9%u91CC%u4E3E%u5F97%u4F8B%u5B50%u4E0D%u662F%u5F88%u660E%u767D%u3002%u4E2D%u6587%u8BD1%u672C%u91CC%uFF0C%u5C06self%20shunt%u7FFB%u8BD1%u6210%u81EA%u5206%u6D41%uFF0C%u611F%u89C9%u4E5F%u662F%u5B57%u9762%u7FFB%u8BD1%u3002%u6211%u7406%u89E3%u8FD9%u91CC%u60F3%u8BF4%u7684%u662F%uFF0C%u4E0D%u4E00%u5B9A%u8981%u5B9A%u4E49%u4E00%u4E2A%u7C7B%u6765%u505A%u5F53%u524D%u88AB%u6D4B%u8BD5%u7C7B%u6765%u505A%u7684%u4E8B%u60C5%uFF0C%u53EF%u4EE5%u5728test%20case%u91CC%u9762%u7528%u8BE5%u7C7B%u66B4%u9732%u7684%u63A5%u53E3%u6765%u505A%u4E8B%u60C5%u3002%0A%3ESelf%20Shunt%20may%20require%20that%20you%20use%20**Extract%20Interface**%20to%20get%20an%20interface%20to%20implement.%20You%20will%20have%20to%20decide%20whether%20extracting%20the%20interface%20is%20easier%2C%20or%20if%20testing%20the%20existing%20class%20as%20a%20**black%20box**%20is%20easier.%0A%0A%u8FD9%u91CC%u53C8%u770B%u6655%u4E86%uFF0Cself%20shunt%u8DDFextract%20interface%u6709%u5565%u5173%u7CFB%u3002%0A%3E%u5F53%u6211%u4EEC%u6CE8%u610F%u5230%u5728%u6211%u4EEC%u4EE3%u7801%u7ED3%u6784%u4E2D%u8D85%u8FC7%u4E00%u4E2A%u7C7B%u4F7F%u7528%u5230%u53E6%u4E00%u4E2A%u7279%u6B8A%u7C7B%u4E2D%u7684%u540C%u4E00%u4E2A%u65B9%u6CD5%u65F6%uFF0C%u6B64%u65F6%u5E94%u8BE5%u5C06%u8BE5%u7C7B%u4E2D%u7684%u65B9%u6CD5%u63D0%u53D6%u51FA%u6765%u653E%u5230%u4E00%u4E2A%u63A5%u53E3%uFF08interface%uFF09%u4E2D%uFF0C%u5E76%u5BF9%u5916%u63D0%u4F9B%u8FD9%u4E2A%u63A5%u53E3%u4EE5%u4FBF%u88AB%u7528%u6237%u7C7B%u8BBF%u95EE%u3001%u4F7F%u7528%uFF0C%u8FD9%u6837%u6709%u5229%u4E8E%u6253%u7834%u539F%u6765%u591A%u4E2A%u7C7B%u4E0E%u8FD9%u4E2A%u7279%u6B8A%u7C7B%u7684%u4F9D%u8D56%u5173%u7CFB%u3002%u8FD9%u4E2A%u91CD%u6784%u624B%u6CD5%u5F88%u5BB9%u6613%u5B9E%u73B0%uFF0C%u66F4%u91CD%u8981%u7684%u662F%u8FD9%u6837%u505A%u6709%u5229%u4E8E%u677E%u8026%u5408%u3002%20%u2014%u2014%u7F51%u7EDC%u4E0A%u7684%u89E3%u91CA%0A%0A%u6211%u89C9%u5F97%u8FD9%u91CC%u4F5C%u8005%u63D0%u5230%u7684extract%20interface%uFF0C%u5E76%u4E0D%u662F%u6211%u4EEC%u8BF4%u7684%u91CD%u6784%u91CC%u7684extract%20interface%u3002%u8FD9%u91CC%u8BF4%u8981%u6D4B%u8BD5A%u7C7B%u548CB%u7C7B%u901A%u4FE1%uFF0C%u6211%u4EEC%u4E0D%u76F4%u63A5%u7528B%u7C7B%uFF0C%u800C%u7528test%20case%u4E0EA%u7C7B%u901A%u4FE1%uFF0C%u4EE5%u6D4B%u8BD5%u901A%u4FE1%u7684A%u7C7B%u7AEF%u63A5%u53E3%u662F%u5426%u6B63%u786E%u3002extract%20interface%u8BF4%u7684%u662F%u4ECEB%u7C7B%u4E2Dextract%u63A5%u53E3%u51FA%u6765%u5230test%20case%u4E2D%u53BBimplement%u3002%u6216%u8005%u628AB%u7C7B%u76F4%u63A5%u5F53%u9ED1%u76D2%u5B50%u5728test%20case%u4E2D%u4F7F%u7528%u3002%0A%23%23%23Log%20String%0A%u8FD9%u4E2A%u5F88%u6709%u7528%u3002%u6709%u4E9B%u51FD%u6570%u6216%u8005%u8FC7%u7A0B%u662F%u6CA1%u6709%u8FD4%u56DE%u503C%u7684%uFF0C%u6211%u4EEC%u5C31%u53EF%u4EE5%u7528Log%20String%u7684%u65B9%u5F0F%u6765%u67E5%u770B%u8BE5%u8FC7%u7A0B%u6216%u51FD%u6570%u6709%u6CA1%u6709%u88AB%u8C03%u7528%u3002%u7C7B%u4F3C%u6211%u4EEC%u770Btrace%20log%u4E00%u6837%uFF0C%u901A%u8FC7%u770Btrace%20log%u80FD%u77E5%u9053%u673A%u5668%u6267%u884C%u7684%u4EE3%u7801%u662F%u5426%u6B63%u786E%u3002%0A%23%23%23Crash%20Test%20Dummy%0A%3EHow%20do%20you%20test%20error%20code%20that%20is%20unlikely%20to%20be%20invoked%3F%20Invoke%20it%20anyway%20with%20a%20special%20object%20that%20throws%20an%20exception%20instead%20of%20doing%20real%20work.%0A%23%23%23Broken%20Test%0A%u4F5C%u8005%u7ECF%u5E38%u80FD%u7ED9%u51FA%u4E00%u4E9B%u5F88%u5B9E%u7528%u7684%u5C0F%u7ECF%u9A8C%uFF0C%u8FD9%u91CC%u53C8%u6765%u4E86%uFF0C%u770B%u4E0B%u9762%u3002%0A%3EHow%20do%20you%20leave%20a%20programming%20session%20when%20you%27re%20programming%20alone%3F%20Leave%20the%20last%20test%20broken.%0A%0A%u5F53%u4F60%u8981%u8F6C%u53BB%u505A%u53E6%u5916%u4E00%u4EF6%u4E8B%u60C5%uFF0C%u800C%u624B%u5934%u4E0A%u7684%u4E8B%u60C5%u53C8%u6CA1%u7ED3%u675F%u65F6%u600E%u4E48%u529E%uFF1F%u8BA9%u6700%u540E%u4E00%u4E2A%u6D4B%u8BD5%u6545%u610F%u7684%u4E0D%u901A%u8FC7%u3002%u8FD9%u6837%u4E0B%u6B21%u5C31%u77E5%u9053%u4ECE%u54EA%u513F%u5F00%u59CB%uFF0C%u7136%u540E%u80FD%u8FC5%u901F%u4E0A%u624B%u3002%u918D%u9190%u704C%u9876%u554A%uFF01%u4EE5%u524D%u90FD%u662F%u8BA4%u4E3A%u505A%u53E6%u5916%u4E00%u4EF6%u4E8B%u60C5%u4E4B%u524D%u8981%u628A%u624B%u5934%u4E0A%u7684%u4E8B%u60C5%u5F04%u7684%u5C3D%u5584%u5C3D%u7F8E%uFF0C%u5176%u5B9E%u4E0D%u7136%u3002%u600E%u4E48%u505A%u5229%u4E8E%u540E%u671F%u7EE7%u7EED%u8FDB%u884C%uFF0C%u90A3%u5C31%u5E94%u8BE5%u600E%u4E48%u505A%u3002%0A%23%23%23Clean%20Check-in%0A%3EYou%20will%20occasionally%20find%20a%20test%20broken%20in%20the%20integration%20suite%20when%20you%20try%20to%20check%20in.%20What%20to%20do%3F%0A**The%20simplest%20rule**%20is%20to%20just%20throw%20away%20your%20work%20and%20start%20over.%20The%20broken%20test%20is%20pretty%20strong%20evidence%20that%20you%20didn%27t%20know%20enough%20to%20program%20what%20you%20just%20programmed.%0A%u4EC0%u4E48%u4EC0%u4E48%uFF1F%u7ADF%u7136%u8981%u6211%u4EEC%u6254%u6389%u6211%u4EEC%u505A%u7684%uFF0C%u7136%u540E%u91CD%u65B0%u5F00%u59CB%u3002%u5C31%u56E0%u4E3A%u6211%u4EEC%u7684%u6D4B%u8BD5%u548Cintegration%u6D4B%u8BD5%u7ED3%u679C%u4E0D%u4E00%u81F4%u3002%0A%u5927%u5E08%u7684%u8BDD%u603B%u662F%u6709%u9053%u7406%u7684%uFF0C%u4EE5%u540E%u8981%u597D%u597D%u8003%u8651%u8FD9%u4E00%u70B9%u3002%0A%23%23Chapter%2028.%20Green%20Bar%20Patterns%0A%23%23%23Fake%20It%20%28%27Til%20You%20Make%20It%29%0A%u505A%u5047%u4EE3%u7801%u8BA9%u6D4B%u8BD5%u901A%u8FC7%uFF0C%u7136%u540E%u518D%u4E00%u9879%u4E00%u9879%u5730%u5B8C%u6210%0A%23%23%23Triangulate%0A%u4F5C%u8005%u63D0%u5230%u7684%u6240%u8C13%u4E09%u89D2%u6CD5%u3002%u901A%u4FD7%u7684%u8BF4%uFF0C%u5C31%u662F%u53EA%u5728%u5FC5%u8981%u7684%u65F6%u5019%u505A%u62BD%u8C61%u6216%u901A%u7528%u5316%u5904%u7406%u3002%u901A%u5E38%u662F%u5728TDD%u7684%u91CD%u6784%u8FD9%u4E00%u6B65%u5B8C%u6210%u8FD9%u4E2A%u62BD%u8C61%u7684%u8FC7%u7A0B%u3002%u518D%u901A%u4FD7%u70B9%u8BF4%uFF0C%u5C31%u662F%u591A%u5F04%u51E0%u4E2Acase%uFF0C%u518D%u603B%u7ED3%u5171%u540C%u70B9%uFF0C%u4E4B%u540E%u505A%u62BD%u8C61%0A%u4ECE%u53E6%u4E00%u4E2A%u89D2%u5EA6%uFF0C%u4F5C%u8005%u53C8%u8BF4%u4E86%uFF1A%0A%3EI%20only%20use%20Triangulation%20when%20I%27m%20really%2C%20really%20unsure%20about%20the%20correct%20abstraction%20for%20the%20calculation.%20Otherwise%20I%20rely%20on%20either%20Obvious%20Implementation%20or%20Fake%20It.%0A%23%23%23One%20to%20Many%0A%3EHow%20do%20you%20implement%20an%20operation%20that%20works%20with%20collections%20of%20objects%3F%20Implement%20it%20without%20the%20collections%20first%2C%20then%20make%20it%20work%20with%20collections.%0A%0A%u4E2D%u5FC3%u601D%u60F3%u8FD8%u662F%u4E00%u4E2A%uFF0C%u4ECE%u663E%u800C%u6613%u89C1%u7684%u5730%u65B9%u5F00%u59CB%uFF0C%u6BCF%u6B21%u53EA%u505A%u4E00%u5C0F%u6B65%uFF0C%u7136%u540E%u4E00%u6B65%u4E00%u6B65%u5230%u8FBE%u6700%u7EC8%u7684%u76EE%u7684%u5730%u3002%u770B%u4E0B%u9762%u7684%u4F8B%u5B50%uFF1A%0A%60%60%60java%0A//%201.%20fake%20code%0Apublic%20void%20testSum%28%29%20%7B%20%0A%09assertEquals%285%2C%20sum%285%29%29%3B%20%0A%7D%20%0Aprivate%20int%20sum%28int%20value%29%20%7B%0A%09return%20value%3B%0A%7D%0A%0A//%202.%20add%20arrays%0Apublic%20void%20testSum%28%29%20%7B%0A%09assertEquals%285%2C%20sum%285%2C%20new%20int%5B%5D%20%7B5%7D%29%29%3B%0A%7D%0Aprivate%20int%20sum%28int%20value%2C%20int%5B%5D%20values%29%20%7B%0A%09return%20value%3B%0A%7D%0A%0A//%203.%20add%20real%20sum%20functionality%0Apublic%20void%20testSum%28%29%20%7B%0A%09assertEquals%285%2C%20sum%285%2C%20new%20int%5B%5D%20%7B5%7D%29%29%3B%0A%7D%0Aprivate%20int%20sum%28int%20value%2C%20int%5B%5D%20values%29%20%7B%0A%09int%20sum%3D%200%3B%20%0A%09for%20%28%20int%20i%3D%200%3B%20i%3Cvalues.length%3B%20i++%29%0A%09%09sum%20+%3D%20values%5Bi%5D%3B%0A%09return%20sum%3B%0A%7D%0A%0A//%204.%20delete%20unnecessary%20code%0Apublic%20void%20testSum%28%29%20%7B%20%0A%09assertEquals%285%2C%20sum%28new%20int%5B%5D%20%7B5%7D%29%29%3B%0A%7D%0Aprivate%20int%20sum%28%20int%5B%5D%20values%29%20%7B%0A%09int%20sum%3D%200%3B%20%0A%09for%20%28int%20i%3D%200%3B%20i%3Cvalues.length%3B%20i++%29%0A%09%09sum%20+%3D%20values%5Bi%5D%3B%0A%09return%20sum%3B%20sum%3B%0A%7D%0A%60%60%60%0A%u7EC6%u7EC6%u4F53%u4F1A%u5176%u95F4%u7684%u5DEE%u522B%u5427%u3002%0A%23%23Chapter%2029.%20xUnit%20Patterns%0A%23%23%23Assertion%0A%3EHow%20do%20you%20check%20that%20tests%20worked%20correctly%3F%20%0A%3EWrite%20boolean%20expressions%20that%20automate%20your%20judgment%20about%20whether%20the%20code%20worked.%0A%0A%u4F5C%u8005%u5728%u8FD9%u4E00%u7AE0%u53C8%u7ED9%u51FA%u4E86%u4E00%u4E2A%u5F88%u6709%u6307%u5BFC%u610F%u4E49%u7684%u89C2%u70B9%u3002%0A%3E%u5C3D%u91CF%u4E0D%u8981%u505A%u767D%u76D2%u6D4B%u8BD5%uFF0C%u5982%u679C%u4F60%u60F3%u505A%uFF0C%u8BF4%u660E%u4F60%u7684%u8BBE%u8BA1%u6709%u95EE%u9898%0A%23%23%23Fixture%0A%u8FD9%u91CC%u4F5C%u8005%u629B%u51FA%u4E86%u4E00%u4E2A%u95EE%u9898%uFF0C%u5982%u679C%u6709%u591A%u4E2A%u6D4B%u8BD5%u6709%u7C7B%u4F3C%u7684%u4EE3%u7801%u600E%u4E48%u529E%uFF1F%u4E24%u4E2A%u9009%u62E9%uFF1A%0A1.%20test%20case%u7C7B%u5B9A%u4E49%u4E2D%u62BD%u8C61%u51FA%u7C7B%u4F3CsetUp%u7684%u51FD%u6570%uFF0C%u6765%u505A%u91CD%u590D%u7684%u5DE5%u4F5C%0A2.%20%u6216%u8005%u7528%u7C7B%u4F3C%u4EE3%u7801%u751F%u6210%u5668%u7684%u4E1C%u897F%u6765%u4E3A%u6240%u6709%u9700%u8981%u7684%u6D4B%u8BD5%u751F%u6210fixture%0A%0A%u65B9%u6CD51%u6709%u65F6%u5019%u66F4%u7B26%u5408DRY%u539F%u5219%uFF0C%u4F46%u5B83%u7684%u7F3A%u70B9%u662F%uFF0C%u4F60%u8981%u8BB0%u4F4FsetUp%u91CC%u9762%u5230%u5E95%u505A%u4E86%u4EC0%u4E48%u3002%u4E24%u79CD%u65B9%u6CD5%u90FD%u53EF%u4EE5%uFF0C%u9009%u62E9%u66F4%u5408%u9002%u7684%u3002%0A%0A%23%23%23External%20Fixture%0A%u6240%u8C13%u7684%u5916%u90E8fixture%uFF0C%u5C31%u662F%u8981%u4FDD%u8BC1%u6D4B%u8BD5%u80FD%u6062%u590D%u73AF%u5883%u914D%u7F6E%u3002%0A%3E%u5728%u6240%u6709%u6D4B%u8BD5%u5F00%u59CB%u524D%u8C03setUp%uFF0C%u6240%u6709%u6D4B%u8BD5%u7ED3%u675F%u540E%u8C03tearDown%u3002%u8FD9%u5C31%u662FExternal%20Fixture%0A%23%23%23Test%20Method%0A%u8FD9%u4E00%u8282%u9488%u5BF9%u5982%u4F55%u5199%u6D4B%u8BD5%u65B9%u6CD5%u7ED9%u51FA%u4E86%u4E00%u4E9B%u5EFA%u8BAE%u3002%0A1.%20hierarchy%0A*%20Module%20%24%5Crightarrow%24%20Framework%0A*%20Class%20%24%5Crightarrow%24%20internal%20fixture%0A*%20Method%20%24%20%5Crightarrow%24%20test%20case%0A2.%20%u540D%u5B57%u957F%u6CA1%u5173%u7CFB%uFF0C%u8981%u8BA9%u4EE5%u540E%u7684%u8BFB%u8005%u6709%u8DB3%u591F%u7684%u7EBF%u7D22%u77E5%u9053%u4E3A%u4EC0%u4E48%u8981%u5199%u8FD9%u4E2Atest%0A3.%20%u6D4B%u8BD5%u4EE3%u7801%u8981%u591F%u76F4%u89C9%uFF0C%u8981%u591F%u7B80%u6D01%uFF08%u6700%u77ED3%u884C%uFF09%20%0A4.%20%u6CE8%u91CA%u91CC%u5199outline%uFF0C%u4E00%u9897%u661F%u8868%u793A%u4E00%u7EA7%uFF0C%u4F5C%u8005%u8BF4%u4ED6%u4E00%u822C%u51992-3%u7EA7outline%0A%60%60%60%20cpp%0A/*%20Adding%20to%20tuple%20spaces.%20*/%20%0A/*%20Taking%20from%20tuple%20spaces.%20*/%0A/**%20Taking%20a%20non-existent%20tuple.%20**/%20%0A/**%20Taking%20an%20existing%20tuple.%20**/%20%0A/**%20Taking%20multiple%20tuples.%20**/%20%0A/*%20Reading%20from%20tuple%20space.%20*/%0A%60%60%60%0A%23%23%23Exception%20Test%0A%u8FD9%u4E00%u8282%u8BF4%u7684%u662F%uFF0C%u5982%u679C%u5F85%u6D4B%u7684%u51FD%u6570%u9700%u8981%u629B%u51FA%u5F02%u5E38%uFF0C%u7528%u5982%u4E0B%u7684%u65B9%u6CD5%uFF1A%0A%60%60%60java%0Apublic%20void%20testMissingRate%28%29%20%7B%0A%09try%20%7B%0A%09%09exchange.findRate%28%22USD%22%2C%20%22GBP%22%29%3B%20%0A%09%09fail%28%29%3B%20//%20%u5982%u679C%u6CA1%u629B%u5F02%u5E38%u5C31fail%0A%09%7D%20catch%20%28IllegalArgumentException%20expected%29%20%7B%20%0A%09%7D%0A%7D%0A%60%60%60%0A%23%23%23All%20Tests%0A%3EHow%20do%20you%20run%20all%20tests%20together%3F%20Make%20a%20suite%20of%20all%20the%20suites%u2014one%20for%20each%20package%2C%20and%20one%20aggregating%20the%20package%20tests%20for%20the%20whole%20application.%0A%60%60%60java%0Apublic%20class%20AllTests%20%7B%0A%09//%20%u8FD9%u91CC%u6709%u4E2Amain%uFF0C%u65B9%u4FBF%u76F4%u63A5%u8C03%u7528%u7A0B%u5E8F%u5F00%u59CB%u6D4B%u8BD5%0A%09public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%20%0A%09%09junit.swingui.TestRunner.run%28AllTests.class%29%3B%20%0A%09%7D%0A%09//%20%u8FD9%u91CC%u6709%u4E2Asuite%u5305%u542B%u4E86%u6240%u6709test%20case%0A%09public%20static%20Test%20suite%28%29%20%7B%20%0A%09%09TestSuite%20result%3D%20new%20TestSuite%28%22TFD%20tests%22%29%3B%20%0A%09%09result.addTestSuite%28MoneyTest.class%29%3B%20%0A%09%09result.addTestSuite%28ExchangeTest.class%29%3B%20%0A%09%09result.addTestSuite%28IdentityRateTest.class%29%3B%20%0A%09%09return%20result%3B%0A%09%7D%0A%7D%0A%60%60%60%0A%23%23Chapter%2030.%20Design%20Patterns%0A%u4F5C%u8005%u5728%u8FD9%u4E00%u7AE0%u5F15%u5165%u4E86%u4E00%u4E9BTDD%u4E2D%u4F1A%u7528%u5230%u7684%u8BBE%u8BA1%u6A21%u5F0F%u3002%u6709%u4E9B%u662F%u5199%u6D4B%u8BD5%u65F6%u7528%u7684%uFF0C%u6709%u7684%u662F%u91CD%u6784%u65F6%u7528%u7684%uFF0C%u6709%u7684%u4E24%u8005%u7686%u53EF%u3002%u4E0B%u9762%u662F%u672C%u7AE0%u6240%u6709%u6A21%u5F0F%u7684%u603B%u7EB2%u3002%0A%21%5BAlt%20text%5D%28./1456036251528.png%29%0A%23%23%23Command%0A%3EWhat%20do%20you%20do%20when%20you%20need%20the%20invocation%20of%20a%20computation%20to%20be%20more%20complicated%20than%20a%20simple%20method%20call%3F%0A%3EMake%20an%20object%20for%20the%20computation%20and%20invoke%20it.%0A%0A%u8FD9%u91CC%u6240%u8BF4%u7684%u547D%u4EE4%u662F%u8BF4%uFF0C%u628A%u8981%u8C03%u7528%u7684%u65B9%u6CD5%u5C01%u88C5%u6210%u4E00%u4E2Aobject%uFF0C%u7136%u540E%u8C03%u7528%u90A3%u4E2Aobject%0A%0A%23%23%23Value%20Object%0A%u628A%u4E00%u4E9B%u5E38%u91CF%u53C2%u6570%u505A%u6210object%u6765%u4F20%u9012%0A%3EWhen%20implementing%20a%20Value%20Object%2C%20every%20operation%20has%20to%20return%20a%20fresh%20object%2C%20%0A%3EAll%20Value%20Objects%20have%20to%20implement%20equality%20%0A%0A%23%23%23Null%20Object%0A%60%60%60java%0Apublic%20boolean%20setReadOnly%28%29%20%7B%20%0A%09SecurityManager%20guard%20%3D%20System.getSecurityManager%28%29%3B%20%0A%09if%20%28guard%20%21%3D%20null%29%20%7B%20%29%20%7B%0A%09%09guard.canWrite%28path%29%3B%0A%09%7D%20%0A%09return%20fileSystem.setReadOnly%28this%29%3B%0A%7D%0A%60%60%60%0A%u4E0A%u9762%u8FD9%u4E2A%u4F8B%u5B50getSecurityManager%u5728%u4E0D%u6210%u529F%u65F6%u8FD4%u56DENull%uFF0C%u7136%u540E%u8C03%u7528%u8005%u518D%u5224%u65AD%u8FD4%u56DE%u503C%u4EE5%u51B3%u5B9A%u4F1A%u4E0D%u4F1A%u7528%u7A7A%u6307%u9488%u6765%u8C03%u7528%u6210%u5458%u53D8%u91CF%u3002%0A%u8FD9%u662F%u4E00%u4E2A%u5F88%u5E38%u89C1%u7684%u505A%u6CD5%uFF0C%u8FD9%u6837%u505A%u4E0D%u597D%u7684%u662F%uFF0C%u901A%u5E38%u8FD9%u79CD%u5224%u65AD%u4F1A%u975E%u5E38%u975E%u5E38%u591A%uFF0C%u800C%u4E14%u7ED9%u4EBA%u4E00%u79CD%u201C%u4F1A%u4E0D%u4F1A%u6709%u54EA%u91CC%u6CA1%u5224%u65AD%uFF0C%u4EE5%u540E%u4F1A%u5BFC%u81F4crash%uFF1F%u201D%u7684%u62C5%u5FE7%u3002%0ANull%20Object%u8BBE%u8BA1%u6A21%u5F0F%u5C31%u662F%u8BA9getSecurityManager%u8FD4%u56DE%u4E00%u4E2A%u7279%u6B8A%u7684object%u6765%u53D6%u4EE3Null%uFF0C%u8FD9%u6837%u8BA9%u6240%u6709%u7684%u64CD%u4F5C%u90FD%u7EDF%u4E00%uFF0C%u4EE5%u51CF%u5C11%u91CD%u590D%u4EE3%u7801%u3002%0A%0A%23%23%23Template%20Method%0A%u6A21%u677F%u65B9%u6CD5%u3002%0A%3EWhen%20you%20find%20two%20variants%20of%20a%20sequence%20in%20two%20subclasses%2C%20you%20need%20to%20gradually%20move%20them%20closer%20together.%20Once%20you%27ve%20extracted%20the%20parts%20that%20are%20different%20from%20other%20methods%2C%20what%20you%20are%20left%20with%20is%20the%20Template%20Method.%20%0A%60%60%60java%0A//%20TestCase%0Apublic%20void%20runBare%28%29%20throws%20Throwable%20%7B%20%0A%09setUp%28%29%3B%20%0A%09try%20%7B%20%0A%09%09runTest%28%29%3B%0A%09%7D%0A%09finally%20%7B%0A%09%09tearDown%28%29%3B%0A%09%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23Pluggable%20Object%0A%u4E2D%u6587%u8BD1%u540D%u4E3A%u63D2%u5165%u5F0F%u5BF9%u8C61%u3002%u5F88%u96BE%u7406%u89E3%u54EA%u91CC%u6709%u8FD9%u4E2A%u6240%u8C13%u7684%u201C%u63D2%u5165%u201D%u3002%u8FD9%u4E2A%u8BBE%u8BA1%u6A21%u5F0F%u6838%u5FC3%u7684%u601D%u60F3%u5C31%u662F%u6D88%u9664%60if...else...%60%u7684%u60C5%u51B5%u3002%0A%u770B%u4F5C%u8005%u7684%u4F8B%u5B50%uFF0C%u89E3%u91CA%u7684%u5F88%u6E05%u695A%uFF1A%0A%60%60%60java%0A//%20Without%20Pluggable%20Object%0AFigure%20selected%3B%20%0Apublic%20void%20mouseDown%28%29%20%7B%20%0A%09selected%3D%20findFigure%28%29%3B%0A%09if%20%28selected%20%21%3D%20null%29%20//%20%u5230%u5904%u662Fnull%u5224%u65AD%0A%09%09select%28selected%29%3B%20%0A%7D%0Apublic%20void%20mouseMove%28%29%20%7B%0A%09if%20%28selected%20%21%3D%20null%29%0A%09%09move%28selected%29%3B%20%0A%09else%0A%09%09moveSelectionRectangle%28%29%3B%20%0A%7D%0Apublic%20void%20mouseUp%28%29%20%7B%0A%09if%20%28selected%20%3D%3D%20null%29%0A%09%09selectAll%28%29%3B%0A%7D%20%0A%0A//%20With%20Pluggable%20Object%0ASelectionMode%20mode%3B%0Apublic%20void%20mouseDown%28%29%20%7B%0A%09selected%3D%20findFigure%28%29%3B%0A%09//%20%u5168%u90E8%u5F52%u7ED3%u5230mode%u5B50%u7C7B%u91CC%u9762%u53BB%u5904%u7406%0A%09if%20%28selected%20%21%3D%20null%29%0A%09%09mode%3D%20SingleSelection%28selected%29%3B%0A%09else%0A%09%09mode%3D%20MultipleSelection%28%29%3B%0A%7D%0Apublic%20void%20mouseMove%28%29%20%7B%0A%09mode.mouseMove%28%29%3B%0A%7D%0Apublic%20void%20mouseUp%28%29%20%7B%0A%09mode.mouseUp%28%29%3B%0A%7D%0A%60%60%60%0A%23%23%23Pluggable%20Selector%0A%u8FD9%u4E00%u8282%u7684%u8BBE%u8BA1%u6A21%u5F0F%u548C%u4E0A%u4E00%u8282%u7684%u6781%u4E3A%u7C7B%u4F3C%u3002%u8FD9%u6B21%u8981%u5904%u7406%u6389%u7684%u662F%60switch...case...%60%u800C%u53C8%u4E0D%u7528%u5B50%u7C7B%u7EE7%u627F%u7684%u65B9%u5F0F%u6765%u52A8%u6001%u8C03%u7528%u3002%u8FD9%u91CC%u4F7F%u7528%u7684%u65B9%u6CD5%u53EB%u53CD%u5C04%u3002%0A%3E%u53CD%u5C04%uFF1A%u901A%u8FC7%u81EA%u8EAB%u7684%u5C5E%u6027%uFF08%u5982%u7C7B%u540D%uFF0C%u65B9%u6CD5%u540D%uFF09%u6765%u505A%u76F8%u5173%u903B%u8F91%0A%0A%u540C%u6837%u770B%u4F5C%u8005%u7684%u4F8B%u5B50%0A%60%60%60java%0Avoid%20print%28%29%20%7B%20%0A%09Method%20runMethod%3D%20getClass%28%29.getMethod%28printMessage%2C%20null%29%3B%0A%09runMethod.invoke%28this%2C%20new%20Class%5B0%5D%29%3B%0A%7D%0A%60%60%60%0A%u770B%u5230%u4E86%u6CA1getClass%uFF0CgetMethod%uFF0C%u8FD9%u5C31%u662F%u53CD%u5C04%u3002%u6709%u4E86%u8FD9%u4E2A%u51FD%u6570%u65E2%u4E0D%u9700%u8981switch%u6765%u8C03%u7528%u4E0D%u540C%u7684printxxx%u51FD%u6570%28printHtml%2C%20printXml...%29%uFF0C%u4E5F%u4E0D%u9700%u8981%u5B9A%u4E49%u5B50%u7C7B%u6765%u8C03%u7528%u4E0D%u540C%u7684print%u51FD%u6570%u3002%0A%u4F5C%u8005%u5728%u672C%u8282%u6700%u540E%u7ED9%u51FA%u4E86%u4E00%u6BB5%u5FE0%u544A%uFF1A%0A%3EPluggable%20Selector%20can%20definitely%20be%20overused.%20The%20biggest%20problem%20with%20it%20is%20tracing%20code%20to%20see%20whether%20a%20method%20is%20invoked.%20Use%20Pluggable%20Selector%20only%20when%20you%20are%20cleaning%20up%20a%20fairly%20straightforward%20situation%20in%20which%20each%20of%20a%20bunch%20of%20**subclasses%20has%20only%20one%20method.**%0A%23%23%23Factory%20Method%0A%u4F5C%u8005%u8BF4%u5DE5%u5382%u65B9%u6CD5%u63D0%u4F9B%u4E86%u7075%u6D3B%u6027%u3002%u6211%u662F%u6CA1%u770B%u51FA%u6765%u3002%u5BF9%u6BD4%u4E0B%u9762%u4E24%u6BB5%u4EE3%u7801%uFF0C%u8FD9%u91CC%u589E%u52A0%u4E86%u7075%u6D3B%u6027%uFF1F%0A%60%60%60java%0Apublic%20void%20testMultiplication%28%29%20%7B%0A%09Dollar%20five%3D%20Dollar%20five%3D%20new%20Dollar%285%29%3B%0A%09assertEquals%28new%20Dollar%2810%29%2C%20five.times%282%29%29%3B%20%0A%09assertEquals%28new%20Dollar%2815%29%2C%20five.times%283%29%29%3B%0A%7D%0A%0Apublic%20void%20testMultiplication%28%29%20%7B%20%0A%09Dollar%20five%20%3D%20Money.dollar%285%29%3B%20//%20%u5DE5%u5382%u65B9%u6CD5%0A%09assertEquals%28new%20Dollar%2810%29%2C%20five.times%282%29%29%3B%20%0A%09assertEquals%28new%20Dollar%2815%29%2C%20five.times%283%29%29%3B%20%0A%7D%0A//%20Money%0Astatic%20Dollar%20dollar%28%20Dollar%20dollar%28int%20amount%29%20%7B%20%0A%09return%20new%20Dollar%28amount%29%3B%0A%7D%0A%60%60%60%0A%u4F5C%u8005%u6700%u540E%u7ED9%u51FA%u4E86%u4E00%u70B9%u5FE0%u544A%0A%3E%20You%20have%20to%20remember%20that%20the%20method%20is%20really%20creating%20an%20object%2C%20even%20though%20it%20doesn%27t%20look%20like%20a%20constructor.%20Use%20Factory%20Method%20only%20when%20you%20need%20the%20flexibility%20it%20creates.%20%0A%0A%23%23%23Imposter%0A%u4E2D%u6587%u8BD1%u540D%u4E3A%u5192%u540D%u9876%u66FF%u3002%u6839%u636E%u6587%u4E2D%u7684%u9610%u8FF0%uFF0C%u6211%u7406%u89E3%u8FD9%u91CC%u8BB2%u7684%u4E0D%u662F%u4E00%u79CD**%u8BBE%u8BA1**%u6A21%u5F0F%uFF0C%u800C%u53EA%u662F%u4E00%u79CD%u6A21%u5F0F%uFF0C%u4E00%u79CD%u7279%u6B8A%u60C5%u51B5%u3002%u6307%u7684%u662F%u5982%u679C%u67D0%u4E00%u6BB5%u4EE3%u7801%uFF0C%u53EA%u5C06%u5176%u4E2D%u7684%u4E00%u4E2A%u540D%u5B57%uFF08%u7C7B%u3001%u65B9%u6CD5%u6216%u8005%u53D8%u91CF%u7B49%u7B49%uFF09%u66FF%u6362%u6210%u53E6%u5916%u4E00%u4E2A%u540D%u5B57%uFF0C%u5C31%u80FD%u5F97%u5230%u4E00%u6BB5%u65B0%u7684%u4EE3%u7801%uFF0C%u79F0%u4E3A%u5192%u540D%u9876%u66FF%u3002%u53D1%u73B0%u53EF%u4EE5Imposter%u7684%u60C5%u51B5%uFF0C%u5176%u5B9E%u5C31%u662F%u53D1%u73B0%u91CD%u590D%u3002%0A%60%60%60java%0A//%20%u4E0B%u9762%u8FD9%u4E24%u6BB5%u4EE3%u7801%u5C31%u53EA%u662F%u5C06RectangleFigure%u6362%u6210OvalFigure%uFF0C%u6B64%u662F%u4E3AImposter%u5192%u540D%u9876%u66FF%u3002%0AtestRectangle%28%29%20%7B%0A%09Drawing%20d%3D%20new%20Drawing%28%29%3B%0A%09d.addFigure%28new%20RectangleFigure%280%2C%2010%2C%2050%2C%20100%29%29%3B%20RectangleFigure%280%2C%2010%2C%2050%2C%20100%29%29%3B%0A%09RecordingMedium%20brush%3D%20new%20RecordingMedium%28%29%3B%20%0A%09d.display%28brush%29%3B%20%0A%09assertEquals%28%22rectangle%200%2010%2050%20100%5Cn%22%2C%20brush.log%28%29%29%3B%0A%7D%0A%0AtestOval%28%29%20%7B%0A%09Drawing%20d%3D%20new%20Drawing%28%29%3B%0A%09d.addFigure%28new%20OvalFigure%280%2C%2010%2C%2050%2C%20100%29%29%3B%20%0A%09RecordingMedium%20brush%3D%20new%20RecordingMedium%28%29%3B%20%0A%09d.display%28brush%29%3B%0A%09assertEquals%28%22oval%200%2010%2050%20100%5Cn%22%2C%20brush.log%28%29%29%3B%20%0A%7D%0A%60%60%60%0A%u4F5C%u8005%u8FD8%u63D0%u5230%u53E6%u5916%u4E24%u4E2A%u5728%u91CD%u6784%u4E2D%u7ECF%u5E38%u7528%u5230%u7684%u8BBE%u8BA1%u6A21%u5F0F%uFF0C%u672C%u8D28%u5176%u5B9E%u5C31%u662FImposter%20%u2014%u2014%20Null%20Object%20%26%20Composite%u3002%0A%0A%23%23%23Composite%0A%u6839%u636E%u4E0A%u4E00%u7AE0%u4F5C%u8005%u7684%u89C2%u70B9%uFF0C%u7EC4%u5408%u5176%u5B9E%u5C31%u662F%u4E00%u79CD%u5192%u540D%u9876%u66FF%u3002%u4F5C%u8005%u5728%u672C%u8282%u5F00%u5934%u8BF4%u4E86%uFF1A%0A%3EHow%20do%20you%20implement%20**an%20object**%20whose%20behavior%20is%20the%20composition%20of%20the%20behavior%20of%20a%20list%20of%20other%20objects%3F%20Make%20it%20an%20**Imposter**%20for%20**the%20component%20objects**.%0A%0A%u8BA9%u8FD9%u4E2A%u5BF9%u8C61%u79F0%u4E3A%u7EC4%u6210%u4ED6%u7684%u5BF9%u8C61%u7684%u5192%u540D%u9876%u66FF%u8005%u3002%u8BF4%u8D77%u6765%u5F88%u62D7%u53E3%u3002%u770B%u4F8B%u5B50%uFF1A%0A%60%60%60java%0A//%20Transaction%0ATransaction%28Money%20value%29%20%7B%0A%09this.value%3D%20value%3B%0A%7D%0A//%20Account%0ATransaction%20transactions%5B%5D%3B%0AMoney%20balance%28%29%20%7B%0A%09Money%20sum%3D%20Money.zero%28%29%3B%0A%09for%20%28int%20i%3D%200%3B%20i%20%3C%20transactions.length%3B%20i++%29%20%0A%09%09sum%3D%20sum.plus%28transactions%5Bi%5D.value%29%3B%0A%09return%20sum%3B%0A%7D%0A%60%60%60%0A%u8FD9%u4E2A%u5199%u6CD5%u7684%u7F3A%u70B9%u662F%uFF0C%u5F53%u8981%u7B97OverallAccount%u65F6%uFF0C%u6CA1%u8F99%u4E86%uFF0C%u8981%u5B9A%u4E49%u4E00%u4E2A%u65B0%u7C7B%u6765%u5904%u7406%u3002%u4E00%u4E2AOverallAccount%u662F%u4E00%u7EC4Account%u3002%u4F46OverallAccount%u5176%u5B9E%u8981%u505A%u7684%u4E5F%u662F%u4E00%u79CD%u7D2F%u52A0%uFF0C%u548CAccount%u505A%u7684%u5E76%u6CA1%u6709%u4EC0%u4E48%u533A%u522B%u3002%u8FD9%u5C31%u662F%u91CD%u590D%u3002%0A%u89E3%u51B3%u7684%u529E%u6CD5%u5C31%u662F%u6240%u8C13%u7684Composite%u3002%u628A%u8981%u7D2F%u52A0%u7684%u4E1C%u897F%u62BD%u8C61%u51FA%u6765%u79F0%u4E3AHoldings%uFF0CAccount%u7D2F%u52A0%u7684%u662FHoldings%uFF0COverallAccount%u7D2F%u52A0%u7684%u4E5F%u662FHoldings%u3002%0A%60%60%60java%0AHolding%20holdings%5B%5D%3B%0AMoney%20balance%28%29%20%7B%0A%09Money%20sum%3D%20Money.zero%28%29%3B%0A%09for%20%28%20%28int%20i%3D%200%3B%20i%20%3C%20holdings.length%3B%20i++%29%0A%09sum%3D%20sum.plus%28holdings%5Bi%5D.balance%28%29%29%3B%0A%09return%20sum%3B%0A%7D%0A%60%60%60%0A%u5199%u5230%u8FD9%u91CC%uFF0C%u6211%u4ECD%u7136%u4E0D%u662F%u7279%u522B%u660E%u767D%u4F55%u4E3AComposite%uFF08%u62FC%u5408%uFF0C%u590D%u5408%u7684%u610F%u601D%uFF09%u3002%u4F46%u6211%u4EEC%u662F%u7AD9%u5728%u5DE8%u4EBA%u7684%u80A9%u8180%u4E0A%uFF0C%u5BF9%u6BD4%u9605%u8BFB%u4E86%u4E2D%u6587%u8BD1%u672C%u540E%u6709%u4E86%u4E00%u70B9%u70B9%u611F%u89C9%u3002%u8FD9%u4E2A%u8BBE%u8BA1%u6A21%u5F0F%u7684%u4E2D%u6587%u8BD1%u540D%u4E3A-**%u9012%u5F52%u7EC4%u5408**%u3002%u6240%u8C13%u9012%u5F52%uFF0C%u5E94%u5F53%u6307%u7684%u662F%uFF0C%u901A%u8FC7%u6982%u5FF5%u4E0A%u7684%u62BD%u8C61%uFF0C%u5C06%u4E00%u4E2A%u5927%u7684%u6DF7%u5408%u7C7B%u5199%u6210%u4E00%u4E9B%u66F4%u62BD%u8C61%u7684%u6982%u5FF5%u7684%u7EC4%u5408%u3002%u4F8B%u5982%3A%20%0A%3EOvreallAccount%20%3C-%20Account%20%3C-%20Transactions%0A%3EOverallAccount%20%3C-%20Holding%20%26%20Account%20%3C-Holding%0A%0A%u901A%u8FC7%u9012%u5F52%u5730%u5C06OverallAccount%u5192%u540D%u9876%u66FF%u6210Holding%uFF0C%u4ECE%u800C%u4F7FOverallAccount%u6210%u4E3A%u4E00%u4E2AAccount%u6765%u8FBE%u5230%u6D88%u9664%u91CD%u590D%u3002%0A%u4F5C%u8005%u5728%u672C%u8282%u6700%u540E%u7ED9%u51FA%u4E86%u4F55%u65F6%u4F7F%u7528Composite%u7684%u5EFA%u8BAE%uFF1A%0A%3EAs%20is%20obvious%20from%20this%20discussion%2C%20I%27m%20still%20not%20able%20to%20articulate%20how%20to%20guess%20when%20a%20collection%20of%20objects%20is%20just%20a%20collection%20of%20objects%20and%20when%20you%20really%20have%20a%20Composite.%20The%20good%20news%20is%2C%20since%20you%27re%20getting%20good%20at%20refactoring%2C%20%3Cb%3E%3Cfont%20color%3D%22IndianRed%22%3Ethe%20moment%20the%20duplication%20appears%3C/font%3E%3C/b%3E%2C%20you%20can%20introduce%20Composite%20and%20watch%20program%20complexity%20disappear.%0A%0A%23%23%23Collecting%20Parameter%0A%u770B%u4E0D%u61C2%uFF0C%u4E0D%u77E5%u6240%u4E91%0A%0A%23%23%23Singleton%0A%u8FD9%u4E2A%u5C31%u662F%u5F88%u8457%u540D%u7684%u5355%u4F8B%u6A21%u5F0F%uFF0C%u7ECF%u5E38%u4F1A%u7528%u5230%u3002%u4F5C%u8005%u6CA1%u6709%u8BE6%u52A0%u9610%u91CA%uFF0C%u53EA%u662F%u544A%u8BEB%u8BFB%u8005%u4E0D%u8981%u7528%u5168%u5C40%u53D8%u91CF%28global%20variable%29%u3002%u6211%u731C%u4F5C%u8005%u7684%u610F%u601D%u662F%uFF0C%u5982%u679C%u8981%u7528%u5168%u5C40%u53D8%u91CF%uFF0C%u5C31%u7528%u5355%u4F8B%u6A21%u5F0F%u7684%u7C7B%u5BF9%u8C61%u5427%u3002%0A%0A%23%23Chapter%2031.%20Refactoring%0A%u5728TDD%u4E2D%uFF0C%u91CD%u6784%u8981%u505A%u7684%u5C31%u662F%uFF0C%u4FDD%u8BC1%u6240%u6709%u6D4B%u8BD5%u901A%u8FC7%u7684%u60C5%u51B5%u4E0B%uFF0C%u964D%u4F4E%u91CD%u590D%uFF08code%u4E4B%u95F4%uFF0Ccode%u4E0Etest%u4E4B%u95F4%uFF09%u3002%0A%23%23%23Reconcile%20Differences%0A%3E-%20How%20do%20you%20unify%20two%20similar%20looking%20pieces%20of%20code%3F%20Gradually%20bring%20them%20closer.%20Unify%20them%20only%20when%20they%20are%20absolutely%20identical.%20%u4E0D%u8981%u5F3A%u5236%u6574%u5408%uFF0C%u7B49%u4ED6%u4EEC%u5B8C%u5168%u76F8%u7B49%u4E86%u518D%u8BF4%0A%3E-%20Such%20a%20leap-of-faith%20refactoring%20is%20exactly%20what%20we%27re%20trying%20to%20avoid%20with%20our%20strategy%20of%20small%20steps%20and%20concrete%20feedback.%20Although%20you%20can%27t%20always%20avoid%20leapy%20refactorings%2C%20you%20can%20reduce%20their%20incidence.%20%u4E0D%u8981%u505A%u8DE8%u8D8A%u5F0F%u7684%u91CD%u6784%u3002%0A%3E-%20Sometimes%20you%20need%20to%20approach%20reconciling%20differences%20backward%u2014that%20is%2C%20think%20about%20how%20the%20last%20step%20of%20the%20change%20could%20be%20trivial%2C%20then%20work%20backward.%20%u53CD%u5411%u601D%u8003%uFF0C%u5C3D%u91CF%u8BA9%u6BCF%u4E00%u6B65%u90FD%u975E%u5E38%u5C0F%28trivial%29%uFF0C%u8FD9%u6837%u65B9%u4FBF%u56DE%u9000%u3002%0A%0A%23%23%23Isolate%20Change%0A%u9694%u79BB%u6539%u52A8%uFF0C%u4E5F%u5C31%u662F%u6211%u4EEC%u901A%u5E38%u505A%u7684%u4E00%u4E9B%u62BD%u8C61%u5C01%u88C5%u3002%u628A%u53D8%u5316%u7684%u90E8%u5206%u7528%u63A5%u53E3%u5305%u88C5%u8D77%u6765%uFF0C%u8FD9%u6837%u5C31%u8FBE%u5230%u4E86%u9694%u79BB%u7684%u6548%u679C%u3002%0A%3ESome%20possible%20ways%20to%20isolate%20change%20are%20Extract%20Method%20%28the%20most%20common%29%2C%20Extract%20Object%2C%20and%20Method%20Object.%0A%0A%23%23%23Migrate%20Data%0A%u4E0D%u77E5%u6240%u4E91%0A%0A%23%23%23Extract%20Method%0A%3EHow%20do%20you%20make%20a%20long%2C%20complicated%20method%20easier%20to%20read%3F%20Turn%20a%20small%20part%20of%20it%20into%20a%20separate%20method%20and%20call%20the%20new%20method.%20%u5C06%u4E00%u4E2A%u5927%u51FD%u6570%u6253%u788E%uFF0C%u4ECE%u4E2D%u63D0%u53D6%u4E00%u4E9B%u65B9%u6CD5%u51FA%u6765%u3002%0A%23%23%23%23%20How%0A%3E1.%20Find%20a%20region%20of%20the%20method%20that%20would%20make%20sense%20as%20its%20own%20method.%20Bodies%20of%0Aloop%2C%20whole%20loops%2C%20and%20branches%20of%20conditionals%20are%20common%20candidates%20for%20extraction.%0A%3E2.%20Make%20sure%20that%20there%20are%20no%20assignments%20to%20temporary%20variables%20declared%20outside%20the%0Ascope%20of%20the%20region%20to%20be%20extracted.%0A%3E3.%20Copy%20the%20code%20from%20the%20old%20method%20to%20the%20new%20method.%20Compile%20it.%0A%3E4.%20For%20each%20temporary%20variable%20or%20parameter%20of%20the%20original%20method%20used%20in%20the%20new%0Amethod%2C%20add%20a%20parameter%20to%20the%20new%20method.%0A%3E5.%20Call%20the%20new%20method%20from%20the%20original%20method.%0A%0A%23%23%23%23Why%0A1.%20%u589E%u5F3A%u53EF%u8BFB%u6027%0A2.%20%u6D88%u9664%u91CD%u590D%uFF0C%u5F53%u4F60%u53D1%u73B0%u6709%u4E24%u4E2A%u5927%u51FD%u6570%uFF0C%u6709%u4E00%u90E8%u5206%u662F%u76F8%u540C%u7684%uFF0C%u90A3%u5C31%u53EF%u4EE5%u63D0%u53D6%u51FA%u6765%u79F0%u4E3A%u65B0%u7684%u65B9%u6CD5%u3002%0A3.%20%u901A%u8FC7inline%u628A%u4E00%u5806%u51FD%u6570%u653E%u5728%u4E00%u8D77%uFF0C%u7136%u540E%u770B%u770B%u54EA%u91CC%u53EF%u4EE5extract%20%uFF08%u8FD9%u4E00%u70B9%u6211%u611F%u89C9%u5E94%u8BE5%u653E%u5728How%u91CC%u9762%uFF0C%u4F5C%u8005%u662F%u60F3%u627F%u4E0A%u542F%u4E0B%uFF0C%u5C06inline%u5427%uFF09%0A%0A%23%23%23Inline%20Method%0Ainline%u5F88%u7384%u4E4E%uFF0C%u5176%u5B9E%u5C31%u662F%u628A%u51FD%u6570%u7684%u4EE3%u7801%u590D%u5236%u5230%u8C03%u7528%u7684%u5730%u65B9%u3002%u597D%u5904%u662F%u4EC0%u4E48%uFF0C%u4F5C%u8005%u6709%u8BDD%u8BF4%uFF1A%0A%3EYou%20might%20like%20the%20second%20version%20better%2C%20or%20you%20might%20not.%20The%20point%20to%20note%20here%20is%20that%20you%20can%20use%20Inline%20Method%20to%20play%20around%20with%20the%20**flow%20of%20control**.%20%0A%u5176%u5B9E%u5C31%u662F%u8BA9%u4F60%u628A%u62BD%u8C61%u51FA%u6765%u7684%u4E1C%u897F%u653E%u5230%u4E00%u8D77%u91CD%u65B0%u62BD%u8C61%uFF0C%u770B%u770B%u4F1A%u4E0D%u4F1A%u6709%u66F4%u597D%u7684%u7ED3%u679C%u3002%u8FD9%u4E5F%u662F%u4E00%u79CD%u91CD%u6784%u7684%u65B9%u6CD5%u3002%0A%0A%23%23%23Extract%20Interface%0A%23%23%23%23How%0A%u5982%u4F55%u5C06%u4E00%u4E2A%u7C7B%u62BD%u8C61%u6210%u4E00%u4E2Ainterface%u3002%u6240%u8C13%u7684interface%u5C31%u662F%u53EA%u6709%u7EAF%u865A%u51FD%u6570%u7684%u7C7B%u3002%0A%3E1.%20Declare%20an%20interface.%20Sometimes%20the%20name%20of%20the%20existing%20class%20should%20be%20the%20name%20of%20the%20interface%2C%20in%20which%20case%20you%20should%20first%20rename%20the%20class.%0A%3E2.%20Have%20the%20existing%20class%20implement%20the%20interface.%0A%3E3.%20Add%20the%20necessary%20methods%20to%20the%20interface%2C%20expanding%20the%20visibility%20of%20the%20methods%20in%20the%20class%20if%20necessary.%0A%3E4.%20Change%20type%20declarations%20from%20the%20class%20to%20the%20interface%20where%20possible.%0A%0A%23%23%23%23Why%0A%u8FD9%u91CC%u63D0%u5230%u4E86%u4E24%u79CD%u60C5%u51B5%uFF1A%0A1.%20%u5F53%u4F60%u9700%u8981%u62BD%u8C61%u51FA%u7236%u7C7B%u65F6%0A2.%20%u5F53%u4F60%u7528%u4E86Mock%20Object%uFF0C%u73B0%u5728%u8981%u4E3A%u8FD9%u4E2Amock%20object%u62BD%u8C61%u51FA%u4E00%u4E2A%u771F%u6B63%u7684%u63A5%u53E3%u65F6%u3002%u4F5C%u8005%u8FD9%u91CC%u63D0%u5230%u4E86%u4E00%u4E2A%u5C0F%u6280%u5DE7%uFF0C%u5728%u8FD9%u79CD%u60C5%u51B5%u4E0B%u547D%u540D%u662F%u4E00%u4E2A%u5934%u75BC%u7684%u95EE%u9898%u3002%u4E0D%u59A8%u5C31%u628A%u65B0%u7684interface%u79F0%u4E3AIXXX%uFF0C%u4F8B%u5982%uFF0C%u539F%u6765%u7684%u53EB%60File%60%uFF0C%u65B0%u7684%u63A5%u53E3%u5C31%u79F0%u4E3A%60IFile%60%0A%0A%23%23%23Move%20Method%0A%u5176%u5B9E%u5C31%u662F%u628A%u4E00%u4E2A%u7C7B%u7684%u65B9%u6CD5%u79FB%u5230%u53E6%u5916%u4E00%u4E2A%u7C7B%u91CC%u9762%u3002%u4F46%u4F5C%u8005%u63D0%u5230%u4E86%u4E00%u79CD%u60C5%u51B5%u4E0B%uFF0C%u8FD9%u4E2A%u65B9%u6CD5%u4E0D%u9002%u7528%u3002%u5C31%u662F%u8FD9%u4E2A%u65B9%u6CD5%u4FEE%u6539%u4E86%u539F%u5148%u90A3%u4E2A%u7C7B%u7684%u6570%u636E%u3002%0A%0A%23%23%23Method%20Object%0A%u8FD9%u4E2A%u8BDD%u9898%u597D%u50CF%u5F88%u65B0%u9C9C%uFF0C%u4E4B%u524D%u770B%u5230%u8FC7%u5F88%u591A%u6B21%uFF0C%u4F46%u5E76%u6CA1%u6709%u6DF1%u7A76%u3002%u5148%u770B%u770BHow%uFF1A%0A%23%23%23%23How%0A%3E1.%20Create%20an%20object%20with%20the%20same%20parameters%20as%20the%20method.%0A%3E2.%20Make%20the%20local%20variables%20also%20instance%20variables%20of%20the%20object.%0A%3E3.%20Create%20one%20method%20called%20run%28%29%2C%20whose%20body%20is%20the%20same%20as%20the%20body%20of%20the%20original%20method.%0A%3E4.%20In%20the%20original%20method%2C%20create%20a%20new%20object%20and%20invoke%20run%28%29.%0A%0A%u6709%u4EC0%u4E48%u597D%u5904%uFF1F%0A%23%23%23%23Why%0A%u4E24%u4E2A%u597D%u5904%0A1.%20%u5728%u6DFB%u52A0%u590D%u6742%u903B%u8F91%u7684%u65F6%u5019%uFF0C%u5982%u679C%u6709%u5BF9%u4E00%u4E2A%u8FC7%u7A0B%u6709%u591A%u79CD%u65B9%u6CD5%uFF0C%u90A3%u521B%u5EFA%u4E00%u4E2A%u65B9%u6CD5%u5BF9%u8C61%uFF0C%u518D%u6269%u5C55%u8D77%u6765%u5C31%u5F88%u7B80%u5355%0A2.%20%u5728%u4E00%u4E2A%u590D%u6742%u51FD%u6570%u91CCextract%20interface%u7684%u65F6%u5019%uFF0C%u901A%u5E38%u4E00%u6BB5code%u9700%u89815%uFF0C6%u4E2A%u53C2%u6570%uFF0C%u8FD9%u6837%u7684%u8BDD%uFF0C%u867D%u7136%u51FD%u6570%u62BD%u53D6%u51FA%u6765%u4E86%uFF0C%u4F46%u662F%u5199%u6CD5%u5E76%u6CA1%u6709%u7B80%u5316%u591A%u5C11%u3002%u8FD9%u65F6%u5019%u5982%u679C%u6709%u65B9%u6CD5%u5BF9%u8C61%uFF0C%u5219%u5728%u7C7B%u91CC%u9762%u662F%u4E00%u4E2A%u72EC%u7ACB%u7684%u540D%u5B57%u7A7A%u95F4%uFF0C%u4F1A%u63D0%u4F9B%u989D%u5916%u7684%u4FBF%u5229%u3002%0A%0A%23%23%23Add%20Parameter%0A%u5C31%u662F%u52A0%u4E00%u4E2A%u53C2%u6570%uFF0C%u6CA1%u4EC0%u4E48%u7279%u522B%u7684%0A%0A%23%23%23Method%20Parameter%20to%20Constructor%20Parameter%0A%u5C31%u662F%u628A%u65B9%u6CD5%u8C03%u7528%u7684%u53C2%u6570%uFF0C%u53D8%u6210%u7C7B%u6210%u5458%u53D8%u91CF%u3002%u4E3A%u4EC0%u4E48%u8981%u8FD9%u4E48%u505A%uFF1F%0A%3EIf%20you%20pass%20the%20same%20parameter%20to%20several%20different%20methods%20in%20the%20same%20object%2C%20then%20you%20can%20simplify%20the%20API%20by%20passing%20the%20parameter%20once%20%28eliminating%20duplication%29.%20You%20can%20run%20this%20refactoring%20in%20reverse%20if%20you%20find%20that%20an%20instance%20variable%20is%20used%20in%20only%20one%20method.%0A%0A%u8FD9%u4E2A%u65B9%u6CD5%u7B80%u5355%u5B9E%u7528%u3002%0A%0A%23%23Chapter%2032.%20Mastering%20TDD%0A%u7ECF%u8FC731%u7AE0%u7684%u5B66%u4E60%uFF0C%u4F5C%u8005%u8BA4%u4E3A%u6211%u4EEC%u5DF2%u7ECF%u5B8C%u5B8C%u5168%u5168%u6709%u80FD%u529B%u6210%u4E3A%u4E00%u4E2A%u5408%u683C%u7684TDD%u7A0B%u5E8F%u5458%u4E86%u3002%u5728%u8FD9%u4E00%u7AE0%u91CC%uFF0C%u4F5C%u8005%u53C8%u603B%u7ED3%u51FA%u5F88%u591ATDD%u521D%u5B66%u8005%u7684%u95EE%u9898%uFF0C%u7ED9%u4E88%u56DE%u7B54%u3002%u7B54%u6848%u90FD%u662F%u4E00%u4E9B%u5F88%u5B9E%u7528%u7684%u5FE0%u544A%uFF0C%u7279%u6458%u53D6%u5982%u4E0B%u3002%0A%0A%23%23%23What%20don%27t%20you%20have%20to%20test%3F%0A%u4F5C%u8005%u5E76%u6CA1%u6709%u76F2%u76EE%u5F3A%u8C03%u6D4B%u8BD5%u91CD%u8981%uFF0C%u4E5F%u6CA1%u6709%u8BF4%u4EFB%u4F55%u5730%u65B9%u90FD%u8981%u5199%u6D4B%u8BD5%u3002%u4F5C%u8005%u8BF4%uFF1A%0A%3EUnless%20you%20have%20reason%20to%20distrust%20it%2C%20don%27t%20test%20code%20from%20others.%20%0A%3E%22Write%20tests%20until%20fear%20is%20transformed%20into%20boredom.%22%0A%0A%u53EA%u5728%u4F60%u4E0D%u76F8%u4FE1%u4F60%u7684code%u65F6%uFF0C%u5BF9%u4ED6%u8FDB%u884C%u6D4B%u8BD5%u3002%u6D4B%u8BD5%u4E5F%u4E0D%u662F%u4E3A%u4E86%u6D4B%u8BD5%u800C%u6D4B%u8BD5%uFF0C%u6216%u8005%u4E3A%u4E86%u4EE3%u7801%u7684%u5065%u58EE%uFF0C%u6D4B%u8BD5%u53EA%u662F%u4E3A%u4E86%u51CF%u5C11%u4F60%u7684%u7126%u8651%u3002%u8BA9%u4F60%u4E0D%u8981%u4ECE%u62C5%u5FC3%u53D8%u6210%u70E6%u8E81%uFF0C%u4EC5%u6B64%u800C%u5DF2%u3002%0A%u54CE%uFF01%u771F%u662F%u918D%u9190%u704C%u9876%uFF01%u76F8%u89C1%u6068%u665A%uFF01%0A%0A%23%23%23How%20do%20you%20know%20if%20you%20have%20good%20tests%3F%0A%u4EC0%u4E48%u6837%u7684%u6D4B%u8BD5%u4E0D%u597D%uFF1F%0A%3E1.%20Long%20setup%20code.%20%u5982%u679C%u4E3A%u4E86%u505A%u4E00%u4E2A%u7B80%u5355%u7684%u6D4B%u8BD5%uFF0C%u53EF%u80FD%u53EA%u6709%u51E0%u884C%u65AD%u8A00%uFF0C%u800C%u4E3A%u6B64%u521B%u5EFA%u4E00%u4E2A%u5DE8%u5927%u7684%u5BF9%u8C61%uFF0C%u90A3%u8BF4%u660E%u54EA%u91CC%u80AF%u5B9A%u51FA%u95EE%u9898%u4E86%u3002%0A%3E2.%20Setup%20duplication.%20%u5982%u679C%u4F60%u53D1%u73B0%u6709%u51E0%u4E2A%u6D4B%u8BD5%u62E5%u6709%u76F8%u540C%u6216%u76F8%u4F3C%u7684setup%u4EE3%u7801%uFF0C%u90A3%u8BF4%u660E%u4F60%u7684%u6D4B%u8BD5%u4E2D%u6709%u91CD%u590D%u7684%u5730%u65B9%u3002%0A%3E3.%20Long%20running%20tests.%20TDD%20tests%20that%20run%20a%20long%20time%20won%27t%20be%20run%20often.%20Suites%20that%20take%20longer%20than%20ten%20minutes%0Ainevitably%20get%20trimmed.%20%u4E00%u4E2A%u6D4B%u8BD5%u5957%u4EF6%u4E0D%u8981%u8D85%u8FC7%u5341%u5206%u949F%u3002%u5426%u5219%uFF0C%u53CD%u590D%u8FD0%u884C%u7684%u673A%u4F1A%u5C31%u4F1A%u6025%u5267%u964D%u4F4E%u3002%0A%3E4.%20Fragile%20tests.%20Tests%20that%20break%20unexpectedly%20suggest%20that%20one%20part%20of%20the%20application%20is%20surprisingly%20affecting%20another%20part.%20%u5982%u679C%u6D4B%u8BD5%u88AB%u65E0%u60C5%u6253%u65AD%uFF0C%u8BF4%u660E%u4F60%u7684%u7A0B%u5E8F%u91CC%u6709%u8026%u5408%u3002%0A%0A%23%23%23How%20does%20TDD%20lead%20to%20frameworks%3F%0A%u53C8%u88AB%u918D%u9190%u704C%u9876%u4E86%uFF01%0A%3ETDD%20appears%20to%20stand%20this%20advice%20on%20its%20head%3A%20%3Cb%3E%3Cfont%20color%3D%22IndianRed%22%3E%22Code%20for%20tomorrow%2C%20design%20for%20today.%22%20%3C/font%3E%3C/b%3EHere%27s%20what%20happens%20in%20practice.%20%u4E0D%u8981%u4E3A%u672A%u6765%u8003%u8651%u90A3%u4E48%u591A%uFF0C%u7B80%u5355%u7684%u8BA9%u6D4B%u8BD5%u901A%u8FC7%uFF0C%u7136%u540E%u53CA%u65F6%u7684%u505A%u91CD%u6784%u6D88%u9664%u91CD%u590D%uFF0C%u53CD%u800C%u80FD%u8FBE%u5230%u66F4%u597D%u7684%u8BBE%u8BA1%u6846%u67B6%uFF08frameworks%uFF09%u3002%0A%0A%23%23%23How%20much%20feedback%20do%20you%20need%3F%0A%u8FD9%u91CC%u8BF4%u7684%u548C%u4E4B%u524D%u4E00%u76F4%u5F3A%u8C03%u7684%u601D%u60F3%u5F88%u4E00%u81F4%0A%3E%20If%20our%20knowledge%20of%20the%20implementation%20gives%20us%20confidence%20even%20without%20a%20test%2C%20then%20we%20will%20not%20write%20that%20test.%20%0A%0A%23%23%23When%20should%20you%20delete%20tests%3F%0A%3E1.%20The%20first%20criterion%20for%20your%20tests%20is%20**confidence**.%20Never%20delete%20a%20test%20if%20it%20reduces%20your%20confidence%20in%20the%20behavior%20of%20the%20system.%0A%3E2.%20The%20second%20criterion%20is%20**communication**.%20If%20you%20have%20two%20tests%20that%20exercise%20the%20same%20path%20through%20the%20code%2C%20but%20they%20speak%20to%20different%20scenarios%20for%20a%20reader%2C%20leave%20them%20alone.%0A%0A%23%23%23Can%20you%20drive%20development%20with%20application-level%20tests%3F%0A%u4E0D%u8981%u5C1D%u8BD5%u505A%u5E94%u7528%u7EA7%u522B%u7684test%0A%0A%23%23%23How%20do%20you%20switch%20to%20TDD%20midstream%3F%0A%u8FD9%u4E5F%u662F%u6211%u60F3%u95EE%u7684%uFF0C%u4F5C%u8005%u7684%u56DE%u7B54%u662F%u8FD9%u672C%u4E66%u5C31%u662F%u4E3A%u4E86%u8FD9%u4E2A%u800C%u5199%u7684%u3002%0A%3EThere%20is%20a%20whole%20book%20%28or%20books%29%20to%20be%20written%20about%20switching%20to%20TDD%20when%20you%20have%20lots%20of%20code.%20What%20follows%20is%20necessarily%20only%20a%20teaser.%0A%0A%u600E%u4E48%u505A%uFF1F%0A1.%20So%20first%20we%20have%20to%20decide%20to%20limit%20the%20scope%20of%20our%20changes.%20%0A2.%20Second%2C%20we%20have%20to%20break%20the%20deadlock%20between%20tests%20and%20refactoring.%20%0A%093.%20%u600E%u4E48%u83B7%u5F97feedback%0A%09%091%29%20We%20can%20get%20feedback%20other%20ways%20than%20with%20tests%2C%20like%20working%20very%20carefully%20and%20with%20a%20partner.%20%0A%09%092%29%20We%20can%20get%20feedback%20at%20a%20gross%20level%2C%20like%20system-level%20tests%20that%20we%20know%20aren%27t%20adequate%20but%20give%20us%20some%20confidence.%20With%20this%20feedback%2C%20we%20can%20make%20the%20areas%20we%20have%20to%20change%20more%20accepting%20of%20change.%0A%0A%23%23%23How%20does%20TDD%20relate%20to%20the%20practices%20of%20Extreme%20Programming%3F%0A%u540D%u8BCD%u89E3%u91CA%uFF1A%5BExtreme%20Programming%20-%20XP%5D%28http%3A//baike.baidu.com/link%3Furl%3DNgfFcw4hxjOQHRtEArm4buq177_Xw562MDhrOykDcd-0EOv1xB_Oz3eslAn9X65cFdUel2xI7tTiqB3Gqyz3Ja%29%u6781%u9650%u7F16%u7A0B%0A%3E%u6781%u9650%u7F16%u7A0B%u662F%u4E00%u4E2A%u8F7B%u91CF%u7EA7%u7684%u3001%u7075%u5DE7%u7684%u8F6F%u4EF6%u5F00%u53D1%u65B9%u6CD5%uFF1B%u540C%u65F6%u5B83%u4E5F%u662F%u4E00%u4E2A%u975E%u5E38%u4E25%u8C28%u548C%u5468%u5BC6%u7684%u65B9%u6CD5%u3002%u5B83%u7684%u57FA%u7840%u548C%u4EF7%u503C%u89C2%u662F%u4EA4%u6D41%u3001%u6734%u7D20%u3001%u53CD%u9988%u548C%u52C7%u6C14%uFF1B%u5373%uFF0C%u4EFB%u4F55%u4E00%u4E2A%u8F6F%u4EF6%u9879%u76EE%u90FD%u53EF%u4EE5%u4ECE%u56DB%u4E2A%u65B9%u9762%u5165%u624B%u8FDB%u884C%u6539%u5584%uFF1A%u52A0%u5F3A%u4EA4%u6D41%uFF1B%u4ECE%u7B80%u5355%u505A%u8D77%uFF1B%u5BFB%u6C42%u53CD%u9988%uFF1B%u52C7%u4E8E%u5B9E%u4E8B%u6C42%u662F%u3002XP%u662F%u4E00%u79CD%u8FD1%u87BA%u65CB%u5F0F%u7684%u5F00%u53D1%u65B9%u6CD5%uFF0C%u5B83%u5C06%u590D%u6742%u7684%u5F00%u53D1%u8FC7%u7A0B%u5206%u89E3%u4E3A%u4E00%u4E2A%u4E2A%u76F8%u5BF9%u6BD4%u8F83%u7B80%u5355%u7684%u5C0F%u5468%u671F%uFF1B%u901A%u8FC7%u79EF%u6781%u7684%u4EA4%u6D41%u3001%u53CD%u9988%u4EE5%u53CA%u5176%u5B83%u4E00%u7CFB%u5217%u7684%u65B9%u6CD5%uFF0C%u5F00%u53D1%u4EBA%u5458%u548C%u5BA2%u6237%u53EF%u4EE5%u975E%u5E38%u6E05%u695A%u5F00%u53D1%u8FDB%u5EA6%u3001%u53D8%u5316%u3001%u5F85%u89E3%u51B3%u7684%u95EE%u9898%u548C%u6F5C%u5728%u7684%u56F0%u96BE%u7B49%uFF0C%u5E76%u6839%u636E%u5B9E%u9645%u60C5%u51B5%u53CA%u65F6%u5730%u8C03%u6574%u5F00%u53D1%u8FC7%u7A0B%u3002%0A%0ATDD%u4E0EXP%u7684%u5171%u901A%u4E4B%u5904%uFF1A%0A-%20Pairing%0A-%20Work%20fresh%0A-%20Continuous%20integration%0A-%20Simple%20design%0A-%20Refactoring%0A-%20Continuous%20delivery&lt;/center&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
        <category term="读书笔记" />
        <category term="TDD" />
        <category term="unittest" />
        <category term="Programming" />
        <updated>2016-02-16T08:37:39.000Z</updated>
    </entry>
</feed>
