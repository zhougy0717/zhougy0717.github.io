{
    "version": "https://jsonfeed.org/version/1",
    "title": "Big Ben • All posts by \"c++\" tag",
    "description": null,
    "home_page_url": "https://blog.zhougy.top",
    "items": [
        {
            "id": "https://blog.zhougy.top/2021/09/18/obsidian_posts/initializer-list%E5%92%8C%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96/",
            "url": "https://blog.zhougy.top/2021/09/18/obsidian_posts/initializer-list%E5%92%8C%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96/",
            "title": "initializer-list和列表初始化",
            "date_published": "2021-09-18T14:07:11.246Z",
            "content_html": "<h1 id=\"C-11的列表初始化\"><a href=\"#C-11的列表初始化\" class=\"headerlink\" title=\"C++11的列表初始化\"></a>C++11的列表初始化</h1><p>在C语言和C++98/03中，大括号可以用来初始化数组，例如：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;; <span class=\"comment\">// 如果个数不足的，用0初始化</span></span><br></pre></td></tr></table></figure></p>\n<p>C++11将这类大括号初始化，扩展到自定义类型，但需要满足一定的条件，否则会编译报错。</p>\n<blockquote>\n<p>参考<a href=\"https://blog.csdn.net/JinhuCheng/article/details/107330983\">C++11新特性之列表初始化、POD、聚合类</a></p>\n<ol>\n<li>C++98/03标准中对于普通数组和POD类型可以直接使用列表初始化；</li>\n<li>C++11标准中对于普通数组和聚合类型可以直接使用列表初始化；</li>\n<li>C++11标准中对于非聚合类型可以通过自定义构造函数的方式使用列表初始化。<br><a href=\"https://blog.csdn.net/hailong0715/article/details/54018002\">C++11新特性之列表初始化</a>提到非聚合类型不能使用列表初始化是不对的。实验证明，不论是不是聚合类型，均可以采用列表初始化。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">A</span>(<span class=\"keyword\">int</span> a1) &#123;&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">A</span>(std::initializer_list&lt;<span class=\"keyword\">int</span>&gt; l) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a &#123;<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA a = &#123;<span class=\"number\">123</span>&#125;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n首先声明<code>A a=&#123;123&#125;</code>或者<code>A a&#123;123&#125;</code>这两种构造方法是一致的。<br>其次，对于这种构造方法，编译器会先尝试用<code>A(std::initializer_list&lt;int&gt; l)</code>去匹配，如果不成功，则会尝试<code>A(int)</code>，如果这两种构造函数都未定义，就会编译报错。<br>另外，成员变量也可以采用就地初始化, 虽然这会导致类成为非聚合类，但并不妨碍其采用列表初始化方法。使用虚函数，有基类的效果都是一样的，不影响列表初始化方法的使用。<h2 id=\"C-11中的几种初始化方法\"><a href=\"#C-11中的几种初始化方法\" class=\"headerlink\" title=\"C++11中的几种初始化方法\"></a>C++11中的几种初始化方法</h2></li>\n<li>就地初始化<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a1 &#123;<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> a2 = &#123;<span class=\"number\">12.0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> a3 = <span class=\"number\">12.0</span></span><br><span class=\"line\">        B b&#123;<span class=\"number\">123</span>&#125;</span><br><span class=\"line\">        C c = &#123;<span class=\"number\">123</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>构造函数初始化列表<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">A</span>() : <span class=\"built_in\">a</span>(<span class=\"number\">123</span>), <span class=\"built_in\">b</span>(<span class=\"number\">456</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>列表初始化<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">A</span>(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">A</span>(std::initializer_list&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 优先匹配A(std::initializer_list&lt;int, int&gt;)</span></span><br><span class=\"line\">    <span class=\"comment\">// 再匹配A(int, int)</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则报错</span></span><br><span class=\"line\">    A a &#123;<span class=\"number\">123</span>, <span class=\"number\">456</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>就地初始化会最先得到执行，构造函数初始化列表会覆盖就地初始化的值</li>\n<li>如果采用初始化列表，即<code>a&#123;...&#125;</code>初始化，<code>std::initializer_list&lt;T&gt;</code>的构造函数会优先得到执行</li>\n<li>如果采用原生构造函数，即<code>a(int)</code>初始化，<code>A(init)</code>优先得到执行<h1 id=\"什么是initializer-list\"><a href=\"#什么是initializer-list\" class=\"headerlink\" title=\"什么是initializer-list\"></a>什么是initializer-list</h1><strong>摘录<a href=\"https://blog.csdn.net/hailong0715/article/details/54018002\">C++11新特性之列表初始化</a></strong>-初始化列表</li>\n</ul>\n<ol>\n<li>它是一个轻量级的容器类型，内部定义了迭代器iterator等容器必须的一些概念。 </li>\n<li>initialzer-list<T>来说，它可以接受任意长度的初始化列表，但是元素必须是要相同的或者可以转换为T类型的。  </T></li>\n<li>三个成员接口，begin(),end(),size(),其中size()返回initialzer-list的长度。  </li>\n<li>能被整体的初始化和赋值，遍历只能通过begin和end迭代器来，遍历取得的数据是可读的，是不能对单个进行修改的。  </li>\n</ol>\n</blockquote>\n<p>注意一：<br>initialzer-list<T>保存的是T类型的引用，并不对T类型的数据进行拷贝，因此需要注意变量的生存期</T></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::initializer_list&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123; <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> c = <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = c.<span class=\"built_in\">begin</span>(); it != c.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; it - c.<span class=\"built_in\">begin</span>() &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; (*it) &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处打印是乱的。因为func返回的是右值引用，在退出函数后失效。</p>\n<p>注意二：<br>列表初始化防止类型收窄<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1.1</span>; <span class=\"comment\">//OK</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b&#123; <span class=\"number\">1.1</span> &#125;; <span class=\"comment\">//error</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">float</span> f1 = <span class=\"number\">1e40</span>; <span class=\"comment\">//OK, 科学计数法10^40</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> f2&#123; <span class=\"number\">1e40</span> &#125;; <span class=\"comment\">//error</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x = <span class=\"number\">1024</span>, y = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> c = x; <span class=\"comment\">//OK</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> d&#123; x &#125;;<span class=\"comment\">//error</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> e = y;<span class=\"comment\">//error</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> f&#123; y &#125;;<span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://en.cppreference.com/w/cpp/utility/initializer_list\">initializer_list - cppreference.com</a><br><a href=\"https://blog.csdn.net/hailong0715/article/details/54018002\">C++11新特性之列表初始化</a><br><a href=\"https://blog.csdn.net/JinhuCheng/article/details/107330983\">C++11新特性之列表初始化、POD、聚合类</a></p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://blog.zhougy.top/2021/09/18/obsidian_posts/%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B&POD/",
            "url": "https://blog.zhougy.top/2021/09/18/obsidian_posts/%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B&POD/",
            "title": "聚合类型&POD",
            "date_published": "2021-09-18T14:03:05.792Z",
            "content_html": "<h1 id=\"什么是聚合类型\"><a href=\"#什么是聚合类型\" class=\"headerlink\" title=\"什么是聚合类型\"></a>什么是聚合类型</h1><blockquote>\n<p><strong>C++03定义</strong><br>An aggregate is an array or a class (clause 9) with no user-declared constructors (12.1), no private or protected non-static data members (clause 11), no base classes (clause 10), and no virtual functions (10.3).</p>\n<p><strong>C++11定义</strong><br>An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no brace-or-equal-initializers for non-static data members (9.2), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>结合C++03和C++11标准定义，罗列一下聚合类型的特性：</p>\n<ul>\n<li>聚合类型可以有构造函数，但只能是编译器定义的默认构造函数，或者用<code>=default</code>定义的构造函数</li>\n<li>聚合类型不能有private，protected非static变量</li>\n<li>聚合类型可以有copy-assignment operator and/or destructor</li>\n<li>数组是聚合类型，即便数组成员是非聚合类型</li>\n<li>聚合类型的数组可以是非聚合类型</li>\n<li>聚合类型不能用brace-or-equal-initializers（即就地初始化）初始化非static成员。</li>\n</ul>\n<h2 id=\"聚合类型变量初始化\"><a href=\"#聚合类型变量初始化\" class=\"headerlink\" title=\"聚合类型变量初始化\"></a>聚合类型变量初始化</h2><p>聚合类型可以采用列表初始化（其实非聚合类型，通过自定义构造函数，也可以采用列表初始化）<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(m == n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// the ith element of the array is initialized with ai</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(m &lt; n) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// the first m elements of the array are initialized with a1,  a2, …, am and the other n - m elements are, if possible, value-initialized (see below for the explanation of the term)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(m &gt; n) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// the compiler will issue an error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">/*(this is the case when n isn&#x27;t specified at all like int a[] = &#123;1, 2, 3&#125;;) */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// the size of the array (n) is assumed to be equal to m, so int a[] = &#123;1, 2, 3&#125;; is equivalent to int a[3] = &#123;1, 2, 3&#125;;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>聚合变量最大的特点可以做<strong>聚合初始化</strong>，除了基本的列表初始化规则，聚合初始化还体现在可以递归初始化。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">X</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i1;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Y</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">  X x;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i[<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">float</span> f; </span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> d;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span></span>&#123;&#125;      </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Z</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> a;</span><br><span class=\"line\">  X x;</span><br><span class=\"line\">  <span class=\"built_in\">Z</span>(<span class=\"keyword\">char</span> a1) &#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Y y = &#123;<span class=\"string\">&#x27;a&#x27;</span>, &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>&#125;, &#123;<span class=\"number\">20</span>, <span class=\"number\">30</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><br><code>y.x</code>也被初始化了。如果对Z用递归聚合初始化，例如<code>Z z = &#123;&#39;a&#39;, &#123;&#39;b&#39;&#125;&#125;</code>，编译器就会报错。因为Z不是聚合类型，编译器会去找对应的构造函数，显然Z没定义这样的构造函数。<br>具体介绍可以参考<a href=\"https://en.cppreference.com/w/cpp/language/aggregate_initialization\">Aggregate initialization</a>。</p>\n<h1 id=\"什么是POD变量\"><a href=\"#什么是POD变量\" class=\"headerlink\" title=\"什么是POD变量\"></a>什么是POD变量</h1><p>POD = Plain Old Data，可见这是一种兼容型比较好的形态。甚至可以导出与其他语言共享此类变量定义。</p>\n<blockquote>\n<p><strong>C++03定义</strong><br>A POD-struct is an aggregate class that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-defined copy assignment operator and no user-defined destructor. Similarly, a POD-union is an aggregate union that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-defined copy assignment operator and no user-defined destructor. A POD class is a class that is either a POD-struct or a POD-union.</p>\n<p>C++11定义变得非常优雅<br><strong>A POD struct is a non-union class that is both a trivial class and a standard-layout class</strong>, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). Similarly, a POD union is a union that is both a trivial class and a standard layout class, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). A POD class is a class that is either a POD struct or a POD union.</p>\n</blockquote>\n<p>总而言之：<br>POD类型是一种特殊的聚合类型，一个POD类型为：</p>\n<ul>\n<li>标量类型。</li>\n<li>满足以下条件的自定义类型：<ul>\n<li>C++11之前：<ul>\n<li>聚合类型。</li>\n<li>没有非POD类型的非静态成员变量。</li>\n<li>没有引用类型的非静态成员变量。</li>\n<li>没有自定义的构造函数或析构函数。</li>\n</ul>\n</li>\n<li>C++11之后：<ul>\n<li>是平凡类。</li>\n<li>是标准布局类。</li>\n<li>没有非POD类型的非静态成员变量。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>POD类型的数组。</li>\n</ul>\n<h1 id=\"聚合类型或是POD变量有什么好处？\"><a href=\"#聚合类型或是POD变量有什么好处？\" class=\"headerlink\" title=\"聚合类型或是POD变量有什么好处？\"></a>聚合类型或是POD变量有什么好处？</h1><p>聚合类最大的特点就是可以采用聚合初始化。<br>POD的特点更为实用一些</p>\n<blockquote>\n<p><strong>POD的用途</strong><br>平凡类的用途：</p>\n<ul>\n<li>平凡类的对象可以与字节流之间安全转换，即：<ul>\n<li>若要将对象转为字节流，直接取其地址即可。</li>\n<li>若要将字节流转为对象，直接将该地址cast为对象指针即可。</li>\n<li>直接通过复制字节的方式复制对象。</li>\n</ul>\n</li>\n<li>安全的静态初始化。<ul>\n<li>C++11的thread_local变量可以是非平凡类型，但在某些编译器下会有比较大的性能开销。gcc扩展的__thread只能使用POD类型。</li>\n</ul>\n</li>\n</ul>\n<p><strong>标准布局类的用途：</strong><br>跨进程、跨语言使用。</p>\n</blockquote>\n<h1 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h1><h2 id=\"value-initialization\"><a href=\"#value-initialization\" class=\"headerlink\" title=\"value initialization\"></a>value initialization</h2><ul>\n<li>对于普通类型变量(bool, int, char, double, pointers, etc.)<br>it means it is initialized with 0 for that type (false for bool, 0.0 for double, etc.). </li>\n<li>对于class类型<ul>\n<li>如果有自定义构造函数，则调用自定义构造函数</li>\n<li>如果没有自定一构造函数，则调用默认构造函数</li>\n<li>如果没有对应的构造函数，则报错</li>\n</ul>\n</li>\n</ul>\n<p>举例<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"built_in\">A</span>(<span class=\"keyword\">int</span>) &#123;&#125; <span class=\"comment\">//no default constructor</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"built_in\">B</span>() &#123;&#125; <span class=\"comment\">//default constructor available</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  A a1[<span class=\"number\">3</span>] = &#123;<span class=\"built_in\">A</span>(<span class=\"number\">2</span>), <span class=\"built_in\">A</span>(<span class=\"number\">1</span>), <span class=\"built_in\">A</span>(<span class=\"number\">14</span>)&#125;; <span class=\"comment\">//OK n == m</span></span><br><span class=\"line\">  A a2[<span class=\"number\">3</span>] = &#123;<span class=\"built_in\">A</span>(<span class=\"number\">2</span>)&#125;; <span class=\"comment\">//ERROR A has no default constructor. Unable to value-initialize a2[1] and a2[2]</span></span><br><span class=\"line\">  B b1[<span class=\"number\">3</span>] = &#123;<span class=\"built_in\">B</span>()&#125;; <span class=\"comment\">//OK b1[1] and b1[2] are value initialized, in this case with the default-ctor</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> Array1[<span class=\"number\">1000</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">//All elements are initialized with 0;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> Array2[<span class=\"number\">1000</span>] = &#123;<span class=\"number\">1</span>&#125;; <span class=\"comment\">//Attention: only the first element is 1, the rest are 0;</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> Array3[<span class=\"number\">1000</span>] = &#123;&#125;; <span class=\"comment\">//the braces can be empty too. All elements initialized with false</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> Array4[<span class=\"number\">1000</span>]; <span class=\"comment\">//no initializer. This is different from an empty &#123;&#125; initializer in that</span></span><br><span class=\"line\">  <span class=\"comment\">//the elements in this case are not value-initialized, but have indeterminate values </span></span><br><span class=\"line\">  <span class=\"comment\">//(unless, of course, Array4 is a global array)</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> array[<span class=\"number\">2</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;; <span class=\"comment\">//ERROR, too many initializers</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>大括号中个数不足的，用value initialization补足。这就是<code>A a = &#123;1&#125;;</code>或者<code>A a = &#123;&#125;</code>的含义。大括号中个数超过声明的个数的，则编译报错。</p>\n<h2 id=\"brace-or-equal-initializers\"><a href=\"#brace-or-equal-initializers\" class=\"headerlink\" title=\"brace-or-equal-initializers\"></a>brace-or-equal-initializers</h2><p>类成员的一种初始化方法<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>(<span class=\"keyword\">int</span>)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b &#123;<span class=\"number\">456</span>&#125;;</span><br><span class=\"line\">    B c &#123;<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">    B d = &#123;<span class=\"number\">34</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"copy-assignment-operator\"><a href=\"#copy-assignment-operator\" class=\"headerlink\" title=\"copy-assignment operator\"></a>copy-assignment operator</h2><p>拷贝赋值方法<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\">A <span class=\"title\">A</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"keyword\">const</span> &amp;) &#123;&#125;</span><br><span class=\"line\">    A&amp; <span class=\"keyword\">operator</span>= (<span class=\"keyword\">const</span> A&amp;a) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    A b = a; <span class=\"comment\">// 这里调用的是拷贝构造函数</span></span><br><span class=\"line\">    A c;</span><br><span class=\"line\">    c = a; <span class=\"comment\">// 这里才会调用拷贝复制函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"trial-stuff\"><a href=\"#trial-stuff\" class=\"headerlink\" title=\"trial stuff\"></a>trial stuff</h2><h3 id=\"trivial-copyable\"><a href=\"#trivial-copyable\" class=\"headerlink\" title=\"trivial copyable\"></a>trivial copyable</h3><p>参考<a href=\"https://en.cppreference.com/w/cpp/named_req/TriviallyCopyable\">C++ named requirements: TriviallyCopyable</a></p>\n<blockquote>\n<p>The following types are collectively called trivially copyable types:</p>\n<ul>\n<li>Scalar types</li>\n<li>Trivially copyable classes, i.e. classes satisfying following requirements:<ul>\n<li>At least one copy constructor, move constructor, copy assignment operator, or move assignment operator is eligible</li>\n<li>Every eligible copy constructor (if any) is trivial</li>\n<li>Every eligible move constructor (if any) is trivial</li>\n<li>Every eligible copy assignment operator (if any) is trivial</li>\n<li>Every eligible move assignment operator (if any) is trivial</li>\n<li>Has a trivial non-deleted destructor</li>\n</ul>\n</li>\n<li>Arrays of TriviallyCopyable objects</li>\n</ul>\n<p>This implies that a trivially copyable class has no virtual functions or virtual base classes.</p>\n</blockquote>\n<p>通过模版<a href=\"https://en.cppreference.com/w/cpp/types/is_trivially_copyable\">std::is_trivially_copyable</a>可以检验一个类是否trivially copyable。</p>\n<h3 id=\"trivial-constructor-destructor\"><a href=\"#trivial-constructor-destructor\" class=\"headerlink\" title=\"trivial constructor/destructor\"></a>trivial constructor/destructor</h3><ul>\n<li>编译器定义的构造/析构函数</li>\n<li>用<code>=default</code>定义的构造析构函数<h3 id=\"trivial-class\"><a href=\"#trivial-class\" class=\"headerlink\" title=\"trivial class\"></a>trivial class</h3>The standard defines a trivial class as follows:</li>\n</ul>\n<p>A trivially copyable class is a class that:</p>\n<ul>\n<li>has no non-trivial copy constructors (12.8),</li>\n<li>has no non-trivial move constructors (12.8),</li>\n<li>has no non-trivial copy assignment operators (13.5.3, 12.8),</li>\n<li>has no non-trivial move assignment operators (13.5.3, 12.8), and</li>\n<li>has a trivial destructor (12.4).</li>\n</ul>\n<p>A trivial class is a class that has a trivial default constructor (12.1) and is trivially copyable.</p>\n<p>[ Note: In particular, a trivially copyable or trivial class does not have virtual functions or virtual base classes. ]<br>另外trivial class是递归的，即trivial class不能有非trivial class的非static成员。<br>用模版<a href=\"https://en.cppreference.com/w/cpp/types/is_trivial\">std::is_trivial</a>来测试</p>\n<h2 id=\"standard-layout\"><a href=\"#standard-layout\" class=\"headerlink\" title=\"standard layout\"></a>standard layout</h2><p>A standard-layout class is a class that:</p>\n<ul>\n<li><p>has no non-static data members of type non-standard-layout class (or array of such types) or reference,</p>\n</li>\n<li><p>has no virtual functions (10.3) and no virtual base classes (10.1),</p>\n</li>\n<li><p>has the same access control (Clause 11) for all non-static data members,</p>\n</li>\n<li><p>has no non-standard-layout base classes,</p>\n</li>\n<li><p>either has no non-static data members in the most derived class and at most one base class with non-static data members, or has no base classes with non-static data members, (要么终点类没有非静态成员，并且只有一个基类有非静态成员；要么没有基类有非静态成员)，and</p>\n</li>\n<li><p>has no base classes of the same type as the first non-static data member.</p>\n</li>\n</ul>\n<p>A standard-layout struct is a standard-layout class defined with the class-key struct or the class-key class.</p>\n<p>A standard-layout union is a standard-layout class defined with the class-key union.</p>\n<p>[ Note: Standard-layout classes are useful for communicating with code written in other programming languages. Their layout is specified in 9.2.]</p>\n<p>标准内存分布，确保对象内存和C语言的结构体内存分布完全一致。使得POD变量具备了C兼容性。<br>用模版<a href=\"https://en.cppreference.com/w/cpp/types/is_standard_layout\">std::is_standard_layout</a>可以测试</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>用<a href=\"https://en.cppreference.com/w/cpp/types/is_pod\">std::is_pod</a>来测试你的类吧。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ol>\n<li><a href=\"https://stackoverflow.com/questions/4178175/what-are-aggregates-and-pods-and-how-why-are-they-special\">What are Aggregates and PODs and how/why are they special?</a></li>\n<li><a href=\"https://fuzhe1989.github.io/2018/03/15/cpp-object-model-pod/\">C++对象模型（三）POD</a></li>\n</ol>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://blog.zhougy.top/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/",
            "url": "https://blog.zhougy.top/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/",
            "title": "unique_ptr到底是否能按值传递？",
            "date_published": "2021-08-22T02:36:37.359Z",
            "content_html": "<p>答案是否定的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(std::unique_ptr&lt;<span class=\"keyword\">int</span>&gt; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> a = std::make_unique&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">func</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这段代码是不能编译的，因为uniqe_ptr没有拷贝构造函数。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ben@LUbuntu ~/t/unique_ptr&gt; g++ -o <span class=\"built_in\">test</span> main.cpp -std=c++14</span><br><span class=\"line\"></span><br><span class=\"line\">main.cpp: In <span class=\"keyword\">function</span> ‘int main()’:</span><br><span class=\"line\"></span><br><span class=\"line\">main.cpp:10:11: error: use of deleted <span class=\"keyword\">function</span> ‘std::unique_ptr&lt;_Tp, _Dp&gt;::unique_ptr(const std::unique_ptr&lt;_Tp, _Dp&gt;&amp;) [with _Tp = int; _Dp = std::default_delete&lt;int&gt;]’</span><br><span class=\"line\"></span><br><span class=\"line\">10 | func(a);</span><br><span class=\"line\"></span><br><span class=\"line\">|</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>那为什么问这个问题？看下面这段代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(std::unique_ptr&lt;<span class=\"keyword\">int</span>&gt; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">func</span>(std::make_unique&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这个是可以编译的，执行也没问题。再看make_unique的原型。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt; class T, class... Args &gt;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">unique_ptr&lt;T&gt; <span class=\"title\">make_unique</span><span class=\"params\">( Args&amp;&amp;... args )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt; class T &gt;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">unique_ptr&lt;T&gt; <span class=\"title\">make_unique</span><span class=\"params\">( std::<span class=\"keyword\">size_t</span> size )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span>... <span class=\"title\">Args</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* unspecified */</span> <span class=\"built_in\">make_unique</span>( Args&amp;&amp;... args ) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可见make_unique的返回值是unique_ptr。那么前面那段代码就给人造成了unique_ptr似乎也可以按值传递的假象。到底是什么原因呢？后面我们结合汇编一起分析一下，编译器针对这样的场景做了什么优化。</p>\n<h1 id=\"make-unique的返回值直接作为函数参数的真相\"><a href=\"#make-unique的返回值直接作为函数参数的真相\" class=\"headerlink\" title=\"make_unique的返回值直接作为函数参数的真相\"></a>make_unique的返回值直接作为函数参数的真相</h1><p>直接通过<code>objectdum -tCS test &gt; test.dump</code>命令对可执行文件进行反汇编。注意编译时，要指定<code>-g -O0</code>。这样反汇编时，信息更多一些。</p>\n<p>由于STL扩展代码，外加C++编译器插入的一些初始化和退出清理代码，反汇编产生的文件行数较多，我们只需关注核心的main函数以及一些相关的函数即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">4008a8: a9be7bfd stp x29, x30, [sp, #-32]! // 将x29,x30存储于sp-32处，且sp = sp-32</span><br><span class=\"line\"></span><br><span class=\"line\">4008ac: 910003fd mov x29, sp</span><br><span class=\"line\"></span><br><span class=\"line\">func(std::make_unique&lt;int&gt;(1));</span><br><span class=\"line\"></span><br><span class=\"line\">4008b0: 52800020 mov w0, #0x1 // #1</span><br><span class=\"line\"></span><br><span class=\"line\">4008b4: b9001fe0 str w0, [sp, #28]</span><br><span class=\"line\"></span><br><span class=\"line\">4008b8: 910073e0 add x0, sp, #0x1c</span><br><span class=\"line\"></span><br><span class=\"line\">4008bc: 910043e1 add x1, sp, #0x10</span><br><span class=\"line\"></span><br><span class=\"line\">4008c0: aa0103e8 mov x8, x1</span><br><span class=\"line\"></span><br><span class=\"line\">4008c4: 94000027 bl 400960 &lt;std::_MakeUniq&lt;int&gt;::__single_object std::make_unique&lt;int, int&gt;(int&amp;&amp;)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">4008c8: 910043e0 add x0, sp, #0x10</span><br><span class=\"line\"></span><br><span class=\"line\">4008cc: 97fffff2 bl 400894 &lt;func(std::unique_ptr&lt;int, std::default_delete&lt;int&gt; &gt;)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">4008d0: 910043e0 add x0, sp, #0x10</span><br><span class=\"line\"></span><br><span class=\"line\">4008d4: 94000035 bl 4009a8 &lt;std::unique_ptr&lt;int, std::default_delete&lt;int&gt; &gt;::~unique_ptr()&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">4008d8: 52800000 mov w0, #0x0 // #0</span><br><span class=\"line\"></span><br><span class=\"line\">4008dc: a8c27bfd ldp x29, x30, [sp], #32</span><br><span class=\"line\"></span><br><span class=\"line\">4008e0: d65f03c0 ret</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">///@&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"调用make-unique前的准备\"><a href=\"#调用make-unique前的准备\" class=\"headerlink\" title=\"调用make_unique前的准备\"></a>调用make_unique前的准备</h2><p>main函数的第一行指令，将栈指针（sp）移动到了栈底，并保存了x29和x30寄存器。寄存器含义可以参考附录。在调用make_unique前，栈内存如下图。<br><img src=\"/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/Pasted%20image%2020210822121125.png\" alt></p>\n<h3 id=\"ARM函数调用约定\"><a href=\"#ARM函数调用约定\" class=\"headerlink\" title=\"ARM函数调用约定\"></a>ARM函数调用约定</h3><p>也叫AAPCS，Procedure Call Standard for the Arm Architecture。对于aarch64，简而言之就是：</p>\n<ul>\n<li><p>小于8个参数时，使用x0-x7寄存器</p>\n</li>\n<li><p>超过8个参数，按顺序从右往左入栈（因为栈是先入后出的）</p>\n</li>\n<li><p>返回地址在lr寄存器，返回值的值在x0寄存器</p>\n</li>\n</ul>\n<h3 id=\"make-unique的参数传递\"><a href=\"#make-unique的参数传递\" class=\"headerlink\" title=\"make_unique的参数传递\"></a>make_unique的参数传递</h3><p>按照AAPCS的理解，make_unique的实现函数实际有两个入参：一个是uniuqe_ptr的构造函数参数1，另一个就是用来存放unique_ptr对象指针的地址，即x1。</p>\n<p>这样就很好理解了，调用完make_unique，下一步就是使用make_unique的输出调用func了。也就是<code>add x0, sp, #0x10</code>z这一行。将保存了unique_ptr指针的地址赋予了func函数的唯一一个参数。</p>\n<blockquote>\n<p><strong>所以可见，func函数并不是传递unique_ptr的值，而是通过编译器生成了一个临时变量保存了make_unique返回的unique_ptr对象指针，并传递给了func。</strong></p>\n</blockquote>\n<h3 id=\"按引用传递会怎么样？\"><a href=\"#按引用传递会怎么样？\" class=\"headerlink\" title=\"按引用传递会怎么样？\"></a>按引用传递会怎么样？</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> a = <span class=\"built_in\">std</span>::make_unique&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    func(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">int</span> main()</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>a8: a9bd7bfd stp x29, x30, [<span class=\"built_in\">sp</span>, #-<span class=\"number\">48</span>]!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>ac: <span class=\"number\">910003</span>fd <span class=\"keyword\">mov</span> x29, <span class=\"built_in\">sp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>b0: f9000bf3 <span class=\"keyword\">str</span> x19, [<span class=\"built_in\">sp</span>, <span class=\"number\">#16</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">auto</span> a = std::make_unique&lt;int&gt;(<span class=\"number\">1</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>b4: <span class=\"number\">52800020</span> <span class=\"keyword\">mov</span> w0, <span class=\"number\">#0x1</span> <span class=\"comment\">// #1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>b8: b9002fe0 <span class=\"keyword\">str</span> w0, [<span class=\"built_in\">sp</span>, <span class=\"number\">#44</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>bc: <span class=\"number\">9100</span>b3e0 <span class=\"keyword\">add</span> x0, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x2c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c0</span>: <span class=\"number\">910083</span>e1 <span class=\"keyword\">add</span> x1, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c4</span>: aa0103e8 <span class=\"keyword\">mov</span> x8, x1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c8</span>: <span class=\"number\">94000029</span> <span class=\"keyword\">bl</span> <span class=\"number\">40096</span>c &lt;std::_MakeUniq&lt;int&gt;::__single_object std::make_unique&lt;int, int&gt;(int&amp;&amp;)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">func</span>(a)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>cc: <span class=\"number\">910083</span>e0 <span class=\"keyword\">add</span> x0, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">d0</span>: <span class=\"number\">97</span>fffff1 <span class=\"keyword\">bl</span> <span class=\"number\">400894</span> &lt;func(std::unique_ptr&lt;int, std::default_delete&lt;int&gt; &gt;&amp;)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///@&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/Pasted%20image%2020210822121232.png\" alt></p>\n<p>如出一辙，对make_unique的调用是一样的，只不过这里多存了一个局部变量a，所以多花费了几个字节的栈空间。而前文的临时变量存在寄存器即可。</p>\n<h3 id=\"传右值引用呢？\"><a href=\"#传右值引用呢？\" class=\"headerlink\" title=\"传右值引用呢？\"></a>传右值引用呢？</h3><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>b8: <span class=\"number\">910073</span>e0 <span class=\"keyword\">add</span> x0, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x1c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>bc: <span class=\"number\">910043</span>e1 <span class=\"keyword\">add</span> x1, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c0</span>: aa0103e8 <span class=\"keyword\">mov</span> x8, x1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c4</span>: <span class=\"number\">94000027</span> <span class=\"keyword\">bl</span> <span class=\"number\">400960</span> &lt;std::_MakeUniq&lt;int&gt;::__single_object std::make_unique&lt;int, int&gt;(int&amp;&amp;)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c8</span>: <span class=\"number\">910043</span>e0 <span class=\"keyword\">add</span> x0, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>cc: <span class=\"number\">97</span>fffff2 <span class=\"keyword\">bl</span> <span class=\"number\">400894</span> &lt;func(std::unique_ptr&lt;int, std::default_delete&lt;int&gt; &gt;&amp;&amp;)&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可见传右值引用和传值一模一样。</p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><h2 id=\"AARCH64寄存器\"><a href=\"#AARCH64寄存器\" class=\"headerlink\" title=\"AARCH64寄存器\"></a>AARCH64寄存器</h2><p>参考<a href=\"https://winddoing.github.io/post/7190.html\">ARMv8-aarch64 寄存器和指令集</a></p>\n<h3 id=\"通用寄存器\"><a href=\"#通用寄存器\" class=\"headerlink\" title=\"通用寄存器\"></a>通用寄存器</h3><ul>\n<li><p>参数寄存器（X0-X7）： 用作临时寄存器或可以保存的调用者保存的寄存器变量函数内的中间值，调用其他函数之间的值（8 个寄存器可用于传递参数）</p>\n</li>\n<li><p>来电保存的临时寄存器（X9-X15）： 如果调用者要求在任何这些寄存器中保留值调用另一个函数，调用者必须将受影响的寄存器保存在自己的堆栈中帧。 它们可以通过被调用的子程序进行修改，而无需保存并在返回调用者之前恢复它们。</p>\n</li>\n<li><p>被调用者保存的寄存器（X19-X29）： 这些寄存器保存在被调用者帧中。 它们可以被被调用者修改子程序，只要它们在返回之前保存并恢复。</p>\n</li>\n</ul>\n<h3 id=\"特殊用途寄存器（X8，X16-X18，X29，X30）：\"><a href=\"#特殊用途寄存器（X8，X16-X18，X29，X30）：\" class=\"headerlink\" title=\"特殊用途寄存器（X8，X16-X18，X29，X30）：\"></a>特殊用途寄存器（X8，X16-X18，X29，X30）：</h3><p>X8： 是间接结果寄存器，用于保存子程序返回地址，尽量不使用</p>\n<p>X16 和 X17： 程序内调用临时寄存器</p>\n<p>X18： 平台寄存器，保留用于平台 ABI，尽量不使用</p>\n<p>X29： 帧指针寄存器（FP）</p>\n<p>X30： 链接寄存器（LR）</p>\n<p>X31： 堆栈指针寄存器 SP 或零寄存器 ZXR</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><p><a href=\"https://code.woboq.org/appleseed/include/boost/move/make_unique.hpp.html\">make_unique源码</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/forever_2015/article/details/50283747\">[AAPCS 学习课后练习 - 通过一个小例子来讲解]</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/42486116\">基于ARM64 的常见汇编命令记录</a></p>\n</li>\n<li><p><a href=\"https://winddoing.github.io/post/7190.html\">ARMv8-aarch64 寄存器和指令集</a></p>\n</li>\n</ul>\n",
            "tags": [
                "C++",
                "coding"
            ]
        },
        {
            "id": "https://blog.zhougy.top/2021/03/24/%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B&POD/",
            "url": "https://blog.zhougy.top/2021/03/24/%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B&POD/",
            "title": "聚合类型&POD",
            "date_published": "2021-03-24T11:53:18.000Z",
            "content_html": "<div style=\"font-size: 14px; margin: 0; padding: 0; width: 100%;\"><h1 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 41px; border-bottom: 3px double #999; color: #000; margin-top: 14px;\">&#x4EC0;&#x4E48;&#x662F;&#x805A;&#x5408;&#x7C7B;&#x578B;</h1>\n<blockquote style=\"line-height: 160%; box-sizing: content-box; margin: 15px 0; border-left: 4px solid #ddd; padding: 0 15px; color: #777;\">\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333; margin-top: 0; margin-bottom: 0;\"><strong style=\"line-height: 160%; box-sizing: content-box; font-weight: 700;\">C++03&#x5B9A;&#x4E49;</strong><br>\nAn aggregate is an array or a class (clause 9) with no user-declared constructors (12.1), no private or protected non-static data members (clause 11), no base classes (clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<blockquote style=\"line-height: 160%; box-sizing: content-box; margin: 15px 0; border-left: 4px solid #ddd; padding: 0 15px; color: #777;\">\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333; margin-top: 0; margin-bottom: 0;\"><strong style=\"line-height: 160%; box-sizing: content-box; font-weight: 700;\">C++11&#x5B9A;&#x4E49;</strong><br>\nAn aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no brace-or-equal-initializers for non-static data members (9.2), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x7ED3;&#x5408;C++03&#x548C;C++11&#x6807;&#x51C6;&#x5B9A;&#x4E49;&#xFF0C;&#x7F57;&#x5217;&#x4E00;&#x4E0B;&#x805A;&#x5408;&#x7C7B;&#x578B;&#x7684;&#x7279;&#x6027;&#xFF1A;</p>\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x805A;&#x5408;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x6709;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x4F46;&#x53EA;&#x80FD;&#x662F;&#x7F16;&#x8BD1;&#x5668;&#x5B9A;&#x4E49;&#x7684;&#x9ED8;&#x8BA4;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x6216;&#x8005;&#x7528;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">=default</code>&#x5B9A;&#x4E49;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x805A;&#x5408;&#x7C7B;&#x578B;&#x4E0D;&#x80FD;&#x6709;private&#xFF0C;protected&#x975E;static&#x53D8;&#x91CF;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x805A;&#x5408;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x6709;copy-assignment operator and/or destructor</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x6570;&#x7EC4;&#x662F;&#x805A;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x5373;&#x4FBF;&#x6570;&#x7EC4;&#x6210;&#x5458;&#x662F;&#x975E;&#x805A;&#x5408;&#x7C7B;&#x578B;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x805A;&#x5408;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x7EC4;&#x53EF;&#x4EE5;&#x662F;&#x975E;&#x805A;&#x5408;&#x7C7B;&#x578B;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x805A;&#x5408;&#x7C7B;&#x578B;&#x4E0D;&#x80FD;&#x7528;brace-or-equal-initializers&#xFF08;&#x5373;&#x5C31;&#x5730;&#x521D;&#x59CB;&#x5316;&#xFF09;&#x521D;&#x59CB;&#x5316;&#x975E;static&#x6210;&#x5458;&#x3002;</li>\n</ul>\n<h2 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 34px; border-bottom: 1px solid #dbdbdb; color: #333;\">&#x805A;&#x5408;&#x7C7B;&#x578B;&#x53D8;&#x91CF;&#x521D;&#x59CB;&#x5316;</h2>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x805A;&#x5408;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#xFF08;&#x5176;&#x5B9E;&#x975E;&#x805A;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x901A;&#x8FC7;&#x81EA;&#x5B9A;&#x4E49;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#xFF09;</p>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">if</span>(m == n)\n&#123;\n    <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">// the ith element of the array is initialized with ai</span>\n&#125;\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">else</span> <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">if</span>(m &lt; n) &#123;\n    <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">// the first m elements of the array are initialized with a1,  a2, &#x2026;, am and the other n - m elements are, if possible, value-initialized (see below for the explanation of the term)</span>\n&#125;\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">else</span> <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">if</span>(m &gt; n) &#123;\n    <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">// the compiler will issue an error</span>\n&#125;\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">else</span> <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">/*(this is the case when n isn&apos;t specified at all like int a[] = &#123;1, 2, 3&#125;;) */</span>\n&#123;\n    <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">// the size of the array (n) is assumed to be equal to m, so int a[] = &#123;1, 2, 3&#125;; is equivalent to int a[3] = &#123;1, 2, 3&#125;;</span>\n&#125;\n</code></pre>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x805A;&#x5408;&#x53D8;&#x91CF;&#x6700;&#x5927;&#x7684;&#x7279;&#x70B9;&#x53EF;&#x4EE5;&#x505A;<strong style=\"line-height: 160%; box-sizing: content-box; font-weight: 700;\">&#x805A;&#x5408;&#x521D;&#x59CB;&#x5316;</strong>&#xFF0C;&#x9664;&#x4E86;&#x57FA;&#x672C;&#x7684;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#x89C4;&#x5219;&#xFF0C;&#x805A;&#x5408;&#x521D;&#x59CB;&#x5316;&#x8FD8;&#x4F53;&#x73B0;&#x5728;&#x53EF;&#x4EE5;&#x9012;&#x5F52;&#x521D;&#x59CB;&#x5316;&#x3002;</p>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">struct</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">X</span>\n&#123;</span>\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> i1;\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> i2;\n&#125;;\n<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">struct</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">Y</span>\n&#123;</span>\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">char</span> c;\n  X x;\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> i[<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">2</span>];\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">float</span> f; \n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">protected</span>:\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">static</span> <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">double</span> d;\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">private</span>:\n  <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">void</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">g</span><span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">()</span></span>&#123;&#125;      \n&#125;; \n<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">struct</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">Z</span> &#123;</span>\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">char</span> a;\n  X x;\n  Z(<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">char</span> a1) &#123;&#125;;\n&#125;;\n\nY y = &#123;<span style=\"color: #d69d85; line-height: 160%; box-sizing: content-box;\">&apos;a&apos;</span>, &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">10</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">20</span>&#125;, &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">20</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">30</span>&#125;&#125;;\n</code></pre>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\"><code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">y.x</code>&#x4E5F;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x4E86;&#x3002;&#x5982;&#x679C;&#x5BF9;Z&#x7528;&#x9012;&#x5F52;&#x805A;&#x5408;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x4F8B;&#x5982;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">Z z = &#123;&apos;a&apos;, &#123;&apos;b&apos;&#125;&#125;</code>&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x5C31;&#x4F1A;&#x62A5;&#x9519;&#x3002;&#x56E0;&#x4E3A;Z&#x4E0D;&#x662F;&#x805A;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x53BB;&#x627E;&#x5BF9;&#x5E94;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x663E;&#x7136;Z&#x6CA1;&#x5B9A;&#x4E49;&#x8FD9;&#x6837;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x3002;<br>\n&#x5177;&#x4F53;&#x4ECB;&#x7ECD;&#x53EF;&#x4EE5;&#x53C2;&#x8003;<a href=\"https://en.cppreference.com/w/cpp/language/aggregate_initialization\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">Aggregate initialization</a>&#x3002;</p>\n<h1 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 41px; border-bottom: 3px double #999; color: #000;\">&#x4EC0;&#x4E48;&#x662F;POD&#x53D8;&#x91CF;</h1>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">POD = Plain Old Data&#xFF0C;&#x53EF;&#x89C1;&#x8FD9;&#x662F;&#x4E00;&#x79CD;&#x517C;&#x5BB9;&#x578B;&#x6BD4;&#x8F83;&#x597D;&#x7684;&#x5F62;&#x6001;&#x3002;&#x751A;&#x81F3;&#x53EF;&#x4EE5;&#x5BFC;&#x51FA;&#x4E0E;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x5171;&#x4EAB;&#x6B64;&#x7C7B;&#x53D8;&#x91CF;&#x5B9A;&#x4E49;&#x3002;</p>\n<blockquote style=\"line-height: 160%; box-sizing: content-box; margin: 15px 0; border-left: 4px solid #ddd; padding: 0 15px; color: #777;\">\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333; margin-top: 0; margin-bottom: 0;\"><strong style=\"line-height: 160%; box-sizing: content-box; font-weight: 700;\">C++03&#x5B9A;&#x4E49;</strong><br>\nA POD-struct is an aggregate class that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-defined copy assignment operator and no user-defined destructor. Similarly, a POD-union is an aggregate union that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-defined copy assignment operator and no user-defined destructor. A POD class is a class that is either a POD-struct or a POD-union.</p>\n</blockquote>\n<blockquote style=\"line-height: 160%; box-sizing: content-box; margin: 15px 0; border-left: 4px solid #ddd; padding: 0 15px; color: #777;\">\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333; margin-top: 0; margin-bottom: 0;\">C++11&#x5B9A;&#x4E49;&#x53D8;&#x5F97;&#x975E;&#x5E38;&#x4F18;&#x96C5;<br>\n<strong style=\"line-height: 160%; box-sizing: content-box; font-weight: 700;\">A POD struct is a non-union class that is both a trivial class and a standard-layout class</strong>, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). Similarly, a POD union is a union that is both a trivial class and a standard layout class, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). A POD class is a class that is either a POD struct or a POD union.</p>\n</blockquote>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x603B;&#x800C;&#x8A00;&#x4E4B;&#xFF1A;<br>\nPOD&#x7C7B;&#x578B;&#x662F;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x805A;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x4E00;&#x4E2A;POD&#x7C7B;&#x578B;&#x4E3A;&#xFF1A;</p>\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x6807;&#x91CF;&#x7C7B;&#x578B;&#x3002;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x6EE1;&#x8DB3;&#x4EE5;&#x4E0B;&#x6761;&#x4EF6;&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x7C7B;&#x578B;&#xFF1A;\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333; margin-top: 0; margin-bottom: 0;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">C++11&#x4E4B;&#x524D;&#xFF1A;\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333; margin-top: 0; margin-bottom: 0;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x805A;&#x5408;&#x7C7B;&#x578B;&#x3002;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x6CA1;&#x6709;&#x975E;POD&#x7C7B;&#x578B;&#x7684;&#x975E;&#x9759;&#x6001;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x3002;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x6CA1;&#x6709;&#x5F15;&#x7528;&#x7C7B;&#x578B;&#x7684;&#x975E;&#x9759;&#x6001;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x3002;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x6CA1;&#x6709;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x6216;&#x6790;&#x6784;&#x51FD;&#x6570;&#x3002;</li>\n</ul>\n</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">C++11&#x4E4B;&#x540E;&#xFF1A;\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333; margin-top: 0; margin-bottom: 0;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x662F;&#x5E73;&#x51E1;&#x7C7B;&#x3002;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x662F;&#x6807;&#x51C6;&#x5E03;&#x5C40;&#x7C7B;&#x3002;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x6CA1;&#x6709;&#x975E;POD&#x7C7B;&#x578B;&#x7684;&#x975E;&#x9759;&#x6001;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x3002;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">POD&#x7C7B;&#x578B;&#x7684;&#x6570;&#x7EC4;&#x3002;</li>\n</ul>\n<h1 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 41px; border-bottom: 3px double #999; color: #000;\">&#x805A;&#x5408;&#x7C7B;&#x578B;&#x6216;&#x662F;POD&#x53D8;&#x91CF;&#x6709;&#x4EC0;&#x4E48;&#x597D;&#x5904;&#xFF1F;</h1>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x805A;&#x5408;&#x7C7B;&#x6700;&#x5927;&#x7684;&#x7279;&#x70B9;&#x5C31;&#x662F;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x805A;&#x5408;&#x521D;&#x59CB;&#x5316;&#x3002;<br>\nPOD&#x7684;&#x7279;&#x70B9;&#x66F4;&#x4E3A;&#x5B9E;&#x7528;&#x4E00;&#x4E9B;</p>\n<blockquote style=\"line-height: 160%; box-sizing: content-box; margin: 15px 0; border-left: 4px solid #ddd; padding: 0 15px; color: #777;\">\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333; margin-top: 0;\"><strong style=\"line-height: 160%; box-sizing: content-box; font-weight: 700;\">POD&#x7684;&#x7528;&#x9014;</strong><br>\n&#x5E73;&#x51E1;&#x7C7B;&#x7684;&#x7528;&#x9014;&#xFF1A;</p>\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x5E73;&#x51E1;&#x7C7B;&#x7684;&#x5BF9;&#x8C61;&#x53EF;&#x4EE5;&#x4E0E;&#x5B57;&#x8282;&#x6D41;&#x4E4B;&#x95F4;&#x5B89;&#x5168;&#x8F6C;&#x6362;&#xFF0C;&#x5373;&#xFF1A;<br>\n- &#x82E5;&#x8981;&#x5C06;&#x5BF9;&#x8C61;&#x8F6C;&#x4E3A;&#x5B57;&#x8282;&#x6D41;&#xFF0C;&#x76F4;&#x63A5;&#x53D6;&#x5176;&#x5730;&#x5740;&#x5373;&#x53EF;&#x3002;<br>\n- &#x82E5;&#x8981;&#x5C06;&#x5B57;&#x8282;&#x6D41;&#x8F6C;&#x4E3A;&#x5BF9;&#x8C61;&#xFF0C;&#x76F4;&#x63A5;&#x5C06;&#x8BE5;&#x5730;&#x5740;cast&#x4E3A;&#x5BF9;&#x8C61;&#x6307;&#x9488;&#x5373;&#x53EF;&#x3002;<br>\n- &#x76F4;&#x63A5;&#x901A;&#x8FC7;&#x590D;&#x5236;&#x5B57;&#x8282;&#x7684;&#x65B9;&#x5F0F;&#x590D;&#x5236;&#x5BF9;&#x8C61;&#x3002;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x5B89;&#x5168;&#x7684;&#x9759;&#x6001;&#x521D;&#x59CB;&#x5316;&#x3002;<br>\n- C++11&#x7684;thread_local&#x53D8;&#x91CF;&#x53EF;&#x4EE5;&#x662F;&#x975E;&#x5E73;&#x51E1;&#x7C7B;&#x578B;&#xFF0C;&#x4F46;&#x5728;&#x67D0;&#x4E9B;&#x7F16;&#x8BD1;&#x5668;&#x4E0B;&#x4F1A;&#x6709;&#x6BD4;&#x8F83;&#x5927;&#x7684;&#x6027;&#x80FD;&#x5F00;&#x9500;&#x3002;gcc&#x6269;&#x5C55;&#x7684;__thread&#x53EA;&#x80FD;&#x4F7F;&#x7528;POD&#x7C7B;&#x578B;&#x3002;</li>\n</ul>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333; margin-bottom: 0;\"><strong style=\"line-height: 160%; box-sizing: content-box; font-weight: 700;\">&#x6807;&#x51C6;&#x5E03;&#x5C40;&#x7C7B;&#x7684;&#x7528;&#x9014;&#xFF1A;</strong><br>\n&#x8DE8;&#x8FDB;&#x7A0B;&#x3001;&#x8DE8;&#x8BED;&#x8A00;&#x4F7F;&#x7528;&#x3002;</p>\n</blockquote>\n<h1 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 41px; border-bottom: 3px double #999; color: #000;\">&#x540D;&#x6B21;&#x89E3;&#x91CA;</h1>\n<h2 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 34px; border-bottom: 1px solid #dbdbdb; color: #333;\">value initialization</h2>\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x5BF9;&#x4E8E;&#x666E;&#x901A;&#x7C7B;&#x578B;&#x53D8;&#x91CF;(bool, int, char, double, pointers, etc.)<br>\nit means it is initialized with 0 for that type (false for bool, 0.0 for double, etc.).</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x5BF9;&#x4E8E;class&#x7C7B;&#x578B;\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333; margin-top: 0; margin-bottom: 0;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x5982;&#x679C;&#x6709;&#x81EA;&#x5B9A;&#x4E49;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x5219;&#x8C03;&#x7528;&#x81EA;&#x5B9A;&#x4E49;&#x6784;&#x9020;&#x51FD;&#x6570;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x5982;&#x679C;&#x6CA1;&#x6709;&#x81EA;&#x5B9A;&#x4E00;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x5219;&#x8C03;&#x7528;&#x9ED8;&#x8BA4;&#x6784;&#x9020;&#x51FD;&#x6570;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5BF9;&#x5E94;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x5219;&#x62A5;&#x9519;</li>\n</ul>\n</li>\n</ul>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x4E3E;&#x4F8B;</p>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">class</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">A</span>\n&#123;</span>\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">public</span>:\n  A(<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span>) &#123;&#125; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//no default constructor</span>\n&#125;;\n<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">class</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">B</span>\n&#123;</span>\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">public</span>:\n  B() &#123;&#125; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//default constructor available</span>\n&#125;;\n<span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">main</span><span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">()</span>\n</span>&#123;\n  A a1[<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">3</span>] = &#123;A(<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">2</span>), A(<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1</span>), A(<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">14</span>)&#125;; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//OK n == m</span>\n  A a2[<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">3</span>] = &#123;A(<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">2</span>)&#125;; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//ERROR A has no default constructor. Unable to value-initialize a2[1] and a2[2]</span>\n  B b1[<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">3</span>] = &#123;B()&#125;; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//OK b1[1] and b1[2] are value initialized, in this case with the default-ctor</span>\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> Array1[<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1000</span>] = &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">0</span>&#125;; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//All elements are initialized with 0;</span>\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> Array2[<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1000</span>] = &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1</span>&#125;; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//Attention: only the first element is 1, the rest are 0;</span>\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">bool</span> Array3[<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1000</span>] = &#123;&#125;; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//the braces can be empty too. All elements initialized with false</span>\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> Array4[<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1000</span>]; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//no initializer. This is different from an empty &#123;&#125; initializer in that</span>\n  <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//the elements in this case are not value-initialized, but have indeterminate values </span>\n  <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//(unless, of course, Array4 is a global array)</span>\n  <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> <span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">array</span>[<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">2</span>] = &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">2</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">3</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">4</span>&#125;; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//ERROR, too many initializers</span>\n&#125;\n</code></pre>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x5927;&#x62EC;&#x53F7;&#x4E2D;&#x4E2A;&#x6570;&#x4E0D;&#x8DB3;&#x7684;&#xFF0C;&#x7528;value initialization&#x8865;&#x8DB3;&#x3002;&#x8FD9;&#x5C31;&#x662F;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">A a = &#123;1&#125;;</code>&#x6216;&#x8005;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">A a = &#123;&#125;</code>&#x7684;&#x542B;&#x4E49;&#x3002;&#x5927;&#x62EC;&#x53F7;&#x4E2D;&#x4E2A;&#x6570;&#x8D85;&#x8FC7;&#x58F0;&#x660E;&#x7684;&#x4E2A;&#x6570;&#x7684;&#xFF0C;&#x5219;&#x7F16;&#x8BD1;&#x62A5;&#x9519;&#x3002;</p>\n<h2 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 34px; border-bottom: 1px solid #dbdbdb; color: #333;\">brace-or-equal-initializers</h2>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x7C7B;&#x6210;&#x5458;&#x7684;&#x4E00;&#x79CD;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;</p>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">class</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">B</span> &#123;</span>\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">public</span>:\n    B(<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span>)&#123;&#125;\n&#125;;\n\n<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">class</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">A</span> &#123;</span>\n    <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> a = <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">123</span>;\n    <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> b &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">456</span>&#125;;\n    B c &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">12</span>&#125;;\n    B d = &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">34</span>&#125;;\n&#125;;\n</code></pre>\n<h2 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 34px; border-bottom: 1px solid #dbdbdb; color: #333;\">copy-assignment operator</h2>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x62F7;&#x8D1D;&#x8D4B;&#x503C;&#x65B9;&#x6CD5;</p>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">class</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">A</span> &#123;</span>\n    <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">A <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">A</span><span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">(<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span>)</span> </span>&#123;&#125;\n    A(<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">const</span> &amp;) &#123;&#125;\n    A&amp; <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">operator</span>= (<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">const</span> A&amp;a) &#123;&#125;\n&#125;;\n<span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">void</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">main</span><span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">()</span> </span>&#123;\n    A a;\n    A b = a; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">// &#x8FD9;&#x91CC;&#x8C03;&#x7528;&#x7684;&#x662F;&#x62F7;&#x8D1D;&#x6784;&#x9020;&#x51FD;&#x6570;</span>\n    A c;\n    c = a; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">// &#x8FD9;&#x91CC;&#x624D;&#x4F1A;&#x8C03;&#x7528;&#x62F7;&#x8D1D;&#x590D;&#x5236;&#x51FD;&#x6570;</span>\n&#125;\n</code></pre>\n<h2 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 34px; border-bottom: 1px solid #dbdbdb; color: #333;\">trial stuff</h2>\n<h3 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;\">trivial copyable</h3>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x53C2;&#x8003;<a href=\"https://en.cppreference.com/w/cpp/named_req/TriviallyCopyable\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">C++ named requirements: TriviallyCopyable</a></p>\n<blockquote style=\"line-height: 160%; box-sizing: content-box; margin: 15px 0; border-left: 4px solid #ddd; padding: 0 15px; color: #777;\">\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333; margin-top: 0;\">The following types are collectively called trivially copyable types:</p>\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">Scalar types</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">Trivially copyable classes, i.e. classes satisfying following requirements:<br>\n- At least one copy constructor, move constructor, copy assignment operator, or move assignment operator is eligible<br>\n- Every eligible copy constructor (if any) is trivial<br>\n- Every eligible move constructor (if any) is trivial<br>\n- Every eligible copy assignment operator (if any) is trivial<br>\n- Every eligible move assignment operator (if any) is trivial<br>\n- Has a trivial non-deleted destructor</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">Arrays of TriviallyCopyable objects</li>\n</ul>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333; margin-bottom: 0;\">This implies that a trivially copyable class has no virtual functions or virtual base classes.</p>\n</blockquote>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x901A;&#x8FC7;&#x6A21;&#x7248;<a href=\"https://en.cppreference.com/w/cpp/types/is_trivially_copyable\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">std::is_trivially_copyable</a>&#x53EF;&#x4EE5;&#x68C0;&#x9A8C;&#x4E00;&#x4E2A;&#x7C7B;&#x662F;&#x5426;trivially copyable&#x3002;</p>\n<h3 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;\">trivial constructor/destructor</h3>\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x7F16;&#x8BD1;&#x5668;&#x5B9A;&#x4E49;&#x7684;&#x6784;&#x9020;/&#x6790;&#x6784;&#x51FD;&#x6570;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x7528;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">=default</code>&#x5B9A;&#x4E49;&#x7684;&#x6784;&#x9020;&#x6790;&#x6784;&#x51FD;&#x6570;</li>\n</ul>\n<h3 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;\">trivial class</h3>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">The standard defines a trivial class as follows:</p>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">A trivially copyable class is a class that:</p>\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">has no non-trivial copy constructors (12.8),</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">has no non-trivial move constructors (12.8),</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">has no non-trivial copy assignment operators (13.5.3, 12.8),</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">has no non-trivial move assignment operators (13.5.3, 12.8), and</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">has a trivial destructor (12.4).</li>\n</ul>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">A trivial class is a class that has a trivial default constructor (12.1) and is trivially copyable.</p>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">[ Note: In particular, a trivially copyable or trivial class does not have virtual functions or virtual base classes. ]<br>\n&#x53E6;&#x5916;trivial class&#x662F;&#x9012;&#x5F52;&#x7684;&#xFF0C;&#x5373;trivial class&#x4E0D;&#x80FD;&#x6709;&#x975E;trivial class&#x7684;&#x975E;static&#x6210;&#x5458;&#x3002;<br>\n&#x7528;&#x6A21;&#x7248;<a href=\"https://en.cppreference.com/w/cpp/types/is_trivial\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">std::is_trivial</a>&#x6765;&#x6D4B;&#x8BD5;</p>\n<h2 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 34px; border-bottom: 1px solid #dbdbdb; color: #333;\">standard layout</h2>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">A standard-layout class is a class that:</p>\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">\n<p style=\"line-height: 160%; box-sizing: content-box; color: #333; margin: 0;\">has no non-static data members of type non-standard-layout class (or array of such types) or reference,</p>\n</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">\n<p style=\"line-height: 160%; box-sizing: content-box; color: #333; margin: 0;\">has no virtual functions (10.3) and no virtual base classes (10.1),</p>\n</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">\n<p style=\"line-height: 160%; box-sizing: content-box; color: #333; margin: 0;\">has the same access control (Clause 11) for all non-static data members,</p>\n</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">\n<p style=\"line-height: 160%; box-sizing: content-box; color: #333; margin: 0;\">has no non-standard-layout base classes,</p>\n</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">\n<p style=\"line-height: 160%; box-sizing: content-box; color: #333; margin: 0;\">either has no non-static data members in the most derived class and at most one base class with non-static data members, or has no base classes with non-static data members, (&#x8981;&#x4E48;&#x7EC8;&#x70B9;&#x7C7B;&#x6CA1;&#x6709;&#x975E;&#x9759;&#x6001;&#x6210;&#x5458;&#xFF0C;&#x5E76;&#x4E14;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x57FA;&#x7C7B;&#x6709;&#x975E;&#x9759;&#x6001;&#x6210;&#x5458;&#xFF1B;&#x8981;&#x4E48;&#x6CA1;&#x6709;&#x57FA;&#x7C7B;&#x6709;&#x975E;&#x9759;&#x6001;&#x6210;&#x5458;)&#xFF0C;and</p>\n</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">\n<p style=\"line-height: 160%; box-sizing: content-box; color: #333; margin: 0;\">has no base classes of the same type as the first non-static data member.</p>\n</li>\n</ul>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">A standard-layout struct is a standard-layout class defined with the class-key struct or the class-key class.</p>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">A standard-layout union is a standard-layout class defined with the class-key union.</p>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">[ Note: Standard-layout classes are useful for communicating with code written in other programming languages. Their layout is specified in 9.2.]</p>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x6807;&#x51C6;&#x5185;&#x5B58;&#x5206;&#x5E03;&#xFF0C;&#x786E;&#x4FDD;&#x5BF9;&#x8C61;&#x5185;&#x5B58;&#x548C;C&#x8BED;&#x8A00;&#x7684;&#x7ED3;&#x6784;&#x4F53;&#x5185;&#x5B58;&#x5206;&#x5E03;&#x5B8C;&#x5168;&#x4E00;&#x81F4;&#x3002;&#x4F7F;&#x5F97;POD&#x53D8;&#x91CF;&#x5177;&#x5907;&#x4E86;C&#x517C;&#x5BB9;&#x6027;&#x3002;<br>\n&#x7528;&#x6A21;&#x7248;<a href=\"https://en.cppreference.com/w/cpp/types/is_standard_layout\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">std::is_standard_layout</a>&#x53EF;&#x4EE5;&#x6D4B;&#x8BD5;</p>\n<h1 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 41px; border-bottom: 3px double #999; color: #000;\">&#x603B;&#x7ED3;</h1>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x7528;<a href=\"https://en.cppreference.com/w/cpp/types/is_pod\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">std::is_pod</a>&#x6765;&#x6D4B;&#x8BD5;&#x4F60;&#x7684;&#x7C7B;&#x5427;&#x3002;</p>\n<h1 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 41px; border-bottom: 3px double #999; color: #000;\">&#x53C2;&#x8003;&#x6587;&#x732E;</h1>\n<ol style=\"line-height: 160%; box-sizing: content-box; display: block; padding-left: 30px; margin: 6px 0 10px; color: #333; list-style-type: decimal;\">\n<li style=\"line-height: 160%; box-sizing: content-box;\"><a href=\"https://stackoverflow.com/questions/4178175/what-are-aggregates-and-pods-and-how-why-are-they-special\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">What are Aggregates and PODs and how/why are they special?</a></li>\n<li style=\"line-height: 160%; box-sizing: content-box;\"><a href=\"https://fuzhe1989.github.io/2018/03/15/cpp-object-model-pod/\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">C++&#x5BF9;&#x8C61;&#x6A21;&#x578B;&#xFF08;&#x4E09;&#xFF09;POD</a></li>\n</ol>\n</div><center style=\"display:none !important;visibility:collapse !important;height:0 !important;white-space:nowrap;width:100%;overflow:hidden\">%23%20%E4%BB%80%E4%B9%88%E6%98%AF%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%0A%3E%20**C%2B%2B03%E5%AE%9A%E4%B9%89**%0A%3E%20An%20aggregate%20is%20an%20array%20or%20a%20class%20(clause%209)%20with%20no%20user-declared%20constructors%20(12.1)%2C%20no%20private%20or%20protected%20non-static%20data%20members%20(clause%2011)%2C%20no%20base%20classes%20(clause%2010)%2C%20and%20no%20virtual%20functions%20(10.3).%0A%0A%3E%20**C%2B%2B11%E5%AE%9A%E4%B9%89**%0A%3E%20An%20aggregate%20is%20an%20array%20or%20a%20class%20(Clause%209)%20with%20no%20user-provided%20constructors%20(12.1)%2C%20no%20brace-or-equal-initializers%20for%20non-static%20data%20members%20(9.2)%2C%20no%20private%20or%20protected%20non-static%20data%20members%20(Clause%2011)%2C%20no%20base%20classes%20(Clause%2010)%2C%20and%20no%20virtual%20functions%20(10.3).%0A%0A%E7%BB%93%E5%90%88C%2B%2B03%E5%92%8CC%2B%2B11%E6%A0%87%E5%87%86%E5%AE%9A%E4%B9%89%EF%BC%8C%E7%BD%97%E5%88%97%E4%B8%80%E4%B8%8B%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%89%B9%E6%80%A7%EF%BC%9A%0A-%20%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E6%9C%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E4%BD%86%E5%8F%AA%E8%83%BD%E6%98%AF%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9A%E4%B9%89%E7%9A%84%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%88%96%E8%80%85%E7%94%A8%60%3Ddefault%60%E5%AE%9A%E4%B9%89%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%0A-%20%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E6%9C%89private%EF%BC%8Cprotected%E9%9D%9Estatic%E5%8F%98%E9%87%8F%0A-%20%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E6%9C%89copy-assignment%20operator%20and%2For%20destructor%0A-%20%E6%95%B0%E7%BB%84%E6%98%AF%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8D%B3%E4%BE%BF%E6%95%B0%E7%BB%84%E6%88%90%E5%91%98%E6%98%AF%E9%9D%9E%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%0A-%20%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E7%BB%84%E5%8F%AF%E4%BB%A5%E6%98%AF%E9%9D%9E%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%0A-%20%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E7%94%A8brace-or-equal-initializers%EF%BC%88%E5%8D%B3%E5%B0%B1%E5%9C%B0%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%89%E5%88%9D%E5%A7%8B%E5%8C%96%E9%9D%9Estatic%E6%88%90%E5%91%98%E3%80%82%0A%0A%23%23%20%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%0A%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E9%87%87%E7%94%A8%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%88%E5%85%B6%E5%AE%9E%E9%9D%9E%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%87%87%E7%94%A8%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%89%0A%60%60%60%20c%0Aif(m%20%3D%3D%20n)%0A%7B%0A%20%20%20%20%2F%2F%20the%20ith%20element%20of%20the%20array%20is%20initialized%20with%20ai%0A%7D%0Aelse%20if(m%20%3C%20n)%20%7B%0A%20%20%20%20%2F%2F%20the%20first%20m%20elements%20of%20the%20array%20are%20initialized%20with%20a1%2C%20%20a2%2C%20%E2%80%A6%2C%20am%20and%20the%20other%20n%20-%20m%20elements%20are%2C%20if%20possible%2C%20value-initialized%20(see%20below%20for%20the%20explanation%20of%20the%20term)%0A%7D%0Aelse%20if(m%20%3E%20n)%20%7B%0A%20%20%20%20%2F%2F%20the%20compiler%20will%20issue%20an%20error%0A%7D%0Aelse%20%2F*(this%20is%20the%20case%20when%20n%20isn&apos;t%20specified%20at%20all%20like%20int%20a%5B%5D%20%3D%20%7B1%2C%202%2C%203%7D%3B)%20*%2F%0A%7B%0A%20%20%20%20%2F%2F%20the%20size%20of%20the%20array%20(n)%20is%20assumed%20to%20be%20equal%20to%20m%2C%20so%20int%20a%5B%5D%20%3D%20%7B1%2C%202%2C%203%7D%3B%20is%20equivalent%20to%20int%20a%5B3%5D%20%3D%20%7B1%2C%202%2C%203%7D%3B%0A%7D%0A%60%60%60%0A%E8%81%9A%E5%90%88%E5%8F%98%E9%87%8F%E6%9C%80%E5%A4%A7%E7%9A%84%E7%89%B9%E7%82%B9%E5%8F%AF%E4%BB%A5%E5%81%9A**%E8%81%9A%E5%90%88%E5%88%9D%E5%A7%8B%E5%8C%96**%EF%BC%8C%E9%99%A4%E4%BA%86%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E8%A7%84%E5%88%99%EF%BC%8C%E8%81%9A%E5%90%88%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%98%E4%BD%93%E7%8E%B0%E5%9C%A8%E5%8F%AF%E4%BB%A5%E9%80%92%E5%BD%92%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%82%0A%60%60%60c%2B%2B%0Astruct%20X%0A%7B%0A%20%20int%20i1%3B%0A%20%20int%20i2%3B%0A%7D%3B%0Astruct%20Y%0A%7B%0A%20%20char%20c%3B%0A%20%20X%20x%3B%0A%20%20int%20i%5B2%5D%3B%0A%20%20float%20f%3B%20%0Aprotected%3A%0A%20%20static%20double%20d%3B%0Aprivate%3A%0A%20%20void%20g()%7B%7D%20%20%20%20%20%20%0A%7D%3B%20%0Astruct%20Z%20%7B%0A%20%20char%20a%3B%0A%20%20X%20x%3B%0A%20%20Z(char%20a1)%20%7B%7D%3B%0A%7D%3B%0A%0AY%20y%20%3D%20%7B&apos;a&apos;%2C%20%7B10%2C%2020%7D%2C%20%7B20%2C%2030%7D%7D%3B%0A%60%60%60%0A%60y.x%60%E4%B9%9F%E8%A2%AB%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BA%86%E3%80%82%E5%A6%82%E6%9E%9C%E5%AF%B9Z%E7%94%A8%E9%80%92%E5%BD%92%E8%81%9A%E5%90%88%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E4%BE%8B%E5%A6%82%60Z%20z%20%3D%20%7B&apos;a&apos;%2C%20%7B&apos;b&apos;%7D%7D%60%EF%BC%8C%E7%BC%96%E8%AF%91%E5%99%A8%E5%B0%B1%E4%BC%9A%E6%8A%A5%E9%94%99%E3%80%82%E5%9B%A0%E4%B8%BAZ%E4%B8%8D%E6%98%AF%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%EF%BC%8C%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%9A%E5%8E%BB%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%98%BE%E7%84%B6Z%E6%B2%A1%E5%AE%9A%E4%B9%89%E8%BF%99%E6%A0%B7%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%82%0A%E5%85%B7%E4%BD%93%E4%BB%8B%E7%BB%8D%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%5BAggregate%20initialization%5D(https%3A%2F%2Fen.cppreference.com%2Fw%2Fcpp%2Flanguage%2Faggregate_initialization)%E3%80%82%0A%23%20%E4%BB%80%E4%B9%88%E6%98%AFPOD%E5%8F%98%E9%87%8F%0APOD%20%3D%20Plain%20Old%20Data%EF%BC%8C%E5%8F%AF%E8%A7%81%E8%BF%99%E6%98%AF%E4%B8%80%E7%A7%8D%E5%85%BC%E5%AE%B9%E5%9E%8B%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84%E5%BD%A2%E6%80%81%E3%80%82%E7%94%9A%E8%87%B3%E5%8F%AF%E4%BB%A5%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E5%85%B1%E4%BA%AB%E6%AD%A4%E7%B1%BB%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89%E3%80%82%0A%3E%20**C%2B%2B03%E5%AE%9A%E4%B9%89**%0A%3E%20A%20POD-struct%20is%20an%20aggregate%20class%20that%20has%20no%20non-static%20data%20members%20of%20type%20non-POD-struct%2C%20non-POD-union%20(or%20array%20of%20such%20types)%20or%20reference%2C%20and%20has%20no%20user-defined%20copy%20assignment%20operator%20and%20no%20user-defined%20destructor.%20Similarly%2C%20a%20POD-union%20is%20an%20aggregate%20union%20that%20has%20no%20non-static%20data%20members%20of%20type%20non-POD-struct%2C%20non-POD-union%20(or%20array%20of%20such%20types)%20or%20reference%2C%20and%20has%20no%20user-defined%20copy%20assignment%20operator%20and%20no%20user-defined%20destructor.%20A%20POD%20class%20is%20a%20class%20that%20is%20either%20a%20POD-struct%20or%20a%20POD-union.%0A%0A%3E%20C%2B%2B11%E5%AE%9A%E4%B9%89%E5%8F%98%E5%BE%97%E9%9D%9E%E5%B8%B8%E4%BC%98%E9%9B%85%0A%3E%20**A%20POD%20struct%20is%20a%20non-union%20class%20that%20is%20both%20a%20trivial%20class%20and%20a%20standard-layout%20class**%2C%20and%20has%20no%20non-static%20data%20members%20of%20type%20non-POD%20struct%2C%20non-POD%20union%20(or%20array%20of%20such%20types).%20Similarly%2C%20a%20POD%20union%20is%20a%20union%20that%20is%20both%20a%20trivial%20class%20and%20a%20standard%20layout%20class%2C%20and%20has%20no%20non-static%20data%20members%20of%20type%20non-POD%20struct%2C%20non-POD%20union%20(or%20array%20of%20such%20types).%20A%20POD%20class%20is%20a%20class%20that%20is%20either%20a%20POD%20struct%20or%20a%20POD%20union.%0A%0A%E6%80%BB%E8%80%8C%E8%A8%80%E4%B9%8B%EF%BC%9A%0APOD%E7%B1%BB%E5%9E%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E7%89%B9%E6%AE%8A%E7%9A%84%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%EF%BC%8C%E4%B8%80%E4%B8%AAPOD%E7%B1%BB%E5%9E%8B%E4%B8%BA%EF%BC%9A%0A-%20%E6%A0%87%E9%87%8F%E7%B1%BB%E5%9E%8B%E3%80%82%0A-%20%E6%BB%A1%E8%B6%B3%E4%BB%A5%E4%B8%8B%E6%9D%A1%E4%BB%B6%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%EF%BC%9A%0A%20%20%20%20-%20C%2B%2B11%E4%B9%8B%E5%89%8D%EF%BC%9A%0A%20%20%20%20%20%20%20%20-%20%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E3%80%82%0A%20%20%20%20%20%20%20%20-%20%E6%B2%A1%E6%9C%89%E9%9D%9EPOD%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%82%0A%20%20%20%20%20%20%20%20-%20%E6%B2%A1%E6%9C%89%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%82%0A%20%20%20%20%20%20%20%20-%20%E6%B2%A1%E6%9C%89%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%88%96%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E3%80%82%0A%20%20%20%20-%20C%2B%2B11%E4%B9%8B%E5%90%8E%EF%BC%9A%0A%20%20%20%20%20%20%20%20-%20%E6%98%AF%E5%B9%B3%E5%87%A1%E7%B1%BB%E3%80%82%0A%20%20%20%20%20%20%20%20-%20%E6%98%AF%E6%A0%87%E5%87%86%E5%B8%83%E5%B1%80%E7%B1%BB%E3%80%82%0A%20%20%20%20%20%20%20%20-%20%E6%B2%A1%E6%9C%89%E9%9D%9EPOD%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%82%0A-%20POD%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E7%BB%84%E3%80%82%0A%0A%23%20%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E6%88%96%E6%98%AFPOD%E5%8F%98%E9%87%8F%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%EF%BC%9F%0A%E8%81%9A%E5%90%88%E7%B1%BB%E6%9C%80%E5%A4%A7%E7%9A%84%E7%89%B9%E7%82%B9%E5%B0%B1%E6%98%AF%E5%8F%AF%E4%BB%A5%E9%87%87%E7%94%A8%E8%81%9A%E5%90%88%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%82%0APOD%E7%9A%84%E7%89%B9%E7%82%B9%E6%9B%B4%E4%B8%BA%E5%AE%9E%E7%94%A8%E4%B8%80%E4%BA%9B%0A%3E**POD%E7%9A%84%E7%94%A8%E9%80%94**%0A%3E%E5%B9%B3%E5%87%A1%E7%B1%BB%E7%9A%84%E7%94%A8%E9%80%94%EF%BC%9A%0A%3E%0A%3E-%20%E5%B9%B3%E5%87%A1%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E4%B8%8E%E5%AD%97%E8%8A%82%E6%B5%81%E4%B9%8B%E9%97%B4%E5%AE%89%E5%85%A8%E8%BD%AC%E6%8D%A2%EF%BC%8C%E5%8D%B3%EF%BC%9A%0A%20%20%20%20-%20%E8%8B%A5%E8%A6%81%E5%B0%86%E5%AF%B9%E8%B1%A1%E8%BD%AC%E4%B8%BA%E5%AD%97%E8%8A%82%E6%B5%81%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%8F%96%E5%85%B6%E5%9C%B0%E5%9D%80%E5%8D%B3%E5%8F%AF%E3%80%82%0A%20%20%20%20-%20%E8%8B%A5%E8%A6%81%E5%B0%86%E5%AD%97%E8%8A%82%E6%B5%81%E8%BD%AC%E4%B8%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%B0%86%E8%AF%A5%E5%9C%B0%E5%9D%80cast%E4%B8%BA%E5%AF%B9%E8%B1%A1%E6%8C%87%E9%92%88%E5%8D%B3%E5%8F%AF%E3%80%82%0A%20%20%20%20-%20%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87%E5%A4%8D%E5%88%B6%E5%AD%97%E8%8A%82%E7%9A%84%E6%96%B9%E5%BC%8F%E5%A4%8D%E5%88%B6%E5%AF%B9%E8%B1%A1%E3%80%82%0A%3E-%20%E5%AE%89%E5%85%A8%E7%9A%84%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%82%0A%20%20%20%20-%20C%2B%2B11%E7%9A%84thread_local%E5%8F%98%E9%87%8F%E5%8F%AF%E4%BB%A5%E6%98%AF%E9%9D%9E%E5%B9%B3%E5%87%A1%E7%B1%BB%E5%9E%8B%EF%BC%8C%E4%BD%86%E5%9C%A8%E6%9F%90%E4%BA%9B%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%8B%E4%BC%9A%E6%9C%89%E6%AF%94%E8%BE%83%E5%A4%A7%E7%9A%84%E6%80%A7%E8%83%BD%E5%BC%80%E9%94%80%E3%80%82gcc%E6%89%A9%E5%B1%95%E7%9A%84__thread%E5%8F%AA%E8%83%BD%E4%BD%BF%E7%94%A8POD%E7%B1%BB%E5%9E%8B%E3%80%82%0A%3E%0A%3E**%E6%A0%87%E5%87%86%E5%B8%83%E5%B1%80%E7%B1%BB%E7%9A%84%E7%94%A8%E9%80%94%EF%BC%9A**%0A%E8%B7%A8%E8%BF%9B%E7%A8%8B%E3%80%81%E8%B7%A8%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E3%80%82%0A%23%20%E5%90%8D%E6%AC%A1%E8%A7%A3%E9%87%8A%0A%23%23%20value%20initialization%0A-%20%E5%AF%B9%E4%BA%8E%E6%99%AE%E9%80%9A%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F(bool%2C%20int%2C%20char%2C%20double%2C%20pointers%2C%20etc.)%20%0Ait%20means%20it%20is%20initialized%20with%200%20for%20that%20type%20(false%20for%20bool%2C%200.0%20for%20double%2C%20etc.).%20%0A-%20%E5%AF%B9%E4%BA%8Eclass%E7%B1%BB%E5%9E%8B%0A%20%20%20%20-%20%E5%A6%82%E6%9E%9C%E6%9C%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E5%88%99%E8%B0%83%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%0A%20%20%20%20-%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E8%87%AA%E5%AE%9A%E4%B8%80%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E5%88%99%E8%B0%83%E7%94%A8%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%0A%20%20%20%20-%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E5%88%99%E6%8A%A5%E9%94%99%0A%20%20%20%20%0A%E4%B8%BE%E4%BE%8B%0A%60%60%60c%2B%2B%0Aclass%20A%0A%7B%0Apublic%3A%0A%20%20A(int)%20%7B%7D%20%2F%2Fno%20default%20constructor%0A%7D%3B%0Aclass%20B%0A%7B%0Apublic%3A%0A%20%20B()%20%7B%7D%20%2F%2Fdefault%20constructor%20available%0A%7D%3B%0Aint%20main()%0A%7B%0A%20%20A%20a1%5B3%5D%20%3D%20%7BA(2)%2C%20A(1)%2C%20A(14)%7D%3B%20%2F%2FOK%20n%20%3D%3D%20m%0A%20%20A%20a2%5B3%5D%20%3D%20%7BA(2)%7D%3B%20%2F%2FERROR%20A%20has%20no%20default%20constructor.%20Unable%20to%20value-initialize%20a2%5B1%5D%20and%20a2%5B2%5D%0A%20%20B%20b1%5B3%5D%20%3D%20%7BB()%7D%3B%20%2F%2FOK%20b1%5B1%5D%20and%20b1%5B2%5D%20are%20value%20initialized%2C%20in%20this%20case%20with%20the%20default-ctor%0A%20%20int%20Array1%5B1000%5D%20%3D%20%7B0%7D%3B%20%2F%2FAll%20elements%20are%20initialized%20with%200%3B%0A%20%20int%20Array2%5B1000%5D%20%3D%20%7B1%7D%3B%20%2F%2FAttention%3A%20only%20the%20first%20element%20is%201%2C%20the%20rest%20are%200%3B%0A%20%20bool%20Array3%5B1000%5D%20%3D%20%7B%7D%3B%20%2F%2Fthe%20braces%20can%20be%20empty%20too.%20All%20elements%20initialized%20with%20false%0A%20%20int%20Array4%5B1000%5D%3B%20%2F%2Fno%20initializer.%20This%20is%20different%20from%20an%20empty%20%7B%7D%20initializer%20in%20that%0A%20%20%2F%2Fthe%20elements%20in%20this%20case%20are%20not%20value-initialized%2C%20but%20have%20indeterminate%20values%20%0A%20%20%2F%2F(unless%2C%20of%20course%2C%20Array4%20is%20a%20global%20array)%0A%20%20int%20array%5B2%5D%20%3D%20%7B1%2C%202%2C%203%2C%204%7D%3B%20%2F%2FERROR%2C%20too%20many%20initializers%0A%7D%0A%60%60%60%0A%E5%A4%A7%E6%8B%AC%E5%8F%B7%E4%B8%AD%E4%B8%AA%E6%95%B0%E4%B8%8D%E8%B6%B3%E7%9A%84%EF%BC%8C%E7%94%A8value%20initialization%E8%A1%A5%E8%B6%B3%E3%80%82%E8%BF%99%E5%B0%B1%E6%98%AF%60A%20a%20%3D%20%7B1%7D%3B%60%E6%88%96%E8%80%85%60A%20a%20%3D%20%7B%7D%60%E7%9A%84%E5%90%AB%E4%B9%89%E3%80%82%E5%A4%A7%E6%8B%AC%E5%8F%B7%E4%B8%AD%E4%B8%AA%E6%95%B0%E8%B6%85%E8%BF%87%E5%A3%B0%E6%98%8E%E7%9A%84%E4%B8%AA%E6%95%B0%E7%9A%84%EF%BC%8C%E5%88%99%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99%E3%80%82%0A%0A%23%23%20brace-or-equal-initializers%0A%E7%B1%BB%E6%88%90%E5%91%98%E7%9A%84%E4%B8%80%E7%A7%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95%0A%60%60%60c%2B%2B%0Aclass%20B%20%7B%0Apublic%3A%0A%20%20%20%20B(int)%7B%7D%0A%7D%3B%0A%0Aclass%20A%20%7B%0A%20%20%20%20int%20a%20%3D%20123%3B%0A%20%20%20%20int%20b%20%7B456%7D%3B%0A%20%20%20%20B%20c%20%7B12%7D%3B%0A%20%20%20%20B%20d%20%3D%20%7B34%7D%3B%0A%7D%3B%0A%60%60%60%0A%23%23%20copy-assignment%20operator%0A%E6%8B%B7%E8%B4%9D%E8%B5%8B%E5%80%BC%E6%96%B9%E6%B3%95%0A%60%60%60c%2B%2B%0Aclass%20A%20%7B%0A%20%20%20%20A%20A(int)%20%7B%7D%0A%20%20%20%20A(const%20%26)%20%7B%7D%0A%20%20%20%20A%26%20operator%3D%20(const%20A%26a)%20%7B%7D%0A%7D%3B%0Avoid%20main()%20%7B%0A%20%20%20%20A%20a%3B%0A%20%20%20%20A%20b%20%3D%20a%3B%20%2F%2F%20%E8%BF%99%E9%87%8C%E8%B0%83%E7%94%A8%E7%9A%84%E6%98%AF%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%0A%20%20%20%20A%20c%3B%0A%20%20%20%20c%20%3D%20a%3B%20%2F%2F%20%E8%BF%99%E9%87%8C%E6%89%8D%E4%BC%9A%E8%B0%83%E7%94%A8%E6%8B%B7%E8%B4%9D%E5%A4%8D%E5%88%B6%E5%87%BD%E6%95%B0%0A%7D%0A%60%60%60%0A%23%23%20trial%20stuff%0A%23%23%23%20trivial%20copyable%0A%E5%8F%82%E8%80%83%5BC%2B%2B%20named%20requirements%3A%20TriviallyCopyable%5D(https%3A%2F%2Fen.cppreference.com%2Fw%2Fcpp%2Fnamed_req%2FTriviallyCopyable)%0A%3E%20The%20following%20types%20are%20collectively%20called%20trivially%20copyable%20types%3A%0A%3E%20-%20Scalar%20types%0A%3E%20-%20Trivially%20copyable%20classes%2C%20i.e.%20classes%20satisfying%20following%20requirements%3A%0A%20%20%20%20-%20At%20least%20one%20copy%20constructor%2C%20move%20constructor%2C%20copy%20assignment%20operator%2C%20or%20move%20assignment%20operator%20is%20eligible%0A%20%20%20%20-%20Every%20eligible%20copy%20constructor%20(if%20any)%20is%20trivial%0A%20%20%20%20-%20Every%20eligible%20move%20constructor%20(if%20any)%20is%20trivial%0A%20%20%20%20-%20Every%20eligible%20copy%20assignment%20operator%20(if%20any)%20is%20trivial%0A%20%20%20%20-%20Every%20eligible%20move%20assignment%20operator%20(if%20any)%20is%20trivial%0A%20%20%20%20-%20Has%20a%20trivial%20non-deleted%20destructor%0A%3E%20-%20Arrays%20of%20TriviallyCopyable%20objects%0A%3E%0A%3E%20This%20implies%20that%20a%20trivially%20copyable%20class%20has%20no%20virtual%20functions%20or%20virtual%20base%20classes.%0A%0A%E9%80%9A%E8%BF%87%E6%A8%A1%E7%89%88%5Bstd%3A%3Ais_trivially_copyable%5D(https%3A%2F%2Fen.cppreference.com%2Fw%2Fcpp%2Ftypes%2Fis_trivially_copyable)%E5%8F%AF%E4%BB%A5%E6%A3%80%E9%AA%8C%E4%B8%80%E4%B8%AA%E7%B1%BB%E6%98%AF%E5%90%A6trivially%20copyable%E3%80%82%0A%23%23%23%20trivial%20constructor%2Fdestructor%0A-%20%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9A%E4%B9%89%E7%9A%84%E6%9E%84%E9%80%A0%2F%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%0A-%20%E7%94%A8%60%3Ddefault%60%E5%AE%9A%E4%B9%89%E7%9A%84%E6%9E%84%E9%80%A0%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%0A%23%23%23%20trivial%20class%0AThe%20standard%20defines%20a%20trivial%20class%20as%20follows%3A%0A%0AA%20trivially%20copyable%20class%20is%20a%20class%20that%3A%0A%0A-%20has%20no%20non-trivial%20copy%20constructors%20(12.8)%2C%0A-%20has%20no%20non-trivial%20move%20constructors%20(12.8)%2C%0A-%20has%20no%20non-trivial%20copy%20assignment%20operators%20(13.5.3%2C%2012.8)%2C%0A-%20has%20no%20non-trivial%20move%20assignment%20operators%20(13.5.3%2C%2012.8)%2C%20and%0A-%20has%20a%20trivial%20destructor%20(12.4).%0A%0AA%20trivial%20class%20is%20a%20class%20that%20has%20a%20trivial%20default%20constructor%20(12.1)%20and%20is%20trivially%20copyable.%0A%0A%5B%20Note%3A%20In%20particular%2C%20a%20trivially%20copyable%20or%20trivial%20class%20does%20not%20have%20virtual%20functions%20or%20virtual%20base%20classes.%20%5D%0A%E5%8F%A6%E5%A4%96trivial%20class%E6%98%AF%E9%80%92%E5%BD%92%E7%9A%84%EF%BC%8C%E5%8D%B3trivial%20class%E4%B8%8D%E8%83%BD%E6%9C%89%E9%9D%9Etrivial%20class%E7%9A%84%E9%9D%9Estatic%E6%88%90%E5%91%98%E3%80%82%0A%E7%94%A8%E6%A8%A1%E7%89%88%5Bstd%3A%3Ais_trivial%5D(https%3A%2F%2Fen.cppreference.com%2Fw%2Fcpp%2Ftypes%2Fis_trivial)%E6%9D%A5%E6%B5%8B%E8%AF%95%0A%23%23%20standard%20layout%0AA%20standard-layout%20class%20is%20a%20class%20that%3A%0A%0A-%20has%20no%20non-static%20data%20members%20of%20type%20non-standard-layout%20class%20(or%20array%20of%20such%20types)%20or%20reference%2C%0A%0A-%20has%20no%20virtual%20functions%20(10.3)%20and%20no%20virtual%20base%20classes%20(10.1)%2C%0A%0A-%20has%20the%20same%20access%20control%20(Clause%2011)%20for%20all%20non-static%20data%20members%2C%0A%0A-%20has%20no%20non-standard-layout%20base%20classes%2C%0A%0A-%20either%20has%20no%20non-static%20data%20members%20in%20the%20most%20derived%20class%20and%20at%20most%20one%20base%20class%20with%20non-static%20data%20members%2C%20or%20has%20no%20base%20classes%20with%20non-static%20data%20members%2C%20(%E8%A6%81%E4%B9%88%E7%BB%88%E7%82%B9%E7%B1%BB%E6%B2%A1%E6%9C%89%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%B1%BB%E6%9C%89%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%EF%BC%9B%E8%A6%81%E4%B9%88%E6%B2%A1%E6%9C%89%E5%9F%BA%E7%B1%BB%E6%9C%89%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98)%EF%BC%8Cand%0A%0A-%20has%20no%20base%20classes%20of%20the%20same%20type%20as%20the%20first%20non-static%20data%20member.%0A%0AA%20standard-layout%20struct%20is%20a%20standard-layout%20class%20defined%20with%20the%20class-key%20struct%20or%20the%20class-key%20class.%0A%0AA%20standard-layout%20union%20is%20a%20standard-layout%20class%20defined%20with%20the%20class-key%20union.%0A%0A%5B%20Note%3A%20Standard-layout%20classes%20are%20useful%20for%20communicating%20with%20code%20written%20in%20other%20programming%20languages.%20Their%20layout%20is%20specified%20in%209.2.%5D%0A%0A%E6%A0%87%E5%87%86%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%EF%BC%8C%E7%A1%AE%E4%BF%9D%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%92%8CC%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%AE%8C%E5%85%A8%E4%B8%80%E8%87%B4%E3%80%82%E4%BD%BF%E5%BE%97POD%E5%8F%98%E9%87%8F%E5%85%B7%E5%A4%87%E4%BA%86C%E5%85%BC%E5%AE%B9%E6%80%A7%E3%80%82%0A%E7%94%A8%E6%A8%A1%E7%89%88%5Bstd%3A%3Ais_standard_layout%5D(https%3A%2F%2Fen.cppreference.com%2Fw%2Fcpp%2Ftypes%2Fis_standard_layout)%E5%8F%AF%E4%BB%A5%E6%B5%8B%E8%AF%95%0A%0A%23%20%E6%80%BB%E7%BB%93%0A%E7%94%A8%5Bstd%3A%3Ais_pod%5D(https%3A%2F%2Fen.cppreference.com%2Fw%2Fcpp%2Ftypes%2Fis_pod)%E6%9D%A5%E6%B5%8B%E8%AF%95%E4%BD%A0%E7%9A%84%E7%B1%BB%E5%90%A7%E3%80%82%0A%23%20%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%0A1.%20%5BWhat%20are%20Aggregates%20and%20PODs%20and%20how%2Fwhy%20are%20they%20special%3F%5D(https%3A%2F%2Fstackoverflow.com%2Fquestions%2F4178175%2Fwhat-are-aggregates-and-pods-and-how-why-are-they-special)%0A2.%20%5BC%2B%2B%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%EF%BC%88%E4%B8%89%EF%BC%89POD%5D(https%3A%2F%2Ffuzhe1989.github.io%2F2018%2F03%2F15%2Fcpp-object-model-pod%2F)</center>",
            "tags": [
                "C++",
                "C++11"
            ]
        },
        {
            "id": "https://blog.zhougy.top/2021/03/21/initializer-list%E5%92%8C%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96/",
            "url": "https://blog.zhougy.top/2021/03/21/initializer-list%E5%92%8C%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96/",
            "title": "initializer-list和列表初始化",
            "date_published": "2021-03-21T11:56:53.000Z",
            "content_html": "<div style=\"font-size: 14px; margin: 0; padding: 0; width: 100%;\"><h1 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 41px; border-bottom: 3px double #999; color: #000; margin-top: 14px;\">C++11&#x7684;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;</h1>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x5728;C&#x8BED;&#x8A00;&#x548C;C++98/03&#x4E2D;&#xFF0C;&#x5927;&#x62EC;&#x53F7;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x521D;&#x59CB;&#x5316;&#x6570;&#x7EC4;&#xFF0C;&#x4F8B;&#x5982;&#xFF1A;</p>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> a[] = &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">2</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">3</span>&#125;;\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> b[<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">4</span>] = &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">2</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">3</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">4</span>&#125;; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">// &#x5982;&#x679C;&#x4E2A;&#x6570;&#x4E0D;&#x8DB3;&#x7684;&#xFF0C;&#x7528;0&#x521D;&#x59CB;&#x5316;</span>\n</code></pre>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">C++11&#x5C06;&#x8FD9;&#x7C7B;&#x5927;&#x62EC;&#x53F7;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x6269;&#x5C55;&#x5230;&#x81EA;&#x5B9A;&#x4E49;&#x7C7B;&#x578B;&#xFF0C;&#x4F46;&#x9700;&#x8981;&#x6EE1;&#x8DB3;&#x4E00;&#x5B9A;&#x7684;&#x6761;&#x4EF6;&#xFF0C;&#x5426;&#x5219;&#x4F1A;&#x7F16;&#x8BD1;&#x62A5;&#x9519;&#x3002;</p>\n<blockquote style=\"line-height: 160%; box-sizing: content-box; margin: 15px 0; border-left: 4px solid #ddd; padding: 0 15px; color: #777;\">\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333; margin-top: 0;\">&#x53C2;&#x8003;<a href=\"https://blog.csdn.net/JinhuCheng/article/details/107330983\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">C++11&#x65B0;&#x7279;&#x6027;&#x4E4B;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#x3001;POD&#x3001;&#x805A;&#x5408;&#x7C7B;</a></p>\n<ol style=\"line-height: 160%; box-sizing: content-box; display: block; padding-left: 30px; margin: 6px 0 10px; color: #333; list-style-type: decimal; margin-bottom: 0;\">\n<li style=\"line-height: 160%; box-sizing: content-box;\">C++98/03&#x6807;&#x51C6;&#x4E2D;&#x5BF9;&#x4E8E;&#x666E;&#x901A;&#x6570;&#x7EC4;&#x548C;POD&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#xFF1B;</li>\n<li style=\"line-height: 160%; box-sizing: content-box;\">C++11&#x6807;&#x51C6;&#x4E2D;&#x5BF9;&#x4E8E;&#x666E;&#x901A;&#x6570;&#x7EC4;&#x548C;&#x805A;&#x5408;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#xFF1B;</li>\n<li style=\"line-height: 160%; box-sizing: content-box;\">C++11&#x6807;&#x51C6;&#x4E2D;&#x5BF9;&#x4E8E;&#x975E;&#x805A;&#x5408;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x81EA;&#x5B9A;&#x4E49;&#x6784;&#x9020;&#x51FD;&#x6570;&#x7684;&#x65B9;&#x5F0F;&#x4F7F;&#x7528;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#x3002;</li>\n</ol>\n</blockquote>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\"><a href=\"https://blog.csdn.net/hailong0715/article/details/54018002\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">C++11&#x65B0;&#x7279;&#x6027;&#x4E4B;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;</a>&#x63D0;&#x5230;&#x975E;&#x805A;&#x5408;&#x7C7B;&#x578B;&#x4E0D;&#x80FD;&#x4F7F;&#x7528;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#x662F;&#x4E0D;&#x5BF9;&#x7684;&#x3002;&#x5B9E;&#x9A8C;&#x8BC1;&#x660E;&#xFF0C;&#x4E0D;&#x8BBA;&#x662F;&#x4E0D;&#x662F;&#x805A;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x5747;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#x3002;</p>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">class</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">A</span> &#123;</span>\n\t<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">public</span>:\n\t\tA(<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> a1) &#123;&#125;\n\t\tA(<span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">std</span>::<span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">initializer_list</span>&lt;<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span>&gt; l) &#123;&#125;\n\t<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">private</span>:\n\t\t<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> a &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">12</span>&#125;;\n&#125;;\n<span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">main</span><span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">()</span>\n</span>&#123;\n\tA a = &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">123</span>&#125;;\n    ...\n&#125;\n</code></pre>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x9996;&#x5148;&#x58F0;&#x660E;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">A a=&#123;123&#125;</code>&#x6216;&#x8005;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">A a&#123;123&#125;</code>&#x8FD9;&#x4E24;&#x79CD;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x662F;&#x4E00;&#x81F4;&#x7684;&#x3002;<br>\n&#x5176;&#x6B21;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x79CD;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x5148;&#x5C1D;&#x8BD5;&#x7528;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">A(std::initializer_list&lt;int&gt; l)</code>&#x53BB;&#x5339;&#x914D;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x6210;&#x529F;&#xFF0C;&#x5219;&#x4F1A;&#x5C1D;&#x8BD5;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">A(int)</code>&#xFF0C;&#x5982;&#x679C;&#x8FD9;&#x4E24;&#x79CD;&#x6784;&#x9020;&#x51FD;&#x6570;&#x90FD;&#x672A;&#x5B9A;&#x4E49;&#xFF0C;&#x5C31;&#x4F1A;&#x7F16;&#x8BD1;&#x62A5;&#x9519;&#x3002;<br>\n&#x53E6;&#x5916;&#xFF0C;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x4E5F;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x5C31;&#x5730;&#x521D;&#x59CB;&#x5316;, &#x867D;&#x7136;&#x8FD9;&#x4F1A;&#x5BFC;&#x81F4;&#x7C7B;&#x6210;&#x4E3A;&#x975E;&#x805A;&#x5408;&#x7C7B;&#xFF0C;&#x4F46;&#x5E76;&#x4E0D;&#x59A8;&#x788D;&#x5176;&#x91C7;&#x7528;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;&#x3002;&#x4F7F;&#x7528;&#x865A;&#x51FD;&#x6570;&#xFF0C;&#x6709;&#x57FA;&#x7C7B;&#x7684;&#x6548;&#x679C;&#x90FD;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x4E0D;&#x5F71;&#x54CD;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;&#x7684;&#x4F7F;&#x7528;&#x3002;</p>\n<h2 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 34px; border-bottom: 1px solid #dbdbdb; color: #333;\">C++11&#x4E2D;&#x7684;&#x51E0;&#x79CD;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;</h2>\n<ol style=\"line-height: 160%; box-sizing: content-box; display: block; padding-left: 30px; margin: 6px 0 10px; color: #333; list-style-type: decimal;\">\n<li style=\"line-height: 160%; box-sizing: content-box;\">&#x5C31;&#x5730;&#x521D;&#x59CB;&#x5316;</li>\n</ol>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">class</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">A</span> &#123;</span>\n\t<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">private</span>:\n\t\t<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> a1 &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">12</span>&#125;;\n        <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">double</span> a2 = &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">12.0</span>&#125;;\n        <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">float</span> a3 = <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">12.0</span>\n        B b&#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">123</span>&#125;\n        C c = &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">123</span>&#125;;\n&#125;;\n</code></pre>\n<ol start=\"2\" style=\"line-height: 160%; box-sizing: content-box; display: block; padding-left: 30px; margin: 6px 0 10px; color: #333; list-style-type: decimal;\">\n<li style=\"line-height: 160%; box-sizing: content-box;\">&#x6784;&#x9020;&#x51FD;&#x6570;&#x521D;&#x59CB;&#x5316;&#x5217;&#x8868;</li>\n</ol>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">class</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">A</span> &#123;</span>\n    <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">public</span>:\n        A() : a(<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">123</span>), b(<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">456</span>) &#123;&#125;\n\t<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">private</span>:\n        <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> a;\n        <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> b;\n&#125;;\n</code></pre>\n<ol start=\"3\" style=\"line-height: 160%; box-sizing: content-box; display: block; padding-left: 30px; margin: 6px 0 10px; color: #333; list-style-type: decimal;\">\n<li style=\"line-height: 160%; box-sizing: content-box;\">&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;</li>\n</ol>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">class</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">A</span> &#123;</span>\n    <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">public</span>:\n        A(<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span>, <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span>) &#123;&#125;\n        A(<span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">std</span>::<span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">initializer_list</span>&lt;<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span>, <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span>&gt;) &#123;&#125;\n\t<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">private</span>:\n        <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> a;\n        <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> b;\n&#125;;\n<span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">void</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">main</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">()</span>\n</span>&#123;\n    <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">// &#x4F18;&#x5148;&#x5339;&#x914D;A(std::initializer_list&lt;int, int&gt;)</span>\n    <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">// &#x518D;&#x5339;&#x914D;A(int, int)</span>\n    <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">// &#x5426;&#x5219;&#x62A5;&#x9519;</span>\n    A a &#123;<span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">123</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">456</span>&#125;;\n&#125;\n</code></pre>\n<ul style=\"line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;\">\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x5C31;&#x5730;&#x521D;&#x59CB;&#x5316;&#x4F1A;&#x6700;&#x5148;&#x5F97;&#x5230;&#x6267;&#x884C;&#xFF0C;&#x6784;&#x9020;&#x51FD;&#x6570;&#x521D;&#x59CB;&#x5316;&#x5217;&#x8868;&#x4F1A;&#x8986;&#x76D6;&#x5C31;&#x5730;&#x521D;&#x59CB;&#x5316;&#x7684;&#x503C;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x5982;&#x679C;&#x91C7;&#x7528;&#x521D;&#x59CB;&#x5316;&#x5217;&#x8868;&#xFF0C;&#x5373;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">a&#123;...&#125;</code>&#x521D;&#x59CB;&#x5316;&#xFF0C;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">std::initializer_list&lt;T&gt;</code>&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4F1A;&#x4F18;&#x5148;&#x5F97;&#x5230;&#x6267;&#x884C;</li>\n<li style=\"line-height: 160%; box-sizing: content-box; position: relative;\">&#x5982;&#x679C;&#x91C7;&#x7528;&#x539F;&#x751F;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x5373;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">a(int)</code>&#x521D;&#x59CB;&#x5316;&#xFF0C;<code style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; color: #c1788b; padding: 4px 4px 2px 0; letter-spacing: -.3px;\">A(init)</code>&#x4F18;&#x5148;&#x5F97;&#x5230;&#x6267;&#x884C;</li>\n</ul>\n<h1 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 41px; border-bottom: 3px double #999; color: #000;\">&#x4EC0;&#x4E48;&#x662F;initializer-list</h1>\n<blockquote style=\"line-height: 160%; box-sizing: content-box; margin: 15px 0; border-left: 4px solid #ddd; padding: 0 15px; color: #777;\">\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333; margin-top: 0;\"><strong style=\"line-height: 160%; box-sizing: content-box; font-weight: 700;\">&#x6458;&#x5F55;<a href=\"https://blog.csdn.net/hailong0715/article/details/54018002\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">C++11&#x65B0;&#x7279;&#x6027;&#x4E4B;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;</a></strong>-&#x521D;&#x59CB;&#x5316;&#x5217;&#x8868;</p>\n<ol style=\"line-height: 160%; box-sizing: content-box; display: block; padding-left: 30px; margin: 6px 0 10px; color: #333; list-style-type: decimal; margin-bottom: 0;\">\n<li style=\"line-height: 160%; box-sizing: content-box;\">&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x5BB9;&#x5668;&#x7C7B;&#x578B;&#xFF0C;&#x5185;&#x90E8;&#x5B9A;&#x4E49;&#x4E86;&#x8FED;&#x4EE3;&#x5668;iterator&#x7B49;&#x5BB9;&#x5668;&#x5FC5;&#x987B;&#x7684;&#x4E00;&#x4E9B;&#x6982;&#x5FF5;&#x3002;</li>\n<li style=\"line-height: 160%; box-sizing: content-box;\">initialzer-list&lt;T&gt;&#x6765;&#x8BF4;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x63A5;&#x53D7;&#x4EFB;&#x610F;&#x957F;&#x5EA6;&#x7684;&#x521D;&#x59CB;&#x5316;&#x5217;&#x8868;&#xFF0C;&#x4F46;&#x662F;&#x5143;&#x7D20;&#x5FC5;&#x987B;&#x662F;&#x8981;&#x76F8;&#x540C;&#x7684;&#x6216;&#x8005;&#x53EF;&#x4EE5;&#x8F6C;&#x6362;&#x4E3A;T&#x7C7B;&#x578B;&#x7684;&#x3002;</li>\n<li style=\"line-height: 160%; box-sizing: content-box;\">&#x4E09;&#x4E2A;&#x6210;&#x5458;&#x63A5;&#x53E3;&#xFF0C;begin(),end(),size(),&#x5176;&#x4E2D;size()&#x8FD4;&#x56DE;initialzer-list&#x7684;&#x957F;&#x5EA6;&#x3002;</li>\n<li style=\"line-height: 160%; box-sizing: content-box;\">&#x80FD;&#x88AB;&#x6574;&#x4F53;&#x7684;&#x521D;&#x59CB;&#x5316;&#x548C;&#x8D4B;&#x503C;&#xFF0C;&#x904D;&#x5386;&#x53EA;&#x80FD;&#x901A;&#x8FC7;begin&#x548C;end&#x8FED;&#x4EE3;&#x5668;&#x6765;&#xFF0C;&#x904D;&#x5386;&#x53D6;&#x5F97;&#x7684;&#x6570;&#x636E;&#x662F;&#x53EF;&#x8BFB;&#x7684;&#xFF0C;&#x662F;&#x4E0D;&#x80FD;&#x5BF9;&#x5355;&#x4E2A;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#x7684;&#x3002;</li>\n</ol>\n</blockquote>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x6CE8;&#x610F;&#x4E00;&#xFF1A;<br>\ninitialzer-list&lt;T&gt;&#x4FDD;&#x5B58;&#x7684;&#x662F;T&#x7C7B;&#x578B;&#x7684;&#x5F15;&#x7528;&#xFF0C;&#x5E76;&#x4E0D;&#x5BF9;T&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x62F7;&#x8D1D;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x53D8;&#x91CF;&#x7684;&#x751F;&#x5B58;&#x671F;</p>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">std</span>::<span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">initializer_list</span>&lt;<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span>&gt; func(<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">void</span>)\n&#123;\n    <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">return</span>&#123; <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">2</span>, <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">3</span> &#125;;\n&#125;\n<span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">void</span> <span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">main</span><span style=\"color: #dcdcdc; line-height: 160%; box-sizing: content-box;\">()</span>\n</span>&#123;\n    <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">auto</span> c = func();\n    <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">for</span> (<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">auto</span> it = c.begin(); it != c.end(); it++)\n\t\t<span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">std</span>::<span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">cout</span> &lt;&lt; it - c.begin() &lt;&lt; <span style=\"color: #d69d85; line-height: 160%; box-sizing: content-box;\">&quot;:&quot;</span> &lt;&lt; (*it) &lt;&lt; <span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">std</span>::<span style=\"color: #4ec9b0; line-height: 160%; box-sizing: content-box;\">endl</span>;\n&#125;\n</code></pre>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x6B64;&#x5904;&#x6253;&#x5370;&#x662F;&#x4E71;&#x7684;&#x3002;&#x56E0;&#x4E3A;func&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x53F3;&#x503C;&#x5F15;&#x7528;&#xFF0C;&#x5728;&#x9000;&#x51FA;&#x51FD;&#x6570;&#x540E;&#x5931;&#x6548;&#x3002;</p>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\">&#x6CE8;&#x610F;&#x4E8C;&#xFF1A;<br>\n&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#x9632;&#x6B62;&#x7C7B;&#x578B;&#x6536;&#x7A84;</p>\n<pre style=\"line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;\"><code style=\"display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;\"><span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> a = <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1.1</span>; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//OK</span>\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> b&#123; <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1.1</span> &#125;; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//error</span>\n \n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">float</span> f1 = <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1e40</span>; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//OK, &#x79D1;&#x5B66;&#x8BA1;&#x6570;&#x6CD5;10^40</span>\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">float</span> f2&#123; <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1e40</span> &#125;; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//error</span>\n \n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">const</span> <span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">int</span> x = <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1024</span>, y = <span style=\"color: #b8d7a3; line-height: 160%; box-sizing: content-box;\">1</span>;\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">char</span> c = x; <span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//OK</span>\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">char</span> d&#123; x &#125;;<span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//error</span>\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">char</span> e = y;<span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//error</span>\n<span style=\"color: #569cd6; line-height: 160%; box-sizing: content-box;\">char</span> f&#123; y &#125;;<span style=\"color: #57a64a; font-style: italic; line-height: 160%; box-sizing: content-box;\">//error</span>\n</code></pre>\n<h1 style=\"line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 41px; border-bottom: 3px double #999; color: #000;\">&#x53C2;&#x8003;&#x6587;&#x732E;</h1>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\"><a href=\"https://en.cppreference.com/w/cpp/utility/initializer_list\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">initializer_list - cppreference.com</a></p>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\"><a href=\"https://blog.csdn.net/hailong0715/article/details/54018002\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">C++11&#x65B0;&#x7279;&#x6027;&#x4E4B;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;</a></p>\n<p style=\"line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;\"><a href=\"https://blog.csdn.net/JinhuCheng/article/details/107330983\" style=\"line-height: 160%; box-sizing: content-box; text-decoration: underline; color: #5286bc;\">C++11&#x65B0;&#x7279;&#x6027;&#x4E4B;&#x5217;&#x8868;&#x521D;&#x59CB;&#x5316;&#x3001;POD&#x3001;&#x805A;&#x5408;&#x7C7B;</a></p>\n</div><center style=\"display:none !important;visibility:collapse !important;height:0 !important;white-space:nowrap;width:100%;overflow:hidden\">%23%20C%2B%2B11%E7%9A%84%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%0A%E5%9C%A8C%E8%AF%AD%E8%A8%80%E5%92%8CC%2B%2B98%2F03%E4%B8%AD%EF%BC%8C%E5%A4%A7%E6%8B%AC%E5%8F%B7%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E7%BB%84%EF%BC%8C%E4%BE%8B%E5%A6%82%EF%BC%9A%0A%60%60%60c%0Aint%20a%5B%5D%20%3D%20%7B1%2C%202%2C%203%7D%3B%0Aint%20b%5B4%5D%20%3D%20%7B1%2C%202%2C%203%2C%204%7D%3B%20%2F%2F%20%E5%A6%82%E6%9E%9C%E4%B8%AA%E6%95%B0%E4%B8%8D%E8%B6%B3%E7%9A%84%EF%BC%8C%E7%94%A80%E5%88%9D%E5%A7%8B%E5%8C%96%0A%60%60%60%0A%0AC%2B%2B11%E5%B0%86%E8%BF%99%E7%B1%BB%E5%A4%A7%E6%8B%AC%E5%8F%B7%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E6%89%A9%E5%B1%95%E5%88%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%EF%BC%8C%E4%BD%86%E9%9C%80%E8%A6%81%E6%BB%A1%E8%B6%B3%E4%B8%80%E5%AE%9A%E7%9A%84%E6%9D%A1%E4%BB%B6%EF%BC%8C%E5%90%A6%E5%88%99%E4%BC%9A%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99%E3%80%82%0A%3E%E5%8F%82%E8%80%83%5BC%2B%2B11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%81POD%E3%80%81%E8%81%9A%E5%90%88%E7%B1%BB%5D(https%3A%2F%2Fblog.csdn.net%2FJinhuCheng%2Farticle%2Fdetails%2F107330983)%0A%3E%201.%20C%2B%2B98%2F03%E6%A0%87%E5%87%86%E4%B8%AD%E5%AF%B9%E4%BA%8E%E6%99%AE%E9%80%9A%E6%95%B0%E7%BB%84%E5%92%8CPOD%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%9B%0A%3E%202.%20C%2B%2B11%E6%A0%87%E5%87%86%E4%B8%AD%E5%AF%B9%E4%BA%8E%E6%99%AE%E9%80%9A%E6%95%B0%E7%BB%84%E5%92%8C%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%9B%0A%3E%203.%20C%2B%2B11%E6%A0%87%E5%87%86%E4%B8%AD%E5%AF%B9%E4%BA%8E%E9%9D%9E%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%82%0A%5BC%2B%2B11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%5D(https%3A%2F%2Fblog.csdn.net%2Fhailong0715%2Farticle%2Fdetails%2F54018002)%E6%8F%90%E5%88%B0%E9%9D%9E%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E6%98%AF%E4%B8%8D%E5%AF%B9%E7%9A%84%E3%80%82%E5%AE%9E%E9%AA%8C%E8%AF%81%E6%98%8E%EF%BC%8C%E4%B8%8D%E8%AE%BA%E6%98%AF%E4%B8%8D%E6%98%AF%E8%81%9A%E5%90%88%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%9D%87%E5%8F%AF%E4%BB%A5%E9%87%87%E7%94%A8%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%82%0A%60%60%60c%2B%2B%0Aclass%20A%20%7B%0A%09public%3A%0A%09%09A(int%20a1)%20%7B%7D%0A%09%09A(std%3A%3Ainitializer_list%3Cint%3E%20l)%20%7B%7D%0A%09private%3A%0A%09%09int%20a%20%7B12%7D%3B%0A%7D%3B%0Aint%20main()%0A%7B%0A%09A%20a%20%3D%20%7B123%7D%3B%0A%20%20%20%20...%0A%7D%0A%60%60%60%0A%E9%A6%96%E5%85%88%E5%A3%B0%E6%98%8E%60A%20a%3D%7B123%7D%60%E6%88%96%E8%80%85%60A%20a%7B123%7D%60%E8%BF%99%E4%B8%A4%E7%A7%8D%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%98%AF%E4%B8%80%E8%87%B4%E7%9A%84%E3%80%82%0A%E5%85%B6%E6%AC%A1%EF%BC%8C%E5%AF%B9%E4%BA%8E%E8%BF%99%E7%A7%8D%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%EF%BC%8C%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%9A%E5%85%88%E5%B0%9D%E8%AF%95%E7%94%A8%60A(std%3A%3Ainitializer_list%3Cint%3E%20l)%60%E5%8E%BB%E5%8C%B9%E9%85%8D%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E5%88%99%E4%BC%9A%E5%B0%9D%E8%AF%95%60A(int)%60%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%BF%99%E4%B8%A4%E7%A7%8D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%83%BD%E6%9C%AA%E5%AE%9A%E4%B9%89%EF%BC%8C%E5%B0%B1%E4%BC%9A%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99%E3%80%82%0A%E5%8F%A6%E5%A4%96%EF%BC%8C%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%87%87%E7%94%A8%E5%B0%B1%E5%9C%B0%E5%88%9D%E5%A7%8B%E5%8C%96%2C%20%E8%99%BD%E7%84%B6%E8%BF%99%E4%BC%9A%E5%AF%BC%E8%87%B4%E7%B1%BB%E6%88%90%E4%B8%BA%E9%9D%9E%E8%81%9A%E5%90%88%E7%B1%BB%EF%BC%8C%E4%BD%86%E5%B9%B6%E4%B8%8D%E5%A6%A8%E7%A2%8D%E5%85%B6%E9%87%87%E7%94%A8%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95%E3%80%82%E4%BD%BF%E7%94%A8%E8%99%9A%E5%87%BD%E6%95%B0%EF%BC%8C%E6%9C%89%E5%9F%BA%E7%B1%BB%E7%9A%84%E6%95%88%E6%9E%9C%E9%83%BD%E6%98%AF%E4%B8%80%E6%A0%B7%E7%9A%84%EF%BC%8C%E4%B8%8D%E5%BD%B1%E5%93%8D%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82%0A%23%23%20C%2B%2B11%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95%0A1.%20%E5%B0%B1%E5%9C%B0%E5%88%9D%E5%A7%8B%E5%8C%96%0A%60%60%60c%2B%2B%0Aclass%20A%20%7B%0A%09private%3A%0A%09%09int%20a1%20%7B12%7D%3B%0A%20%20%20%20%20%20%20%20double%20a2%20%3D%20%7B12.0%7D%3B%0A%20%20%20%20%20%20%20%20float%20a3%20%3D%2012.0%0A%20%20%20%20%20%20%20%20B%20b%7B123%7D%0A%20%20%20%20%20%20%20%20C%20c%20%3D%20%7B123%7D%3B%0A%7D%3B%0A%60%60%60%0A2.%20%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8%0A%60%60%60c%2B%2B%0Aclass%20A%20%7B%0A%20%20%20%20public%3A%0A%20%20%20%20%20%20%20%20A()%20%3A%20a(123)%2C%20b(456)%20%7B%7D%0A%09private%3A%0A%20%20%20%20%20%20%20%20int%20a%3B%0A%20%20%20%20%20%20%20%20int%20b%3B%0A%7D%3B%0A%60%60%60%0A3.%20%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%0A%60%60%60c%2B%2B%0Aclass%20A%20%7B%0A%20%20%20%20public%3A%0A%20%20%20%20%20%20%20%20A(int%2C%20int)%20%7B%7D%0A%20%20%20%20%20%20%20%20A(std%3A%3Ainitializer_list%3Cint%2C%20int%3E)%20%7B%7D%0A%09private%3A%0A%20%20%20%20%20%20%20%20int%20a%3B%0A%20%20%20%20%20%20%20%20int%20b%3B%0A%7D%3B%0Avoid%20main%20()%0A%7B%0A%20%20%20%20%2F%2F%20%E4%BC%98%E5%85%88%E5%8C%B9%E9%85%8DA(std%3A%3Ainitializer_list%3Cint%2C%20int%3E)%0A%20%20%20%20%2F%2F%20%E5%86%8D%E5%8C%B9%E9%85%8DA(int%2C%20int)%0A%20%20%20%20%2F%2F%20%E5%90%A6%E5%88%99%E6%8A%A5%E9%94%99%0A%20%20%20%20A%20a%20%7B123%2C%20456%7D%3B%0A%7D%0A%60%60%60%0A-%20%E5%B0%B1%E5%9C%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BC%9A%E6%9C%80%E5%85%88%E5%BE%97%E5%88%B0%E6%89%A7%E8%A1%8C%EF%BC%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8%E4%BC%9A%E8%A6%86%E7%9B%96%E5%B0%B1%E5%9C%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%80%BC%0A-%20%E5%A6%82%E6%9E%9C%E9%87%87%E7%94%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8%EF%BC%8C%E5%8D%B3%60a%7B...%7D%60%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%60std%3A%3Ainitializer_list%3CT%3E%60%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BC%9A%E4%BC%98%E5%85%88%E5%BE%97%E5%88%B0%E6%89%A7%E8%A1%8C%0A-%20%E5%A6%82%E6%9E%9C%E9%87%87%E7%94%A8%E5%8E%9F%E7%94%9F%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E5%8D%B3%60a(int)%60%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%60A(init)%60%E4%BC%98%E5%85%88%E5%BE%97%E5%88%B0%E6%89%A7%E8%A1%8C%0A%23%20%E4%BB%80%E4%B9%88%E6%98%AFinitializer-list%0A%3E**%E6%91%98%E5%BD%95%5BC%2B%2B11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%5D(https%3A%2F%2Fblog.csdn.net%2Fhailong0715%2Farticle%2Fdetails%2F54018002)**-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8%0A%3E1.%20%E5%AE%83%E6%98%AF%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%86%85%E9%83%A8%E5%AE%9A%E4%B9%89%E4%BA%86%E8%BF%AD%E4%BB%A3%E5%99%A8iterator%E7%AD%89%E5%AE%B9%E5%99%A8%E5%BF%85%E9%A1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%E3%80%82%20%0A%3E2.%20initialzer-list%3CT%3E%E6%9D%A5%E8%AF%B4%EF%BC%8C%E5%AE%83%E5%8F%AF%E4%BB%A5%E6%8E%A5%E5%8F%97%E4%BB%BB%E6%84%8F%E9%95%BF%E5%BA%A6%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8%EF%BC%8C%E4%BD%86%E6%98%AF%E5%85%83%E7%B4%A0%E5%BF%85%E9%A1%BB%E6%98%AF%E8%A6%81%E7%9B%B8%E5%90%8C%E7%9A%84%E6%88%96%E8%80%85%E5%8F%AF%E4%BB%A5%E8%BD%AC%E6%8D%A2%E4%B8%BAT%E7%B1%BB%E5%9E%8B%E7%9A%84%E3%80%82%20%20%0A%3E3.%20%E4%B8%89%E4%B8%AA%E6%88%90%E5%91%98%E6%8E%A5%E5%8F%A3%EF%BC%8Cbegin()%2Cend()%2Csize()%2C%E5%85%B6%E4%B8%ADsize()%E8%BF%94%E5%9B%9Einitialzer-list%E7%9A%84%E9%95%BF%E5%BA%A6%E3%80%82%20%20%0A%3E4.%20%E8%83%BD%E8%A2%AB%E6%95%B4%E4%BD%93%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E8%B5%8B%E5%80%BC%EF%BC%8C%E9%81%8D%E5%8E%86%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87begin%E5%92%8Cend%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%9D%A5%EF%BC%8C%E9%81%8D%E5%8E%86%E5%8F%96%E5%BE%97%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E5%8F%AF%E8%AF%BB%E7%9A%84%EF%BC%8C%E6%98%AF%E4%B8%8D%E8%83%BD%E5%AF%B9%E5%8D%95%E4%B8%AA%E8%BF%9B%E8%A1%8C%E4%BF%AE%E6%94%B9%E7%9A%84%E3%80%82%20%20%0A%0A%E6%B3%A8%E6%84%8F%E4%B8%80%EF%BC%9A%0Ainitialzer-list%3CT%3E%E4%BF%9D%E5%AD%98%E7%9A%84%E6%98%AFT%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BC%95%E7%94%A8%EF%BC%8C%E5%B9%B6%E4%B8%8D%E5%AF%B9T%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E6%8B%B7%E8%B4%9D%EF%BC%8C%E5%9B%A0%E6%AD%A4%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%8F%98%E9%87%8F%E7%9A%84%E7%94%9F%E5%AD%98%E6%9C%9F%0A%60%60%60c%2B%2B%0Astd%3A%3Ainitializer_list%3Cint%3E%20func(void)%0A%7B%0A%20%20%20%20return%7B%202%2C%203%20%7D%3B%0A%7D%0Avoid%20main()%0A%7B%0A%20%20%20%20auto%20c%20%3D%20func()%3B%0A%20%20%20%20for%20(auto%20it%20%3D%20c.begin()%3B%20it%20!%3D%20c.end()%3B%20it%2B%2B)%0A%09%09std%3A%3Acout%20%3C%3C%20it%20-%20c.begin()%20%3C%3C%20%22%3A%22%20%3C%3C%20(*it)%20%3C%3C%20std%3A%3Aendl%3B%0A%7D%0A%60%60%60%0A%E6%AD%A4%E5%A4%84%E6%89%93%E5%8D%B0%E6%98%AF%E4%B9%B1%E7%9A%84%E3%80%82%E5%9B%A0%E4%B8%BAfunc%E8%BF%94%E5%9B%9E%E7%9A%84%E6%98%AF%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%EF%BC%8C%E5%9C%A8%E9%80%80%E5%87%BA%E5%87%BD%E6%95%B0%E5%90%8E%E5%A4%B1%E6%95%88%E3%80%82%0A%0A%E6%B3%A8%E6%84%8F%E4%BA%8C%EF%BC%9A%0A%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E9%98%B2%E6%AD%A2%E7%B1%BB%E5%9E%8B%E6%94%B6%E7%AA%84%0A%60%60%60c%2B%2B%0Aint%20a%20%3D%201.1%3B%20%2F%2FOK%0Aint%20b%7B%201.1%20%7D%3B%20%2F%2Ferror%0A%20%0Afloat%20f1%20%3D%201e40%3B%20%2F%2FOK%2C%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%9510%5E40%0Afloat%20f2%7B%201e40%20%7D%3B%20%2F%2Ferror%0A%20%0Aconst%20int%20x%20%3D%201024%2C%20y%20%3D%201%3B%0Achar%20c%20%3D%20x%3B%20%2F%2FOK%0Achar%20d%7B%20x%20%7D%3B%2F%2Ferror%0Achar%20e%20%3D%20y%3B%2F%2Ferror%0Achar%20f%7B%20y%20%7D%3B%2F%2Ferror%0A%60%60%60%0A%0A%0A%23%20%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%0A%5Binitializer_list%20-%20cppreference.com%5D(https%3A%2F%2Fen.cppreference.com%2Fw%2Fcpp%2Futility%2Finitializer_list)%0A%5BC%2B%2B11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%5D(https%3A%2F%2Fblog.csdn.net%2Fhailong0715%2Farticle%2Fdetails%2F54018002)%0A%5BC%2B%2B11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%81POD%E3%80%81%E8%81%9A%E5%90%88%E7%B1%BB%5D(https%3A%2F%2Fblog.csdn.net%2FJinhuCheng%2Farticle%2Fdetails%2F107330983)</center>",
            "tags": [
                "C++"
            ]
        }
    ]
}