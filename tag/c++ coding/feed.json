{
    "version": "https://jsonfeed.org/version/1",
    "title": "Big Ben • All posts by \"c++ coding\" tag",
    "description": null,
    "home_page_url": "https://blog.zhougy.top",
    "items": [
        {
            "id": "https://blog.zhougy.top/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/",
            "url": "https://blog.zhougy.top/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/",
            "title": "unique_ptr到底是否能按值传递？",
            "date_published": "2021-08-22T02:36:37.359Z",
            "content_html": "<p>答案是否定的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(std::unique_ptr&lt;<span class=\"keyword\">int</span>&gt; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> a = std::make_unique&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">func</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这段代码是不能编译的，因为uniqe_ptr没有拷贝构造函数。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ben@LUbuntu ~/t/unique_ptr&gt; g++ -o <span class=\"built_in\">test</span> main.cpp -std=c++14</span><br><span class=\"line\"></span><br><span class=\"line\">main.cpp: In <span class=\"keyword\">function</span> ‘int main()’:</span><br><span class=\"line\"></span><br><span class=\"line\">main.cpp:10:11: error: use of deleted <span class=\"keyword\">function</span> ‘std::unique_ptr&lt;_Tp, _Dp&gt;::unique_ptr(const std::unique_ptr&lt;_Tp, _Dp&gt;&amp;) [with _Tp = int; _Dp = std::default_delete&lt;int&gt;]’</span><br><span class=\"line\"></span><br><span class=\"line\">10 | func(a);</span><br><span class=\"line\"></span><br><span class=\"line\">|</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>那为什么问这个问题？看下面这段代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(std::unique_ptr&lt;<span class=\"keyword\">int</span>&gt; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">func</span>(std::make_unique&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这个是可以编译的，执行也没问题。再看make_unique的原型。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt; class T, class... Args &gt;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">unique_ptr&lt;T&gt; <span class=\"title\">make_unique</span><span class=\"params\">( Args&amp;&amp;... args )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt; class T &gt;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">unique_ptr&lt;T&gt; <span class=\"title\">make_unique</span><span class=\"params\">( std::<span class=\"keyword\">size_t</span> size )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span>... <span class=\"title\">Args</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* unspecified */</span> <span class=\"built_in\">make_unique</span>( Args&amp;&amp;... args ) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可见make_unique的返回值是unique_ptr。那么前面那段代码就给人造成了unique_ptr似乎也可以按值传递的假象。到底是什么原因呢？后面我们结合汇编一起分析一下，编译器针对这样的场景做了什么优化。</p>\n<h1 id=\"make-unique的返回值直接作为函数参数的真相\"><a href=\"#make-unique的返回值直接作为函数参数的真相\" class=\"headerlink\" title=\"make_unique的返回值直接作为函数参数的真相\"></a>make_unique的返回值直接作为函数参数的真相</h1><p>直接通过<code>objectdum -tCS test &gt; test.dump</code>命令对可执行文件进行反汇编。注意编译时，要指定<code>-g -O0</code>。这样反汇编时，信息更多一些。</p>\n<p>由于STL扩展代码，外加C++编译器插入的一些初始化和退出清理代码，反汇编产生的文件行数较多，我们只需关注核心的main函数以及一些相关的函数即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">4008a8: a9be7bfd stp x29, x30, [sp, #-32]! // 将x29,x30存储于sp-32处，且sp = sp-32</span><br><span class=\"line\"></span><br><span class=\"line\">4008ac: 910003fd mov x29, sp</span><br><span class=\"line\"></span><br><span class=\"line\">func(std::make_unique&lt;int&gt;(1));</span><br><span class=\"line\"></span><br><span class=\"line\">4008b0: 52800020 mov w0, #0x1 // #1</span><br><span class=\"line\"></span><br><span class=\"line\">4008b4: b9001fe0 str w0, [sp, #28]</span><br><span class=\"line\"></span><br><span class=\"line\">4008b8: 910073e0 add x0, sp, #0x1c</span><br><span class=\"line\"></span><br><span class=\"line\">4008bc: 910043e1 add x1, sp, #0x10</span><br><span class=\"line\"></span><br><span class=\"line\">4008c0: aa0103e8 mov x8, x1</span><br><span class=\"line\"></span><br><span class=\"line\">4008c4: 94000027 bl 400960 &lt;std::_MakeUniq&lt;int&gt;::__single_object std::make_unique&lt;int, int&gt;(int&amp;&amp;)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">4008c8: 910043e0 add x0, sp, #0x10</span><br><span class=\"line\"></span><br><span class=\"line\">4008cc: 97fffff2 bl 400894 &lt;func(std::unique_ptr&lt;int, std::default_delete&lt;int&gt; &gt;)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">4008d0: 910043e0 add x0, sp, #0x10</span><br><span class=\"line\"></span><br><span class=\"line\">4008d4: 94000035 bl 4009a8 &lt;std::unique_ptr&lt;int, std::default_delete&lt;int&gt; &gt;::~unique_ptr()&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">4008d8: 52800000 mov w0, #0x0 // #0</span><br><span class=\"line\"></span><br><span class=\"line\">4008dc: a8c27bfd ldp x29, x30, [sp], #32</span><br><span class=\"line\"></span><br><span class=\"line\">4008e0: d65f03c0 ret</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">///@&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"调用make-unique前的准备\"><a href=\"#调用make-unique前的准备\" class=\"headerlink\" title=\"调用make_unique前的准备\"></a>调用make_unique前的准备</h2><p>main函数的第一行指令，将栈指针（sp）移动到了栈底，并保存了x29和x30寄存器。寄存器含义可以参考附录。在调用make_unique前，栈内存如下图。<br><img src=\"/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/Pasted%20image%2020210822121125.png\" alt></p>\n<h3 id=\"ARM函数调用约定\"><a href=\"#ARM函数调用约定\" class=\"headerlink\" title=\"ARM函数调用约定\"></a>ARM函数调用约定</h3><p>也叫AAPCS，Procedure Call Standard for the Arm Architecture。对于aarch64，简而言之就是：</p>\n<ul>\n<li><p>小于8个参数时，使用x0-x7寄存器</p>\n</li>\n<li><p>超过8个参数，按顺序从右往左入栈（因为栈是先入后出的）</p>\n</li>\n<li><p>返回地址在lr寄存器，返回值的值在x0寄存器</p>\n</li>\n</ul>\n<h3 id=\"make-unique的参数传递\"><a href=\"#make-unique的参数传递\" class=\"headerlink\" title=\"make_unique的参数传递\"></a>make_unique的参数传递</h3><p>按照AAPCS的理解，make_unique的实现函数实际有两个入参：一个是uniuqe_ptr的构造函数参数1，另一个就是用来存放unique_ptr对象指针的地址，即x1。</p>\n<p>这样就很好理解了，调用完make_unique，下一步就是使用make_unique的输出调用func了。也就是<code>add x0, sp, #0x10</code>z这一行。将保存了unique_ptr指针的地址赋予了func函数的唯一一个参数。</p>\n<blockquote>\n<p><strong>所以可见，func函数并不是传递unique_ptr的值，而是通过编译器生成了一个临时变量保存了make_unique返回的unique_ptr对象指针，并传递给了func。</strong></p>\n</blockquote>\n<h3 id=\"按引用传递会怎么样？\"><a href=\"#按引用传递会怎么样？\" class=\"headerlink\" title=\"按引用传递会怎么样？\"></a>按引用传递会怎么样？</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> a = <span class=\"built_in\">std</span>::make_unique&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    func(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">int</span> main()</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>a8: a9bd7bfd stp x29, x30, [<span class=\"built_in\">sp</span>, #-<span class=\"number\">48</span>]!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>ac: <span class=\"number\">910003</span>fd <span class=\"keyword\">mov</span> x29, <span class=\"built_in\">sp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>b0: f9000bf3 <span class=\"keyword\">str</span> x19, [<span class=\"built_in\">sp</span>, <span class=\"number\">#16</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">auto</span> a = std::make_unique&lt;int&gt;(<span class=\"number\">1</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>b4: <span class=\"number\">52800020</span> <span class=\"keyword\">mov</span> w0, <span class=\"number\">#0x1</span> <span class=\"comment\">// #1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>b8: b9002fe0 <span class=\"keyword\">str</span> w0, [<span class=\"built_in\">sp</span>, <span class=\"number\">#44</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>bc: <span class=\"number\">9100</span>b3e0 <span class=\"keyword\">add</span> x0, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x2c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c0</span>: <span class=\"number\">910083</span>e1 <span class=\"keyword\">add</span> x1, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c4</span>: aa0103e8 <span class=\"keyword\">mov</span> x8, x1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c8</span>: <span class=\"number\">94000029</span> <span class=\"keyword\">bl</span> <span class=\"number\">40096</span>c &lt;std::_MakeUniq&lt;int&gt;::__single_object std::make_unique&lt;int, int&gt;(int&amp;&amp;)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">func</span>(a)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>cc: <span class=\"number\">910083</span>e0 <span class=\"keyword\">add</span> x0, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">d0</span>: <span class=\"number\">97</span>fffff1 <span class=\"keyword\">bl</span> <span class=\"number\">400894</span> &lt;func(std::unique_ptr&lt;int, std::default_delete&lt;int&gt; &gt;&amp;)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///@&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/22/obsidian_posts/unique_ptr%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%A6%E8%83%BD%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/Pasted%20image%2020210822121232.png\" alt></p>\n<p>如出一辙，对make_unique的调用是一样的，只不过这里多存了一个局部变量a，所以多话费了几个字节的栈空间。而前文的临时变量存在寄存器即可。</p>\n<h3 id=\"传右值引用呢？\"><a href=\"#传右值引用呢？\" class=\"headerlink\" title=\"传右值引用呢？\"></a>传右值引用呢？</h3><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>b8: <span class=\"number\">910073</span>e0 <span class=\"keyword\">add</span> x0, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x1c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>bc: <span class=\"number\">910043</span>e1 <span class=\"keyword\">add</span> x1, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c0</span>: aa0103e8 <span class=\"keyword\">mov</span> x8, x1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c4</span>: <span class=\"number\">94000027</span> <span class=\"keyword\">bl</span> <span class=\"number\">400960</span> &lt;std::_MakeUniq&lt;int&gt;::__single_object std::make_unique&lt;int, int&gt;(int&amp;&amp;)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span><span class=\"built_in\">c8</span>: <span class=\"number\">910043</span>e0 <span class=\"keyword\">add</span> x0, <span class=\"built_in\">sp</span>, <span class=\"number\">#0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4008</span>cc: <span class=\"number\">97</span>fffff2 <span class=\"keyword\">bl</span> <span class=\"number\">400894</span> &lt;func(std::unique_ptr&lt;int, std::default_delete&lt;int&gt; &gt;&amp;&amp;)&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可见传右值引用和传值一模一样。</p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><h2 id=\"AARCH64寄存器\"><a href=\"#AARCH64寄存器\" class=\"headerlink\" title=\"AARCH64寄存器\"></a>AARCH64寄存器</h2><p>参考<a href=\"https://winddoing.github.io/post/7190.html\">ARMv8-aarch64 寄存器和指令集</a></p>\n<h3 id=\"通用寄存器\"><a href=\"#通用寄存器\" class=\"headerlink\" title=\"通用寄存器\"></a>通用寄存器</h3><ul>\n<li><p>参数寄存器（X0-X7）： 用作临时寄存器或可以保存的调用者保存的寄存器变量函数内的中间值，调用其他函数之间的值（8 个寄存器可用于传递参数）</p>\n</li>\n<li><p>来电保存的临时寄存器（X9-X15）： 如果调用者要求在任何这些寄存器中保留值调用另一个函数，调用者必须将受影响的寄存器保存在自己的堆栈中帧。 它们可以通过被调用的子程序进行修改，而无需保存并在返回调用者之前恢复它们。</p>\n</li>\n<li><p>被调用者保存的寄存器（X19-X29）： 这些寄存器保存在被调用者帧中。 它们可以被被调用者修改子程序，只要它们在返回之前保存并恢复。</p>\n</li>\n</ul>\n<h3 id=\"特殊用途寄存器（X8，X16-X18，X29，X30）：\"><a href=\"#特殊用途寄存器（X8，X16-X18，X29，X30）：\" class=\"headerlink\" title=\"特殊用途寄存器（X8，X16-X18，X29，X30）：\"></a>特殊用途寄存器（X8，X16-X18，X29，X30）：</h3><p>X8： 是间接结果寄存器，用于保存子程序返回地址，尽量不使用</p>\n<p>X16 和 X17： 程序内调用临时寄存器</p>\n<p>X18： 平台寄存器，保留用于平台 ABI，尽量不使用</p>\n<p>X29： 帧指针寄存器（FP）</p>\n<p>X30： 链接寄存器（LR）</p>\n<p>X31： 堆栈指针寄存器 SP 或零寄存器 ZXR</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><p><a href=\"https://code.woboq.org/appleseed/include/boost/move/make_unique.hpp.html\">make_unique源码</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/forever_2015/article/details/50283747\">[AAPCS 学习课后练习 - 通过一个小例子来讲解]</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/42486116\">基于ARM64 的常见汇编命令记录</a></p>\n</li>\n<li><p><a href=\"https://winddoing.github.io/post/7190.html\">ARMv8-aarch64 寄存器和指令集</a></p>\n</li>\n</ul>\n",
            "tags": [
                "C++ coding"
            ]
        }
    ]
}