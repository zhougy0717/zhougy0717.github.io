{
    "version": "https://jsonfeed.org/version/1",
    "title": "Big Ben • All posts by \"编译\" tag",
    "description": null,
    "home_page_url": "https://zhougy0717.github.io",
    "items": [
        {
            "id": "https://zhougy0717.github.io/2021/12/22/obsidian_posts/fPIC%20vs.%20fPIE/",
            "url": "https://zhougy0717.github.io/2021/12/22/obsidian_posts/fPIC%20vs.%20fPIE/",
            "title": "fPIC vs. fPIE",
            "date_published": "2021-12-22T11:56:23.176Z",
            "content_html": "<h1 id=\"fPIC-vs-fPIE\"><a href=\"#fPIC-vs-fPIE\" class=\"headerlink\" title=\"fPIC vs. fPIE\"></a>fPIC vs. fPIE</h1><p>这两个都是编译选项，具体可以参考<a href=\"https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html\">GCC的官方文档</a>  。其作用就是</p>\n<p>参考[4], 实际-fPIC和-fPIE的区别非常有限。  </p>\n<blockquote>\n<p>It works very much like what PIC does for dynamic libraries, the difference is that a Procedure Linkage Table (PLT) is not created, instead PC-relative relocation is used.  </p>\n</blockquote>\n<p>差别就是体现在导出的全局变量上。如果使用-fPIE编译的.o文件，则不会为这些全局变量创建PLT表项。但用-fPIC选项则会创建。则使用-fPIC编译的代码，性能会略差。参考[5]，这一点性能损失也非常有限  </p>\n<blockquote>\n<p><strong>注</strong>: 根据编译器同学的推测，这一差别也有可能在链接二进制的时候被抹去。  </p>\n</blockquote>\n<p>LLVM和GCC针对这两个编译选项的处理也不尽相同。GCC的处理可以参考[1]。而LLVM的处理是采用互相覆盖的方法。  </p>\n<p>clang++ -fPIE -fPIC -o a.o -c a.cpp<br>如果最后一个参数是-fPIC，则fPIE会被忽略。  </p>\n<p>clang++ -fPIE -fPIC -fPIE -o a.o -c a.cpp<br>同理，如果最后一个是-fPIE，那么-fPIC就会被忽略。这也是我们编译报错的原因。  </p>\n<h1 id=\"cmake编译时的默认选项\"><a href=\"#cmake编译时的默认选项\" class=\"headerlink\" title=\"cmake编译时的默认选项\"></a>cmake编译时的默认选项</h1><p>cmake在2.8以后加入了编译策略（policy），每个策略拥有一个CMP的编号，例如：<a href=\"https://cmake.org/cmake/help/latest/policy/CMP0018.html\">CMP0018 — CMake 3.22.1 Documentation</a>。编译策略可以通过<a href=\"https://cmake.org/cmake/help/latest/command/cmake_policy.html\">cmake_policy</a>命令进行设置。<br>在CMP0018中，就阐明了针对position independent相关编译选项的设置，即POSITION_INDEPENDENT_CODE。通过设置该选项，可以为构建目标加入-fPIE的编译选项，以及-pie的链接选项。  </p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.18</span>.<span class=\"number\">1</span>)  </span><br><span class=\"line\"><span class=\"keyword\">project</span>(<span class=\"keyword\">test</span>  </span><br><span class=\"line\">    VERSION <span class=\"number\">2.0</span>  </span><br><span class=\"line\">    LANGUAGES CXX  </span><br><span class=\"line\">)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">include</span>(CheckPIESupported)  </span><br><span class=\"line\">check_pie_supported()  <span class=\"comment\"># &lt;&lt;&lt; 加入这两行，-pie才能被成功添加，否则即便有POSITION_INDEPENDENT_CODE，也不会添加-pie的链接选项</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_VERBOSE_MAKEFILE <span class=\"keyword\">on</span>)  </span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(lib-static STATIC lib-static.cpp)  </span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(lib-shared SHARED lib-shared.cpp)  </span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(<span class=\"keyword\">test</span>-exe main.cpp lib-static.cpp)   </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">set_target_properties</span>(<span class=\"keyword\">test</span>-exe  </span><br><span class=\"line\">    PROPERTIES  </span><br><span class=\"line\">    POSITION_INDEPENDENT_CODE <span class=\"keyword\">ON</span>   <span class=\"comment\"># &lt;&lt;&lt; 这一参数会为可执行二进制添加-fPIE和-pie</span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n<p>-fPIE的参数会通过该编译选项加入要链接到二进制的.o文件中，而动态库会默认加上-fPIC选项，即便设置了POSITION_INDEPENDENT_CODE，也不会加上-fPIE选项。当然如果通过CMAKE_C_FLAG之类的变量强行加上，还是可以的。<br>另外即便指定了POSITION_INDEPENDENT_CODE，-pie的链接选项仍然不会被加上。可以参考[3]。必须要指定这两行才可以:  </p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(CheckPIESupported)  </span><br><span class=\"line\">check_pie_supported()</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ol>\n<li><p><a href=\"https://hardenedlinux.github.io/system-security/2016/07/01/PIC_PIE_and_ASLR_analysis.html\">PIC/PIE&amp;ASLR分析</a></p>\n</li>\n<li><p><a href=\"https://www.cxyzjd.com/article/weixin_43820063/105555315\">安全编译选项之 PIE和PIC的区别_weixin_43820063的博客-程序员宅基地 - 程序员宅基地</a></p>\n</li>\n<li><p><a href=\"https://gitlab.kitware.com/cmake/cmake/-/issues/14983\">POSITION_INDEPENDENT_CODE does not add -pie (#14983) · Issues · CMake / CMake · GitLab</a></p>\n</li>\n<li><p><a href=\"https://newbedev.com/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld\">What is the -fPIE option for position-independent executables in gcc and ld? | Newbedev</a> </p>\n</li>\n<li><p><a href=\"https://lists.debian.org/debian-devel/2016/05/msg00309.html\">Re: PIE and static libraries</a></p>\n</li>\n</ol>\n",
            "tags": [
                "编译"
            ]
        }
    ]
}