{
    "version": "https://jsonfeed.org/version/1",
    "title": "Big Ben • All posts by \"算法\" tag",
    "description": null,
    "home_page_url": "https://zhougy0717.github.io",
    "items": [
        {
            "id": "https://zhougy0717.github.io/2013/04/29/%E5%93%88%E5%B8%8C%E6%90%9C%E7%B4%A2/",
            "url": "https://zhougy0717.github.io/2013/04/29/%E5%93%88%E5%B8%8C%E6%90%9C%E7%B4%A2/",
            "title": "哈希搜索",
            "date_published": "2013-04-29T07:50:10.000Z",
            "content_html": "<div class=\"enNote\" style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;\" title lang xml:lang dir><div><font face=\"Courier New\">&#x54C8;&#x5E0C;&#x641C;&#x7D22;&#x662F;&#x5178;&#x578B;&#x7684;&#x4EE5;&#x7A7A;&#x95F4;&#x6362;&#x65F6;&#x95F4;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x4E0D;&#x8BBA;&#x5176;&#x5EFA;&#x7ACB;&#x54C8;&#x5E0C;&#x8868;&#x65F6;&#x95F4;&#xFF0C;&#x8FD8;&#x662F;&#x641C;&#x7D22;&#x65F6;&#x95F4;&#x5747;&#x5C0F;&#x4E8E;&#x4F18;&#x8D28;&#x7B97;&#x6CD5;&#xFF1A;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x548C;&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x3002;&#x5728;&#x6570;&#x7EC4;&#x5C3A;&#x5BF8;&#x4E3A;1&#x4E07;&#xFF0C;&#x54C8;&#x5E0C;&#x53C2;&#x6570;&#x4E3A;1000&#xFF08;&#x54C8;&#x5E0C;&#x51FD;&#x6570;&#x662F;val%HASH_ARG&#xFF09;&#x65F6;&#xFF0C;&#x5176;&#x65F6;&#x95F4;&#x53C2;&#x6570;&#x4E3A;</font></div><div><p>qsort takes: 1755060 ns (1.75 ms)<br clear=\"none\">build hash table takes: 1181122 ns (1.18 ms)</p><p>Array size: 10000, Value range: 10000<br clear=\"none\">average search time:<br clear=\"none\">binary search: 166 ns<br clear=\"none\">hash search: 48 ns</p></div><div><font face=\"Courier New\"><font face=\"Courier New\"><br></font></font></div><div><font face=\"Courier New\">&#x5176;&#x6392;&#x5E8F;&#x65F6;&#x95F4;&#x51CF;&#x5C11;30%&#xFF0C;&#x5355;&#x6B21;&#x641C;&#x7D22;&#x65F6;&#x95F4;&#x51CF;&#x5C11;70%&#x3002;&#x6027;&#x80FD;&#x63D0;&#x5347;&#x5F88;&#x591A;&#x3002;&#x7F3A;&#x70B9;&#x662F;&#x7531;&#x4E8E;&#x5F15;&#x5165;hash_node&#x7ED3;&#x6784;&#xFF0C;1&#x4E07;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x5927;&#x5C0F;&#x4E3A;4Bx1w&#xFF0C;&#x9700;&#x8981;&#x6269;&#x5C55;&#x51FA;16Bx1w&#xFF0C;&#x7A7A;&#x95F4;&#x4F7F;&#x7528;&#x63D0;&#x5347;&#x4E86;4&#x500D;&#x3002;&#x53E6;&#x6709;&#x7A7A;&#x95F4;&#x63D0;&#x5347;&#x4E24;&#x500D;&#x7684;&#x7B97;&#x6CD5;&#xFF08;&#x53C2;&#x8003;</font><a href=\"evernote:///view/161681/s10/7f820bda-9098-43ce-95de-eb1203317f77/7f820bda-9098-43ce-95de-eb1203317f77/\" style=\"color: rgb(105, 170, 53);\">&#x6563;&#x5217;&#x6CD5;&#x89E3;&#x51B3;1000&#x4E2A;&#x6574;&#x6570;&#x7684;&#x641C;&#x7D22; - cqnuztq&#x7684;&#x4E13;&#x680F; - &#x535A;&#x5BA2;&#x9891;&#x9053; - CSDN.NET</a><span style=\"font-family: &apos;Courier New&apos;;\">&#xFF09;</span></div><div><span style=\"font-family: &apos;Courier New&apos;;\"><br></span></div><div><span style=\"font-family: &apos;Courier New&apos;;\">&#x5F53;&#x6570;&#x7EC4;&#x5C3A;&#x5BF8;&#x8FDB;&#x4E00;&#x6B65;&#x4E0A;&#x5347;&#xFF08;10w&#xFF09;&#xFF0C;&#x800C;&#x503C;&#x57DF;&#x4E0D;&#x53D8;&#x65F6;&#xFF0C;&#x65F6;&#x95F4;&#x53C2;&#x6570;&#x4E3A;</span></div><div><span style=\"font-family: &apos;Courier New&apos;;\"><br></span></div><div>qsort takes: 25675050 ns (25.67 ms)<br>build hash table takes: 47017148 ns (47.02 ms)<br><br>Array size: 100000, Value range: 10000<br>average search time:<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; binary search: 220 ns<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; hash search: 276 ns</div><div><br></div><div>&#x6B64;&#x65F6;&#x54C8;&#x5E0C;&#x641C;&#x7D22;&#x5DF2;&#x7ECF;&#x5728;&#x6392;&#x5E8F;&#x548C;&#x641C;&#x7D22;&#x4E0A;&#xFF0C;&#x5168;&#x9762;&#x843D;&#x540E;&#x4E86;&#x3002;&#x7A76;&#x5176;&#x539F;&#x56E0;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;&#x56E0;&#x4E3A;&#x6B64;&#x65F6;&#x6570;&#x7EC4;&#x5C3A;&#x5BF8;&#x4E0A;&#x5347;&#xFF0C;&#x4F46;&#x54C8;&#x5E0C;&#x51FD;&#x6570;&#x548C;&#x54C8;&#x5E0C;&#x53C2;&#x6570;&#x5E76;&#x6CA1;&#x53D8;&#xFF0C;&#x6240;&#x4EE5;&#x54C8;&#x5E0C;&#x51B2;&#x7A81;&#x6570;&#x5927;&#x5927;&#x4E0A;&#x5347;&#x3002;&#x8003;&#x8651;&#x51B2;&#x7A81;&#x7684;&#x6982;&#x7387;&#x76F8;&#x540C;&#xFF0C;&#x6240;&#x4EE5;&#x6BCF;&#x4E2A;&#x54C8;&#x5E0C;&#x7D22;&#x5F15;&#x4E0B;&#x7684;&#x51B2;&#x7A81;&#x6570;&#x7EA6;&#x4E3A;&#xFF08;ARRAY_SIZE / HASH_ARG&#xFF09;&#xFF0C;&#x4EE5;&#x4E0A;&#x9762;&#x7684;&#x53D6;&#x503C;&#x4E3A;&#x4F8B;&#xFF0C;&#x5219;&#x51B2;&#x7A81;&#x6570;&#x4E3A;100&#xFF0C;&#x5373;&#x5176;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;100&#xFF0C;&#x800C;&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x4E3A;logn = 16.6&#xFF0C;&#x5DF2;&#x7ECF;&#x8FDC;&#x5C0F;&#x4E8E;&#x54C8;&#x5E0C;&#x641C;&#x7D22;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x4E86;&#x3002;</div><div><span style=\"font-family: &apos;Courier New&apos;;\"><br></span></div><div><span style=\"font-family: &apos;Courier New&apos;;\">&#x7EFC;&#x4E0A;&#xFF0C;&#x54C8;&#x5E0C;&#x641C;&#x7D22;&#x9002;&#x7528;&#x4E8E;&#x5C5E;&#x6027;&#x503C;&#x8303;&#x56F4;&#x8FDC;&#x5C0F;&#x4E8E;&#x6570;&#x7EC4;&#x4E2A;&#x6570;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x4E0B;&#x9762;&#x7684;&#x7B14;&#x8BB0;&#x4E2D;&#x6709;&#x4F7F;&#x7528;&#x54C8;&#x5E0C;&#x641C;&#x7D22;&#x7684;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x6BD4;&#x8F83;&#x597D;&#x7684;&#x9610;&#x8FF0;&#x4E86;&#x8FD9;&#x4E2A;&#x7279;&#x6027;&#xFF08;</span><a href=\"evernote:///view/161681/s10/e13b4258-3932-4e07-8211-5746cd6cc1fd/e13b4258-3932-4e07-8211-5746cd6cc1fd/\" style=\"color: rgb(105, 170, 53);\">&#x4ECE;&#x5927;&#x91CF;&#x6574;&#x6570;&#x4E2D;&#x9009;&#x53D6;&#x6700;&#x5C0F;/&#x5927;&#x7684;&#x82E5;&#x5E72;&#x4E2A; &#xAB; GoCalf Blog</a><span style=\"font-family: &apos;Courier New&apos;;\">&#xFF09;&#x3002;&#x4F46;&#x6570;&#x7EC4;&#x8303;&#x56F4;&#x4E0D;&#x80FD;&#x8FC7;&#x5927;&#xFF0C;&#x5BFC;&#x81F4;&#x51B2;&#x7A81;&#x6570;&#x4E0A;&#x5347;&#x8FC7;&#x5FEB;&#x3002;&#x6216;&#x8005;&#x8BF4;&#x4E3A;&#x4E86;&#x63D0;&#x9AD8;&#x54C8;&#x5E0C;&#x641C;&#x7D22;&#x7684;&#x6548;&#x7387;&#xFF0C;&#x6700;&#x597D;&#x80FD;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x80FD;&#x6D88;&#x9664;&#x51B2;&#x7A81;&#x7684;&#x54C8;&#x5E0C;&#x51FD;&#x6570;&#x3002;</span></div><div><span style=\"font-family: &apos;Courier New&apos;;\"><br></span></div><div><span style=\"font-family: &apos;Courier New&apos;;\">&#x4E0B;&#x9762;&#x9644;&#x4E0A;&#x6E90;&#x7801;</span></div><div><span style=\"font-family: &apos;Courier New&apos;;\"><br></span></div><font color=\"#2D4FC9\" face=\"Courier New\">// Hash search<br>// Ben @ 2013-04-29<br><br>#include &lt;stdio.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;stdlib.h&gt;<br><br>struct hash_node<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; int inited;<br>&#xA0;&#xA0;&#xA0;&#xA0; int key;<br>&#xA0;&#xA0;&#xA0;&#xA0; int pos;<br>&#xA0;&#xA0;&#xA0;&#xA0; struct hash_node* next;<br>};<br><br>#define HASH_ARG&#xA0;&#xA0;&#xA0;&#xA0; 1000<br>static struct hash_node hash_table[HASH_ARG];<br><br>void build_hash_table(int* L, int size)<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; memset ((char*)hash_table, 0, sizeof(hash_table));<br><br>&#xA0;&#xA0;&#xA0;&#xA0; int i;<br>&#xA0;&#xA0;&#xA0;&#xA0; for (i=0; i&lt;size; i++)<br>&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; int index = hash(L[i]);<br><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; if (hash_table[index].inited == 1)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; struct hash_node* n = &amp;hash_table[index];<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; while (n-&gt;next != NULL)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; n = n-&gt;next;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; n-&gt;next = (struct hash_node*)malloc(sizeof(struct hash_node));<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; n-&gt;next-&gt;inited = 1;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; n-&gt;next-&gt;key = L[i];<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; n-&gt;next-&gt;pos = i;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; n-&gt;next-&gt;next = NULL;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; }<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; else<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; hash_table[index].inited = 1;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; hash_table[index].key = L[i];<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; hash_table[index].pos = i;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; }<br>&#xA0;&#xA0;&#xA0;&#xA0; }<br>}<br><br>void destroy_hash_table()<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; int i;<br>&#xA0;&#xA0;&#xA0;&#xA0; for(i=0; i&lt;HASH_ARG; i++)<br>&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; struct hash_node* n = hash_table[i].next;<br><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; while (n != NULL)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; struct hash_node* tmp = n-&gt;next;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; free(n);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; n = tmp;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; }<br>&#xA0;&#xA0;&#xA0;&#xA0; }<br>}<br><br>int hash(int val)<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; return val%HASH_ARG;<br>}<br><br>int hsearch(int t, int* L, int size)<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; int index = hash(t);<br>&#xA0;&#xA0;&#xA0;&#xA0; struct hash_node* i = &amp;hash_table[index];<br>&#xA0;&#xA0;&#xA0;&#xA0; while (i != NULL)<br>&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; if (t == i-&gt;key)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; break;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; else<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; i = i-&gt;next;<br>&#xA0;&#xA0;&#xA0;&#xA0; }<br><br>&#xA0;&#xA0;&#xA0;&#xA0; if (i ==&#xA0; NULL)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; return -1;<br>&#xA0;&#xA0;&#xA0;&#xA0; else<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; return i-&gt;pos;<br>}</font><br></div>",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "https://zhougy0717.github.io/2013/04/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-qsort/",
            "url": "https://zhougy0717.github.io/2013/04/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-qsort/",
            "title": "快速排序-qsort",
            "date_published": "2013-04-10T15:51:42.000Z",
            "content_html": "<div class=\"enNote\" style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;\" title lang xml:lang dir><div><font face=\"Consolas\">&#x6709;&#x51E0;&#x70B9;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#xFF1A;</font></div><div><font face=\"Consolas\">1.&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F;nlogn&#xFF0C;&#x63A8;&#x5230;&#x300A;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x300B;&#x4E0A;&#x6709;&#xFF0C;&#x770B;&#x4E0D;&#x61C2;&#x3002;&#x5728;&#x8BB0;&#x5F55;&#x4E3A;&#x6709;&#x5E8F;&#x65F6;&#xFF0C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x9000;&#x5316;&#x6210;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x3002;</font></div><div><font face=\"Consolas\">2.&#x6CE8;&#x610F;&#x662F;low&#x8DDF;high&#x8BB0;&#x5F55;&#x4EA4;&#x6362;&#xFF0C;&#x800C;&#x5E76;&#x975E;&#x8DDF;&#x67A2;&#x8F74;&#x8BB0;&#x5F55;&#x4EA4;&#x6362;&#x3002;&#x524D;&#x8005;&#x624D;&#x80FD;&#x4FDD;&#x8BC1;low&#xFF0C;high&#x4E24;&#x90E8;&#x5206;&#x7684;&#x57FA;&#x672C;&#x6709;&#x5E8F;&#x3002;&#x53EA;&#x4E0D;&#x8FC7;&#x8981;&#x6CE8;&#x610F;&#xFF0C;low&#xFF0C;high&#x8BB0;&#x5F55;&#x4EA4;&#x6362;&#x540E;&#xFF0C;low&#x8BB0;&#x5F55;&#x672C;&#x8EAB;&#x5B58;&#x5728;&#x5076;&#x7136;&#x6027;&#xFF0C;&#x5373;&#x5176;&#x8DDF;&#x67A2;&#x8F74;&#x8BB0;&#x5F55;&#x7684;&#x76F8;&#x5BF9;&#x5927;&#x5C0F;&#x4E0D;&#x786E;&#x5B9A;&#x3002;&#x9700;&#x8981;&#x6BD4;&#x8F83;&#xFF0C;&#x7136;&#x540E;&#x505A;&#x51FA;&#x4EA4;&#x6362;&#x52A8;&#x4F5C;&#xFF0C;&#x624D;&#x80FD;&#x4FDD;&#x8BC1;&#x524D;&#x540E;&#x4E24;&#x4E2A;&#x5206;&#x652F;&#x7684;&#x57FA;&#x672C;&#x6709;&#x5E8F;&#xFF0C;&#x5982;&#x4E0B;&#x9762;&#x7EFF;&#x8272;&#x6CE8;&#x91CA;&#x90E8;&#x5206;&#x6240;&#x6307;&#x51FA;&#x7684;&#x3002;</font></div><div><font face=\"Consolas\"><br></font></div><div><font face=\"Consolas\"><br></font></div><div><font face=\"Consolas\">================2013/5/2&#x66F4;&#x65B0;===========================</font></div><div><font face=\"Consolas\"><br></font></div><div><font face=\"Consolas\">Programming Pearls&#x7B2C;11&#x7AE0;&#xFF0C;&#x7740;&#x91CD;&#x4ECB;&#x7ECD;&#x4E86;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF0C;&#x5176;&#x8BB2;&#x89E3;&#x7684;&#x6DF1;&#x5EA6;&#x548C;&#x7B97;&#x6CD5;&#x7684;&#x4F18;&#x7F8E;&#x5EA6;&#x90FD;&#x8FDC;&#x5927;&#x4E8E;&#x4E25;&#x851A;&#x654F;&#x7684;&#x300A;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x300B;&#x7B2C;&#x5341;&#x7AE0;&#x6240;&#x4ECB;&#x7ECD;&#x7684;&#x3002;&#x6311;&#x4E00;&#x79CD;&#x6BD4;&#x8F83;&#x57FA;&#x672C;&#x7684;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF0C;&#x5E76;&#x505A;&#x4E00;&#x4E9B;&#x7B14;&#x8BB0;</font></div><div><font face=\"Consolas\"><br></font></div><div><font color=\"#41AD1C\" face=\"Consolas\">// &#x89E3;&#x51B3;&#x4E86;&#x539F;&#x5148;swap&#x76F8;&#x540C;&#x53D8;&#x91CF;&#x7684;&#x95EE;&#x9898;</font></div><div><font color=\"#2D4FC9\" face=\"Courier New\">#define swap(a, b) \\<br>&#xA0;&#xA0;&#xA0;&#xA0; if (a!=b)\\<br>&#xA0;&#xA0;&#xA0;&#xA0; {\\<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; a = (a)+(b);\\<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; b = (a)-(b);\\<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; a = (a)-(b);\\<br>&#xA0;&#xA0;&#xA0;&#xA0; }</font></div><div><font face=\"Consolas\"><br></font></div><div><font color=\"#2D4FC9\" face=\"Courier New\">void qsort(int* L, int size)<br>{</font></div><div>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; <font color=\"#41AD1C\" face=\"Courier New\">// &#x786E;&#x4FDD;&#x9012;&#x5F52;&#x5FAA;&#x73AF;&#x80FD;&#x7ED3;&#x675F;&#xFF0C;&#x800C;&#x975E;&#x6B7B;&#x5FAA;&#x73AF;</font><font color=\"#2D4FC9\" face=\"Courier New\"><br>&#xA0;&#xA0;&#xA0;&#xA0; if (size &lt;= 1)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; return;<br><br></font><div><font color=\"#41AD1C\">&#xA0; &#xA0; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span style=\"font-family: &apos;Courier New&apos;;\">// i,j&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x4ECE;&#x4E24;&#x4FA7;&#x5F00;&#x59CB;&#x626B;&#x63CF;&#xFF0C;</span></font></div><div><font color=\"#41AD1C\">&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; <font face=\"Courier New\">// while&#x5FAA;&#x73AF;&#x7684;&#x76EE;&#x7684;&#x662F;&#x4E3A;&#x4E86;&#x5C06;&#x6570;&#x7EC4;&#x8F6C;&#x53D8;&#x4E3A;&#x5982;&#x4E0B;&#x56FE;</font></font></div><div><img class=\"enMedia\" src=\"/images/&#x5FEB;&#x901F;&#x6392;&#x5E8F;-qsort/1537085029495\" hash=\"9a98e9e9015027aac8f950646a9bfa6c\" align alt longdesc width height border hspace vspace usemap style=\"cursor: default;cursor: default;\" title lang xml:lang dir></div><div><img class=\"enMedia\" src=\"/images/&#x5FEB;&#x901F;&#x6392;&#x5E8F;-qsort/1537085029488\" hash=\"349404f4a7ca93383998d88aaf6c08ae\" align alt longdesc width height border hspace vspace usemap style=\"cursor: default;cursor: default;\" title lang xml:lang dir></div><div>&#xA0; &#xA0; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<font color=\"#41AD1C\"><font face=\"Courier New\">//&#xA0;</font><span style=\"font-family: &apos;Courier New&apos;;\">i&#x53D8;&#x91CF;&#x4E3A;&#x4E86;&#x627E;&#x6BD4;t&#x5927;&#x7684;&#x6570;&#xFF0C;j&#x53D8;&#x91CF;&#x4E3A;&#x4E86;&#x627E;&#x6BD4;t&#x5C0F;&#x7684;&#x6570;</span></font></div><font color=\"#2D4FC9\" face=\"Courier New\">&#xA0;&#xA0;&#xA0;&#xA0; int t = L[0];<br>&#xA0;&#xA0;&#xA0;&#xA0; int i = 0, j = size;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0; while (1)<br>&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; do<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; i ++;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; } while (i&lt;size &amp;&amp; L[i]&lt;t);</font></div><div>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; <font color=\"#41AD1C\" face=\"Courier New\">// &#x6B64;&#x65F6;i&#x6709;&#x4E24;&#x79CD;&#x53EF;&#x80FD;&#xFF1A;</font></div><div><font color=\"#41AD1C\" face=\"Courier New\">&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; // 1&#xFF09;i==u, 2&#xFF09;x[i]&gt;=t</font><br><font color=\"#2D4FC9\" face=\"Courier New\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; do</font><br><font color=\"#2D4FC9\" face=\"Courier New\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {</font><br><font color=\"#2D4FC9\" face=\"Courier New\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; j --;</font><br><font color=\"#2D4FC9\" face=\"Courier New\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; } while (L[j]&gt;t);</font></div><div>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; <font color=\"#41AD1C\" face=\"Courier New\">// &#x6B64;&#x65F6;j&#x53EA;&#x6709;&#x4E00;&#x79CD;&#x53EF;&#x80FD;&#xFF1A;x[j]&lt;=t</font></div><div>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; <font color=\"#41AD1C\" face=\"Courier New\">// &#x5F53;i,j&#x4EA4;&#x53C9;&#x65F6;&#xFF0C;&#x8BF4;&#x660E;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x626B;&#x63CF;&#x5B8C;&#x6BD5;</font><font color=\"#2D4FC9\" face=\"Courier New\"><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; if (i&gt;j)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; break;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; swap (L[i], L[j]);<br>&#xA0;&#xA0;&#xA0;&#xA0; }<br>&#xA0;&#xA0;&#xA0;&#xA0; swap(L[0], L[j]);<br>&#xA0;&#xA0;&#xA0;&#xA0; qsort(L, j);<br>&#xA0;&#xA0;&#xA0;&#xA0; qsort(&amp;L[j+1], size-1-j);<br>}</font></div><div><font color=\"#2D4FC9\" face=\"Courier New\"><br></font></div><div><font face=\"Courier New\">&#x6574;&#x4E2A;&#x7B97;&#x6CD5;&#x7684;&#x5173;&#x952E;&#x662F;&#x5728;&#x90A3;&#x4E2A;while(1)&#x5FAA;&#x73AF;&#xFF0C;&#x5982;&#x4F55;&#x4FDD;&#x8BC1;&#x6B64;&#x5FAA;&#x73AF;&#x53EF;&#x4EE5;&#x6B63;&#x786E;&#x7684;&#x7ED3;&#x675F;&#x3002;</font></div><div>&#x8981;&#x4FDD;&#x8BC1;&#x6B63;&#x786E;&#xFF0C;&#x8981;&#x4FDD;&#x8BC1;&#x4EE5;&#x4E0B;&#x4E09;&#x70B9;&#xFF1A;</div><div>&#xA0; &#xA0; &#xA0;1. &#x5FAA;&#x73AF;&#x7ED3;&#x675F;&#x540E;&#xFF0C;j&#x70B9;&#x5DE6;&#x4FA7;&#x7684;&#x90FD;&#x8981;&#x5C0F;&#x4E8E;t&#xFF0C;j&#x70B9;&#x53F3;&#x4FA7;&#x90FD;&#x8981;&#x5927;&#x4E8E;t</div><div>&#xA0; &#xA0; &#xA0;2. &#x5FAA;&#x73AF;&#x4E0D;&#x53D8;&#x5F0F;&#x662F;i &lt;= j</div><div>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;3. &#x4FDD;&#x8BC1;&#x5728;&#x4EA4;&#x6362;&#x65F6;&#xFF0C;i&#x3001;j&#x6CA1;&#x6709;&#x4EA4;&#x53C9;</div><div><font color=\"#2D4FC9\" face=\"Courier New\"><br></font></div><div><font face=\"Consolas\"><font color=\"#2D4FC9\"><font face=\"Consolas\"><font color=\"#2D4FC9\">============================================================</font></font></font></font></div><font face=\"Consolas\"><font color=\"#2D4FC9\">#include &lt;stdio.h&gt;</font><br><font color=\"#2D4FC9\">#include &lt;time.h&gt;</font><br><br><font color=\"#41AD1C\">// &#x6CE8;&#x610F;&#xFF1A;&#x4E0D;&#x52A0;{}&#xFF0C;&#x4F1A;&#x5F71;&#x54CD;&#x5230;if&#x5206;&#x652F;</font><br><font color=\"#2D4FC9\">#define swap(a, b) \\</font><br><font color=\"#2D4FC9\">{\\</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; a = (a)+(b);\\</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; b = (a)-(b);\\</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; a = (a)-(b);\\</font><br><font color=\"#2D4FC9\">}</font><br><font color=\"#2D4FC9\">#define dim(a) (sizeof(a)/sizeof(a[0]))</font><br><br><font color=\"#2D4FC9\">void qsort(int* L, int size);</font><br><br><font color=\"#2D4FC9\">main()</font></font><div><font face=\"Consolas\"><font color=\"#2D4FC9\">{</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; int i;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; int a[10] = {0};</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; srand(time(NULL));</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; for (i=0; i&lt;dim(a); i++)</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; {</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; a[i] = rand() % 100;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; }</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; qsort(a, dim(a));</font><br><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; printf(&quot;a: &quot;);</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; for (i=0; i&lt;dim(a); i++)</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; {</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; printf(&quot;%d &quot;, a[i]);</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; }</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; printf(&quot;\\n&quot;);</font><br><font color=\"#2D4FC9\">}</font><br><br><font color=\"#2D4FC9\">void qsort(int* L, int size)</font><br><font color=\"#2D4FC9\">{</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; switch (size)</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; {</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; case 0:</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; printf (&quot;empty array is input.\\n&quot;);</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; return;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; case 1:</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; printf (&quot;input array has only 1 member.\\n&quot;);</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; return;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; case 2:</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; if (L[0] &gt; L[1])</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; swap(L[0], L[1]);</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; }</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; return;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; default:</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; break;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; }</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; int low = 1, high = size - 1;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; while(low &lt; high)</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; {</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; while (low&lt;high &amp;&amp; L[low] &lt;= L[0])</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; low ++;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; }</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; if (low != high)</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; swap(L[low], L[high]);</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; while (low&lt;high &amp;&amp; L[high] &gt;= L[0])</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; {</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; high --;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; }</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; if (low != high)</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; swap(L[low], L[high]);</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; }</font></font><div><font face=\"Consolas\"><font color=\"#2D4FC9\"><br></font></font></div><div>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;<font color=\"#41AD1C\" face=\"Consolas\">//////////////////////</font></div><div><font face=\"Consolas\"><font color=\"#41AD1C\">&#xA0; &#xA0; &#xA0;// &#x6CE8;&#x610F;&#xFF1A;&#x8FD9;&#x91CC;low&#x7684;&#x4F4D;&#x7F6E;&#x5B58;&#x5728;&#x968F;&#x673A;&#x6027;&#xFF0C;&#x300A;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x300B;&#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x6CE8;&#x610F;&#x5230;&#x8FD9;&#x70B9;</font><font color=\"#2D4FC9\"><br>&#xA0;&#xA0;&#xA0;&#xA0; if (L[0] &gt; L[low])</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; swap(L[0], L[low])</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; else if (L[0] &lt; L[low])</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; {</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; low --;</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; if (low != 0)</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; swap(L[0], L[low])</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; }</font></font></div><div>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;<span style=\"color: rgb(65, 173, 28); font-family: Consolas;\">//////////////////////</span><br><font face=\"Consolas\"><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; qsort(L, low);</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0; if (low &lt; size-1)</font><br><font color=\"#2D4FC9\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; qsort(&amp;L[low+1], size-low-1);</font><br><font color=\"#2D4FC9\">}</font></font><br></div></div></div>",
            "tags": [
                "算法"
            ]
        }
    ]
}