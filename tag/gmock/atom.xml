<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.zhougy.top</id>
    <title>Big Ben • Posts by &#34;gmock&#34; tag</title>
    <link href="https://blog.zhougy.top" />
    <updated>2017-09-12T09:02:37.000Z</updated>
    <category term="javascript" />
    <category term="angular" />
    <category term="操作系统" />
    <category term="arm" />
    <category term="单片机" />
    <category term="machine learning" />
    <category term="deep learning" />
    <category term="Linux" />
    <category term="内存管理" />
    <category term="Markdown" />
    <category term="python" />
    <category term="win32com" />
    <category term="nas" />
    <category term="synology" />
    <category term="USB" />
    <category term="Linux Device Drivers" />
    <category term="uboot" />
    <category term="http" />
    <category term="同步" />
    <category term="算法" />
    <category term="读书笔记" />
    <category term="程序员修炼之道" />
    <category term="c/c++" />
    <category term="rap" />
    <category term="Eminem" />
    <category term="Rap" />
    <category term="hexo" />
    <category term="security" />
    <category term="SELinux" />
    <category term="编译" />
    <category term="C++" />
    <category term="capability" />
    <category term="LD_PRELOAD" />
    <category term="coding" />
    <category term="红楼梦" />
    <category term="教育" />
    <category term="UT" />
    <category term="TDD" />
    <category term="code review" />
    <category term="committer" />
    <category term="印象笔记" />
    <category term="Obsidian" />
    <category term="群晖" />
    <category term="Calibre" />
    <category term="电子书" />
    <category term="Android" />
    <category term="xposed" />
    <category term="中断处理" />
    <category term="GitHub" />
    <category term="docker" />
    <category term="ttrss" />
    <category term="rsshub" />
    <category term="wallabag" />
    <category term="unittest" />
    <category term="mockito" />
    <category term="powermock" />
    <category term="nlp" />
    <category term="QT" />
    <category term="vim" />
    <category term="SpaceVim" />
    <category term="tmux" />
    <category term="面向对象" />
    <category term="promise" />
    <category term="mongodb" />
    <category term="Programming" />
    <category term="C++11" />
    <category term="IoT" />
    <category term="broadlink" />
    <category term="domoticz" />
    <category term="UML" />
    <category term="socket" />
    <category term="iptables" />
    <category term="neural network" />
    <category term="mock" />
    <category term="深度学习" />
    <category term="schedule algorithm" />
    <category term="glibc" />
    <category term="gtest" />
    <category term="gmock" />
    <category term="golang" />
    <category term="elf" />
    <category term="软件开发" />
    <category term="设计模式" />
    <entry>
        <id>https://blog.zhougy.top/2017/09/12/C/C++_Test_Framework_-_Google_Test_&amp;_Google_Mock/</id>
        <title>C/C++ Test Framework - Google Test &amp; Google Mock</title>
        <link rel="alternate" href="https://blog.zhougy.top/2017/09/12/C/C++_Test_Framework_-_Google_Test_&amp;_Google_Mock/"/>
        <content type="html">&lt;!DOCTYPE en-note SYSTEM &#39;http://xml.evernote.com/pub/enml2.dtd&#39;&gt;&lt;div class=&#34;enNote&#34; style=&#34;color: #2c3f51; line-height: 1.6;&#34; title lang=&#34;v2&#34; xml:lang dir&gt;&lt;del style=&#34;position:relative;display:block;z-index:10;&#34;&gt;&lt;a style=&#34;position: absolute;color: #FFF;text-decoration: none;font-size: 12px;height: 25px;border-radius: 0;margin-top: -20px;right: 15px;background: rgba(0, 0, 0, 0);border-left: 10px solid #BB3A34;border-right: 10px solid #BB3A34;border-bottom: 5px solid rgba(0, 0, 0, 0);width: 0;text-indent:-100000px;&#34; href=&#34;http://maxiang.info/#/?provider=evernote&amp;amp;guid=52d299a6-1591-4f5a-b50c-cca38230ecc5&amp;amp;notebook=myblog&#34;&gt;Edit&lt;/a&gt;&lt;/del&gt;&lt;div style=&#34;color: #2c3f51; line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Google Test&amp;#xFF0C;Google Mock&amp;#x4EE5;&amp;#x4E0B;&amp;#x7B80;&amp;#x79F0;gtest&amp;#xFF0C;gmock&amp;#x3002; &lt;br&gt;&amp;#x5728;&amp;#x63A5;&amp;#x89E6;gtest&amp;#xFF0C;gmock&amp;#x4E4B;&amp;#x524D;&amp;#xFF0C;&amp;#x6D4B;&amp;#x8BD5;C/C++ code&amp;#x4F7F;&amp;#x7528;&lt;a href=&#34;https://github.com/unittest-cpp/unittest-cpp&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;UnitTest++&lt;/a&gt;&amp;#x3002;&amp;#x8FD9;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F88;&amp;#x7B80;&amp;#x6D01;&amp;#x7684;&amp;#x6846;&amp;#x67B6;&amp;#xFF0C;&amp;#x4E0A;&amp;#x624B;&amp;#x5F88;&amp;#x5FEB;&amp;#x3002;&amp;#x53C2;&amp;#x770B;&amp;#x53E6;&amp;#x4E00;&amp;#x7BC7;&amp;#x535A;&amp;#x6587;&lt;a href=&#34;https://zhougy0717.github.io/2016/02/29/UnitTest++%E7%AE%80%E4%BB%8B/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;UnitTest++&amp;#x7B80;&amp;#x4ECB;&lt;/a&gt;&amp;#x3002;&amp;#x6D4B;&amp;#x8BD5;&amp;#x76F8;&amp;#x5173;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#x591F;&amp;#x7528;&amp;#xFF0C;&amp;#x4F46;&amp;#x662F;&amp;#x6CA1;&amp;#x6709;mock&amp;#x5E93;&amp;#x3002;&amp;#x8FD9;&amp;#x5E26;&amp;#x6765;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x662F;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;&amp;#x9057;&amp;#x7559;&amp;#x4EE3;&amp;#x7801;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x9700;&amp;#x8981;&amp;#x81EA;&amp;#x884C;fake&amp;#x76F8;&amp;#x5173;&amp;#x4EE3;&amp;#x7801;&amp;#x3002;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5728;&amp;#x9057;&amp;#x7559;&amp;#x7CFB;&amp;#x7EDF;&amp;#x5F88;&amp;#x5E9E;&amp;#x5927;&amp;#x65F6;&amp;#xFF0C;&amp;#x8981;&amp;#x9887;&amp;#x8D39;&amp;#x5FC3;&amp;#x529B;&amp;#x3002;&amp;#x800C;&amp;#x4E14;&amp;#x8FC7;&amp;#x591A;&amp;#x6D89;&amp;#x53CA;&amp;#x7EC6;&amp;#x8282;&amp;#xFF0C;&amp;#x5BFC;&amp;#x81F4;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6781;&amp;#x4E0D;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x7CFB;&amp;#x7EDF;&amp;#x4EE3;&amp;#x7801;&amp;#x4EFB;&amp;#x610F;&amp;#x7684;&amp;#x6F14;&amp;#x8FDB;&amp;#xFF0C;&amp;#x90FD;&amp;#x4F1A;&amp;#x5BFC;&amp;#x81F4;&amp;#x5927;&amp;#x5806;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5931;&amp;#x8D25;&amp;#xFF0C;&amp;#x751A;&amp;#x81F3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65E0;&amp;#x6CD5;&amp;#x8FDB;&amp;#x884C;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;case&amp;#x4E4B;&amp;#x95F4;&amp;#x65E0;&amp;#x6CD5;&amp;#x5F88;&amp;#x597D;&amp;#x7684;&amp;#x89E3;&amp;#x8026;&amp;#x3002;&amp;#x7ED3;&amp;#x679C;&amp;#x540C;&amp;#x6837;&amp;#x662F;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E0D;&amp;#x591F;&amp;#x7A33;&amp;#x5B9A;&amp;#x3002;&amp;#x672F;&amp;#x8BED;&amp;#x662F;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4EE3;&amp;#x7801;&amp;#x5F88;&amp;#x201C;&amp;#x8106;&amp;#x5F31;&amp;#x201D;&amp;#x3002;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Java&amp;#xFF0C;Python&amp;#xFF0C;JavaScript&amp;#x90FD;&amp;#x6709;&amp;#x81EA;&amp;#x5DF1;&amp;#x7684;mock&amp;#x5E93;&amp;#x3002;Python&amp;#x7684;Mock&amp;#x7C7B;&amp;#xFF0C;Java&amp;#x7684;Mockito/PowerMock&amp;#xFF0C;JavaScript&amp;#x7684;Sinon&amp;#x3002;&amp;#x4E8E;&amp;#x662F;&amp;#xFF0C;&amp;#x5728;&amp;#x7F51;&amp;#x4E0A;&amp;#x641C;&amp;#x7D22;&amp;#x4E86;&amp;#x4E00;&amp;#x4E0B;C/C++&amp;#x7684;Mock&amp;#x5E93;&amp;#xFF0C;&amp;#x4E8E;&amp;#x662F;&amp;#x770B;&amp;#x5230;&amp;#x4E86;gtest&amp;#xFF0C;gmock&amp;#x3002;&amp;#x7136;&amp;#x540E;&amp;#x5C31;&amp;#x6709;&amp;#x4E86;&amp;#x8FD9;&amp;#x4E00;&amp;#x7BC7;&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&amp;#x7B80;&amp;#x4ECB;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0D;&amp;#x7528;&amp;#x53BB;&amp;#x7F51;&amp;#x4E0A;&amp;#x8D39;&amp;#x5FC3;&amp;#x627E;&amp;#x6559;&amp;#x7A0B;&amp;#xFF0C;&amp;#x4E24;&amp;#x4E2A;&amp;#x9879;&amp;#x76EE;&amp;#x7684;&amp;#x6587;&amp;#x6863;&amp;#x90FD;&amp;#x975E;&amp;#x5E38;&amp;#x68D2;&amp;#x3002;&amp;#x5165;&amp;#x53E3;&amp;#x7EDF;&amp;#x4E00;&amp;#x5728;&lt;a href=&#34;https://github.com/google/googletest&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;gtest GitHub&amp;#x9879;&amp;#x76EE;&amp;#x4E3B;&amp;#x9875;&lt;/a&gt;&amp;#x4E0A;&amp;#x3002;&amp;#x800C;&amp;#x4E14;&amp;#x8BE5;&amp;#x6587;&amp;#x6863;&amp;#x4E0D;&amp;#x4EC5;&amp;#x5F88;&amp;#x597D;&amp;#x7684;&amp;#x4ECB;&amp;#x7ECD;&amp;#x4E86;gtest&amp;#xFF0C;gmock&amp;#x7684;&amp;#x7528;&amp;#x6CD5;&amp;#xFF0C;&amp;#x5176;&amp;#x4E2D;&amp;#x8FD8;&amp;#x6D89;&amp;#x53CA;&amp;#x4E86;&amp;#x5F88;&amp;#x591A;TDD&amp;#x6216;&amp;#x8005;UnitTest&amp;#x7684;&amp;#x771F;&amp;#x77E5;&amp;#x707C;&amp;#x89C1;&amp;#xFF0C;&amp;#x5F88;&amp;#x503C;&amp;#x5F97;&amp;#x8BFB;&amp;#x4E00;&amp;#x8BFB;&amp;#x3002; &lt;br&gt;&amp;#x8981;&amp;#x4F7F;&amp;#x7528;gtest&amp;#x975E;&amp;#x5E38;&amp;#x7B80;&amp;#x5355;&amp;#xFF1A;&amp;#x7F16;&amp;#x8BD1;&amp;#x51FA;gtest&amp;#xFF0C;gmock&amp;#xFF0C;&amp;#x518D;&amp;#x94FE;&amp;#x5165;&amp;#x4F60;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7A0B;&amp;#x5E8F;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x7F16;&amp;#x8BD1;gtest/gmock&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gtest&amp;#xFF0C;gmock&amp;#x5747;&amp;#x7528;cmake&amp;#x6765;&amp;#x7BA1;&amp;#x7406;&amp;#x8DE8;&amp;#x5E73;&amp;#x53F0;&amp;#xFF0C;&amp;#x5148;&amp;#x7528;cmake&amp;#x6765;&amp;#x751F;&amp;#x6210;Makefile&amp;#x3002;&amp;#x7528;&amp;#x547D;&amp;#x4EE4;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;cmake -G &amp;quot;Unix Makefiles&amp;quot; /path/to/CMakeList.txt&lt;/code&gt;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Makefile&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7136;&amp;#x540E;&amp;#x6309;&amp;#x7167;&amp;#x4E0B;&amp;#x9762;&amp;#x7F16;&amp;#x5199;Makefile&amp;#x3002;&amp;#x6CE8;&amp;#x610F;gmock_main&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;main&amp;#x51FD;&amp;#x6570;&amp;#x6765;&amp;#x8C03;&amp;#x7528;&amp;#x6240;&amp;#x6709;&amp;#x7684;test case&amp;#xFF0C;&amp;#x7701;&amp;#x5F97;&amp;#x81EA;&amp;#x5DF1;&amp;#x5199;main&amp;#x51FD;&amp;#x6570;&amp;#x4E86;&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;CC = gcc&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;CPP = g++&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;LINK = g++&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;CFLAGS = -g -Wall -Werror -Wextra -std=gnu99&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;CPPFLAGS = -g -Wall -Werror -Wextra&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;LIBS = -L./lib -lgtest -lgmock -lgmock_main -lpthread&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;C__SOURCES = $(wildcard *.c)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;CPPSOURCES = $(wildcard *.cpp)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;OBJECTS = $(patsubst %.c, %.o, $(C__SOURCES)) $(patsubst %.cpp, %.o, $(CPPSOURCES))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;TARGET = test_exe&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;first: all&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;%.o: %.c&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    $(CC) $(INCLUDES) -c $(CFLAGS) -o $@ $&amp;lt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;%.o: %.cpp&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    $(CPP) $(INCLUDES) -c $(CPPFLAGS) -o $@ $&amp;lt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;all: $(TARGET)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;$(TARGET): $(OBJECTS)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    $(LINK) $(CPPFLAGS) $(LIBS) -o $(TARGET) $(OBJECTS)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;.PHONY : clean&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;clean:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    rm -f $(TARGET) $(OBJECTS)&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Terms&lt;/h3&gt;&lt;table style=&#34;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&#34;&gt;&lt;thead style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;Meaning&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;Google Test Term&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;ISTQB Term&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Exercise a particular program path with specific input values and verify the results&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;TEST()&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Case&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;A set of several tests related to one component&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Case&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Suite&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Test&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gtest/gtest.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Test;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::AtLeast;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;TEST(TestCaseName, should_this_test_do)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    EXPECT_STREQ(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, str);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E2D;&amp;#x95F4;&amp;#x7684;&amp;#x90A3;&amp;#x5806;namespace&amp;#x90FD;&amp;#x662F;gtest/gmock&amp;#x5E93;&amp;#x91CC;&amp;#x5B9A;&amp;#x4E49;&amp;#x7684;matcher&amp;#x5B8F;&amp;#x6216;&amp;#x8005;&amp;#x5404;&amp;#x79CD;&amp;#x6709;&amp;#x7528;&amp;#x7684;&amp;#x5B8F;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Test Fixture&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6709;&amp;#x91CD;&amp;#x590D;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5C31;&amp;#x8981;&amp;#x7528;&amp;#x5230;Test Fixture&amp;#x4E86;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;setUp / tearDown&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt; : public ::testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Test&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt; protected:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  virtual void &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;SetUp&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    q1_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(1);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(2);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(3);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  // virtual void &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TearDown&lt;/span&gt;() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q0_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q1_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q2_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TEST_F&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;IsEmptyInitially&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(0, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q0_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TEST_F&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;DequeueWorks&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  int* n = q0_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  n = q1_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ASSERT_TRUE&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt; != &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(1, *&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(0, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q1_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  delete n;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  n = q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ASSERT_TRUE&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt; != &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(2, *&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(1, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q2_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  delete n;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;constructor/destructor vs. SetUp/TearDown&lt;/h4&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;When you need to write per-test set-up and tear-down logic, you have the choice between using the test fixture constructor/destructor or SetUp()/TearDown(). The former is usually preferred, as it has the following benefits:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;By initializing a member variable in the constructor, we have the option to make it const, which helps prevent accidental changes to its value and makes the tests more obviously correct.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;In case we need to subclass the test fixture class, the subclass&amp;#x2019; constructor is guaranteed to call the base class&amp;#x2019; constructor first, and the subclass&amp;#x2019; destructor is guaranteed to call the base class&amp;#x2019; destructor afterward. &lt;/strong&gt;With SetUp()/TearDown(), a subclass may make the mistake of forgetting to call the base class&amp;#x2019; SetUp()/TearDown() or call them at the wrong moment.&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;Benefit for using SetUp/TearDown:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If the tear-down operation could throw an exception, you must use TearDown() as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer TearDown() if you want to write portable tests that work with or without exceptions.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The assertion macros throw an exception when flag &amp;#x2013;gtest_throw_on_failure is specified. Therefore, you shouldn&amp;#x2019;t use Google Test assertions in a destructor if you plan to run your tests with this flag.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;In a constructor or destructor, you cannot make a virtual function call on this object. (You can call a method declared as virtual, but it will be statically bound.) Therefore, if you need to call a method that will be overriden in a derived class, you have to use SetUp()/TearDown().&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7B80;&amp;#x8A00;&amp;#x4E4B;&amp;#xFF0C;&amp;#x5728;&amp;#x903B;&amp;#x8F91;&amp;#x4E0A;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E24;&amp;#x7EC4;&amp;#x7684;&amp;#x4F5C;&amp;#x7528;&amp;#x76F8;&amp;#x540C;&amp;#xFF0C;&amp;#x90FD;&amp;#x662F;&amp;#x6BCF;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E4B;&amp;#x524D;&amp;#x4E4B;&amp;#x540E;&amp;#x4F1A;&amp;#x505A;&amp;#x4E00;&amp;#x4E9B;&amp;#x5904;&amp;#x7406;&amp;#x5DE5;&amp;#x4F5C;&amp;#x3002;Constructor/Destructor&amp;#x7684;&amp;#x597D;&amp;#x5904;&amp;#x662F;&amp;#x63D0;&amp;#x4F9B;&amp;#x4E86;&amp;#x7EE7;&amp;#x627F;&amp;#x3002;setUp/tearDown&amp;#x7684;&amp;#x597D;&amp;#x5904;&amp;#x662F;&amp;#x53EF;&amp;#x4EE5;&amp;#x5904;&amp;#x7406;exception&amp;#xFF0C;&amp;#x8FD9;&amp;#x662F;&amp;#x4E0D;&amp;#x80FD;&amp;#x653E;&amp;#x5728;&amp;#x6790;&amp;#x6784;&amp;#x51FD;&amp;#x6570;&amp;#x91CC;&amp;#x7684;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;SetUpTestCase / TearDownTestCase&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Test Case&amp;#x7EA7;&amp;#x522B;&amp;#x7684;SetUp/TearDown&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; FooTest : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; ::testing::Test &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;protected&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Per-test-case set-up.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Called before the first test in this test case.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Can be omitted if not needed.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUpTestCase&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    shared_resource_ = &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;new&lt;/span&gt; ...;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Per-test-case tear-down.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Called after the last test in this test case.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Can be omitted if not needed.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDownTestCase&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;delete&lt;/span&gt; shared_resource_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    shared_resource_ = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// You can define per-test set-up and tear-down logic as usual.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUp&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDown&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Some expensive resource shared by all tests.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;static&lt;/span&gt; T* shared_resource_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;SetUp/TearDown Environment&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;First, you subclass the ::testing::Environment class to define a test environment, which knows how to set-up and tear-down:&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Then, you register an instance of your environment class with Google Test by calling the &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;::testing::AddGlobalTestEnvironment()&lt;/code&gt; function: &lt;br&gt;Now, when RUN_ALL_TESTS() is called, it first calls the SetUp() method of the environment object, then runs the tests if there was no fatal failures, and finally calls TearDown() of the environment object.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;It&amp;#x2019;s OK to register multiple environment objects. In this case, their SetUp() will be called in the order they are registered, and their TearDown() will be called in the reverse order.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Note that Google Test takes ownership of the registered environment objects. Therefore do not delete them by yourself.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; Environment &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;virtual&lt;/span&gt; ~Environment() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Override this to define how to set up the environment.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUp&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Override this to define how to tear down the environment.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDown&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Environment* &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;AddGlobalTestEnvironment&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(Environment* env)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x65AD;&amp;#x8A00;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6709;&amp;#x4E24;&amp;#x79CD;&amp;#x65AD;&amp;#x8A00;EXPECT_xxx&amp;#x548C;ASSERT_xxx&amp;#x3002;&amp;#x524D;&amp;#x8005;&amp;#x4F1A;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7EC8;&amp;#x6B62;&amp;#xFF0C;&amp;#x540E;&amp;#x8005;&amp;#x4E0D;&amp;#x4F1A;&amp;#xFF0C;&amp;#x53EA;&amp;#x4F1A;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;fail&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;gmock&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E4B;&amp;#x6240;&amp;#x4EE5;&amp;#x8981;&amp;#x5207;&amp;#x5230;gtest&amp;#xFF0C;&amp;#x552F;&amp;#x4E00;&amp;#x7684;&amp;#x539F;&amp;#x56E0;&amp;#x5C31;&amp;#x662F;gmock&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x8981;&amp;#x4E13;&amp;#x5F00;&amp;#x4E00;&amp;#x7AE0;&amp;#x91CD;&amp;#x70B9;&amp;#x4ECB;&amp;#x7ECD;&amp;#x4E00;&amp;#x4E0B;&amp;#x3002;&amp;#x6240;&amp;#x6709;&amp;#x5185;&amp;#x5BB9;&amp;#x5747;&amp;#x6765;&amp;#x81EA;&amp;#x4E8E;&amp;#x5B98;&amp;#x65B9;&amp;#x6587;&amp;#x6863;&amp;#x3002;&amp;#x5185;&amp;#x5BB9;&amp;#x6DF1;&amp;#x5EA6;&amp;#x7531;&amp;#x6D45;&amp;#x5165;&amp;#x6DF1;&amp;#xFF0C;&amp;#x4F9D;&amp;#x6B21;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Google Mock for Dummies&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/CookBook.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;CookBook&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6700;&amp;#x540E;&amp;#x8FD8;&amp;#x6709;&amp;#x53C2;&amp;#x8003;&amp;#x624B;&amp;#x518C;:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/CheatSheet.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x7B80;&amp;#x4ECB;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Google C++ Mocking Framework (or Google Mock for short) is a library (sometimes we also call it a &amp;#x201C;framework&amp;#x201D; to make it sound cool) for creating mock classes and using them. It does to C++ what jMock and EasyMock do to Java.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4F55;&amp;#x4E3A;Mock&amp;#xFF1F;&lt;/h4&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Mocks&lt;/strong&gt; are objects pre-programmed with expectations, which form a specification of the calls they are expected to receive.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x76F8;&amp;#x5E94;&amp;#x7684;&amp;#x8FD8;&amp;#x6709;Fake&amp;#x548C;Stub&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Fake&lt;/strong&gt; objects have working implementations, but usually take some shortcut (perhaps to make the operations less expensive), which makes them not suitable for production. An in-memory file system would be an example of a fake.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gmock&amp;#x7684;&amp;#x6587;&amp;#x6863;&amp;#x91CC;&amp;#x53EA;&amp;#x63D0;&amp;#x5230;&amp;#x4E86;Fake&amp;#xFF0C;&amp;#x4ECE;Martin Fowler&amp;#x7684;&amp;#x6587;&amp;#x7AE0;&lt;a href=&#34;https://martinfowler.com/articles/mocksArentStubs.html&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Mocks Aren&amp;#x2019;t Stubs&lt;/a&gt;&amp;#x4E2D;&amp;#x6458;&amp;#x5F55;&amp;#x5982;&amp;#x4E0B;:&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Stubs&lt;/strong&gt; provide canned answers to calls made during the test, usually not responding at all to anything outside what&amp;#x2019;s programmed in for the test.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E09;&amp;#x8005;&amp;#x4F5C;&amp;#x7528;&amp;#x76F8;&amp;#x540C;&amp;#xFF0C;&amp;#x90FD;&amp;#x662F;&amp;#x6A21;&amp;#x62DF;&amp;#x7CFB;&amp;#x7EDF;&amp;#x5176;&amp;#x4ED6;&amp;#x90E8;&amp;#x5206;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#xFF0C;&amp;#x8FBE;&amp;#x5230;&amp;#x4EE3;&amp;#x7801;&amp;#x9694;&amp;#x79BB;&amp;#x7684;&amp;#x6548;&amp;#x679C;&amp;#xFF0C;&amp;#x65B9;&amp;#x4FBF;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;&amp;#x4F46;&amp;#x662F;Mock&amp;#x7684;&amp;#x7279;&amp;#x70B9;&amp;#x662F;&amp;#x66F4;OO&amp;#x5316;&amp;#xFF0C;&amp;#x4E5F;&amp;#x7B26;&amp;#x5408;TDD&amp;#x6216;&amp;#x8005;BDD&amp;#x7684;&amp;#x601D;&amp;#x60F3;&amp;#x2014;&amp;#x2014;&amp;#x9488;&amp;#x5BF9;&amp;#x4E00;&amp;#x4E2A;object&amp;#x8BBE;&amp;#x7F6E;&amp;#x671F;&amp;#x5F85;&amp;#xFF0C;&amp;#x518D;&amp;#x5BF9;&amp;#x9F50;verify&amp;#x3002;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Mocks vs. Stubs - from Martin Fowler&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;In order to use state verification on the stub, I need to make some extra methods on the stub to help with verification. As a result the stub implements MailService but adds extra test methods.&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Mock objects always use behavior verification, a stub can go either way. Meszaros refers to stubs that use behavior verification as a Test Spy. The difference is in how exactly the double runs and verifies and I&amp;#x2019;ll leave that for you to explore on your own.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Getting Started&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Class to Mock&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Turtle&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;virtual&lt;/span&gt; ~Turtle() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;PenUp&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;PenDown&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Forward&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; distance&lt;/span&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Mock class&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Brings in Google Mock.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockTurtle : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; Turtle &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  MOCK_METHOD0(PenUp, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  MOCK_METHOD0(PenDown, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  MOCK_METHOD1(Forward, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; distance));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x9488;&amp;#x5BF9;&amp;#x5F85;Mock&amp;#x7684;Turtle class&amp;#x8981;&amp;#x6CE8;&amp;#x610F;&amp;#x7684;&amp;#x662F;:&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Note that the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;destructor of Turtle must be virtual&lt;/strong&gt;, as is the case for all classes you intend to inherit from - otherwise the destructor of the derived class will not be called when you delete an object through a base pointer, and you&amp;#x2019;ll get corrupted program states like memory leaks.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Use it&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;path/to/mock-turtle.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gtest/gtest.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::AtLeast;                     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #1&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;TEST(PainterTest, CanDrawSomething) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  MockTurtle turtle;                          &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #2&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  EXPECT_CALL(turtle, PenDown())              &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #3&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;      .Times(AtLeast(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Painter &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;painter&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&amp;amp;turtle)&lt;/span&gt;&lt;/span&gt;;                   &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #4&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  EXPECT_TRUE(painter.DrawCircle(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;                                             &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #5&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;char&lt;/span&gt;** argv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// The following line must be executed to initialize Google Mock&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// (and Google Test) before running the tests.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  ::testing::InitGoogleMock(&amp;amp;argc, argv);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; RUN_ALL_TESTS();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x613F;&amp;#x610F;&amp;#x7684;&amp;#x8BDD;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x81EA;&amp;#x5DF1;&amp;#x5199;main&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x60F3;&amp;#x5077;&amp;#x61D2;&amp;#xFF0C;&amp;#x8BB0;&amp;#x5F97;&amp;#x5728;Makefile&amp;#x91CC;link gmock_main&amp;#x3002; &lt;br&gt;&amp;#x6309;Google&amp;#x7684;&amp;#x8BF4;&amp;#x6CD5;&amp;#xFF0C;gmock&amp;#x4E5F;&amp;#x53EF;&amp;#x4EE5;&amp;#x548C;&amp;#x5176;&amp;#x4ED6;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6846;&amp;#x67B6;&amp;#x517C;&amp;#x5BB9;&amp;#xFF0C;&amp;#x4F46;&amp;#x603B;&amp;#x611F;&amp;#x89C9;&amp;#x633A;&amp;#x60AC;&amp;#x7684;&amp;#x3002;&lt;/p&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4E00;&amp;#x4E9B;&amp;#x6709;&amp;#x7528;&amp;#x7684;&amp;#x5DE5;&amp;#x5177;&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Marcher&lt;/strong&gt; &lt;br&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;EXPECT_CALL(turtle, Forward(_));&lt;/code&gt; &lt;br&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0; &amp;#x4EE5;&amp;#x4EFB;&amp;#x610F;&amp;#x53C2;&amp;#x6570;&amp;#x8C03;&amp;#x7528;Forward &lt;br&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;EXPECT_CALL(turtle, Forward(Ge(100)));&lt;/code&gt; &lt;br&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0; &amp;#x4EE5;&amp;#x5927;&amp;#x4E8E;100&amp;#x7684;&amp;#x6574;&amp;#x6570;&amp;#x8C03;&amp;#x7528;Forward&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Cardinalities: How Many Times Will It Be Called?&lt;/strong&gt;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If neither WillOnce() nor WillRepeatedly() is in the EXPECT_CALL(), the inferred cardinality is Times(1).&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If there are n WillOnce()&amp;#x2019;s but no WillRepeatedly(), where n &amp;gt;= 1, the cardinality is Times(n).&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If there are n WillOnce()&amp;#x2019;s and one WillRepeatedly(), where n &amp;gt;= 0, the cardinality is Times(AtLeast(n)).&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mockObj, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .Times(AtLeast(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;123&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillRepeatedly(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;456&lt;/span&gt;))&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0A;&amp;#x9762;&amp;#x8FD9;&amp;#x6BB5;&amp;#x4EE3;&amp;#x7801;&amp;#x8981;&amp;#x6C42;func&amp;#x51FD;&amp;#x6570;&amp;#x81F3;&amp;#x5C11;&amp;#x8FD0;&amp;#x884C;&amp;#x4E00;&amp;#x6B21;&amp;#xFF0C;&amp;#x7B2C;&amp;#x4E00;&amp;#x6B21;&amp;#x8FD4;&amp;#x56DE;123&amp;#xFF0C;&amp;#x4E4B;&amp;#x540E;&amp;#x6BCF;&amp;#x6B21;&amp;#x8FD4;&amp;#x56DE;456&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Important note&lt;/strong&gt;: The EXPECT_CALL() statement evaluates the action clause only once, even though the action may be performed many times. Therefore you must be careful about side effects. The following may not do what you want:&lt;/p&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;n&lt;/span&gt; = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;.Times(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;4&lt;/span&gt;)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;.WillRepeatedly(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;n&lt;/span&gt;++));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x56E0;&amp;#x4E3A;Return&amp;#x662F;&amp;#x5B8F;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x53EA;&amp;#x4F1A;&amp;#x66FF;&amp;#x6362;&amp;#x4E00;&amp;#x6B21;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x4E0D;&amp;#x7BA1;GetX&amp;#x8C03;&amp;#x7528;&amp;#x51E0;&amp;#x6B21;&amp;#xFF0C;&amp;#x8FD4;&amp;#x56DE;&amp;#x90FD;&amp;#x662F;101&amp;#xFF0C;&amp;#x800C;&amp;#x4E0D;&amp;#x662F;101,102,103,&amp;#x2026;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;All Expectations Are Sticky&lt;/strong&gt; &lt;br&gt;&amp;#x6240;&amp;#x8C13;&amp;#x7684;sticky&amp;#x5C31;&amp;#x662F;EXPECT_CALL&amp;#x603B;&amp;#x662F;&amp;#x751F;&amp;#x6548;&amp;#x7684;&amp;#xFF0C;&amp;#x9664;&amp;#x975E;&amp;#x4F60;&amp;#x663E;&amp;#x793A;&amp;#x7684;&amp;#x5C06;&amp;#x5176;&amp;#x5931;&amp;#x6548;&amp;#x3002;&amp;#x5982;&amp;#x4E0B;&amp;#xFF0C;&amp;#x6240;&amp;#x6709;&amp;#x7684;EXPECT_CALL&amp;#x90FD;&amp;#x4F1A;&amp;#x751F;&amp;#x6548;&amp;#xFF0C;&amp;#x90A3;&amp;#x4E48;&amp;#x6700;&amp;#x540E;&amp;#x4E00;&amp;#x4E2A;&amp;#x4F1A;&amp;#x8986;&amp;#x76D6;&amp;#x524D;&amp;#x9762;&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;GetX&amp;#x603B;&amp;#x4F1A;&amp;#x8FD4;&amp;#x56DE;10&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = n; i &amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;      &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x5E0C;&amp;#x671B;&amp;#x4ED6;&amp;#x8FD4;&amp;#x56DE;&amp;#xFF0C;30,20,10&amp;#xFF0C;&amp;#x2026;&amp;#xFF0C;&amp;#x5E94;&amp;#x8BE5;&amp;#x8FD9;&amp;#x4E48;&amp;#x5199;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = n; i &amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.RetiresOnSaturation&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;RetireOnSaturation&lt;/code&gt;&amp;#x5C31;&amp;#x662F;&amp;#x663E;&amp;#x793A;&amp;#x7684;&amp;#x8BA9;&amp;#x5176;&amp;#x5931;&amp;#x6548;&amp;#x3002;&amp;#x8FD8;&amp;#x6709;&amp;#x4E00;&amp;#x4E2A;&amp;#x529E;&amp;#x6CD5;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::InSequence;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;InSequence&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;s&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.RetiresOnSaturation&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x56E0;&amp;#x4E3A;InSequence&amp;#x7684;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x5728;&amp;#x524D;&amp;#x9762;&amp;#x7684;EXPECT_CALL&amp;#x751F;&amp;#x6548;&amp;#x4EE5;&amp;#x540E;&amp;#xFF0C;&amp;#x5C31;&amp;#x4F1A;&amp;#x81EA;&amp;#x52A8;&amp;#x5931;&amp;#x6548;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x4E0D;&amp;#x4F1A;&amp;#x4EA7;&amp;#x751F;&amp;#x8986;&amp;#x76D6;&amp;#x7684;&amp;#x6548;&amp;#x679C;&amp;#x3002; &lt;br&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Ordered vs Unordered Calls&lt;/strong&gt;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::InSequence;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;TEST&lt;/span&gt;(FooTest, DrawsLineSegment) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;InSequence&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;dummy&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, PenDown());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, Forward(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, PenUp());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;Foo&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Expecting Partially Ordered Calls&lt;/strong&gt; &lt;br&gt;Google Mock allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to &lt;br&gt;use the After clause of EXPECT_CALL .&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;using ::testing::Sequence&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;Sequence &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s1&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s2&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(foo, A())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s1, &lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s2&lt;/span&gt;)&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bar, &lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;B())&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s1);&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bar, &lt;/span&gt;C())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s2);&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(foo, D())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s2);&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;specifies the following DAG (where s1 is A -&amp;gt; B , and s2 is A -&amp;gt; C -&amp;gt; D ):&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;B&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;D&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Uninteresting Calls&lt;/strong&gt; &lt;br&gt;&amp;#x8FD9;&amp;#x662F;gmock&amp;#x62A5;&amp;#x7684;warning&amp;#x3002;&amp;#x5F53;&amp;#x9488;&amp;#x5BF9;&amp;#x67D0;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F85;&amp;#x6D4B;&amp;#x51FD;&amp;#x6570;&amp;#x8BBE;&amp;#x7F6E;&amp;#x4E86;EXPECT spec&amp;#xFF0C;&amp;#x5374;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x8C03;&amp;#x7528;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5C31;&amp;#x4F1A;&amp;#x62A5;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#x3002;&amp;#x6B64;&amp;#x65F6;gmock&amp;#x8BA4;&amp;#x4E3A;&amp;#x4F60;&amp;#x5BF9;&amp;#x8BE5;&amp;#x51FD;&amp;#x6570;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x5174;&amp;#x8DA3;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x5C31;&amp;#x4E0D;&amp;#x9700;&amp;#x8981;&amp;#x8FD9;&amp;#x4E2A;EXPECT spec&amp;#x3002;&amp;#x5F53;&amp;#x7136;&amp;#x4F60;&amp;#x53EF;&amp;#x4EE5;&amp;#x9009;&amp;#x62E9;&amp;#x5FFD;&amp;#x7565;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#xFF0C;&amp;#x4F46;&amp;#x6211;&amp;#x8BA4;&amp;#x4E3A;&amp;#x51FA;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x591A;&amp;#x534A;&amp;#x662F;test&amp;#x6F0F;&amp;#x5199;&amp;#x4E86;&amp;#x4EC0;&amp;#x4E48;&amp;#x3002;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Returning Live Values from Mock Methods&lt;/strong&gt;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;using&lt;/span&gt; testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ByRef&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;using&lt;/span&gt; testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Return&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MockFoo&lt;/span&gt; : public &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    public:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MOCK_METHOD0&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;int&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;int x = 0;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MockFoo&lt;/span&gt; foo;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_CALL&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;foo&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    // .&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;WillRepeatedly&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ByRef(x)&lt;/span&gt;)); &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;X&lt;/span&gt; error&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;WillRepeatedly&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ReturnPointee(x)&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;x = 42;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(42, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;foo&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;());&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4E00;&amp;#x4E9B;&amp;#x6D4B;&amp;#x8BD5;case&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5199;Unit Test&amp;#x5E76;&amp;#x4E0D;&amp;#x50CF;&amp;#x60F3;&amp;#x50CF;&amp;#x7684;&amp;#x90A3;&amp;#x4E48;&amp;#x7B80;&amp;#x5355;&amp;#xFF0C;&amp;#x5E76;&amp;#x4E0D;&amp;#x662F;&amp;#x8C03;&amp;#x7528;&amp;#x4E86;&amp;#x6846;&amp;#x67B6;&amp;#xFF0C;&amp;#x9488;&amp;#x5BF9;&amp;#x6BCF;&amp;#x4E2A;&amp;#x51FD;&amp;#x6570;&amp;#x5199;test case&amp;#x5C31;&amp;#x53EF;&amp;#x4EE5;&amp;#x3002;&amp;#x6309;&amp;#x6211;&amp;#x76EE;&amp;#x524D;&amp;#x7684;&amp;#x7406;&amp;#x89E3;&amp;#x6709;&amp;#x4EE5;&amp;#x4E0B;&amp;#x51E0;&amp;#x79CD;&amp;#x6311;&amp;#x6218;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;Test Case&amp;#x5982;&amp;#x4F55;&amp;#x89E3;&amp;#x8026;&amp;#x3002;&amp;#x4E0D;&amp;#x8981;&amp;#x6709;&amp;#x91CD;&amp;#x590D;&amp;#x6D4B;&amp;#x8BD5;(overlap)&amp;#x3002; &lt;br&gt;&amp;#x4F8B;&amp;#x5982;&amp;#xFF1A;&amp;#x5728;&amp;#x5199;A&amp;#x51FD;&amp;#x6570;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5199;&amp;#x4E86;&amp;#x6D4B;&amp;#x8BD5;testA&amp;#xFF0C;B&amp;#x51FD;&amp;#x6570;&amp;#x4F1A;&amp;#x8C03;&amp;#x7528;A&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x90A3;&amp;#x4E48;&amp;#x5728;&amp;#x5199;&amp;#x5B8C;A&amp;#x4E4B;&amp;#x540E;&amp;#x5199;B&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;testB&amp;#x65F6;&amp;#xFF0C;&amp;#x662F;&amp;#x5426;&amp;#x8981;&amp;#x5C06;A mock/fake/stub&amp;#x6389;? &amp;#x5982;&amp;#x679C;&amp;#x4E0D;&amp;#x5C06;A&amp;#x51FD;&amp;#x6570;Fake&amp;#x6389;&amp;#xFF0C;&amp;#x5219;testA&amp;#x548C;testB&amp;#x4E4B;&amp;#x95F4;&amp;#x5C31;&amp;#x662F;&amp;#x6709;overlap&amp;#x3002;&amp;#x6211;&amp;#x8BA4;&amp;#x4E3A;&amp;#x8FD9;&amp;#x4E4B;&amp;#x95F4;&amp;#x53EF;&amp;#x4EE5;&amp;#x6709;&amp;#x53D6;&amp;#x820D;&amp;#xFF0C;&amp;#x6700;&amp;#x4F73;&amp;#x72B6;&amp;#x6001;&amp;#x5E94;&amp;#x5F53;&amp;#x662F;&amp;#x6B64;&amp;#x65F6;&amp;#xFF0C;&amp;#x5C06;testA&amp;#x5220;&amp;#x9664;&amp;#xFF0C;&amp;#x53EA;&amp;#x4FDD;&amp;#x7559;testB&amp;#x3002;&amp;#x4F46;&amp;#x4ECD;&amp;#x5E94;&amp;#x6839;&amp;#x636E;&amp;#x5177;&amp;#x4F53;&amp;#x60C5;&amp;#x51B5;&amp;#x800C;&amp;#x5B9A;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x4F55;&amp;#x9488;&amp;#x5BF9;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#x8FDB;&amp;#x884C;mock&amp;#x5316;&amp;#x3002; &lt;br&gt;&amp;#x4F8B;&amp;#x5982;&amp;#x51FA;&amp;#x73B0;&amp;#x8FD9;&amp;#x6837;&amp;#x7684;&amp;#x8BED;&amp;#x53E5;: &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;B = new A&lt;/code&gt;&amp;#xFF0C;&amp;#x5219;&amp;#x7C7B;B&amp;#x4F9D;&amp;#x8D56;&amp;#x4E8E;&amp;#x7C7B;A&amp;#x3002;&amp;#x4F46;&amp;#x7C7B;A&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x5FC5;&amp;#x8981;&amp;#x7F16;&amp;#x8BD1;&amp;#x8FDB;test&amp;#x3002;&amp;#x56E0;&amp;#x4E3A;&amp;#x4E00;&amp;#x65E6;&amp;#x52A0;&amp;#x5165;A&amp;#xFF0C;&amp;#x5219;&amp;#x52BF;&amp;#x5FC5;&amp;#x4F1A;&amp;#x5F15;&amp;#x5165;&amp;#x66F4;&amp;#x591A;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x800C;&amp;#x5BFC;&amp;#x81F4;test&amp;#x7F16;&amp;#x8BD1;&amp;#x5D29;&amp;#x6E83;&amp;#x3002;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x65E0;&amp;#x7A77;&amp;#x65E0;&amp;#x5C3D;&amp;#x3002;&amp;#x5728;&amp;#x505A;Android&amp;#x7684;&amp;#x5355;&amp;#x5143;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x7528;PowerMock&amp;#x53D6;&amp;#x4EE3;Mockito&amp;#x6765;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x5C06;&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;Fake&amp;#x5316;&amp;#x6210;&amp;#x7C7B;&amp;#x4F3C;&amp;#x5DE5;&amp;#x5382;&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x8FD4;&amp;#x56DE;&amp;#x7C7B;&amp;#x5B9E;&amp;#x4F8B;&amp;#x3002;&amp;#x5177;&amp;#x4F53;&amp;#x53C2;&amp;#x770B;&amp;#x8FD9;&amp;#x7BC7;&amp;#x535A;&amp;#x6587;&lt;a href=&#34;https://zhougy0717.github.io/2016/10/19/Android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Android&amp;#x5355;&amp;#x5143;&amp;#x6D4B;&amp;#x8BD5;&lt;/a&gt;&amp;#x3002; &lt;br&gt;&amp;#x4F46;&amp;#x5B9E;&amp;#x9645;&amp;#x4E0A;&amp;#xFF0C;&amp;#x6309;&amp;#x7167;&amp;#x73B0;&amp;#x5728;&amp;#x7684;&amp;#x7406;&amp;#x89E3;&amp;#xFF0C;&amp;#x5176;&amp;#x5B9E;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x662F;&amp;#x4E0D;&amp;#x53EF;&amp;#x53D6;&amp;#x7684;&amp;#xFF0C;&amp;#x9996;&amp;#x5148;&amp;#x9020;&amp;#x6210;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;spec&amp;#x4E0D;&amp;#x6E05;&amp;#x6670;&amp;#xFF0C;&amp;#x8BD5;&amp;#x60F3;&amp;#x4E00;&amp;#x4E2A;&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x600E;&amp;#x4E48;&amp;#x4F1A;&amp;#x8FD4;&amp;#x56DE;&amp;#x53E6;&amp;#x4E00;&amp;#x4E2A;&amp;#x7C7B;&amp;#x7684;&amp;#x5B9E;&amp;#x4F8B;&amp;#x3002;&amp;#x5176;&amp;#x6B21;&amp;#xFF0C;&amp;#x5728;C++&amp;#x4E2D;&amp;#x5F88;&amp;#x96BE;&amp;#x505A;&amp;#x5230;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x3002;&amp;#x597D;&amp;#x7684;&amp;#x505A;&amp;#x6CD5;&amp;#x5E94;&amp;#x5F53;&amp;#x662F;&amp;#x8FD0;&amp;#x7528;Dependency Injection&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#xFF1A;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;A&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;B&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        A* a = &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;new&lt;/span&gt; A;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7C7B;B&amp;#x5E94;&amp;#x5F53;&amp;#x6539;&amp;#x5199;&amp;#x4E3A;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e; font-style: italic;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    void &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(A*)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5C06;&amp;#x7C7B;A&amp;#x6307;&amp;#x9488;&amp;#x4F20;&amp;#x5165;&amp;#xFF0C;&amp;#x89E3;&amp;#x51B3;dependency&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x3002;&lt;/p&gt;&lt;ol start=&#34;3&#34; style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x4F55;&amp;#x80FD;&amp;#x591F;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x5728;&amp;#x4EFB;&amp;#x610F;&amp;#x73AF;&amp;#x5883;&amp;#x4E0B;&amp;#x5747;&amp;#x8FD4;&amp;#x56DE;&amp;#x540C;&amp;#x6837;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7ED3;&amp;#x679C;&amp;#x3002; &lt;br&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x4E00;&amp;#x822C;&amp;#x6D89;&amp;#x53CA;&amp;#x6D4B;&amp;#x8BD5;&amp;#x73AF;&amp;#x5883;&amp;#x7684;&amp;#x5F71;&amp;#x54CD;&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#x8C03;&amp;#x7528;&amp;#x7F51;&amp;#x7EDC;&amp;#x76F8;&amp;#x5173;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#xFF0C;&amp;#x5728;&amp;#x6CA1;&amp;#x6709;&amp;#x7F51;&amp;#x7EDC;&amp;#x7684;&amp;#x73AF;&amp;#x5883;&amp;#x5C31;&amp;#x6CA1;&amp;#x6CD5;&amp;#x8FDB;&amp;#x884C;&amp;#x3002;&amp;#x518D;&amp;#x4F8B;&amp;#x5982;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#x64CD;&amp;#x4F5C;&amp;#x771F;&amp;#x5B9E;&amp;#x5177;&amp;#x4F53;&amp;#x6587;&amp;#x4EF6;&amp;#xFF0C;&amp;#x5219;&amp;#x8BE5;&amp;#x6587;&amp;#x4EF6;&amp;#x88AB;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5916;&amp;#x4EBA;&amp;#x4E3A;&amp;#x6216;&amp;#x4EE3;&amp;#x7801;&amp;#x4FEE;&amp;#x6539;&amp;#xFF0C;&amp;#x5219;&amp;#x6D4B;&amp;#x8BD5;&amp;#x53EF;&amp;#x80FD;&amp;#x5C31;&amp;#x4F1A;&amp;#x83AB;&amp;#x540D;&amp;#x5931;&amp;#x8D25;&amp;#x3002; &lt;br&gt;&amp;#x9488;&amp;#x5BF9;&amp;#x8FD9;&amp;#x4E9B;&amp;#x60C5;&amp;#x51B5;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x5E94;&amp;#x5F53;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E2D;&amp;#x5C3D;&amp;#x91CF;&amp;#x907F;&amp;#x514D;&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#x524D;&amp;#x8005;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x5E94;&amp;#x5F53;&amp;#x5BF9;&amp;#x7F51;&amp;#x7EDC;&amp;#x63A5;&amp;#x53E3;&amp;#x8FDB;&amp;#x884C;Mock&amp;#x5316;&amp;#xFF0C;&amp;#x540E;&amp;#x8005;&amp;#x5E94;&amp;#x5F53;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7684;setUp&amp;#x548C;tearDown&amp;#x4E2D;&amp;#x751F;&amp;#x6210;&amp;#x865A;&amp;#x5047;&amp;#x6587;&amp;#x4EF6;&amp;#x7528;&amp;#x4E8E;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x5E76;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5B8C;&amp;#x6210;&amp;#x65F6;&amp;#x505A;&amp;#x6E05;&amp;#x7406;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x4F1A;&amp;#x56E0;&amp;#x4E3A;&amp;#x5F88;&amp;#x5C0F;&amp;#x7684;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;&amp;#x6539;&amp;#x52A8;&amp;#xFF0C;&amp;#x800C;&amp;#x5BFC;&amp;#x81F4;&amp;#x5927;&amp;#x9762;&amp;#x79EF;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5931;&amp;#x8D25;&amp;#xFF0C;&amp;#x751A;&amp;#x81F3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5D29;&amp;#x6E83;&amp;#x3002; &lt;br&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5C31;&amp;#x662F;gmock&amp;#x6587;&amp;#x6863;&amp;#x4E2D;&amp;#x63D0;&amp;#x5230;&amp;#x7684;&amp;#x8981;&amp;#x9488;&amp;#x5BF9;&amp;#x63A5;&amp;#x53E3;&amp;#x7F16;&amp;#x7A0B;&amp;#xFF0C;&amp;#x9488;&amp;#x5BF9;&amp;#x63A5;&amp;#x53E3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;Robert C&amp;#xB7;Martin&amp;#x5728;&amp;#x300A;&amp;#x654F;&amp;#x6377;&amp;#x8F6F;&amp;#x4EF6;&amp;#x5F00;&amp;#x53D1;&amp;#xFF0D;&amp;#x539F;&amp;#x5219;&amp;#x3001;&amp;#x6A21;&amp;#x5F0F;&amp;#x4E0E;&amp;#x5B9E;&amp;#x8DF5;&amp;#x300B;&amp;#x4E00;&amp;#x4E66;&amp;#x4E2D;&amp;#x6709;&amp;#x63D0;&amp;#x51FA;&amp;#xFF1A;&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x90FD;&amp;#x5E94;&amp;#x4F9D;&amp;#x8D56;&amp;#x4E8E;&amp;#x62BD;&amp;#x8C61;&amp;#x63A5;&amp;#x53E3;&amp;#x3002;&amp;#x56E0;&amp;#x4E3A;&amp;#x62BD;&amp;#x8C61;&amp;#x63A5;&amp;#x53E3;&amp;#x662F;&amp;#x7ECF;&amp;#x8FC7;&amp;#x62BD;&amp;#x8C61;&amp;#x7684;&amp;#xFF0C;&amp;#x76F8;&amp;#x5BF9;&amp;#x5177;&amp;#x4F53;&amp;#x7684;&amp;#x5B9E;&amp;#x73B0;&amp;#x4EE3;&amp;#x7801;&amp;#x8F83;&amp;#x4E3A;&amp;#x7A33;&amp;#x5B9A;&amp;#x3002;&amp;#x800C;&amp;#x88AB;&amp;#x4F9D;&amp;#x8D56;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x5E94;&amp;#x8BE5;&amp;#x5C3D;&amp;#x53EF;&amp;#x80FD;&amp;#x4FDD;&amp;#x6301;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x8FD9;&amp;#x6837;&amp;#x57FA;&amp;#x4E8E;&amp;#x4E4B;&amp;#x4E0A;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x624D;&amp;#x4E0D;&amp;#x4F1A;&amp;#x56E0;&amp;#x4E3A;&amp;#x4F9D;&amp;#x8D56;&amp;#x7684;&amp;#x6539;&amp;#x52A8;&amp;#x800C;&amp;#x6539;&amp;#x52A8;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0B;&amp;#x9762;&amp;#x5217;&amp;#x51FA;&amp;#x51E0;&amp;#x79CD;&amp;#x6211;&amp;#x5728;&amp;#x5B9E;&amp;#x9645;&amp;#x5199;test case&amp;#x65F6;&amp;#x9047;&amp;#x5230;&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#xFF0C;&amp;#x5728;gmock&amp;#x4E2D;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x65B9;&amp;#x6848;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x6309;&amp;#x7167;&amp;#x51FD;&amp;#x6570;&amp;#x53C2;&amp;#x6570;&amp;#x8FD4;&amp;#x56DE;&amp;#x7ED3;&amp;#x679C; - Fake&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F8B;&amp;#x5982;:&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;class A&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    virtual &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;EXPECT_CALL&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(mockA, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;func&lt;/span&gt;()&lt;/span&gt;)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;WillRepeatedly&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(a+b)&lt;/span&gt;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gmock&amp;#x4E2D;&amp;#x53EF;&amp;#x4EE5;&amp;#x8FD9;&amp;#x6837;&amp;#x505A;&amp;#xFF1A;Using Functions/Methods/Functors as Actions&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Invoke;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockFoo : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; Foo &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    MOCK_METHOD2(Sum, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; y));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    MOCK_METHOD1(ComplexJob, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bool&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; x));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;CalculateSum&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; x + y; &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; Helper &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;ComplexJob&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;MockFoo foo;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;Helper helper;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(foo, Sum(_, _))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(Invoke(CalculateSum));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(foo, ComplexJob(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(Invoke(&amp;amp;helper, &amp;amp;Helper::ComplexJob));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;foo.Sum(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Invokes CalculateSum(5, 6).&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;foo.ComplexJob(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Invokes helper.ComplexJob(10);&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mock non-virtual&amp;#x51FD;&amp;#x6570;&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// A simple packet stream class. None of its members is virtual.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; ConcretePacketStream &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;AppendPacket&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(Packet* new_packet)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt; Packet* &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;GetPacket&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;size_t&lt;/span&gt; packet_number)&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt; NumberOfPackets() &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// A mock packet stream class. It inherits from no other, but defines&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// GetPacket() and NumberOfPackets().&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockPacketStream &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        MOCK_CONST_METHOD1(GetPacket, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt; Packet*(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt; packet_number));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        MOCK_CONST_METHOD0(NumberOfPackets, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketStream&amp;gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;CreateConnection&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(PacketStream* stream)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketStream&amp;gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketReader &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;ReadPackets&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(PacketStream* stream, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;size_t&lt;/span&gt; packet_num)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;MockPacketStream mock_stream;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mock_stream, ...)...;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;.. &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;set&lt;/span&gt; more expectations on mock_stream ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;PacketReader&amp;lt;MockPacketStream&amp;gt; reader(&amp;amp;mock_stream);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;... exercise reader ...&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E3A;&amp;#x4EC0;&amp;#x4E48;&amp;#x8981;&amp;#x8FD9;&amp;#x4E48;&amp;#x505A;&amp;#xFF1F; &lt;br&gt;&amp;#x56E0;&amp;#x4E3A;&amp;#x53EA;&amp;#x80FD;&amp;#x8FD9;&amp;#x4E48;&amp;#x505A;&amp;#x3002;&amp;#x666E;&amp;#x901A;&amp;#x7684;mock&amp;#xFF0C;&amp;#x8981;&amp;#x901A;&amp;#x8FC7;&amp;#x7EE7;&amp;#x627F;&amp;#x88AB;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7C7B;&amp;#xFF0C;&amp;#x5E76;&amp;#x91CD;&amp;#x5199;virtual&amp;#x51FD;&amp;#x6570;&amp;#x6765;&amp;#x5B9E;&amp;#x73B0;&amp;#x3002;&amp;#x800C;&amp;#x4E0A;&amp;#x9762;&amp;#x7684;ConcretePacketStream&amp;#x548C;MockPacketStream&amp;#x5E76;&amp;#x4EFB;&amp;#x4F55;&amp;#x6CA1;&amp;#x6709;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;&amp;#x8BF4;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F20;&amp;#x5165;&amp;#x540E;&amp;#x8005;&amp;#x7684;&amp;#x6307;&amp;#x9488;&amp;#xFF0C;&amp;#x4E0D;&amp;#x7528;reinterpret_cast&amp;#x662F;&amp;#x4E0D;&amp;#x80FD;&amp;#x8F6C;&amp;#x6210;&amp;#x524D;&amp;#x8005;&amp;#x7684;&amp;#x6307;&amp;#x9488;&amp;#x7684;&amp;#x3002; &lt;br&gt;&amp;#x6240;&amp;#x4EE5;&amp;#x60F3;&amp;#x4E00;&amp;#x4E2A;&amp;#x53D8;&amp;#x901A;&amp;#x7684;&amp;#x529E;&amp;#x6CD5;&amp;#xFF0C;&amp;#x7528;&amp;#x6A21;&amp;#x677F;&amp;#x7C7B;&amp;#x6765;&amp;#x5B9A;&amp;#x4E49;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;&amp;#xFF0C;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#x4F20;&amp;#x5165;mock&amp;#x7C7B;&amp;#xFF0C;&amp;#x5728;&amp;#x751F;&amp;#x4EA7;&amp;#x65F6;&amp;#xFF0C;&amp;#x4F20;&amp;#x5165;&amp;#x771F;&amp;#x5B9E;&amp;#x7C7B;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mocking Side Effects&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mutator, MutateInt(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(DoAll(SetArgPointee&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;), Return(true)));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mutator, Mutate(NotNull(), &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(SetArrayArgument&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(values, values + &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7B2C;&amp;#x4E00;&amp;#x4E2A;&amp;#x5C06;MutateInt&amp;#x7B2C;&amp;#x4E00;&amp;#x4E2A;&amp;#x53C2;&amp;#x6570;&amp;#x6307;&amp;#x9488;&amp;#x6307;&amp;#x5411;&amp;#x7684;int&amp;#xFF0C;&amp;#x8BBE;&amp;#x4E3A;5&amp;#xFF0C;&amp;#x5E76;&amp;#x8FD4;&amp;#x56DE;true&amp;#x3002; &lt;br&gt;&amp;#x7B2C;&amp;#x4E8C;&amp;#x4E2A;&amp;#x5C06;values&amp;#x6570;&amp;#x7EC4;&amp;#x7684;[0,5)&amp;#x62F7;&amp;#x8D1D;&amp;#x5230;&amp;#x53C2;&amp;#x6570;1&amp;#x6307;&amp;#x5411;&amp;#x7684;&amp;#x5730;&amp;#x5740;&amp;#x3002; &lt;br&gt;&amp;#x5982;&amp;#x679C;&amp;#x4ECD;&amp;#x9700;&amp;#x8981;&amp;#x8FD4;&amp;#x56DE;&amp;#xFF0C;&amp;#x5219;&amp;#x7528;DoAll&amp;#xFF0C;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mutator, MutateInt(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;      .WillOnce(DoAll(SetArgPointee&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;),&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;                      &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;true&lt;/span&gt;)));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Selecting an Action&amp;#x2019;s Arguments&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Invoke;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;MyIsVisibleInQuadrant1&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; visible, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;string&lt;/span&gt;&amp;amp; name, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; y,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;map&lt;/span&gt;&amp;lt;pair&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;&amp;gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt;&amp;gt;&amp;amp; weight,&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt; min_weight, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt; max_wight) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; IsVisibleInQuadrant1(visible, x, y);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;.&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;..&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    .WillOnce(Invoke(MyIsVisibleInQuadrant1)); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Now it works.&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5B9A;&amp;#x4E49;&amp;#x81EA;&amp;#x5DF1;&amp;#x7684;adaptor MyIsVisibleInQuadrant1&amp;#xFF0C;&amp;#x6216;&amp;#x8005;&amp;#x7528;gmock&amp;#x63D0;&amp;#x4F9B;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x4F18;&amp;#x96C5;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:Invoke;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:WithArgs;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;EXPECT_CALL(mock, Foo(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;.WillOnce(WithArgs&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;3&lt;/span&gt;&amp;gt;(Invoke(IsVisibleInQuadrant1)));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// No need to define your own adaptor.&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mocking Private or Protected Methods&lt;/h4&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Transform&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;Gadget* g&lt;/span&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;protected&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Resume&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;private&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;GetTimeOut&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;MockFoo&lt;/span&gt; : &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        MOCK_METHOD1(Transform, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bool&lt;/span&gt;(Gadget* g));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// The following must be in the public section, even though the&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// methods are protected or private in the base class.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        MOCK_METHOD0(Resume, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;        MOCK_METHOD0(GetTimeOut, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;C++ allows a subclass to specify a different access level than the base class on a virtual function.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Misc&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Keep in mind that one doesn&amp;#x2019;t have to verify more than one property in one test. In fact, it&amp;#x2019;s a good style to verify only one &lt;br&gt;thing in one test. If you do that, a bug will likely break only one or two tests instead of dozens&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;When it&amp;#x2019;s being destroyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, &lt;br&gt;and will generate Google Test failures if not. &lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Currently these are only platforms that support the pthreads library (this includes Linux and Mac). &lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x52A0;&amp;#x4E0A;&amp;#x547D;&amp;#x4EE4;&amp;#x884C;&amp;#x53C2;&amp;#x6570;&amp;#x2013;gmock_verbose=info&amp;#x53EF;&amp;#x4EE5;&amp;#x663E;&amp;#x793A;&amp;#x6240;&amp;#x6709;EXPECT_CALL&amp;#x7684;&amp;#x5177;&amp;#x4F53;&amp;#x8C03;&amp;#x7528;&amp;#x60C5;&amp;#x51B5;&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;Some useful tips in gtest&lt;/h2&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Selecting Tests&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;If you set the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;GTEST_FILTER&lt;/strong&gt; environment variable or the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x2013;gtest_filter&lt;/strong&gt; flag to a filter string, Google Test will only run the tests whose full names (in the form of TestCaseName.TestName) match the filter. &lt;br&gt;The format of a filter is a &amp;#x2018;:&amp;#x2019;-separated list of wildcard patterns (called the positive patterns) optionally followed by a &amp;#x2018;-&amp;#x2019; and another &amp;#x2018;:&amp;#x2019;-separated pattern list (called the negative patterns).&lt;/p&gt;&lt;/blockquote&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test Has no flag, and thus runs all its tests.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=* Also runs everything, due to the single match-everything * value.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=FooTest.* Runs everything in test case FooTest.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=&lt;em style=&#34;line-height: 1.6;&#34;&gt;Null&lt;/em&gt;:&lt;em style=&#34;line-height: 1.6;&#34;&gt;Constructor&lt;/em&gt; Runs any test whose full name contains either &amp;#x201C;Null&amp;#x201D; or &amp;#x201C;Constructor&amp;#x201D;.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=-&lt;em style=&#34;line-height: 1.6;&#34;&gt;DeathTest.&lt;/em&gt; Runs all non-death tests.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=FooTest.*-FooTest.Bar Runs everything in test case FooTest except FooTest.Bar&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Temporarily Disabling Tests&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Tests that Foo does Abc.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;TEST(FooTest, DISABLED_DoesAbc) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; DISABLED_BarTest : public ::testing::Test &amp;#123; ... &amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Tests that Bar does Xyz.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6;&#34;&gt;TEST_F(DISABLED_BarTest, DoesXyz) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Temporarily Enabling Disabled Tests&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;just invoke the test program with the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x2013;gtest_also_run_disabled_tests&lt;/strong&gt; flag or set the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;GTEST_ALSO_RUN_DISABLED_TESTS&lt;/strong&gt; environment variable to a value other than 0.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Repeating the Tests&lt;/h3&gt;&lt;table style=&#34;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&#34;&gt;&lt;thead style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=1000&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat foo_test 1000 times and don&amp;#x2019;t stop at failures.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=-1&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;A negative count means repeating forever.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=1000 &amp;#x2013;gtest_break_on_failure&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat foo_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;$ foo_test &amp;#x2013;gtest_repeat=1000 &amp;#x2013;gtest_filter=FooBar&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat the tests whose name matches the filter 1000 times.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;center style=&#34;display:none&#34;&gt;%23%20C/C++%20Test%20Framework%20-%20Google%20Test%20%26%20Google%20Mock%0A@%28myblog%29%5BTDD%2C%20gtest%2C%20gmock%5D%0A%0AGoogle%20Test%uFF0CGoogle%20Mock%u4EE5%u4E0B%u7B80%u79F0gtest%uFF0Cgmock%u3002%0A%u5728%u63A5%u89E6gtest%uFF0Cgmock%u4E4B%u524D%uFF0C%u6D4B%u8BD5C/C++%20code%u4F7F%u7528%5BUnitTest++%5D%28https%3A//github.com/unittest-cpp/unittest-cpp%29%u3002%u8FD9%u662F%u4E00%u4E2A%u5F88%u7B80%u6D01%u7684%u6846%u67B6%uFF0C%u4E0A%u624B%u5F88%u5FEB%u3002%u53C2%u770B%u53E6%u4E00%u7BC7%u535A%u6587%5BUnitTest++%u7B80%u4ECB%5D%28https%3A//zhougy0717.github.io/2016/02/29/UnitTest++%25E7%25AE%2580%25E4%25BB%258B/%29%u3002%u6D4B%u8BD5%u76F8%u5173%u7684%u529F%u80FD%u591F%u7528%uFF0C%u4F46%u662F%u6CA1%u6709mock%u5E93%u3002%u8FD9%u5E26%u6765%u7684%u95EE%u9898%u662F%uFF1A%0A1.%20%u6D4B%u8BD5%u9057%u7559%u4EE3%u7801%u7684%u65F6%u5019%uFF0C%u9700%u8981%u81EA%u884Cfake%u76F8%u5173%u4EE3%u7801%u3002%u8FD9%u4E2A%u5728%u9057%u7559%u7CFB%u7EDF%u5F88%u5E9E%u5927%u65F6%uFF0C%u8981%u9887%u8D39%u5FC3%u529B%u3002%u800C%u4E14%u8FC7%u591A%u6D89%u53CA%u7EC6%u8282%uFF0C%u5BFC%u81F4%u6D4B%u8BD5%u6781%u4E0D%u7A33%u5B9A%uFF0C%u7CFB%u7EDF%u4EE3%u7801%u4EFB%u610F%u7684%u6F14%u8FDB%uFF0C%u90FD%u4F1A%u5BFC%u81F4%u5927%u5806%u7684%u6D4B%u8BD5%u5931%u8D25%uFF0C%u751A%u81F3%u6D4B%u8BD5%u65E0%u6CD5%u8FDB%u884C%u3002%0A2.%20%u6D4B%u8BD5case%u4E4B%u95F4%u65E0%u6CD5%u5F88%u597D%u7684%u89E3%u8026%u3002%u7ED3%u679C%u540C%u6837%u662F%u6D4B%u8BD5%u4E0D%u591F%u7A33%u5B9A%u3002%u672F%u8BED%u662F%u6D4B%u8BD5%u4EE3%u7801%u5F88%u201C%u8106%u5F31%u201D%u3002%0A%0AJava%uFF0CPython%uFF0CJavaScript%u90FD%u6709%u81EA%u5DF1%u7684mock%u5E93%u3002Python%u7684Mock%u7C7B%uFF0CJava%u7684Mockito/PowerMock%uFF0CJavaScript%u7684Sinon%u3002%u4E8E%u662F%uFF0C%u5728%u7F51%u4E0A%u641C%u7D22%u4E86%u4E00%u4E0BC/C++%u7684Mock%u5E93%uFF0C%u4E8E%u662F%u770B%u5230%u4E86gtest%uFF0Cgmock%u3002%u7136%u540E%u5C31%u6709%u4E86%u8FD9%u4E00%u7BC7%u3002%0A%0A%23%23%20%u7B80%u4ECB%0A%u4E0D%u7528%u53BB%u7F51%u4E0A%u8D39%u5FC3%u627E%u6559%u7A0B%uFF0C%u4E24%u4E2A%u9879%u76EE%u7684%u6587%u6863%u90FD%u975E%u5E38%u68D2%u3002%u5165%u53E3%u7EDF%u4E00%u5728%5Bgtest%20GitHub%u9879%u76EE%u4E3B%u9875%5D%28https%3A//github.com/google/googletest%29%u4E0A%u3002%u800C%u4E14%u8BE5%u6587%u6863%u4E0D%u4EC5%u5F88%u597D%u7684%u4ECB%u7ECD%u4E86gtest%uFF0Cgmock%u7684%u7528%u6CD5%uFF0C%u5176%u4E2D%u8FD8%u6D89%u53CA%u4E86%u5F88%u591ATDD%u6216%u8005UnitTest%u7684%u771F%u77E5%u707C%u89C1%uFF0C%u5F88%u503C%u5F97%u8BFB%u4E00%u8BFB%u3002%0A%u8981%u4F7F%u7528gtest%u975E%u5E38%u7B80%u5355%uFF1A%u7F16%u8BD1%u51FAgtest%uFF0Cgmock%uFF0C%u518D%u94FE%u5165%u4F60%u7684%u6D4B%u8BD5%u7A0B%u5E8F%u3002%0A%0A%23%23%23%20%u7F16%u8BD1gtest/gmock%0Agtest%uFF0Cgmock%u5747%u7528cmake%u6765%u7BA1%u7406%u8DE8%u5E73%u53F0%uFF0C%u5148%u7528cmake%u6765%u751F%u6210Makefile%u3002%u7528%u547D%u4EE4%60cmake%20-G%20%22Unix%20Makefiles%22%20/path/to/CMakeList.txt%60%0A%0A%23%23%23%20Makefile%0A%u7136%u540E%u6309%u7167%u4E0B%u9762%u7F16%u5199Makefile%u3002%u6CE8%u610Fgmock_main%u662F%u4E00%u4E2Amain%u51FD%u6570%u6765%u8C03%u7528%u6240%u6709%u7684test%20case%uFF0C%u7701%u5F97%u81EA%u5DF1%u5199main%u51FD%u6570%u4E86%u3002%0A%60%60%60%0ACC%20%3D%20gcc%0ACPP%20%3D%20g++%0ALINK%20%3D%20g++%0ACFLAGS%20%3D%20-g%20-Wall%20-Werror%20-Wextra%20-std%3Dgnu99%0ACPPFLAGS%20%3D%20-g%20-Wall%20-Werror%20-Wextra%0ALIBS%20%3D%20-L./lib%20-lgtest%20-lgmock%20-lgmock_main%20-lpthread%0A%0AC__SOURCES%20%3D%20%24%28wildcard%20*.c%29%0ACPPSOURCES%20%3D%20%24%28wildcard%20*.cpp%29%0AOBJECTS%20%3D%20%24%28patsubst%20%25.c%2C%20%25.o%2C%20%24%28C__SOURCES%29%29%20%24%28patsubst%20%25.cpp%2C%20%25.o%2C%20%24%28CPPSOURCES%29%29%0ATARGET%20%3D%20test_exe%0A%0Afirst%3A%20all%0A%0A%25.o%3A%20%25.c%0A%20%20%20%20%24%28CC%29%20%24%28INCLUDES%29%20-c%20%24%28CFLAGS%29%20-o%20%24@%20%24%3C%0A%0A%25.o%3A%20%25.cpp%0A%20%20%20%20%24%28CPP%29%20%24%28INCLUDES%29%20-c%20%24%28CPPFLAGS%29%20-o%20%24@%20%24%3C%0A%0Aall%3A%20%24%28TARGET%29%0A%0A%24%28TARGET%29%3A%20%24%28OBJECTS%29%0A%20%20%20%20%24%28LINK%29%20%24%28CPPFLAGS%29%20%24%28LIBS%29%20-o%20%24%28TARGET%29%20%24%28OBJECTS%29%0A%0A.PHONY%20%3A%20clean%0A%0Aclean%3A%0A%20%20%20%20rm%20-f%20%24%28TARGET%29%20%24%28OBJECTS%29%0A%60%60%60%0A%0A%23%23%23%20Terms%0A%7C%20Meaning%20%20%20%20%7C%20Google%20Test%20Term%20%7C%20ISTQB%20Term%20%7C%0A%7C%20%3A--------%3A%20%7C%20%3A--------------%3A%20%7C%20%3A--------%3A%20%7C%0A%7C%20Exercise%20a%20particular%20program%20path%20with%20specific%20input%20values%20and%20verify%20the%20results%20%7C%20TEST%28%29%20%7C%20Test%20Case%0A%7CA%20set%20of%20several%20tests%20related%20to%20one%20component%20%7C%20Test%20Case%20%7C%20Test%20Suite%0A%0A%23%23%23%20Test%0A%60%60%60%0A%23include%20%22gtest/gtest.h%22%0A%23include%20%22gmock/gmock.h%22%0A%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0Ausing%20%3A%3Atesting%3A%3ATest%3B%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AAtLeast%3B%0A%0ATEST%28TestCaseName%2C%20should_this_test_do%29%0A%7B%0A%09...%0A%20%20%20%20EXPECT_STREQ%28%22%7B%7D%22%2C%20str%29%3B%0A%7D%0A%60%60%60%0A%u4E2D%u95F4%u7684%u90A3%u5806namespace%u90FD%u662Fgtest/gmock%u5E93%u91CC%u5B9A%u4E49%u7684matcher%u5B8F%u6216%u8005%u5404%u79CD%u6709%u7528%u7684%u5B8F%u3002%0A%0A%23%23%23%20Test%20Fixture%0A%u5728%u6D4B%u8BD5%u6709%u91CD%u590D%u7684%u65F6%u5019%uFF0C%u5C31%u8981%u7528%u5230Test%20Fixture%u4E86%uFF0C%u4E5F%u5C31%u662FsetUp%20/%20tearDown%u3002%0A%60%60%60%0Aclass%20QueueTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%0A%20protected%3A%0A%20%20virtual%20void%20SetUp%28%29%20%7B%0A%20%20%20%20q1_.Enqueue%281%29%3B%0A%20%20%20%20q2_.Enqueue%282%29%3B%0A%20%20%20%20q2_.Enqueue%283%29%3B%0A%20%20%7D%0A%0A%20%20//%20virtual%20void%20TearDown%28%29%20%7B%7D%0A%0A%20%20Queue%3Cint%3E%20q0_%3B%0A%20%20Queue%3Cint%3E%20q1_%3B%0A%20%20Queue%3Cint%3E%20q2_%3B%0A%7D%3B%0A%0ATEST_F%28QueueTest%2C%20IsEmptyInitially%29%20%7B%0A%20%20EXPECT_EQ%280%2C%20q0_.size%28%29%29%3B%0A%7D%0A%0ATEST_F%28QueueTest%2C%20DequeueWorks%29%20%7B%0A%20%20int*%20n%20%3D%20q0_.Dequeue%28%29%3B%0A%20%20EXPECT_EQ%28NULL%2C%20n%29%3B%0A%0A%20%20n%20%3D%20q1_.Dequeue%28%29%3B%0A%20%20ASSERT_TRUE%28n%20%21%3D%20NULL%29%3B%0A%20%20EXPECT_EQ%281%2C%20*n%29%3B%0A%20%20EXPECT_EQ%280%2C%20q1_.size%28%29%29%3B%0A%20%20delete%20n%3B%0A%0A%20%20n%20%3D%20q2_.Dequeue%28%29%3B%0A%20%20ASSERT_TRUE%28n%20%21%3D%20NULL%29%3B%0A%20%20EXPECT_EQ%282%2C%20*n%29%3B%0A%20%20EXPECT_EQ%281%2C%20q2_.size%28%29%29%3B%0A%20%20delete%20n%3B%0A%7D%0A%60%60%60%0A%23%23%23%23%20constructor/destructor%20vs.%20SetUp/TearDown%0A%3EWhen%20you%20need%20to%20write%20per-test%20set-up%20and%20tear-down%20logic%2C%20you%20have%20the%20choice%20between%20using%20the%20test%20fixture%20constructor/destructor%20or%20SetUp%28%29/TearDown%28%29.%20The%20former%20is%20usually%20preferred%2C%20as%20it%20has%20the%20following%20benefits%3A%0A%0A%3E-%20By%20initializing%20a%20member%20variable%20in%20the%20constructor%2C%20we%20have%20the%20option%20to%20make%20it%20const%2C%20which%20helps%20prevent%20accidental%20changes%20to%20its%20value%20and%20makes%20the%20tests%20more%20obviously%20correct.%0A-%20**In%20case%20we%20need%20to%20subclass%20the%20test%20fixture%20class%2C%20the%20subclass%27%20constructor%20is%20guaranteed%20to%20call%20the%20base%20class%27%20constructor%20first%2C%20and%20the%20subclass%27%20destructor%20is%20guaranteed%20to%20call%20the%20base%20class%27%20destructor%20afterward.%20**With%20SetUp%28%29/TearDown%28%29%2C%20a%20subclass%20may%20make%20the%20mistake%20of%20forgetting%20to%20call%20the%20base%20class%27%20SetUp%28%29/TearDown%28%29%20or%20call%20them%20at%20the%20wrong%20moment.%0A%0A%3E%20Benefit%20for%20using%20SetUp/TearDown%3A%0A%0A%3E-%20If%20the%20tear-down%20operation%20could%20throw%20an%20exception%2C%20you%20must%20use%20TearDown%28%29%20as%20opposed%20to%20the%20destructor%2C%20as%20throwing%20in%20a%20destructor%20leads%20to%20undefined%20behavior%20and%20usually%20will%20kill%20your%20program%20right%20away.%20Note%20that%20many%20standard%20libraries%20%28like%20STL%29%20may%20throw%20when%20exceptions%20are%20enabled%20in%20the%20compiler.%20Therefore%20you%20should%20prefer%20TearDown%28%29%20if%20you%20want%20to%20write%20portable%20tests%20that%20work%20with%20or%20without%20exceptions.%0A-%20The%20assertion%20macros%20throw%20an%20exception%20when%20flag%20--gtest_throw_on_failure%20is%20specified.%20Therefore%2C%20you%20shouldn%27t%20use%20Google%20Test%20assertions%20in%20a%20destructor%20if%20you%20plan%20to%20run%20your%20tests%20with%20this%20flag.%0A-%20In%20a%20constructor%20or%20destructor%2C%20you%20cannot%20make%20a%20virtual%20function%20call%20on%20this%20object.%20%28You%20can%20call%20a%20method%20declared%20as%20virtual%2C%20but%20it%20will%20be%20statically%20bound.%29%20Therefore%2C%20if%20you%20need%20to%20call%20a%20method%20that%20will%20be%20overriden%20in%20a%20derived%20class%2C%20you%20have%20to%20use%20SetUp%28%29/TearDown%28%29.%0A%0A%u7B80%u8A00%u4E4B%uFF0C%u5728%u903B%u8F91%u4E0A%uFF0C%u8FD9%u4E24%u7EC4%u7684%u4F5C%u7528%u76F8%u540C%uFF0C%u90FD%u662F%u6BCF%u4E2A%u6D4B%u8BD5%u4E4B%u524D%u4E4B%u540E%u4F1A%u505A%u4E00%u4E9B%u5904%u7406%u5DE5%u4F5C%u3002Constructor/Destructor%u7684%u597D%u5904%u662F%u63D0%u4F9B%u4E86%u7EE7%u627F%u3002setUp/tearDown%u7684%u597D%u5904%u662F%u53EF%u4EE5%u5904%u7406exception%uFF0C%u8FD9%u662F%u4E0D%u80FD%u653E%u5728%u6790%u6784%u51FD%u6570%u91CC%u7684%u3002%0A%23%23%23%20SetUpTestCase%20/%20TearDownTestCase%0ATest%20Case%u7EA7%u522B%u7684SetUp/TearDown%0A%60%60%60%0Aclass%20FooTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%0A%20protected%3A%0A%20%20//%20Per-test-case%20set-up.%0A%20%20//%20Called%20before%20the%20first%20test%20in%20this%20test%20case.%0A%20%20//%20Can%20be%20omitted%20if%20not%20needed.%0A%20%20static%20void%20SetUpTestCase%28%29%20%7B%0A%20%20%20%20shared_resource_%20%3D%20new%20...%3B%0A%20%20%7D%0A%0A%20%20//%20Per-test-case%20tear-down.%0A%20%20//%20Called%20after%20the%20last%20test%20in%20this%20test%20case.%0A%20%20//%20Can%20be%20omitted%20if%20not%20needed.%0A%20%20static%20void%20TearDownTestCase%28%29%20%7B%0A%20%20%20%20delete%20shared_resource_%3B%0A%20%20%20%20shared_resource_%20%3D%20NULL%3B%0A%20%20%7D%0A%0A%20%20//%20You%20can%20define%20per-test%20set-up%20and%20tear-down%20logic%20as%20usual.%0A%20%20virtual%20void%20SetUp%28%29%20%7B%20...%20%7D%0A%20%20virtual%20void%20TearDown%28%29%20%7B%20...%20%7D%0A%0A%20%20//%20Some%20expensive%20resource%20shared%20by%20all%20tests.%0A%20%20static%20T*%20shared_resource_%3B%0A%7D%3B%0A%60%60%60%0A%23%23%23%20SetUp/TearDown%20Environment%20%0A%3E-%20First%2C%20you%20subclass%20the%20%3A%3Atesting%3A%3AEnvironment%20class%20to%20define%20a%20test%20environment%2C%20which%20knows%20how%20to%20set-up%20and%20tear-down%3A%0A%3E-%20Then%2C%20you%20register%20an%20instance%20of%20your%20environment%20class%20with%20Google%20Test%20by%20calling%20the%20%60%3A%3Atesting%3A%3AAddGlobalTestEnvironment%28%29%60%20function%3A%0A%3ENow%2C%20when%20RUN_ALL_TESTS%28%29%20is%20called%2C%20it%20first%20calls%20the%20SetUp%28%29%20method%20of%20the%20environment%20object%2C%20then%20runs%20the%20tests%20if%20there%20was%20no%20fatal%20failures%2C%20and%20finally%20calls%20TearDown%28%29%20of%20the%20environment%20object.%0A-%20It%27s%20OK%20to%20register%20multiple%20environment%20objects.%20In%20this%20case%2C%20their%20SetUp%28%29%20will%20be%20called%20in%20the%20order%20they%20are%20registered%2C%20and%20their%20TearDown%28%29%20will%20be%20called%20in%20the%20reverse%20order.%0A-%20Note%20that%20Google%20Test%20takes%20ownership%20of%20the%20registered%20environment%20objects.%20Therefore%20do%20not%20delete%20them%20by%20yourself.%0A%0A%60%60%60%0Aclass%20Environment%20%7B%0A%20public%3A%0A%20%20virtual%20%7EEnvironment%28%29%20%7B%7D%0A%20%20//%20Override%20this%20to%20define%20how%20to%20set%20up%20the%20environment.%0A%20%20virtual%20void%20SetUp%28%29%20%7B%7D%0A%20%20//%20Override%20this%20to%20define%20how%20to%20tear%20down%20the%20environment.%0A%20%20virtual%20void%20TearDown%28%29%20%7B%7D%0A%7D%3B%0A%0AEnvironment*%20AddGlobalTestEnvironment%28Environment*%20env%29%3B%0A%60%60%60%0A%23%23%23%20%u65AD%u8A00%0A%u6709%u4E24%u79CD%u65AD%u8A00EXPECT%5C_xxx%u548CASSERT%5C_xxx%u3002%u524D%u8005%u4F1A%u8BA9%u6D4B%u8BD5%u7EC8%u6B62%uFF0C%u540E%u8005%u4E0D%u4F1A%uFF0C%u53EA%u4F1A%u8BA9%u6D4B%u8BD5fail%u3002%0A%0A%0A%23%23%20gmock%0A%u4E4B%u6240%u4EE5%u8981%u5207%u5230gtest%uFF0C%u552F%u4E00%u7684%u539F%u56E0%u5C31%u662Fgmock%uFF0C%u6240%u4EE5%u8981%u4E13%u5F00%u4E00%u7AE0%u91CD%u70B9%u4ECB%u7ECD%u4E00%u4E0B%u3002%u6240%u6709%u5185%u5BB9%u5747%u6765%u81EA%u4E8E%u5B98%u65B9%u6587%u6863%u3002%u5185%u5BB9%u6DF1%u5EA6%u7531%u6D45%u5165%u6DF1%uFF0C%u4F9D%u6B21%u5982%u4E0B%uFF1A%0A-%20%5BGoogle%20Mock%20for%20Dummies%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md%29%0A-%20%5BCookBook%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/CookBook.md%29%0A%0A%u6700%u540E%u8FD8%u6709%u53C2%u8003%u624B%u518C%3A%0A-%20%5BCheat%20Sheet%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/CheatSheet.md%29%0A%0A%23%23%23%20%u7B80%u4ECB%0A%3EGoogle%20C++%20Mocking%20Framework%20%28or%20Google%20Mock%20for%20short%29%20is%20a%20library%20%28sometimes%20we%20also%20call%20it%20a%20%22framework%22%20to%20make%20it%20sound%20cool%29%20for%20creating%20mock%20classes%20and%20using%20them.%20It%20does%20to%20C++%20what%20jMock%20and%20EasyMock%20do%20to%20Java.%0A%0A%23%23%23%23%20%u4F55%u4E3AMock%uFF1F%0A%3E**Mocks**%20are%20objects%20pre-programmed%20with%20expectations%2C%20which%20form%20a%20specification%20of%20the%20calls%20they%20are%20expected%20to%20receive.%0A%0A%u76F8%u5E94%u7684%u8FD8%u6709Fake%u548CStub%0A%3E**Fake**%20objects%20have%20working%20implementations%2C%20but%20usually%20take%20some%20shortcut%20%28perhaps%20to%20make%20the%20operations%20less%20expensive%29%2C%20which%20makes%20them%20not%20suitable%20for%20production.%20An%20in-memory%20file%20system%20would%20be%20an%20example%20of%20a%20fake.%0A%0Agmock%u7684%u6587%u6863%u91CC%u53EA%u63D0%u5230%u4E86Fake%uFF0C%u4ECEMartin%20Fowler%u7684%u6587%u7AE0%5BMocks%20Aren%27t%20Stubs%5D%28https%3A//martinfowler.com/articles/mocksArentStubs.html%29%u4E2D%u6458%u5F55%u5982%u4E0B%3A%0A%3E**Stubs**%20provide%20canned%20answers%20to%20calls%20made%20during%20the%20test%2C%20usually%20not%20responding%20at%20all%20to%20anything%20outside%20what%27s%20programmed%20in%20for%20the%20test.%0A%0A%u4E09%u8005%u4F5C%u7528%u76F8%u540C%uFF0C%u90FD%u662F%u6A21%u62DF%u7CFB%u7EDF%u5176%u4ED6%u90E8%u5206%u7684%u529F%u80FD%uFF0C%u8FBE%u5230%u4EE3%u7801%u9694%u79BB%u7684%u6548%u679C%uFF0C%u65B9%u4FBF%u6D4B%u8BD5%u3002%u4F46%u662FMock%u7684%u7279%u70B9%u662F%u66F4OO%u5316%uFF0C%u4E5F%u7B26%u5408TDD%u6216%u8005BDD%u7684%u601D%u60F3%u2014%u2014%u9488%u5BF9%u4E00%u4E2Aobject%u8BBE%u7F6E%u671F%u5F85%uFF0C%u518D%u5BF9%u9F50verify%u3002%0A%0AMocks%20vs.%20Stubs%20-%20from%20Martin%20Fowler%0A%3EIn%20order%20to%20use%20state%20verification%20on%20the%20stub%2C%20I%20need%20to%20make%20some%20extra%20methods%20on%20the%20stub%20to%20help%20with%20verification.%20As%20a%20result%20the%20stub%20implements%20MailService%20but%20adds%20extra%20test%20methods.%0A%0A%3EMock%20objects%20always%20use%20behavior%20verification%2C%20a%20stub%20can%20go%20either%20way.%20Meszaros%20refers%20to%20stubs%20that%20use%20behavior%20verification%20as%20a%20Test%20Spy.%20The%20difference%20is%20in%20how%20exactly%20the%20double%20runs%20and%20verifies%20and%20I%27ll%20leave%20that%20for%20you%20to%20explore%20on%20your%20own.%0A%0A%23%23%23%23%20Getting%20Started%0AClass%20to%20Mock%0A%60%60%60%0Aclass%20Turtle%20%7B%0A%20%20...%0A%20%20virtual%20%7ETurtle%28%29%20%7B%7D%0A%20%20virtual%20void%20PenUp%28%29%20%3D%200%3B%0A%20%20virtual%20void%20PenDown%28%29%20%3D%200%3B%0A%20%20virtual%20void%20Forward%28int%20distance%29%20%3D%200%3B%0A%7D%3B%0A%60%60%60%0AMock%20class%0A%60%60%60%0A%23include%20%22gmock/gmock.h%22%20%20//%20Brings%20in%20Google%20Mock.%0Aclass%20MockTurtle%20%3A%20public%20Turtle%20%7B%0A%20public%3A%0A%20%20...%0A%20%20MOCK_METHOD0%28PenUp%2C%20void%28%29%29%3B%0A%20%20MOCK_METHOD0%28PenDown%2C%20void%28%29%29%3B%0A%20%20MOCK_METHOD1%28Forward%2C%20void%28int%20distance%29%29%3B%0A%7D%3B%0A%60%60%60%0A%u9488%u5BF9%u5F85Mock%u7684Turtle%20class%u8981%u6CE8%u610F%u7684%u662F%3A%0A%3ENote%20that%20the%20**destructor%20of%20Turtle%20must%20be%20virtual**%2C%20as%20is%20the%20case%20for%20all%20classes%20you%20intend%20to%20inherit%20from%20-%20otherwise%20the%20destructor%20of%20the%20derived%20class%20will%20not%20be%20called%20when%20you%20delete%20an%20object%20through%20a%20base%20pointer%2C%20and%20you%27ll%20get%20corrupted%20program%20states%20like%20memory%20leaks.%0A%0AUse%20it%0A%60%60%60%0A%23include%20%22path/to/mock-turtle.h%22%0A%23include%20%22gmock/gmock.h%22%0A%23include%20%22gtest/gtest.h%22%0Ausing%20%3A%3Atesting%3A%3AAtLeast%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%231%0A%0ATEST%28PainterTest%2C%20CanDrawSomething%29%20%7B%0A%20%20MockTurtle%20turtle%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%232%0A%20%20EXPECT_CALL%28turtle%2C%20PenDown%28%29%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%233%0A%20%20%20%20%20%20.Times%28AtLeast%281%29%29%3B%0A%0A%20%20Painter%20painter%28%26turtle%29%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%234%0A%0A%20%20EXPECT_TRUE%28painter.DrawCircle%280%2C%200%2C%2010%29%29%3B%0A%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%235%0A%0Aint%20main%28int%20argc%2C%20char**%20argv%29%20%7B%0A%20%20//%20The%20following%20line%20must%20be%20executed%20to%20initialize%20Google%20Mock%0A%20%20//%20%28and%20Google%20Test%29%20before%20running%20the%20tests.%0A%20%20%3A%3Atesting%3A%3AInitGoogleMock%28%26argc%2C%20argv%29%3B%0A%20%20return%20RUN_ALL_TESTS%28%29%3B%0A%7D%0A%60%60%60%0A%u5982%u679C%u4F60%u613F%u610F%u7684%u8BDD%uFF0C%u53EF%u4EE5%u81EA%u5DF1%u5199main%uFF0C%u5982%u679C%u4F60%u60F3%u5077%u61D2%uFF0C%u8BB0%u5F97%u5728Makefile%u91CClink%20gmock_main%u3002%0A%u6309Google%u7684%u8BF4%u6CD5%uFF0Cgmock%u4E5F%u53EF%u4EE5%u548C%u5176%u4ED6%u6D4B%u8BD5%u6846%u67B6%u517C%u5BB9%uFF0C%u4F46%u603B%u611F%u89C9%u633A%u60AC%u7684%u3002%0A%0A%23%23%23%23%20%u4E00%u4E9B%u6709%u7528%u7684%u5DE5%u5177%0A**Marcher**%0A%60EXPECT_CALL%28turtle%2C%20Forward%28_%29%29%3B%60%0A%26nbsp%3B%26nbsp%3B%26nbsp%3B%26nbsp%3B%20%u4EE5%u4EFB%u610F%u53C2%u6570%u8C03%u7528Forward%0A%60EXPECT_CALL%28turtle%2C%20Forward%28Ge%28100%29%29%29%3B%60%0A%26nbsp%3B%26nbsp%3B%26nbsp%3B%26nbsp%3B%20%u4EE5%u5927%u4E8E100%u7684%u6574%u6570%u8C03%u7528Forward%0A%09%0A**Cardinalities%3A%20How%20Many%20Times%20Will%20It%20Be%20Called%3F**%0A%3E-%20If%20neither%20WillOnce%28%29%20nor%20WillRepeatedly%28%29%20is%20in%20the%20EXPECT_CALL%28%29%2C%20the%20inferred%20cardinality%20is%20Times%281%29.%0A-%20If%20there%20are%20n%20WillOnce%28%29%27s%20but%20no%20WillRepeatedly%28%29%2C%20where%20n%20%3E%3D%201%2C%20the%20cardinality%20is%20Times%28n%29.%0A-%20If%20there%20are%20n%20WillOnce%28%29%27s%20and%20one%20WillRepeatedly%28%29%2C%20where%20n%20%3E%3D%200%2C%20the%20cardinality%20is%20Times%28AtLeast%28n%29%29.%0A%0A%60%60%60%0AEXPECT_CALL%28mockObj%2C%20func%28%29%29%0A%09.Times%28AtLeast%281%29%29%0A%09.WillOnce%28Return%28123%29%29%0A%09.WillRepeatedly%28Return%28456%29%29%0A%60%60%60%0A%u4E0A%u9762%u8FD9%u6BB5%u4EE3%u7801%u8981%u6C42func%u51FD%u6570%u81F3%u5C11%u8FD0%u884C%u4E00%u6B21%uFF0C%u7B2C%u4E00%u6B21%u8FD4%u56DE123%uFF0C%u4E4B%u540E%u6BCF%u6B21%u8FD4%u56DE456%u3002%0A%0A%3E**Important%20note**%3A%20The%20EXPECT_CALL%28%29%20statement%20evaluates%20the%20action%20clause%20only%20once%2C%20even%20though%20the%20action%20may%20be%20performed%20many%20times.%20Therefore%20you%20must%20be%20careful%20about%20side%20effects.%20The%20following%20may%20not%20do%20what%20you%20want%3A%0A%0A%60%60%60%0Aint%20n%20%3D%20100%3B%0AEXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A.Times%284%29%0A.WillRepeatedly%28Return%28n++%29%29%3B%0A%60%60%60%0A%u56E0%u4E3AReturn%u662F%u5B8F%uFF0C%u6240%u4EE5%u53EA%u4F1A%u66FF%u6362%u4E00%u6B21%uFF0C%u6240%u4EE5%u4E0D%u7BA1GetX%u8C03%u7528%u51E0%u6B21%uFF0C%u8FD4%u56DE%u90FD%u662F101%uFF0C%u800C%u4E0D%u662F101%2C102%2C103%2C...%0A%0A**All%20Expectations%20Are%20Sticky**%0A%u6240%u8C13%u7684sticky%u5C31%u662FEXPECT%5C_CALL%u603B%u662F%u751F%u6548%u7684%uFF0C%u9664%u975E%u4F60%u663E%u793A%u7684%u5C06%u5176%u5931%u6548%u3002%u5982%u4E0B%uFF0C%u6240%u6709%u7684EXPECT%5C_CALL%u90FD%u4F1A%u751F%u6548%uFF0C%u90A3%u4E48%u6700%u540E%u4E00%u4E2A%u4F1A%u8986%u76D6%u524D%u9762%u6240%u6709%u7684%uFF0C%u4E5F%u5C31%u662FGetX%u603B%u4F1A%u8FD4%u56DE10%u3002%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0Afor%20%28int%20i%20%3D%20n%3B%20i%20%3E%200%3B%20i--%29%20%7B%0A%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20%20%20.WillOnce%28Return%2810*i%29%29%3B%0A%7D%0A%60%60%60%0A%u5982%u679C%u5E0C%u671B%u4ED6%u8FD4%u56DE%uFF0C30%2C20%2C10%uFF0C...%uFF0C%u5E94%u8BE5%u8FD9%u4E48%u5199%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0Afor%20%28int%20i%20%3D%20n%3B%20i%20%3E%200%3B%20i--%29%20%7B%0A%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20.WillOnce%28Return%2810*i%29%29%0A%20%20%20%20.RetiresOnSaturation%28%29%3B%0A%7D%0A%60%60%60%0A%60RetireOnSaturation%60%u5C31%u662F%u663E%u793A%u7684%u8BA9%u5176%u5931%u6548%u3002%u8FD8%u6709%u4E00%u4E2A%u529E%u6CD5%uFF1A%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AInSequence%3B%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0A%7B%0A%20%20InSequence%20s%3B%0A%0A%20%20for%20%28int%20i%20%3D%201%3B%20i%20%3C%3D%20n%3B%20i++%29%20%7B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20%20%20%20%20.WillOnce%28Return%2810*i%29%29%0A%20%20%20%20%20%20%20%20.RetiresOnSaturation%28%29%3B%0A%20%20%7D%0A%7D%0A%60%60%60%0A%u56E0%u4E3AInSequence%u7684%u5173%u7CFB%uFF0C%u5728%u524D%u9762%u7684EXPECT%5C_CALL%u751F%u6548%u4EE5%u540E%uFF0C%u5C31%u4F1A%u81EA%u52A8%u5931%u6548%uFF0C%u6240%u4EE5%u4E0D%u4F1A%u4EA7%u751F%u8986%u76D6%u7684%u6548%u679C%u3002%0A**Ordered%20vs%20Unordered%20Calls**%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AInSequence%3B...%0ATEST%28FooTest%2C%20DrawsLineSegment%29%20%7B%0A%20%20...%0A%20%20%7B%0A%20%20%20%20InSequence%20dummy%3B%0A%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20PenDown%28%29%29%3B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20Forward%28100%29%29%3B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20PenUp%28%29%29%3B%0A%20%20%7D%0A%20%20Foo%28%29%3B%0A%7D%0A%60%60%60%0A**Expecting%20Partially%20Ordered%20Calls**%0AGoogle%20Mock%20allows%20you%20to%20impose%20an%20arbitrary%20DAG%20%28directed%20acyclic%20graph%29%20on%20the%20calls.%20One%20way%20to%20express%20the%20DAG%20is%20to%0Ause%20the%20After%20clause%20of%20EXPECT_CALL%20.%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3ASequence%3B%0ASequence%20s1%2C%20s2%3B%0AEXPECT_CALL%28foo%2C%20A%28%29%29%0A%09.InSequence%28s1%2C%20s2%29%3B%0AEXPECT_CALL%28bar%2C%20B%28%29%29%0A%09.InSequence%28s1%29%3B%0AEXPECT_CALL%28bar%2C%20C%28%29%29%0A%09.InSequence%28s2%29%3B%0AEXPECT_CALL%28foo%2C%20D%28%29%29%0A%09.InSequence%28s2%29%3B%0A%60%60%60%0Aspecifies%20the%20following%20DAG%20%28where%20s1%20is%20A%20-%3E%20B%20%2C%20and%20s2%20is%20A%20-%3E%20C%20-%3E%20D%20%29%3A%0A%60%60%60%0A%09%20+---%3E%20B%0A%20%20%20%20%20%7C%0AA%20---%7C%0A%09%20%7C%0A%09%20+---%3E%20C%20---%3E%20D%0A%60%60%60%0A**Uninteresting%20Calls**%0A%u8FD9%u662Fgmock%u62A5%u7684warning%u3002%u5F53%u9488%u5BF9%u67D0%u4E00%u4E2A%u5F85%u6D4B%u51FD%u6570%u8BBE%u7F6E%u4E86EXPECT%20spec%uFF0C%u5374%u5E76%u6CA1%u6709%u8C03%u7528%u7684%u65F6%u5019%uFF0C%u5C31%u4F1A%u62A5%u8FD9%u4E2Awarning%u3002%u6B64%u65F6gmock%u8BA4%u4E3A%u4F60%u5BF9%u8BE5%u51FD%u6570%u5E76%u6CA1%u6709%u5174%u8DA3%uFF0C%u6240%u4EE5%u5C31%u4E0D%u9700%u8981%u8FD9%u4E2AEXPECT%20spec%u3002%u5F53%u7136%u4F60%u53EF%u4EE5%u9009%u62E9%u5FFD%u7565%u8FD9%u4E2Awarning%uFF0C%u4F46%u6211%u8BA4%u4E3A%u51FA%u8FD9%u4E2Awarning%u7684%u65F6%u5019%uFF0C%u591A%u534A%u662Ftest%u6F0F%u5199%u4E86%u4EC0%u4E48%u3002%0A%0A**Returning%20Live%20Values%20from%20Mock%20Methods**%0A%60%60%60%0Ausing%20testing%3A%3AByRef%3B%0Ausing%20testing%3A%3AReturn%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0A%09public%3A%0A%09%09MOCK_METHOD0%28GetValue%2C%20int%28%29%29%3B%0A%7D%3B%0A...%0Aint%20x%20%3D%200%3B%0AMockFoo%20foo%3B%0AEXPECT_CALL%28foo%2C%20GetValue%28%29%29%0A%09//%20.WillRepeatedly%28Return%28ByRef%28x%29%29%29%3B%20X%20error%0A%09.WillRepeatedly%28ReturnPointee%28x%29%29%3B%0Ax%20%3D%2042%3B%0AEXPECT_EQ%2842%2C%20foo.GetValue%28%29%29%3B%0A%60%60%60%0A%0A%23%23%23%20%u4E00%u4E9B%u6D4B%u8BD5case%0A%u5199Unit%20Test%u5E76%u4E0D%u50CF%u60F3%u50CF%u7684%u90A3%u4E48%u7B80%u5355%uFF0C%u5E76%u4E0D%u662F%u8C03%u7528%u4E86%u6846%u67B6%uFF0C%u9488%u5BF9%u6BCF%u4E2A%u51FD%u6570%u5199test%20case%u5C31%u53EF%u4EE5%u3002%u6309%u6211%u76EE%u524D%u7684%u7406%u89E3%u6709%u4EE5%u4E0B%u51E0%u79CD%u6311%u6218%uFF1A%0A1.%20Test%20Case%u5982%u4F55%u89E3%u8026%u3002%u4E0D%u8981%u6709%u91CD%u590D%u6D4B%u8BD5%28overlap%29%u3002%0A%u4F8B%u5982%uFF1A%u5728%u5199A%u51FD%u6570%u7684%u65F6%u5019%uFF0C%u5199%u4E86%u6D4B%u8BD5testA%uFF0CB%u51FD%u6570%u4F1A%u8C03%u7528A%u51FD%u6570%uFF0C%u90A3%u4E48%u5728%u5199%u5B8CA%u4E4B%u540E%u5199B%u7684%u6D4B%u8BD5testB%u65F6%uFF0C%u662F%u5426%u8981%u5C06A%20mock/fake/stub%u6389%3F%20%u5982%u679C%u4E0D%u5C06A%u51FD%u6570Fake%u6389%uFF0C%u5219testA%u548CtestB%u4E4B%u95F4%u5C31%u662F%u6709overlap%u3002%u6211%u8BA4%u4E3A%u8FD9%u4E4B%u95F4%u53EF%u4EE5%u6709%u53D6%u820D%uFF0C%u6700%u4F73%u72B6%u6001%u5E94%u5F53%u662F%u6B64%u65F6%uFF0C%u5C06testA%u5220%u9664%uFF0C%u53EA%u4FDD%u7559testB%u3002%u4F46%u4ECD%u5E94%u6839%u636E%u5177%u4F53%u60C5%u51B5%u800C%u5B9A%u3002%0A%0A2.%20%u5982%u4F55%u9488%u5BF9%u4F9D%u8D56%u5173%u7CFB%u8FDB%u884Cmock%u5316%u3002%0A%u4F8B%u5982%u51FA%u73B0%u8FD9%u6837%u7684%u8BED%u53E5%3A%20%60B%20%3D%20new%20A%60%uFF0C%u5219%u7C7BB%u4F9D%u8D56%u4E8E%u7C7BA%u3002%u4F46%u7C7BA%u5E76%u6CA1%u6709%u5FC5%u8981%u7F16%u8BD1%u8FDBtest%u3002%u56E0%u4E3A%u4E00%u65E6%u52A0%u5165A%uFF0C%u5219%u52BF%u5FC5%u4F1A%u5F15%u5165%u66F4%u591A%u4F9D%u8D56%u5173%u7CFB%uFF0C%u800C%u5BFC%u81F4test%u7F16%u8BD1%u5D29%u6E83%u3002%u4F9D%u8D56%u5173%u7CFB%u7684%u89E3%u51B3%u65E0%u7A77%u65E0%u5C3D%u3002%u5728%u505AAndroid%u7684%u5355%u5143%u6D4B%u8BD5%u65F6%uFF0C%u53EF%u4EE5%u7528PowerMock%u53D6%u4EE3Mockito%u6765Mock%u6784%u9020%u51FD%u6570%uFF0C%u5C06%u6784%u9020%u51FD%u6570Fake%u5316%u6210%u7C7B%u4F3C%u5DE5%u5382%u51FD%u6570%uFF0C%u8FD4%u56DE%u7C7B%u5B9E%u4F8B%u3002%u5177%u4F53%u53C2%u770B%u8FD9%u7BC7%u535A%u6587%5BAndroid%u5355%u5143%u6D4B%u8BD5%5D%28https%3A//zhougy0717.github.io/2016/10/19/Android%25E5%258D%2595%25E5%2585%2583%25E6%25B5%258B%25E8%25AF%2595/%29%u3002%0A%u4F46%u5B9E%u9645%u4E0A%uFF0C%u6309%u7167%u73B0%u5728%u7684%u7406%u89E3%uFF0C%u5176%u5B9EMock%u6784%u9020%u51FD%u6570%u662F%u4E0D%u53EF%u53D6%u7684%uFF0C%u9996%u5148%u9020%u6210%u88AB%u6D4B%u4EE3%u7801spec%u4E0D%u6E05%u6670%uFF0C%u8BD5%u60F3%u4E00%u4E2A%u6784%u9020%u51FD%u6570%u600E%u4E48%u4F1A%u8FD4%u56DE%u53E6%u4E00%u4E2A%u7C7B%u7684%u5B9E%u4F8B%u3002%u5176%u6B21%uFF0C%u5728C++%u4E2D%u5F88%u96BE%u505A%u5230Mock%u6784%u9020%u51FD%u6570%u3002%u597D%u7684%u505A%u6CD5%u5E94%u5F53%u662F%u8FD0%u7528Dependency%20Injection%u3002%u4F8B%u5982%uFF1A%0A%60%60%60%0Aclass%20A%20%0A%7B%7D%0A%0Aclass%20B%0A%7B%0A%09void%20func%28%29%0A%09%7B%0A%09%09A*%20a%20%3D%20new%20A%3B%0A%09%7D%0A%7D%0A%60%60%60%0A%u7C7BB%u5E94%u5F53%u6539%u5199%u4E3A%uFF1A%0A%60%60%60%0Aclass%20B%0A%7B%0A%09void%20func%28A*%29%0A%09%7B%0A%09%09...%0A%09%7D%0A%7D%0A%60%60%60%0A%u5C06%u7C7BA%u6307%u9488%u4F20%u5165%uFF0C%u89E3%u51B3dependency%u7684%u95EE%u9898%u3002%0A%0A3.%20%u5982%u4F55%u80FD%u591F%u8BA9%u6D4B%u8BD5%u7A33%u5B9A%uFF0C%u5728%u4EFB%u610F%u73AF%u5883%u4E0B%u5747%u8FD4%u56DE%u540C%u6837%u7684%u6D4B%u8BD5%u7ED3%u679C%u3002%0A%u8FD9%u4E2A%u4E00%u822C%u6D89%u53CA%u6D4B%u8BD5%u73AF%u5883%u7684%u5F71%u54CD%u3002%u4F8B%u5982%u8C03%u7528%u7F51%u7EDC%u76F8%u5173%u7684%u529F%u80FD%uFF0C%u5728%u6CA1%u6709%u7F51%u7EDC%u7684%u73AF%u5883%u5C31%u6CA1%u6CD5%u8FDB%u884C%u3002%u518D%u4F8B%u5982%u6D4B%u8BD5%u65F6%u64CD%u4F5C%u771F%u5B9E%u5177%u4F53%u6587%u4EF6%uFF0C%u5219%u8BE5%u6587%u4EF6%u88AB%u6D4B%u8BD5%u5916%u4EBA%u4E3A%u6216%u4EE3%u7801%u4FEE%u6539%uFF0C%u5219%u6D4B%u8BD5%u53EF%u80FD%u5C31%u4F1A%u83AB%u540D%u5931%u8D25%u3002%0A%u9488%u5BF9%u8FD9%u4E9B%u60C5%u51B5%uFF0C%u6211%u4EEC%u5E94%u5F53%u5728%u6D4B%u8BD5%u4E2D%u5C3D%u91CF%u907F%u514D%u3002%u4F8B%u5982%u524D%u8005%uFF0C%u6211%u4EEC%u5E94%u5F53%u5BF9%u7F51%u7EDC%u63A5%u53E3%u8FDB%u884CMock%u5316%uFF0C%u540E%u8005%u5E94%u5F53%u5728%u6D4B%u8BD5%u7684setUp%u548CtearDown%u4E2D%u751F%u6210%u865A%u5047%u6587%u4EF6%u7528%u4E8E%u6D4B%u8BD5%uFF0C%u5E76%u5728%u6D4B%u8BD5%u5B8C%u6210%u65F6%u505A%u6E05%u7406%u3002%0A%0A4.%20%u4F1A%u56E0%u4E3A%u5F88%u5C0F%u7684%u88AB%u6D4B%u4EE3%u7801%u6539%u52A8%uFF0C%u800C%u5BFC%u81F4%u5927%u9762%u79EF%u6D4B%u8BD5%u5931%u8D25%uFF0C%u751A%u81F3%u6D4B%u8BD5%u5D29%u6E83%u3002%0A%u8FD9%u4E2A%u5C31%u662Fgmock%u6587%u6863%u4E2D%u63D0%u5230%u7684%u8981%u9488%u5BF9%u63A5%u53E3%u7F16%u7A0B%uFF0C%u9488%u5BF9%u63A5%u53E3%u6D4B%u8BD5%u3002Robert%20C%B7Martin%u5728%u300A%u654F%u6377%u8F6F%u4EF6%u5F00%u53D1%uFF0D%u539F%u5219%u3001%u6A21%u5F0F%u4E0E%u5B9E%u8DF5%u300B%u4E00%u4E66%u4E2D%u6709%u63D0%u51FA%uFF1A%u6240%u6709%u7684%u4EE3%u7801%u90FD%u5E94%u4F9D%u8D56%u4E8E%u62BD%u8C61%u63A5%u53E3%u3002%u56E0%u4E3A%u62BD%u8C61%u63A5%u53E3%u662F%u7ECF%u8FC7%u62BD%u8C61%u7684%uFF0C%u76F8%u5BF9%u5177%u4F53%u7684%u5B9E%u73B0%u4EE3%u7801%u8F83%u4E3A%u7A33%u5B9A%u3002%u800C%u88AB%u4F9D%u8D56%u7684%u4EE3%u7801%u5E94%u8BE5%u5C3D%u53EF%u80FD%u4FDD%u6301%u7A33%u5B9A%uFF0C%u8FD9%u6837%u57FA%u4E8E%u4E4B%u4E0A%u7684%u4EE3%u7801%u624D%u4E0D%u4F1A%u56E0%u4E3A%u4F9D%u8D56%u7684%u6539%u52A8%u800C%u6539%u52A8%u3002%0A%0A%u4E0B%u9762%u5217%u51FA%u51E0%u79CD%u6211%u5728%u5B9E%u9645%u5199test%20case%u65F6%u9047%u5230%u7684%u60C5%u51B5%uFF0C%u5728gmock%u4E2D%u7684%u89E3%u51B3%u65B9%u6848%u3002%0A%0A%23%23%23%20%u6309%u7167%u51FD%u6570%u53C2%u6570%u8FD4%u56DE%u7ED3%u679C%20-%20Fake%0A%u4F8B%u5982%3A%0A%60%60%60%0Aclass%20A%0A%7B%0A%09virtual%20int%20func%28int%20a%2C%20int%20b%29%3B%0A%7D%0A%0AEXPECT_CALL%28mockA%2C%20func%28%29%29%0A%09.WillRepeatedly%28a+b%29%3B%0A%60%60%60%0Agmock%u4E2D%u53EF%u4EE5%u8FD9%u6837%u505A%uFF1AUsing%20Functions/Methods/Functors%20as%20Actions%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0Apublic%3A%0A%09MOCK_METHOD2%28Sum%2C%20int%28int%20x%2C%20int%20y%29%29%3B%0A%09MOCK_METHOD1%28ComplexJob%2C%20bool%28int%20x%29%29%3B%0A%7D%3B%0Aint%20CalculateSum%28int%20x%2C%20int%20y%29%20%7B%20return%20x%20+%20y%3B%20%7D%0Aclass%20Helper%20%7B%0Apublic%3A%0A%09bool%20ComplexJob%28int%20x%29%3B%0A%7D%3B%0A...%0AMockFoo%20foo%3B%0AHelper%20helper%3B%0AEXPECT_CALL%28foo%2C%20Sum%28_%2C%20_%29%29%0A%09.WillOnce%28Invoke%28CalculateSum%29%29%3B%0AEXPECT_CALL%28foo%2C%20ComplexJob%28_%29%29%0A%09.WillOnce%28Invoke%28%26helper%2C%20%26Helper%3A%3AComplexJob%29%29%3B%0Afoo.Sum%285%2C%206%29%3B%20//%20Invokes%20CalculateSum%285%2C%206%29.%0Afoo.ComplexJob%2810%29%3B%20//%20Invokes%20helper.ComplexJob%2810%29%3B%0A%60%60%60%0A%0A%23%23%23%20Mock%20non-virtual%u51FD%u6570%0A%60%60%60%0A//%20A%20simple%20packet%20stream%20class.%20None%20of%20its%20members%20is%20virtual.%0Aclass%20ConcretePacketStream%20%7B%0A%09public%3A%0A%09%09void%20AppendPacket%28Packet*%20new_packet%29%3B%0A%09%09const%20Packet*%20GetPacket%28size_t%20packet_number%29%20const%3B%0A%09%09size_t%20NumberOfPackets%28%29%20const%3B%0A%09%09...%0A%7D%3B%0A//%20A%20mock%20packet%20stream%20class.%20It%20inherits%20from%20no%20other%2C%20but%20defines%0A//%20GetPacket%28%29%20and%20NumberOfPackets%28%29.%0Aclass%20MockPacketStream%20%7B%0A%09public%3A%0A%09%09MOCK_CONST_METHOD1%28GetPacket%2C%20const%20Packet*%28size_t%20packet_number%29%29%3B%0A%09%09MOCK_CONST_METHOD0%28NumberOfPackets%2C%20size_t%28%29%29%3B%0A%09%09...%0A%7D%0A%0Atemplate%20%3Cclass%20PacketStream%3E%0Avoid%20CreateConnection%28PacketStream*%20stream%29%20%7B%20...%20%7D%0Atemplate%20%3Cclass%20PacketStream%3E%0Aclass%20PacketReader%20%7B%0A%09public%3A%0A%09void%20ReadPackets%28PacketStream*%20stream%2C%20size_t%20packet_num%29%3B%0A%7D%3B%0A%0AMockPacketStream%20mock_stream%3B%0AEXPECT_CALL%28mock_stream%2C%20...%29...%3B%0A..%20set%20more%20expectations%20on%20mock_stream%20...%0APacketReader%3CMockPacketStream%3E%20reader%28%26mock_stream%29%3B%0A...%20exercise%20reader%20...%0A%60%60%60%0A%u4E3A%u4EC0%u4E48%u8981%u8FD9%u4E48%u505A%uFF1F%0A%u56E0%u4E3A%u53EA%u80FD%u8FD9%u4E48%u505A%u3002%u666E%u901A%u7684mock%uFF0C%u8981%u901A%u8FC7%u7EE7%u627F%u88AB%u6D4B%u8BD5%u7C7B%uFF0C%u5E76%u91CD%u5199virtual%u51FD%u6570%u6765%u5B9E%u73B0%u3002%u800C%u4E0A%u9762%u7684ConcretePacketStream%u548CMockPacketStream%u5E76%u4EFB%u4F55%u6CA1%u6709%u5173%u7CFB%uFF0C%u4E5F%u5C31%u662F%u8BF4%uFF0C%u5982%u679C%u4F20%u5165%u540E%u8005%u7684%u6307%u9488%uFF0C%u4E0D%u7528reinterpret_cast%u662F%u4E0D%u80FD%u8F6C%u6210%u524D%u8005%u7684%u6307%u9488%u7684%u3002%0A%u6240%u4EE5%u60F3%u4E00%u4E2A%u53D8%u901A%u7684%u529E%u6CD5%uFF0C%u7528%u6A21%u677F%u7C7B%u6765%u5B9A%u4E49%u88AB%u6D4B%u4EE3%u7801%uFF0C%u5728%u6D4B%u8BD5%u65F6%u4F20%u5165mock%u7C7B%uFF0C%u5728%u751F%u4EA7%u65F6%uFF0C%u4F20%u5165%u771F%u5B9E%u7C7B%u3002%0A%0A%23%23%23%20Mocking%20Side%20Effects%0A%60%60%60%0AEXPECT_CALL%28mutator%2C%20MutateInt%28_%29%29%0A%09.WillOnce%28DoAll%28SetArgPointee%3C0%3E%285%29%2C%20Return%28true%29%29%29%3B%0AEXPECT_CALL%28mutator%2C%20Mutate%28NotNull%28%29%2C%205%29%29%0A%09.WillOnce%28SetArrayArgument%3C0%3E%28values%2C%20values%20+%205%29%29%3B%0A%60%60%60%0A%u7B2C%u4E00%u4E2A%u5C06MutateInt%u7B2C%u4E00%u4E2A%u53C2%u6570%u6307%u9488%u6307%u5411%u7684int%uFF0C%u8BBE%u4E3A5%uFF0C%u5E76%u8FD4%u56DEtrue%u3002%0A%u7B2C%u4E8C%u4E2A%u5C06values%u6570%u7EC4%u7684%5B0%2C5%29%u62F7%u8D1D%u5230%u53C2%u65701%u6307%u5411%u7684%u5730%u5740%u3002%0A%u5982%u679C%u4ECD%u9700%u8981%u8FD4%u56DE%uFF0C%u5219%u7528DoAll%uFF0C%u5982%u4E0B%uFF1A%0A%60%60%60%0AEXPECT_CALL%28mutator%2C%20MutateInt%28_%29%29%0A%20%20%20%20%20%20.WillOnce%28DoAll%28SetArgPointee%3C0%3E%285%29%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Return%28true%29%29%29%3B%0A%60%60%60%0A%0A%23%23%23%20Selecting%20an%20Action%27s%20Arguments%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Abool%20MyIsVisibleInQuadrant1%28bool%20visible%2C%20const%20string%26%20name%2C%20int%20x%2C%20int%20y%2C%0Aconst%20map%3Cpair%3Cint%2C%20int%3E%2C%20double%3E%26%20weight%2C%0Adouble%20min_weight%2C%20double%20max_wight%29%20%7B%0A%09return%20IsVisibleInQuadrant1%28visible%2C%20x%2C%20y%29%3B%0A%7D.%0A..%0AEXPECT_CALL%28mock%2C%20Foo%28_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%29%29%0A%09.WillOnce%28Invoke%28MyIsVisibleInQuadrant1%29%29%3B%20//%20Now%20it%20works.%0A%60%60%60%0A%u5B9A%u4E49%u81EA%u5DF1%u7684adaptor%20MyIsVisibleInQuadrant1%uFF0C%u6216%u8005%u7528gmock%u63D0%u4F9B%u7684%u65B9%u6CD5%u4F18%u96C5%u7684%u89E3%u51B3%u3002%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Ausing%20%3A%3Atesting%3A%3AWithArgs%3B%0A...%0AEXPECT_CALL%28mock%2C%20Foo%28_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%29%29%0A.WillOnce%28WithArgs%3C0%2C%202%2C%203%3E%28Invoke%28IsVisibleInQuadrant1%29%29%29%3B%0A//%20No%20need%20to%20define%20your%20own%20adaptor.%0A%60%60%60%0A%0A%23%23%23%23%20Mocking%20Private%20or%20Protected%20Methods%0A%60%60%60%0Aclass%20Foo%20%7B%0A%09public%3A%0A%09%09...%0A%09%09virtual%20bool%20Transform%28Gadget*%20g%29%20%3D%200%3B%0A%09protected%3A%0A%09%09virtual%20void%20Resume%28%29%3B%0A%09private%3A%0A%09%09virtual%20int%20GetTimeOut%28%29%3B%0A%7D%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0A%09public%3A%0A%09%09...%0A%09%09MOCK_METHOD1%28Transform%2C%20bool%28Gadget*%20g%29%29%3B%0A%09%09//%20The%20following%20must%20be%20in%20the%20public%20section%2C%20even%20though%20the%0A%09%09//%20methods%20are%20protected%20or%20private%20in%20the%20base%20class.%0A%09%09MOCK_METHOD0%28Resume%2C%20void%28%29%29%3B%0A%09%09MOCK_METHOD0%28GetTimeOut%2C%20int%28%29%29%3B%0A%7D%3B%0A%60%60%60%0A%3EC++%20allows%20a%20subclass%20to%20specify%20a%20different%20access%20level%20than%20the%20base%20class%20on%20a%20virtual%20function.%0A%0A%23%23%23%23%20Misc%0AKeep%20in%20mind%20that%20one%20doesn%27t%20have%20to%20verify%20more%20than%20one%20property%20in%20one%20test.%20In%20fact%2C%20it%27s%20a%20good%20style%20to%20verify%20only%20one%0Athing%20in%20one%20test.%20If%20you%20do%20that%2C%20a%20bug%20will%20likely%20break%20only%20one%20or%20two%20tests%20instead%20of%20dozens%0A%0AWhen%20it%27s%20being%20destroyed%2C%20your%20friendly%20mock%20object%20will%20automatically%20verify%20that%20all%20expectations%20on%20it%20have%20been%20satisfied%2C%0Aand%20will%20generate%20Google%20Test%20failures%20if%20not.%20%0A%0ACurrently%20these%20are%20only%20platforms%20that%20support%20the%20pthreads%20library%20%28this%20includes%20Linux%20and%20Mac%29.%20%0A%0A%u52A0%u4E0A%u547D%u4EE4%u884C%u53C2%u6570--gmock_verbose%3Dinfo%u53EF%u4EE5%u663E%u793A%u6240%u6709EXPECT%5C_CALL%u7684%u5177%u4F53%u8C03%u7528%u60C5%u51B5%u3002%0A%0A%23%23%20Some%20useful%20tips%20in%20gtest%0A%23%23%23%20Selecting%20Tests%0A%3E%20If%20you%20set%20the%20**GTEST_FILTER**%20environment%20variable%20or%20the%20**--gtest_filter**%20flag%20to%20a%20filter%20string%2C%20Google%20Test%20will%20only%20run%20the%20tests%20whose%20full%20names%20%28in%20the%20form%20of%20TestCaseName.TestName%29%20match%20the%20filter.%0A%3E%20The%20format%20of%20a%20filter%20is%20a%20%27%3A%27-separated%20list%20of%20wildcard%20patterns%20%28called%20the%20positive%20patterns%29%20optionally%20followed%20by%20a%20%27-%27%20and%20another%20%27%3A%27-separated%20pattern%20list%20%28called%20the%20negative%20patterns%29.%0A%0A-%20./foo_test%20Has%20no%20flag%2C%20and%20thus%20runs%20all%20its%20tests.%0A-%20./foo_test%20--gtest_filter%3D*%20Also%20runs%20everything%2C%20due%20to%20the%20single%20match-everything%20*%20value.%0A-%20./foo_test%20--gtest_filter%3DFooTest.*%20Runs%20everything%20in%20test%20case%20FooTest.%0A-%20./foo_test%20--gtest_filter%3D*Null*%3A*Constructor*%20Runs%20any%20test%20whose%20full%20name%20contains%20either%20%22Null%22%20or%20%22Constructor%22.%0A-%20./foo_test%20--gtest_filter%3D-*DeathTest.*%20Runs%20all%20non-death%20tests.%0A-%20./foo_test%20--gtest_filter%3DFooTest.*-FooTest.Bar%20Runs%20everything%20in%20test%20case%20FooTest%20except%20FooTest.Bar%0A%0ATemporarily%20Disabling%20Tests%0A%60%60%60%0A//%20Tests%20that%20Foo%20does%20Abc.%0ATEST%28FooTest%2C%20DISABLED_DoesAbc%29%20%7B%20...%20%7D%0A%0Aclass%20DISABLED_BarTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%20...%20%7D%3B%0A%0A//%20Tests%20that%20Bar%20does%20Xyz.%0ATEST_F%28DISABLED_BarTest%2C%20DoesXyz%29%20%7B%20...%20%7D%0A%60%60%60%0A%0ATemporarily%20Enabling%20Disabled%20Tests%0A%3Ejust%20invoke%20the%20test%20program%20with%20the%20**--gtest_also_run_disabled_tests**%20flag%20or%20set%20the%20**GTEST_ALSO_RUN_DISABLED_TESTS**%20environment%20variable%20to%20a%20value%20other%20than%200.%0A%0A%23%23%23%20Repeating%20the%20Tests%0A%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%3A--------%3A%20%7C%20%3A--------------%3A%20%7C%20%3A--------%3A%20%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D1000%20%7C%09Repeat%20foo_test%201000%20times%20and%20don%27t%20stop%20at%20failures.%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D-1%09%7CA%20negative%20count%20means%20repeating%20forever.%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D1000%20--gtest_break_on_failure%09%7C%20Repeat%20foo_test%201000%20times%2C%20stopping%20at%20the%20first%20failure.%20This%20is%20especially%20useful%20when%20running%20under%20a%20debugger%3A%20when%20the%20testfails%2C%20it%20will%20drop%20into%20the%20debugger%20and%20you%20can%20then%20inspect%20variables%20and%20stacks.%7C%0A%7C%24%20foo_test%20--gtest_repeat%3D1000%20--gtest_filter%3DFooBar%09%7C%20Repeat%20the%20tests%20whose%20name%20matches%20the%20filter%201000%20times.%7C&lt;/center&gt;&lt;br&gt;&lt;/div&gt;</content>
        <category term="TDD" />
        <category term="unittest" />
        <category term="gtest" />
        <category term="gmock" />
        <updated>2017-09-12T09:02:37.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.zhougy.top/2017/09/12/C/C++%20Test%20Framework%20-%20Google%20Test%20&amp;%20Google%20Mock/</id>
        <title>C/C++ Test Framework - Google Test &amp; Google Mock</title>
        <link rel="alternate" href="https://blog.zhougy.top/2017/09/12/C/C++%20Test%20Framework%20-%20Google%20Test%20&amp;%20Google%20Mock/"/>
        <content type="html">&lt;div class=&#34;enNote&#34; style=&#34;color: #2c3f51; line-height: 1.6; display: block;&#34; title lang=&#34;v2&#34; xml:lang dir&gt;&lt;del style=&#34;position:relative;display:block;z-index:10;&#34;&gt;&lt;a style=&#34;position: absolute;color: #FFF;text-decoration: none;font-size: 12px;height: 25px;border-radius: 0;margin-top: -20px;right: 15px;background: rgba(0, 0, 0, 0);border-left: 10px solid #BB3A34;border-right: 10px solid #BB3A34;border-bottom: 5px solid rgba(0, 0, 0, 0);width: 0;text-indent:-100000px;&#34; href=&#34;http://maxiang.info/#/?provider=evernote&amp;amp;guid=52d299a6-1591-4f5a-b50c-cca38230ecc5&amp;amp;notebook=myblog&#34;&gt;Edit&lt;/a&gt;&lt;/del&gt;&lt;div style=&#34;color: #2c3f51; line-height: 1.6; display: block;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Google Test&amp;#xFF0C;Google Mock&amp;#x4EE5;&amp;#x4E0B;&amp;#x7B80;&amp;#x79F0;gtest&amp;#xFF0C;gmock&amp;#x3002; &lt;br&gt;&amp;#x5728;&amp;#x63A5;&amp;#x89E6;gtest&amp;#xFF0C;gmock&amp;#x4E4B;&amp;#x524D;&amp;#xFF0C;&amp;#x6D4B;&amp;#x8BD5;C/C++ code&amp;#x4F7F;&amp;#x7528;&lt;a href=&#34;https://github.com/unittest-cpp/unittest-cpp&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;UnitTest++&lt;/a&gt;&amp;#x3002;&amp;#x8FD9;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F88;&amp;#x7B80;&amp;#x6D01;&amp;#x7684;&amp;#x6846;&amp;#x67B6;&amp;#xFF0C;&amp;#x4E0A;&amp;#x624B;&amp;#x5F88;&amp;#x5FEB;&amp;#x3002;&amp;#x53C2;&amp;#x770B;&amp;#x53E6;&amp;#x4E00;&amp;#x7BC7;&amp;#x535A;&amp;#x6587;&lt;a href=&#34;https://zhougy0717.github.io/2016/02/29/UnitTest++%E7%AE%80%E4%BB%8B/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;UnitTest++&amp;#x7B80;&amp;#x4ECB;&lt;/a&gt;&amp;#x3002;&amp;#x6D4B;&amp;#x8BD5;&amp;#x76F8;&amp;#x5173;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#x591F;&amp;#x7528;&amp;#xFF0C;&amp;#x4F46;&amp;#x662F;&amp;#x6CA1;&amp;#x6709;mock&amp;#x5E93;&amp;#x3002;&amp;#x8FD9;&amp;#x5E26;&amp;#x6765;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x662F;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;&amp;#x9057;&amp;#x7559;&amp;#x4EE3;&amp;#x7801;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x9700;&amp;#x8981;&amp;#x81EA;&amp;#x884C;fake&amp;#x76F8;&amp;#x5173;&amp;#x4EE3;&amp;#x7801;&amp;#x3002;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5728;&amp;#x9057;&amp;#x7559;&amp;#x7CFB;&amp;#x7EDF;&amp;#x5F88;&amp;#x5E9E;&amp;#x5927;&amp;#x65F6;&amp;#xFF0C;&amp;#x8981;&amp;#x9887;&amp;#x8D39;&amp;#x5FC3;&amp;#x529B;&amp;#x3002;&amp;#x800C;&amp;#x4E14;&amp;#x8FC7;&amp;#x591A;&amp;#x6D89;&amp;#x53CA;&amp;#x7EC6;&amp;#x8282;&amp;#xFF0C;&amp;#x5BFC;&amp;#x81F4;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6781;&amp;#x4E0D;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x7CFB;&amp;#x7EDF;&amp;#x4EE3;&amp;#x7801;&amp;#x4EFB;&amp;#x610F;&amp;#x7684;&amp;#x6F14;&amp;#x8FDB;&amp;#xFF0C;&amp;#x90FD;&amp;#x4F1A;&amp;#x5BFC;&amp;#x81F4;&amp;#x5927;&amp;#x5806;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5931;&amp;#x8D25;&amp;#xFF0C;&amp;#x751A;&amp;#x81F3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65E0;&amp;#x6CD5;&amp;#x8FDB;&amp;#x884C;&amp;#x3002;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&amp;#x6D4B;&amp;#x8BD5;case&amp;#x4E4B;&amp;#x95F4;&amp;#x65E0;&amp;#x6CD5;&amp;#x5F88;&amp;#x597D;&amp;#x7684;&amp;#x89E3;&amp;#x8026;&amp;#x3002;&amp;#x7ED3;&amp;#x679C;&amp;#x540C;&amp;#x6837;&amp;#x662F;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E0D;&amp;#x591F;&amp;#x7A33;&amp;#x5B9A;&amp;#x3002;&amp;#x672F;&amp;#x8BED;&amp;#x662F;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4EE3;&amp;#x7801;&amp;#x5F88;&amp;#x201C;&amp;#x8106;&amp;#x5F31;&amp;#x201D;&amp;#x3002;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Java&amp;#xFF0C;Python&amp;#xFF0C;JavaScript&amp;#x90FD;&amp;#x6709;&amp;#x81EA;&amp;#x5DF1;&amp;#x7684;mock&amp;#x5E93;&amp;#x3002;Python&amp;#x7684;Mock&amp;#x7C7B;&amp;#xFF0C;Java&amp;#x7684;Mockito/PowerMock&amp;#xFF0C;JavaScript&amp;#x7684;Sinon&amp;#x3002;&amp;#x4E8E;&amp;#x662F;&amp;#xFF0C;&amp;#x5728;&amp;#x7F51;&amp;#x4E0A;&amp;#x641C;&amp;#x7D22;&amp;#x4E86;&amp;#x4E00;&amp;#x4E0B;C/C++&amp;#x7684;Mock&amp;#x5E93;&amp;#xFF0C;&amp;#x4E8E;&amp;#x662F;&amp;#x770B;&amp;#x5230;&amp;#x4E86;gtest&amp;#xFF0C;gmock&amp;#x3002;&amp;#x7136;&amp;#x540E;&amp;#x5C31;&amp;#x6709;&amp;#x4E86;&amp;#x8FD9;&amp;#x4E00;&amp;#x7BC7;&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;&amp;#x7B80;&amp;#x4ECB;&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0D;&amp;#x7528;&amp;#x53BB;&amp;#x7F51;&amp;#x4E0A;&amp;#x8D39;&amp;#x5FC3;&amp;#x627E;&amp;#x6559;&amp;#x7A0B;&amp;#xFF0C;&amp;#x4E24;&amp;#x4E2A;&amp;#x9879;&amp;#x76EE;&amp;#x7684;&amp;#x6587;&amp;#x6863;&amp;#x90FD;&amp;#x975E;&amp;#x5E38;&amp;#x68D2;&amp;#x3002;&amp;#x5165;&amp;#x53E3;&amp;#x7EDF;&amp;#x4E00;&amp;#x5728;&lt;a href=&#34;https://github.com/google/googletest&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;gtest GitHub&amp;#x9879;&amp;#x76EE;&amp;#x4E3B;&amp;#x9875;&lt;/a&gt;&amp;#x4E0A;&amp;#x3002;&amp;#x800C;&amp;#x4E14;&amp;#x8BE5;&amp;#x6587;&amp;#x6863;&amp;#x4E0D;&amp;#x4EC5;&amp;#x5F88;&amp;#x597D;&amp;#x7684;&amp;#x4ECB;&amp;#x7ECD;&amp;#x4E86;gtest&amp;#xFF0C;gmock&amp;#x7684;&amp;#x7528;&amp;#x6CD5;&amp;#xFF0C;&amp;#x5176;&amp;#x4E2D;&amp;#x8FD8;&amp;#x6D89;&amp;#x53CA;&amp;#x4E86;&amp;#x5F88;&amp;#x591A;TDD&amp;#x6216;&amp;#x8005;UnitTest&amp;#x7684;&amp;#x771F;&amp;#x77E5;&amp;#x707C;&amp;#x89C1;&amp;#xFF0C;&amp;#x5F88;&amp;#x503C;&amp;#x5F97;&amp;#x8BFB;&amp;#x4E00;&amp;#x8BFB;&amp;#x3002; &lt;br&gt;&amp;#x8981;&amp;#x4F7F;&amp;#x7528;gtest&amp;#x975E;&amp;#x5E38;&amp;#x7B80;&amp;#x5355;&amp;#xFF1A;&amp;#x7F16;&amp;#x8BD1;&amp;#x51FA;gtest&amp;#xFF0C;gmock&amp;#xFF0C;&amp;#x518D;&amp;#x94FE;&amp;#x5165;&amp;#x4F60;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7A0B;&amp;#x5E8F;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x7F16;&amp;#x8BD1;gtest/gmock&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gtest&amp;#xFF0C;gmock&amp;#x5747;&amp;#x7528;cmake&amp;#x6765;&amp;#x7BA1;&amp;#x7406;&amp;#x8DE8;&amp;#x5E73;&amp;#x53F0;&amp;#xFF0C;&amp;#x5148;&amp;#x7528;cmake&amp;#x6765;&amp;#x751F;&amp;#x6210;Makefile&amp;#x3002;&amp;#x7528;&amp;#x547D;&amp;#x4EE4;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;cmake -G &amp;quot;Unix Makefiles&amp;quot; /path/to/CMakeList.txt&lt;/code&gt;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Makefile&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7136;&amp;#x540E;&amp;#x6309;&amp;#x7167;&amp;#x4E0B;&amp;#x9762;&amp;#x7F16;&amp;#x5199;Makefile&amp;#x3002;&amp;#x6CE8;&amp;#x610F;gmock_main&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;main&amp;#x51FD;&amp;#x6570;&amp;#x6765;&amp;#x8C03;&amp;#x7528;&amp;#x6240;&amp;#x6709;&amp;#x7684;test case&amp;#xFF0C;&amp;#x7701;&amp;#x5F97;&amp;#x81EA;&amp;#x5DF1;&amp;#x5199;main&amp;#x51FD;&amp;#x6570;&amp;#x4E86;&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;CC = gcc&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;CPP = g++&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;LINK = g++&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;CFLAGS = -g -Wall -Werror -Wextra -std=gnu99&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;CPPFLAGS = -g -Wall -Werror -Wextra&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;LIBS = -L./lib -lgtest -lgmock -lgmock_main -lpthread&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;C__SOURCES = $(wildcard *.c)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;CPPSOURCES = $(wildcard *.cpp)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;OBJECTS = $(patsubst %.c, %.o, $(C__SOURCES)) $(patsubst %.cpp, %.o, $(CPPSOURCES))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;TARGET = test_exe&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;first: all&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;%.o: %.c&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    $(CC) $(INCLUDES) -c $(CFLAGS) -o $@ $&amp;lt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;%.o: %.cpp&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    $(CPP) $(INCLUDES) -c $(CPPFLAGS) -o $@ $&amp;lt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;all: $(TARGET)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;$(TARGET): $(OBJECTS)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    $(LINK) $(CPPFLAGS) $(LIBS) -o $(TARGET) $(OBJECTS)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;.PHONY : clean&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;clean:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    rm -f $(TARGET) $(OBJECTS)&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Terms&lt;/h3&gt;&lt;table style=&#34;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&#34;&gt;&lt;thead style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;Meaning&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;Google Test Term&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;ISTQB Term&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Exercise a particular program path with specific input values and verify the results&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;TEST()&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Case&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;A set of several tests related to one component&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Case&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Test Suite&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Test&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gtest/gtest.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Test;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::AtLeast;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;TEST(TestCaseName, should_this_test_do)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    EXPECT_STREQ(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, str);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E2D;&amp;#x95F4;&amp;#x7684;&amp;#x90A3;&amp;#x5806;namespace&amp;#x90FD;&amp;#x662F;gtest/gmock&amp;#x5E93;&amp;#x91CC;&amp;#x5B9A;&amp;#x4E49;&amp;#x7684;matcher&amp;#x5B8F;&amp;#x6216;&amp;#x8005;&amp;#x5404;&amp;#x79CD;&amp;#x6709;&amp;#x7528;&amp;#x7684;&amp;#x5B8F;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Test Fixture&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6709;&amp;#x91CD;&amp;#x590D;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5C31;&amp;#x8981;&amp;#x7528;&amp;#x5230;Test Fixture&amp;#x4E86;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;setUp / tearDown&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt; : public ::testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Test&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt; protected:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  virtual void &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;SetUp&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    q1_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(1);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(2);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Enqueue&lt;/span&gt;(3);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  // virtual void &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TearDown&lt;/span&gt;() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q0_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q1_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Queue&lt;/span&gt;&amp;lt;int&amp;gt; q2_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TEST_F&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;IsEmptyInitially&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(0, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q0_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;TEST_F&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;QueueTest&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;DequeueWorks&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  int* n = q0_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  n = q1_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ASSERT_TRUE&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt; != &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(1, *&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(0, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q1_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  delete n;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  n = q2_.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Dequeue&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ASSERT_TRUE&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt; != &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(2, *&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;n&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(1, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;q2_&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;size&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  delete n;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;constructor/destructor vs. SetUp/TearDown&lt;/h4&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;When you need to write per-test set-up and tear-down logic, you have the choice between using the test fixture constructor/destructor or SetUp()/TearDown(). The former is usually preferred, as it has the following benefits:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;By initializing a member variable in the constructor, we have the option to make it const, which helps prevent accidental changes to its value and makes the tests more obviously correct.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;In case we need to subclass the test fixture class, the subclass&amp;#x2019; constructor is guaranteed to call the base class&amp;#x2019; constructor first, and the subclass&amp;#x2019; destructor is guaranteed to call the base class&amp;#x2019; destructor afterward. &lt;/strong&gt;With SetUp()/TearDown(), a subclass may make the mistake of forgetting to call the base class&amp;#x2019; SetUp()/TearDown() or call them at the wrong moment.&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;Benefit for using SetUp/TearDown:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If the tear-down operation could throw an exception, you must use TearDown() as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer TearDown() if you want to write portable tests that work with or without exceptions.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;The assertion macros throw an exception when flag &amp;#x2013;gtest_throw_on_failure is specified. Therefore, you shouldn&amp;#x2019;t use Google Test assertions in a destructor if you plan to run your tests with this flag.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;In a constructor or destructor, you cannot make a virtual function call on this object. (You can call a method declared as virtual, but it will be statically bound.) Therefore, if you need to call a method that will be overriden in a derived class, you have to use SetUp()/TearDown().&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7B80;&amp;#x8A00;&amp;#x4E4B;&amp;#xFF0C;&amp;#x5728;&amp;#x903B;&amp;#x8F91;&amp;#x4E0A;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E24;&amp;#x7EC4;&amp;#x7684;&amp;#x4F5C;&amp;#x7528;&amp;#x76F8;&amp;#x540C;&amp;#xFF0C;&amp;#x90FD;&amp;#x662F;&amp;#x6BCF;&amp;#x4E2A;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E4B;&amp;#x524D;&amp;#x4E4B;&amp;#x540E;&amp;#x4F1A;&amp;#x505A;&amp;#x4E00;&amp;#x4E9B;&amp;#x5904;&amp;#x7406;&amp;#x5DE5;&amp;#x4F5C;&amp;#x3002;Constructor/Destructor&amp;#x7684;&amp;#x597D;&amp;#x5904;&amp;#x662F;&amp;#x63D0;&amp;#x4F9B;&amp;#x4E86;&amp;#x7EE7;&amp;#x627F;&amp;#x3002;setUp/tearDown&amp;#x7684;&amp;#x597D;&amp;#x5904;&amp;#x662F;&amp;#x53EF;&amp;#x4EE5;&amp;#x5904;&amp;#x7406;exception&amp;#xFF0C;&amp;#x8FD9;&amp;#x662F;&amp;#x4E0D;&amp;#x80FD;&amp;#x653E;&amp;#x5728;&amp;#x6790;&amp;#x6784;&amp;#x51FD;&amp;#x6570;&amp;#x91CC;&amp;#x7684;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;SetUpTestCase / TearDownTestCase&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Test Case&amp;#x7EA7;&amp;#x522B;&amp;#x7684;SetUp/TearDown&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; FooTest : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; ::testing::Test &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;protected&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Per-test-case set-up.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Called before the first test in this test case.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Can be omitted if not needed.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUpTestCase&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    shared_resource_ = &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;new&lt;/span&gt; ...;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Per-test-case tear-down.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Called after the last test in this test case.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Can be omitted if not needed.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDownTestCase&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;delete&lt;/span&gt; shared_resource_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    shared_resource_ = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// You can define per-test set-up and tear-down logic as usual.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUp&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDown&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Some expensive resource shared by all tests.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;static&lt;/span&gt; T* shared_resource_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;SetUp/TearDown Environment&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;First, you subclass the ::testing::Environment class to define a test environment, which knows how to set-up and tear-down:&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Then, you register an instance of your environment class with Google Test by calling the &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;::testing::AddGlobalTestEnvironment()&lt;/code&gt; function: &lt;br&gt;Now, when RUN_ALL_TESTS() is called, it first calls the SetUp() method of the environment object, then runs the tests if there was no fatal failures, and finally calls TearDown() of the environment object.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;It&amp;#x2019;s OK to register multiple environment objects. In this case, their SetUp() will be called in the order they are registered, and their TearDown() will be called in the reverse order.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;Note that Google Test takes ownership of the registered environment objects. Therefore do not delete them by yourself.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; Environment &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;virtual&lt;/span&gt; ~Environment() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Override this to define how to set up the environment.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;SetUp&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Override this to define how to tear down the environment.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;TearDown&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Environment* &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;AddGlobalTestEnvironment&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(Environment* env)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x65AD;&amp;#x8A00;&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6709;&amp;#x4E24;&amp;#x79CD;&amp;#x65AD;&amp;#x8A00;EXPECT_xxx&amp;#x548C;ASSERT_xxx&amp;#x3002;&amp;#x524D;&amp;#x8005;&amp;#x4F1A;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7EC8;&amp;#x6B62;&amp;#xFF0C;&amp;#x540E;&amp;#x8005;&amp;#x4E0D;&amp;#x4F1A;&amp;#xFF0C;&amp;#x53EA;&amp;#x4F1A;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;fail&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;gmock&lt;/h2&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E4B;&amp;#x6240;&amp;#x4EE5;&amp;#x8981;&amp;#x5207;&amp;#x5230;gtest&amp;#xFF0C;&amp;#x552F;&amp;#x4E00;&amp;#x7684;&amp;#x539F;&amp;#x56E0;&amp;#x5C31;&amp;#x662F;gmock&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x8981;&amp;#x4E13;&amp;#x5F00;&amp;#x4E00;&amp;#x7AE0;&amp;#x91CD;&amp;#x70B9;&amp;#x4ECB;&amp;#x7ECD;&amp;#x4E00;&amp;#x4E0B;&amp;#x3002;&amp;#x6240;&amp;#x6709;&amp;#x5185;&amp;#x5BB9;&amp;#x5747;&amp;#x6765;&amp;#x81EA;&amp;#x4E8E;&amp;#x5B98;&amp;#x65B9;&amp;#x6587;&amp;#x6863;&amp;#x3002;&amp;#x5185;&amp;#x5BB9;&amp;#x6DF1;&amp;#x5EA6;&amp;#x7531;&amp;#x6D45;&amp;#x5165;&amp;#x6DF1;&amp;#xFF0C;&amp;#x4F9D;&amp;#x6B21;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Google Mock for Dummies&lt;/a&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/CookBook.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;CookBook&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x6700;&amp;#x540E;&amp;#x8FD8;&amp;#x6709;&amp;#x53C2;&amp;#x8003;&amp;#x624B;&amp;#x518C;:&lt;/p&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/CheatSheet.md&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x7B80;&amp;#x4ECB;&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Google C++ Mocking Framework (or Google Mock for short) is a library (sometimes we also call it a &amp;#x201C;framework&amp;#x201D; to make it sound cool) for creating mock classes and using them. It does to C++ what jMock and EasyMock do to Java.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4F55;&amp;#x4E3A;Mock&amp;#xFF1F;&lt;/h4&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Mocks&lt;/strong&gt; are objects pre-programmed with expectations, which form a specification of the calls they are expected to receive.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x76F8;&amp;#x5E94;&amp;#x7684;&amp;#x8FD8;&amp;#x6709;Fake&amp;#x548C;Stub&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Fake&lt;/strong&gt; objects have working implementations, but usually take some shortcut (perhaps to make the operations less expensive), which makes them not suitable for production. An in-memory file system would be an example of a fake.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gmock&amp;#x7684;&amp;#x6587;&amp;#x6863;&amp;#x91CC;&amp;#x53EA;&amp;#x63D0;&amp;#x5230;&amp;#x4E86;Fake&amp;#xFF0C;&amp;#x4ECE;Martin Fowler&amp;#x7684;&amp;#x6587;&amp;#x7AE0;&lt;a href=&#34;https://martinfowler.com/articles/mocksArentStubs.html&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Mocks Aren&amp;#x2019;t Stubs&lt;/a&gt;&amp;#x4E2D;&amp;#x6458;&amp;#x5F55;&amp;#x5982;&amp;#x4E0B;:&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Stubs&lt;/strong&gt; provide canned answers to calls made during the test, usually not responding at all to anything outside what&amp;#x2019;s programmed in for the test.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E09;&amp;#x8005;&amp;#x4F5C;&amp;#x7528;&amp;#x76F8;&amp;#x540C;&amp;#xFF0C;&amp;#x90FD;&amp;#x662F;&amp;#x6A21;&amp;#x62DF;&amp;#x7CFB;&amp;#x7EDF;&amp;#x5176;&amp;#x4ED6;&amp;#x90E8;&amp;#x5206;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#xFF0C;&amp;#x8FBE;&amp;#x5230;&amp;#x4EE3;&amp;#x7801;&amp;#x9694;&amp;#x79BB;&amp;#x7684;&amp;#x6548;&amp;#x679C;&amp;#xFF0C;&amp;#x65B9;&amp;#x4FBF;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;&amp;#x4F46;&amp;#x662F;Mock&amp;#x7684;&amp;#x7279;&amp;#x70B9;&amp;#x662F;&amp;#x66F4;OO&amp;#x5316;&amp;#xFF0C;&amp;#x4E5F;&amp;#x7B26;&amp;#x5408;TDD&amp;#x6216;&amp;#x8005;BDD&amp;#x7684;&amp;#x601D;&amp;#x60F3;&amp;#x2014;&amp;#x2014;&amp;#x9488;&amp;#x5BF9;&amp;#x4E00;&amp;#x4E2A;object&amp;#x8BBE;&amp;#x7F6E;&amp;#x671F;&amp;#x5F85;&amp;#xFF0C;&amp;#x518D;&amp;#x5BF9;&amp;#x9F50;verify&amp;#x3002;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Mocks vs. Stubs - from Martin Fowler&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;In order to use state verification on the stub, I need to make some extra methods on the stub to help with verification. As a result the stub implements MailService but adds extra test methods.&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Mock objects always use behavior verification, a stub can go either way. Meszaros refers to stubs that use behavior verification as a Test Spy. The difference is in how exactly the double runs and verifies and I&amp;#x2019;ll leave that for you to explore on your own.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Getting Started&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Class to Mock&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Turtle&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;virtual&lt;/span&gt; ~Turtle() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;PenUp&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;PenDown&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Forward&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; distance&lt;/span&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Mock class&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Brings in Google Mock.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockTurtle : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; Turtle &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  MOCK_METHOD0(PenUp, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  MOCK_METHOD0(PenDown, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  MOCK_METHOD1(Forward, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; distance));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x9488;&amp;#x5BF9;&amp;#x5F85;Mock&amp;#x7684;Turtle class&amp;#x8981;&amp;#x6CE8;&amp;#x610F;&amp;#x7684;&amp;#x662F;:&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;Note that the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;destructor of Turtle must be virtual&lt;/strong&gt;, as is the case for all classes you intend to inherit from - otherwise the destructor of the derived class will not be called when you delete an object through a base pointer, and you&amp;#x2019;ll get corrupted program states like memory leaks.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Use it&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;path/to/mock-turtle.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gmock/gmock.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;#&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&amp;quot;gtest/gtest.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::AtLeast;                     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #1&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;TEST(PainterTest, CanDrawSomething) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  MockTurtle turtle;                          &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #2&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  EXPECT_CALL(turtle, PenDown())              &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #3&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;      .Times(AtLeast(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Painter &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;painter&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&amp;amp;turtle)&lt;/span&gt;&lt;/span&gt;;                   &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #4&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  EXPECT_TRUE(painter.DrawCircle(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;                                             &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// #5&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;char&lt;/span&gt;** argv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// The following line must be executed to initialize Google Mock&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// (and Google Test) before running the tests.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  ::testing::InitGoogleMock(&amp;amp;argc, argv);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; RUN_ALL_TESTS();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x613F;&amp;#x610F;&amp;#x7684;&amp;#x8BDD;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x81EA;&amp;#x5DF1;&amp;#x5199;main&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F60;&amp;#x60F3;&amp;#x5077;&amp;#x61D2;&amp;#xFF0C;&amp;#x8BB0;&amp;#x5F97;&amp;#x5728;Makefile&amp;#x91CC;link gmock_main&amp;#x3002; &lt;br&gt;&amp;#x6309;Google&amp;#x7684;&amp;#x8BF4;&amp;#x6CD5;&amp;#xFF0C;gmock&amp;#x4E5F;&amp;#x53EF;&amp;#x4EE5;&amp;#x548C;&amp;#x5176;&amp;#x4ED6;&amp;#x6D4B;&amp;#x8BD5;&amp;#x6846;&amp;#x67B6;&amp;#x517C;&amp;#x5BB9;&amp;#xFF0C;&amp;#x4F46;&amp;#x603B;&amp;#x611F;&amp;#x89C9;&amp;#x633A;&amp;#x60AC;&amp;#x7684;&amp;#x3002;&lt;/p&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4E00;&amp;#x4E9B;&amp;#x6709;&amp;#x7528;&amp;#x7684;&amp;#x5DE5;&amp;#x5177;&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Marcher&lt;/strong&gt; &lt;br&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;EXPECT_CALL(turtle, Forward(_));&lt;/code&gt; &lt;br&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0; &amp;#x4EE5;&amp;#x4EFB;&amp;#x610F;&amp;#x53C2;&amp;#x6570;&amp;#x8C03;&amp;#x7528;Forward &lt;br&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;EXPECT_CALL(turtle, Forward(Ge(100)));&lt;/code&gt; &lt;br&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0; &amp;#x4EE5;&amp;#x5927;&amp;#x4E8E;100&amp;#x7684;&amp;#x6574;&amp;#x6570;&amp;#x8C03;&amp;#x7528;Forward&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Cardinalities: How Many Times Will It Be Called?&lt;/strong&gt;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If neither WillOnce() nor WillRepeatedly() is in the EXPECT_CALL(), the inferred cardinality is Times(1).&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If there are n WillOnce()&amp;#x2019;s but no WillRepeatedly(), where n &amp;gt;= 1, the cardinality is Times(n).&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;If there are n WillOnce()&amp;#x2019;s and one WillRepeatedly(), where n &amp;gt;= 0, the cardinality is Times(AtLeast(n)).&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mockObj, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;()&lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .Times(AtLeast(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;123&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillRepeatedly(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;456&lt;/span&gt;))&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0A;&amp;#x9762;&amp;#x8FD9;&amp;#x6BB5;&amp;#x4EE3;&amp;#x7801;&amp;#x8981;&amp;#x6C42;func&amp;#x51FD;&amp;#x6570;&amp;#x81F3;&amp;#x5C11;&amp;#x8FD0;&amp;#x884C;&amp;#x4E00;&amp;#x6B21;&amp;#xFF0C;&amp;#x7B2C;&amp;#x4E00;&amp;#x6B21;&amp;#x8FD4;&amp;#x56DE;123&amp;#xFF0C;&amp;#x4E4B;&amp;#x540E;&amp;#x6BCF;&amp;#x6B21;&amp;#x8FD4;&amp;#x56DE;456&amp;#x3002;&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Important note&lt;/strong&gt;: The EXPECT_CALL() statement evaluates the action clause only once, even though the action may be performed many times. Therefore you must be careful about side effects. The following may not do what you want:&lt;/p&gt;&lt;/blockquote&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;n&lt;/span&gt; = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;.Times(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;4&lt;/span&gt;)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;.WillRepeatedly(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;n&lt;/span&gt;++));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x56E0;&amp;#x4E3A;Return&amp;#x662F;&amp;#x5B8F;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x53EA;&amp;#x4F1A;&amp;#x66FF;&amp;#x6362;&amp;#x4E00;&amp;#x6B21;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x4E0D;&amp;#x7BA1;GetX&amp;#x8C03;&amp;#x7528;&amp;#x51E0;&amp;#x6B21;&amp;#xFF0C;&amp;#x8FD4;&amp;#x56DE;&amp;#x90FD;&amp;#x662F;101&amp;#xFF0C;&amp;#x800C;&amp;#x4E0D;&amp;#x662F;101,102,103,&amp;#x2026;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;All Expectations Are Sticky&lt;/strong&gt; &lt;br&gt;&amp;#x6240;&amp;#x8C13;&amp;#x7684;sticky&amp;#x5C31;&amp;#x662F;EXPECT_CALL&amp;#x603B;&amp;#x662F;&amp;#x751F;&amp;#x6548;&amp;#x7684;&amp;#xFF0C;&amp;#x9664;&amp;#x975E;&amp;#x4F60;&amp;#x663E;&amp;#x793A;&amp;#x7684;&amp;#x5C06;&amp;#x5176;&amp;#x5931;&amp;#x6548;&amp;#x3002;&amp;#x5982;&amp;#x4E0B;&amp;#xFF0C;&amp;#x6240;&amp;#x6709;&amp;#x7684;EXPECT_CALL&amp;#x90FD;&amp;#x4F1A;&amp;#x751F;&amp;#x6548;&amp;#xFF0C;&amp;#x90A3;&amp;#x4E48;&amp;#x6700;&amp;#x540E;&amp;#x4E00;&amp;#x4E2A;&amp;#x4F1A;&amp;#x8986;&amp;#x76D6;&amp;#x524D;&amp;#x9762;&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;GetX&amp;#x603B;&amp;#x4F1A;&amp;#x8FD4;&amp;#x56DE;10&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = n; i &amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;      &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x679C;&amp;#x5E0C;&amp;#x671B;&amp;#x4ED6;&amp;#x8FD4;&amp;#x56DE;&amp;#xFF0C;30,20,10&amp;#xFF0C;&amp;#x2026;&amp;#xFF0C;&amp;#x5E94;&amp;#x8BE5;&amp;#x8FD9;&amp;#x4E48;&amp;#x5199;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = n; i &amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.RetiresOnSaturation&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;RetireOnSaturation&lt;/code&gt;&amp;#x5C31;&amp;#x662F;&amp;#x663E;&amp;#x793A;&amp;#x7684;&amp;#x8BA9;&amp;#x5176;&amp;#x5931;&amp;#x6548;&amp;#x3002;&amp;#x8FD8;&amp;#x6709;&amp;#x4E00;&amp;#x4E2A;&amp;#x529E;&amp;#x6CD5;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::InSequence;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::Return;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;InSequence&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;s&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;for&lt;/span&gt; (int i = &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, GetX())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.WillOnce&lt;/span&gt;(Return(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;*i))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;.RetiresOnSaturation&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x56E0;&amp;#x4E3A;InSequence&amp;#x7684;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x5728;&amp;#x524D;&amp;#x9762;&amp;#x7684;EXPECT_CALL&amp;#x751F;&amp;#x6548;&amp;#x4EE5;&amp;#x540E;&amp;#xFF0C;&amp;#x5C31;&amp;#x4F1A;&amp;#x81EA;&amp;#x52A8;&amp;#x5931;&amp;#x6548;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x4E0D;&amp;#x4F1A;&amp;#x4EA7;&amp;#x751F;&amp;#x8986;&amp;#x76D6;&amp;#x7684;&amp;#x6548;&amp;#x679C;&amp;#x3002; &lt;br&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Ordered vs Unordered Calls&lt;/strong&gt;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using &lt;/span&gt;::&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;testing&lt;/span&gt;::InSequence;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;TEST&lt;/span&gt;(FooTest, DrawsLineSegment) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;InSequence&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;dummy&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, PenDown());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, Forward(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;100&lt;/span&gt;));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;EXPECT_CALL&lt;/span&gt;(turtle, PenUp());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;  &lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;Foo&lt;/span&gt;();&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Expecting Partially Ordered Calls&lt;/strong&gt; &lt;br&gt;Google Mock allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to &lt;br&gt;use the After clause of EXPECT_CALL .&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;using ::testing::Sequence&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;Sequence &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s1&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s2&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(foo, A())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s1, &lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;s2&lt;/span&gt;)&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bar, &lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;B())&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s1);&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bar, &lt;/span&gt;C())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s2);&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(foo, D())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;InSequence(s2);&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;specifies the following DAG (where s1 is A -&amp;gt; B , and s2 is A -&amp;gt; C -&amp;gt; D ):&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;B&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;|&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;     &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;-&lt;/span&gt;&amp;gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;D&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Uninteresting Calls&lt;/strong&gt; &lt;br&gt;&amp;#x8FD9;&amp;#x662F;gmock&amp;#x62A5;&amp;#x7684;warning&amp;#x3002;&amp;#x5F53;&amp;#x9488;&amp;#x5BF9;&amp;#x67D0;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F85;&amp;#x6D4B;&amp;#x51FD;&amp;#x6570;&amp;#x8BBE;&amp;#x7F6E;&amp;#x4E86;EXPECT spec&amp;#xFF0C;&amp;#x5374;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x8C03;&amp;#x7528;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5C31;&amp;#x4F1A;&amp;#x62A5;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#x3002;&amp;#x6B64;&amp;#x65F6;gmock&amp;#x8BA4;&amp;#x4E3A;&amp;#x4F60;&amp;#x5BF9;&amp;#x8BE5;&amp;#x51FD;&amp;#x6570;&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x5174;&amp;#x8DA3;&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x5C31;&amp;#x4E0D;&amp;#x9700;&amp;#x8981;&amp;#x8FD9;&amp;#x4E2A;EXPECT spec&amp;#x3002;&amp;#x5F53;&amp;#x7136;&amp;#x4F60;&amp;#x53EF;&amp;#x4EE5;&amp;#x9009;&amp;#x62E9;&amp;#x5FFD;&amp;#x7565;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#xFF0C;&amp;#x4F46;&amp;#x6211;&amp;#x8BA4;&amp;#x4E3A;&amp;#x51FA;&amp;#x8FD9;&amp;#x4E2A;warning&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x591A;&amp;#x534A;&amp;#x662F;test&amp;#x6F0F;&amp;#x5199;&amp;#x4E86;&amp;#x4EC0;&amp;#x4E48;&amp;#x3002;&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;Returning Live Values from Mock Methods&lt;/strong&gt;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;using&lt;/span&gt; testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ByRef&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;using&lt;/span&gt; testing::&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Return&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MockFoo&lt;/span&gt; : public &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    public:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MOCK_METHOD0&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;int&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;int x = 0;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;MockFoo&lt;/span&gt; foo;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_CALL&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;foo&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;())&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    // .&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;WillRepeatedly&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ByRef(x)&lt;/span&gt;)); &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;X&lt;/span&gt; error&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;WillRepeatedly&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;ReturnPointee(x)&lt;/span&gt;);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;x = 42;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;EXPECT_EQ&lt;/span&gt;(42, &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;foo&lt;/span&gt;.&lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;GetValue&lt;/span&gt;());&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x4E00;&amp;#x4E9B;&amp;#x6D4B;&amp;#x8BD5;case&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5199;Unit Test&amp;#x5E76;&amp;#x4E0D;&amp;#x50CF;&amp;#x60F3;&amp;#x50CF;&amp;#x7684;&amp;#x90A3;&amp;#x4E48;&amp;#x7B80;&amp;#x5355;&amp;#xFF0C;&amp;#x5E76;&amp;#x4E0D;&amp;#x662F;&amp;#x8C03;&amp;#x7528;&amp;#x4E86;&amp;#x6846;&amp;#x67B6;&amp;#xFF0C;&amp;#x9488;&amp;#x5BF9;&amp;#x6BCF;&amp;#x4E2A;&amp;#x51FD;&amp;#x6570;&amp;#x5199;test case&amp;#x5C31;&amp;#x53EF;&amp;#x4EE5;&amp;#x3002;&amp;#x6309;&amp;#x6211;&amp;#x76EE;&amp;#x524D;&amp;#x7684;&amp;#x7406;&amp;#x89E3;&amp;#x6709;&amp;#x4EE5;&amp;#x4E0B;&amp;#x51E0;&amp;#x79CD;&amp;#x6311;&amp;#x6218;&amp;#xFF1A;&lt;/p&gt;&lt;ol style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;Test Case&amp;#x5982;&amp;#x4F55;&amp;#x89E3;&amp;#x8026;&amp;#x3002;&amp;#x4E0D;&amp;#x8981;&amp;#x6709;&amp;#x91CD;&amp;#x590D;&amp;#x6D4B;&amp;#x8BD5;(overlap)&amp;#x3002; &lt;br&gt;&amp;#x4F8B;&amp;#x5982;&amp;#xFF1A;&amp;#x5728;&amp;#x5199;A&amp;#x51FD;&amp;#x6570;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#xFF0C;&amp;#x5199;&amp;#x4E86;&amp;#x6D4B;&amp;#x8BD5;testA&amp;#xFF0C;B&amp;#x51FD;&amp;#x6570;&amp;#x4F1A;&amp;#x8C03;&amp;#x7528;A&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x90A3;&amp;#x4E48;&amp;#x5728;&amp;#x5199;&amp;#x5B8C;A&amp;#x4E4B;&amp;#x540E;&amp;#x5199;B&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;testB&amp;#x65F6;&amp;#xFF0C;&amp;#x662F;&amp;#x5426;&amp;#x8981;&amp;#x5C06;A mock/fake/stub&amp;#x6389;? &amp;#x5982;&amp;#x679C;&amp;#x4E0D;&amp;#x5C06;A&amp;#x51FD;&amp;#x6570;Fake&amp;#x6389;&amp;#xFF0C;&amp;#x5219;testA&amp;#x548C;testB&amp;#x4E4B;&amp;#x95F4;&amp;#x5C31;&amp;#x662F;&amp;#x6709;overlap&amp;#x3002;&amp;#x6211;&amp;#x8BA4;&amp;#x4E3A;&amp;#x8FD9;&amp;#x4E4B;&amp;#x95F4;&amp;#x53EF;&amp;#x4EE5;&amp;#x6709;&amp;#x53D6;&amp;#x820D;&amp;#xFF0C;&amp;#x6700;&amp;#x4F73;&amp;#x72B6;&amp;#x6001;&amp;#x5E94;&amp;#x5F53;&amp;#x662F;&amp;#x6B64;&amp;#x65F6;&amp;#xFF0C;&amp;#x5C06;testA&amp;#x5220;&amp;#x9664;&amp;#xFF0C;&amp;#x53EA;&amp;#x4FDD;&amp;#x7559;testB&amp;#x3002;&amp;#x4F46;&amp;#x4ECD;&amp;#x5E94;&amp;#x6839;&amp;#x636E;&amp;#x5177;&amp;#x4F53;&amp;#x60C5;&amp;#x51B5;&amp;#x800C;&amp;#x5B9A;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x4F55;&amp;#x9488;&amp;#x5BF9;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#x8FDB;&amp;#x884C;mock&amp;#x5316;&amp;#x3002; &lt;br&gt;&amp;#x4F8B;&amp;#x5982;&amp;#x51FA;&amp;#x73B0;&amp;#x8FD9;&amp;#x6837;&amp;#x7684;&amp;#x8BED;&amp;#x53E5;: &lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&#34;&gt;B = new A&lt;/code&gt;&amp;#xFF0C;&amp;#x5219;&amp;#x7C7B;B&amp;#x4F9D;&amp;#x8D56;&amp;#x4E8E;&amp;#x7C7B;A&amp;#x3002;&amp;#x4F46;&amp;#x7C7B;A&amp;#x5E76;&amp;#x6CA1;&amp;#x6709;&amp;#x5FC5;&amp;#x8981;&amp;#x7F16;&amp;#x8BD1;&amp;#x8FDB;test&amp;#x3002;&amp;#x56E0;&amp;#x4E3A;&amp;#x4E00;&amp;#x65E6;&amp;#x52A0;&amp;#x5165;A&amp;#xFF0C;&amp;#x5219;&amp;#x52BF;&amp;#x5FC5;&amp;#x4F1A;&amp;#x5F15;&amp;#x5165;&amp;#x66F4;&amp;#x591A;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x800C;&amp;#x5BFC;&amp;#x81F4;test&amp;#x7F16;&amp;#x8BD1;&amp;#x5D29;&amp;#x6E83;&amp;#x3002;&amp;#x4F9D;&amp;#x8D56;&amp;#x5173;&amp;#x7CFB;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x65E0;&amp;#x7A77;&amp;#x65E0;&amp;#x5C3D;&amp;#x3002;&amp;#x5728;&amp;#x505A;Android&amp;#x7684;&amp;#x5355;&amp;#x5143;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x7528;PowerMock&amp;#x53D6;&amp;#x4EE3;Mockito&amp;#x6765;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x5C06;&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;Fake&amp;#x5316;&amp;#x6210;&amp;#x7C7B;&amp;#x4F3C;&amp;#x5DE5;&amp;#x5382;&amp;#x51FD;&amp;#x6570;&amp;#xFF0C;&amp;#x8FD4;&amp;#x56DE;&amp;#x7C7B;&amp;#x5B9E;&amp;#x4F8B;&amp;#x3002;&amp;#x5177;&amp;#x4F53;&amp;#x53C2;&amp;#x770B;&amp;#x8FD9;&amp;#x7BC7;&amp;#x535A;&amp;#x6587;&lt;a href=&#34;https://zhougy0717.github.io/2016/10/19/Android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/&#34; target=&#34;_blank&#34; style=&#34;background: transparent; color: #1980e6; text-decoration: none;&#34;&gt;Android&amp;#x5355;&amp;#x5143;&amp;#x6D4B;&amp;#x8BD5;&lt;/a&gt;&amp;#x3002; &lt;br&gt;&amp;#x4F46;&amp;#x5B9E;&amp;#x9645;&amp;#x4E0A;&amp;#xFF0C;&amp;#x6309;&amp;#x7167;&amp;#x73B0;&amp;#x5728;&amp;#x7684;&amp;#x7406;&amp;#x89E3;&amp;#xFF0C;&amp;#x5176;&amp;#x5B9E;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x662F;&amp;#x4E0D;&amp;#x53EF;&amp;#x53D6;&amp;#x7684;&amp;#xFF0C;&amp;#x9996;&amp;#x5148;&amp;#x9020;&amp;#x6210;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;spec&amp;#x4E0D;&amp;#x6E05;&amp;#x6670;&amp;#xFF0C;&amp;#x8BD5;&amp;#x60F3;&amp;#x4E00;&amp;#x4E2A;&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x600E;&amp;#x4E48;&amp;#x4F1A;&amp;#x8FD4;&amp;#x56DE;&amp;#x53E6;&amp;#x4E00;&amp;#x4E2A;&amp;#x7C7B;&amp;#x7684;&amp;#x5B9E;&amp;#x4F8B;&amp;#x3002;&amp;#x5176;&amp;#x6B21;&amp;#xFF0C;&amp;#x5728;C++&amp;#x4E2D;&amp;#x5F88;&amp;#x96BE;&amp;#x505A;&amp;#x5230;Mock&amp;#x6784;&amp;#x9020;&amp;#x51FD;&amp;#x6570;&amp;#x3002;&amp;#x597D;&amp;#x7684;&amp;#x505A;&amp;#x6CD5;&amp;#x5E94;&amp;#x5F53;&amp;#x662F;&amp;#x8FD0;&amp;#x7528;Dependency Injection&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#xFF1A;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;A&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;B&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        A* a = &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;new&lt;/span&gt; A;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7C7B;B&amp;#x5E94;&amp;#x5F53;&amp;#x6539;&amp;#x5199;&amp;#x4E3A;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e; font-style: italic;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    void &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(A*)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5C06;&amp;#x7C7B;A&amp;#x6307;&amp;#x9488;&amp;#x4F20;&amp;#x5165;&amp;#xFF0C;&amp;#x89E3;&amp;#x51B3;dependency&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x3002;&lt;/p&gt;&lt;ol start=&#34;3&#34; style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x5982;&amp;#x4F55;&amp;#x80FD;&amp;#x591F;&amp;#x8BA9;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x5728;&amp;#x4EFB;&amp;#x610F;&amp;#x73AF;&amp;#x5883;&amp;#x4E0B;&amp;#x5747;&amp;#x8FD4;&amp;#x56DE;&amp;#x540C;&amp;#x6837;&amp;#x7684;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7ED3;&amp;#x679C;&amp;#x3002; &lt;br&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x4E00;&amp;#x822C;&amp;#x6D89;&amp;#x53CA;&amp;#x6D4B;&amp;#x8BD5;&amp;#x73AF;&amp;#x5883;&amp;#x7684;&amp;#x5F71;&amp;#x54CD;&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#x8C03;&amp;#x7528;&amp;#x7F51;&amp;#x7EDC;&amp;#x76F8;&amp;#x5173;&amp;#x7684;&amp;#x529F;&amp;#x80FD;&amp;#xFF0C;&amp;#x5728;&amp;#x6CA1;&amp;#x6709;&amp;#x7F51;&amp;#x7EDC;&amp;#x7684;&amp;#x73AF;&amp;#x5883;&amp;#x5C31;&amp;#x6CA1;&amp;#x6CD5;&amp;#x8FDB;&amp;#x884C;&amp;#x3002;&amp;#x518D;&amp;#x4F8B;&amp;#x5982;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#x64CD;&amp;#x4F5C;&amp;#x771F;&amp;#x5B9E;&amp;#x5177;&amp;#x4F53;&amp;#x6587;&amp;#x4EF6;&amp;#xFF0C;&amp;#x5219;&amp;#x8BE5;&amp;#x6587;&amp;#x4EF6;&amp;#x88AB;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5916;&amp;#x4EBA;&amp;#x4E3A;&amp;#x6216;&amp;#x4EE3;&amp;#x7801;&amp;#x4FEE;&amp;#x6539;&amp;#xFF0C;&amp;#x5219;&amp;#x6D4B;&amp;#x8BD5;&amp;#x53EF;&amp;#x80FD;&amp;#x5C31;&amp;#x4F1A;&amp;#x83AB;&amp;#x540D;&amp;#x5931;&amp;#x8D25;&amp;#x3002; &lt;br&gt;&amp;#x9488;&amp;#x5BF9;&amp;#x8FD9;&amp;#x4E9B;&amp;#x60C5;&amp;#x51B5;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x5E94;&amp;#x5F53;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x4E2D;&amp;#x5C3D;&amp;#x91CF;&amp;#x907F;&amp;#x514D;&amp;#x3002;&amp;#x4F8B;&amp;#x5982;&amp;#x524D;&amp;#x8005;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x5E94;&amp;#x5F53;&amp;#x5BF9;&amp;#x7F51;&amp;#x7EDC;&amp;#x63A5;&amp;#x53E3;&amp;#x8FDB;&amp;#x884C;Mock&amp;#x5316;&amp;#xFF0C;&amp;#x540E;&amp;#x8005;&amp;#x5E94;&amp;#x5F53;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7684;setUp&amp;#x548C;tearDown&amp;#x4E2D;&amp;#x751F;&amp;#x6210;&amp;#x865A;&amp;#x5047;&amp;#x6587;&amp;#x4EF6;&amp;#x7528;&amp;#x4E8E;&amp;#x6D4B;&amp;#x8BD5;&amp;#xFF0C;&amp;#x5E76;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5B8C;&amp;#x6210;&amp;#x65F6;&amp;#x505A;&amp;#x6E05;&amp;#x7406;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; margin-bottom: 0; line-height: 1.6;&#34;&gt;&amp;#x4F1A;&amp;#x56E0;&amp;#x4E3A;&amp;#x5F88;&amp;#x5C0F;&amp;#x7684;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;&amp;#x6539;&amp;#x52A8;&amp;#xFF0C;&amp;#x800C;&amp;#x5BFC;&amp;#x81F4;&amp;#x5927;&amp;#x9762;&amp;#x79EF;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5931;&amp;#x8D25;&amp;#xFF0C;&amp;#x751A;&amp;#x81F3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x5D29;&amp;#x6E83;&amp;#x3002; &lt;br&gt;&amp;#x8FD9;&amp;#x4E2A;&amp;#x5C31;&amp;#x662F;gmock&amp;#x6587;&amp;#x6863;&amp;#x4E2D;&amp;#x63D0;&amp;#x5230;&amp;#x7684;&amp;#x8981;&amp;#x9488;&amp;#x5BF9;&amp;#x63A5;&amp;#x53E3;&amp;#x7F16;&amp;#x7A0B;&amp;#xFF0C;&amp;#x9488;&amp;#x5BF9;&amp;#x63A5;&amp;#x53E3;&amp;#x6D4B;&amp;#x8BD5;&amp;#x3002;Robert C&amp;#xB7;Martin&amp;#x5728;&amp;#x300A;&amp;#x654F;&amp;#x6377;&amp;#x8F6F;&amp;#x4EF6;&amp;#x5F00;&amp;#x53D1;&amp;#xFF0D;&amp;#x539F;&amp;#x5219;&amp;#x3001;&amp;#x6A21;&amp;#x5F0F;&amp;#x4E0E;&amp;#x5B9E;&amp;#x8DF5;&amp;#x300B;&amp;#x4E00;&amp;#x4E66;&amp;#x4E2D;&amp;#x6709;&amp;#x63D0;&amp;#x51FA;&amp;#xFF1A;&amp;#x6240;&amp;#x6709;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x90FD;&amp;#x5E94;&amp;#x4F9D;&amp;#x8D56;&amp;#x4E8E;&amp;#x62BD;&amp;#x8C61;&amp;#x63A5;&amp;#x53E3;&amp;#x3002;&amp;#x56E0;&amp;#x4E3A;&amp;#x62BD;&amp;#x8C61;&amp;#x63A5;&amp;#x53E3;&amp;#x662F;&amp;#x7ECF;&amp;#x8FC7;&amp;#x62BD;&amp;#x8C61;&amp;#x7684;&amp;#xFF0C;&amp;#x76F8;&amp;#x5BF9;&amp;#x5177;&amp;#x4F53;&amp;#x7684;&amp;#x5B9E;&amp;#x73B0;&amp;#x4EE3;&amp;#x7801;&amp;#x8F83;&amp;#x4E3A;&amp;#x7A33;&amp;#x5B9A;&amp;#x3002;&amp;#x800C;&amp;#x88AB;&amp;#x4F9D;&amp;#x8D56;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x5E94;&amp;#x8BE5;&amp;#x5C3D;&amp;#x53EF;&amp;#x80FD;&amp;#x4FDD;&amp;#x6301;&amp;#x7A33;&amp;#x5B9A;&amp;#xFF0C;&amp;#x8FD9;&amp;#x6837;&amp;#x57FA;&amp;#x4E8E;&amp;#x4E4B;&amp;#x4E0A;&amp;#x7684;&amp;#x4EE3;&amp;#x7801;&amp;#x624D;&amp;#x4E0D;&amp;#x4F1A;&amp;#x56E0;&amp;#x4E3A;&amp;#x4F9D;&amp;#x8D56;&amp;#x7684;&amp;#x6539;&amp;#x52A8;&amp;#x800C;&amp;#x6539;&amp;#x52A8;&amp;#x3002;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E0B;&amp;#x9762;&amp;#x5217;&amp;#x51FA;&amp;#x51E0;&amp;#x79CD;&amp;#x6211;&amp;#x5728;&amp;#x5B9E;&amp;#x9645;&amp;#x5199;test case&amp;#x65F6;&amp;#x9047;&amp;#x5230;&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#xFF0C;&amp;#x5728;gmock&amp;#x4E2D;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x65B9;&amp;#x6848;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;&amp;#x6309;&amp;#x7167;&amp;#x51FD;&amp;#x6570;&amp;#x53C2;&amp;#x6570;&amp;#x8FD4;&amp;#x56DE;&amp;#x7ED3;&amp;#x679C; - Fake&lt;/h3&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4F8B;&amp;#x5982;:&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;class A&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    virtual &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;EXPECT_CALL&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(mockA, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;func&lt;/span&gt;()&lt;/span&gt;)&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .&lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;WillRepeatedly&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(a+b)&lt;/span&gt;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;gmock&amp;#x4E2D;&amp;#x53EF;&amp;#x4EE5;&amp;#x8FD9;&amp;#x6837;&amp;#x505A;&amp;#xFF1A;Using Functions/Methods/Functors as Actions&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Invoke;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockFoo : &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt; Foo &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    MOCK_METHOD2(Sum, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; y));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    MOCK_METHOD1(ComplexJob, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bool&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt; x));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;CalculateSum&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; x + y; &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; Helper &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;ComplexJob&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;MockFoo foo;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;Helper helper;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(foo, Sum(_, _))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(Invoke(CalculateSum));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(foo, ComplexJob(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(Invoke(&amp;amp;helper, &amp;amp;Helper::ComplexJob));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;foo.Sum(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Invokes CalculateSum(5, 6).&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;foo.ComplexJob(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;10&lt;/span&gt;); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Invokes helper.ComplexJob(10);&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mock non-virtual&amp;#x51FD;&amp;#x6570;&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// A simple packet stream class. None of its members is virtual.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; ConcretePacketStream &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;AppendPacket&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(Packet* new_packet)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt; Packet* &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;GetPacket&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;size_t&lt;/span&gt; packet_number)&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt; NumberOfPackets() &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// A mock packet stream class. It inherits from no other, but defines&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// GetPacket() and NumberOfPackets().&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; MockPacketStream &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        MOCK_CONST_METHOD1(GetPacket, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt; Packet*(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt; packet_number));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        MOCK_CONST_METHOD0(NumberOfPackets, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;size_t&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketStream&amp;gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;CreateConnection&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(PacketStream* stream)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketStream&amp;gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; PacketReader &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;ReadPackets&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(PacketStream* stream, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;size_t&lt;/span&gt; packet_num)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;MockPacketStream mock_stream;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mock_stream, ...)...;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;.. &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;set&lt;/span&gt; more expectations on mock_stream ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;PacketReader&amp;lt;MockPacketStream&amp;gt; reader(&amp;amp;mock_stream);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;... exercise reader ...&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x4E3A;&amp;#x4EC0;&amp;#x4E48;&amp;#x8981;&amp;#x8FD9;&amp;#x4E48;&amp;#x505A;&amp;#xFF1F; &lt;br&gt;&amp;#x56E0;&amp;#x4E3A;&amp;#x53EA;&amp;#x80FD;&amp;#x8FD9;&amp;#x4E48;&amp;#x505A;&amp;#x3002;&amp;#x666E;&amp;#x901A;&amp;#x7684;mock&amp;#xFF0C;&amp;#x8981;&amp;#x901A;&amp;#x8FC7;&amp;#x7EE7;&amp;#x627F;&amp;#x88AB;&amp;#x6D4B;&amp;#x8BD5;&amp;#x7C7B;&amp;#xFF0C;&amp;#x5E76;&amp;#x91CD;&amp;#x5199;virtual&amp;#x51FD;&amp;#x6570;&amp;#x6765;&amp;#x5B9E;&amp;#x73B0;&amp;#x3002;&amp;#x800C;&amp;#x4E0A;&amp;#x9762;&amp;#x7684;ConcretePacketStream&amp;#x548C;MockPacketStream&amp;#x5E76;&amp;#x4EFB;&amp;#x4F55;&amp;#x6CA1;&amp;#x6709;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;&amp;#x8BF4;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x4F20;&amp;#x5165;&amp;#x540E;&amp;#x8005;&amp;#x7684;&amp;#x6307;&amp;#x9488;&amp;#xFF0C;&amp;#x4E0D;&amp;#x7528;reinterpret_cast&amp;#x662F;&amp;#x4E0D;&amp;#x80FD;&amp;#x8F6C;&amp;#x6210;&amp;#x524D;&amp;#x8005;&amp;#x7684;&amp;#x6307;&amp;#x9488;&amp;#x7684;&amp;#x3002; &lt;br&gt;&amp;#x6240;&amp;#x4EE5;&amp;#x60F3;&amp;#x4E00;&amp;#x4E2A;&amp;#x53D8;&amp;#x901A;&amp;#x7684;&amp;#x529E;&amp;#x6CD5;&amp;#xFF0C;&amp;#x7528;&amp;#x6A21;&amp;#x677F;&amp;#x7C7B;&amp;#x6765;&amp;#x5B9A;&amp;#x4E49;&amp;#x88AB;&amp;#x6D4B;&amp;#x4EE3;&amp;#x7801;&amp;#xFF0C;&amp;#x5728;&amp;#x6D4B;&amp;#x8BD5;&amp;#x65F6;&amp;#x4F20;&amp;#x5165;mock&amp;#x7C7B;&amp;#xFF0C;&amp;#x5728;&amp;#x751F;&amp;#x4EA7;&amp;#x65F6;&amp;#xFF0C;&amp;#x4F20;&amp;#x5165;&amp;#x771F;&amp;#x5B9E;&amp;#x7C7B;&amp;#x3002;&lt;/p&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mocking Side Effects&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mutator, MutateInt(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(DoAll(SetArgPointee&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;), Return(true)));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mutator, Mutate(NotNull(), &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(SetArrayArgument&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(values, values + &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x7B2C;&amp;#x4E00;&amp;#x4E2A;&amp;#x5C06;MutateInt&amp;#x7B2C;&amp;#x4E00;&amp;#x4E2A;&amp;#x53C2;&amp;#x6570;&amp;#x6307;&amp;#x9488;&amp;#x6307;&amp;#x5411;&amp;#x7684;int&amp;#xFF0C;&amp;#x8BBE;&amp;#x4E3A;5&amp;#xFF0C;&amp;#x5E76;&amp;#x8FD4;&amp;#x56DE;true&amp;#x3002; &lt;br&gt;&amp;#x7B2C;&amp;#x4E8C;&amp;#x4E2A;&amp;#x5C06;values&amp;#x6570;&amp;#x7EC4;&amp;#x7684;[0,5)&amp;#x62F7;&amp;#x8D1D;&amp;#x5230;&amp;#x53C2;&amp;#x6570;1&amp;#x6307;&amp;#x5411;&amp;#x7684;&amp;#x5730;&amp;#x5740;&amp;#x3002; &lt;br&gt;&amp;#x5982;&amp;#x679C;&amp;#x4ECD;&amp;#x9700;&amp;#x8981;&amp;#x8FD4;&amp;#x56DE;&amp;#xFF0C;&amp;#x5219;&amp;#x7528;DoAll&amp;#xFF0C;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mutator, MutateInt(_))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;      .WillOnce(DoAll(SetArgPointee&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;&amp;gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;5&lt;/span&gt;),&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;                      &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;true&lt;/span&gt;)));&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Selecting an Action&amp;#x2019;s Arguments&lt;/h3&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::_;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; ::testing::Invoke;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;MyIsVisibleInQuadrant1&lt;/span&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; visible, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;string&lt;/span&gt;&amp;amp; name, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; y,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #e6db74;&#34;&gt;map&lt;/span&gt;&amp;lt;pair&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;&amp;gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt;&amp;gt;&amp;amp; weight,&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt; min_weight, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;double&lt;/span&gt; max_wight) &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;return&lt;/span&gt; IsVisibleInQuadrant1(visible, x, y);&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;.&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;..&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    .WillOnce(Invoke(MyIsVisibleInQuadrant1)); &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Now it works.&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x5B9A;&amp;#x4E49;&amp;#x81EA;&amp;#x5DF1;&amp;#x7684;adaptor MyIsVisibleInQuadrant1&amp;#xFF0C;&amp;#x6216;&amp;#x8005;&amp;#x7528;gmock&amp;#x63D0;&amp;#x4F9B;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x4F18;&amp;#x96C5;&amp;#x7684;&amp;#x89E3;&amp;#x51B3;&amp;#x3002;&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:Invoke;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;using&lt;/span&gt; :&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:testing:&lt;span style=&#34;display: inline; line-height: 1.6;&#34;&gt;:WithArgs;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;EXPECT_CALL(mock, Foo(&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;_&lt;/span&gt;))&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;.WillOnce(WithArgs&amp;lt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;3&lt;/span&gt;&amp;gt;(Invoke(IsVisibleInQuadrant1)));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// No need to define your own adaptor.&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Mocking Private or Protected Methods&lt;/h4&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Transform&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;Gadget* g&lt;/span&gt;) &lt;/span&gt;= &lt;span style=&#34;display: inline; line-height: 1.6; color: #ae81ff;&#34;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;protected&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Resume&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;private&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #66d9ef;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;GetTimeOut&lt;/span&gt;(&lt;span style=&#34;display: inline; line-height: 1.6; color: #f8f8f2;&#34;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;MockFoo&lt;/span&gt; : &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;display: inline; line-height: 1.6; color: #a6e22e;&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;    &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        ...&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        MOCK_METHOD1(Transform, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;bool&lt;/span&gt;(Gadget* g));&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// The following must be in the public section, even though the&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        &lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// methods are protected or private in the base class.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        MOCK_METHOD0(Resume, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;void&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;        MOCK_METHOD0(GetTimeOut, &lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;int&lt;/span&gt;());&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&amp;#125;;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;C++ allows a subclass to specify a different access level than the base class on a virtual function.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 20px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Misc&lt;/h4&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Keep in mind that one doesn&amp;#x2019;t have to verify more than one property in one test. In fact, it&amp;#x2019;s a good style to verify only one &lt;br&gt;thing in one test. If you do that, a bug will likely break only one or two tests instead of dozens&lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;When it&amp;#x2019;s being destroyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, &lt;br&gt;and will generate Google Test failures if not. &lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Currently these are only platforms that support the pthreads library (this includes Linux and Mac). &lt;/p&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;&amp;#x52A0;&amp;#x4E0A;&amp;#x547D;&amp;#x4EE4;&amp;#x884C;&amp;#x53C2;&amp;#x6570;&amp;#x2013;gmock_verbose=info&amp;#x53EF;&amp;#x4EE5;&amp;#x663E;&amp;#x793A;&amp;#x6240;&amp;#x6709;EXPECT_CALL&amp;#x7684;&amp;#x5177;&amp;#x4F53;&amp;#x8C03;&amp;#x7528;&amp;#x60C5;&amp;#x51B5;&amp;#x3002;&lt;/p&gt;&lt;h2 style=&#34;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 34.4px; margin: 1.2em 0 .6em 0; text-align: start;&#34;&gt;Some useful tips in gtest&lt;/h2&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Selecting Tests&lt;/h3&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;If you set the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;GTEST_FILTER&lt;/strong&gt; environment variable or the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x2013;gtest_filter&lt;/strong&gt; flag to a filter string, Google Test will only run the tests whose full names (in the form of TestCaseName.TestName) match the filter. &lt;br&gt;The format of a filter is a &amp;#x2018;:&amp;#x2019;-separated list of wildcard patterns (called the positive patterns) optionally followed by a &amp;#x2018;-&amp;#x2019; and another &amp;#x2018;:&amp;#x2019;-separated pattern list (called the negative patterns).&lt;/p&gt;&lt;/blockquote&gt;&lt;ul style=&#34;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&#34;&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test Has no flag, and thus runs all its tests.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=* Also runs everything, due to the single match-everything * value.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=FooTest.* Runs everything in test case FooTest.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=&lt;em style=&#34;line-height: 1.6;&#34;&gt;Null&lt;/em&gt;:&lt;em style=&#34;line-height: 1.6;&#34;&gt;Constructor&lt;/em&gt; Runs any test whose full name contains either &amp;#x201C;Null&amp;#x201D; or &amp;#x201C;Constructor&amp;#x201D;.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=-&lt;em style=&#34;line-height: 1.6;&#34;&gt;DeathTest.&lt;/em&gt; Runs all non-death tests.&lt;/li&gt;&lt;li style=&#34;line-height: 1.6;&#34;&gt;./foo_test &amp;#x2013;gtest_filter=FooTest.*-FooTest.Bar Runs everything in test case FooTest except FooTest.Bar&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Temporarily Disabling Tests&lt;/p&gt;&lt;pre style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 0; border: 0; border-radius: 5px; text-align: start; word-break: break-all;&#34;&gt;&lt;code style=&#34;font-family: &amp;apos;Source Code Pro&amp;apos;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 1.3em 2em;&#34;&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Tests that Foo does Abc.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;TEST(FooTest, DISABLED_DoesAbc) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #f92672;&#34;&gt;class&lt;/span&gt; DISABLED_BarTest : public ::testing::Test &amp;#123; ... &amp;#125;;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;&lt;span style=&#34;display: inline; line-height: 1.6; color: #75715e;&#34;&gt;// Tests that Bar does Xyz.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;line-height: 1.6; display: block;&#34;&gt;TEST_F(DISABLED_BarTest, DoesXyz) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;margin: 0 0 1.1em; line-height: 1.6;&#34;&gt;Temporarily Enabling Disabled Tests&lt;/p&gt;&lt;blockquote style=&#34;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&#34;&gt;&lt;p style=&#34;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&#34;&gt;just invoke the test program with the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;&amp;#x2013;gtest_also_run_disabled_tests&lt;/strong&gt; flag or set the &lt;strong style=&#34;font-weight: bold; line-height: 1.6;&#34;&gt;GTEST_ALSO_RUN_DISABLED_TESTS&lt;/strong&gt; environment variable to a value other than 0.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=&#34;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 27.2px; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&#34;&gt;Repeating the Tests&lt;/h3&gt;&lt;table style=&#34;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&#34;&gt;&lt;thead style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;&lt;/th&gt;&lt;th align=&#34;center&#34; style=&#34;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;&#34;&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style=&#34;line-height: 1.6;&#34;&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=1000&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat foo_test 1000 times and don&amp;#x2019;t stop at failures.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=-1&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;A negative count means repeating forever.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;$&lt;/span&gt; foo_test &amp;#x2013;gtest_repeat=1000 &amp;#x2013;gtest_break_on_failure&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat foo_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks.&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;line-height: 1.6;&#34;&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;$ foo_test &amp;#x2013;gtest_repeat=1000 &amp;#x2013;gtest_filter=FooBar&lt;/td&gt;&lt;td align=&#34;center&#34; style=&#34;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&#34;&gt;Repeat the tests whose name matches the filter 1000 times.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;center style=&#34;display:none&#34;&gt;%23%20C/C++%20Test%20Framework%20-%20Google%20Test%20%26%20Google%20Mock%0A@%28myblog%29%5BTDD%2C%20gtest%2C%20gmock%5D%0A%0AGoogle%20Test%uFF0CGoogle%20Mock%u4EE5%u4E0B%u7B80%u79F0gtest%uFF0Cgmock%u3002%0A%u5728%u63A5%u89E6gtest%uFF0Cgmock%u4E4B%u524D%uFF0C%u6D4B%u8BD5C/C++%20code%u4F7F%u7528%5BUnitTest++%5D%28https%3A//github.com/unittest-cpp/unittest-cpp%29%u3002%u8FD9%u662F%u4E00%u4E2A%u5F88%u7B80%u6D01%u7684%u6846%u67B6%uFF0C%u4E0A%u624B%u5F88%u5FEB%u3002%u53C2%u770B%u53E6%u4E00%u7BC7%u535A%u6587%5BUnitTest++%u7B80%u4ECB%5D%28https%3A//zhougy0717.github.io/2016/02/29/UnitTest++%25E7%25AE%2580%25E4%25BB%258B/%29%u3002%u6D4B%u8BD5%u76F8%u5173%u7684%u529F%u80FD%u591F%u7528%uFF0C%u4F46%u662F%u6CA1%u6709mock%u5E93%u3002%u8FD9%u5E26%u6765%u7684%u95EE%u9898%u662F%uFF1A%0A1.%20%u6D4B%u8BD5%u9057%u7559%u4EE3%u7801%u7684%u65F6%u5019%uFF0C%u9700%u8981%u81EA%u884Cfake%u76F8%u5173%u4EE3%u7801%u3002%u8FD9%u4E2A%u5728%u9057%u7559%u7CFB%u7EDF%u5F88%u5E9E%u5927%u65F6%uFF0C%u8981%u9887%u8D39%u5FC3%u529B%u3002%u800C%u4E14%u8FC7%u591A%u6D89%u53CA%u7EC6%u8282%uFF0C%u5BFC%u81F4%u6D4B%u8BD5%u6781%u4E0D%u7A33%u5B9A%uFF0C%u7CFB%u7EDF%u4EE3%u7801%u4EFB%u610F%u7684%u6F14%u8FDB%uFF0C%u90FD%u4F1A%u5BFC%u81F4%u5927%u5806%u7684%u6D4B%u8BD5%u5931%u8D25%uFF0C%u751A%u81F3%u6D4B%u8BD5%u65E0%u6CD5%u8FDB%u884C%u3002%0A2.%20%u6D4B%u8BD5case%u4E4B%u95F4%u65E0%u6CD5%u5F88%u597D%u7684%u89E3%u8026%u3002%u7ED3%u679C%u540C%u6837%u662F%u6D4B%u8BD5%u4E0D%u591F%u7A33%u5B9A%u3002%u672F%u8BED%u662F%u6D4B%u8BD5%u4EE3%u7801%u5F88%u201C%u8106%u5F31%u201D%u3002%0A%0AJava%uFF0CPython%uFF0CJavaScript%u90FD%u6709%u81EA%u5DF1%u7684mock%u5E93%u3002Python%u7684Mock%u7C7B%uFF0CJava%u7684Mockito/PowerMock%uFF0CJavaScript%u7684Sinon%u3002%u4E8E%u662F%uFF0C%u5728%u7F51%u4E0A%u641C%u7D22%u4E86%u4E00%u4E0BC/C++%u7684Mock%u5E93%uFF0C%u4E8E%u662F%u770B%u5230%u4E86gtest%uFF0Cgmock%u3002%u7136%u540E%u5C31%u6709%u4E86%u8FD9%u4E00%u7BC7%u3002%0A%0A%23%23%20%u7B80%u4ECB%0A%u4E0D%u7528%u53BB%u7F51%u4E0A%u8D39%u5FC3%u627E%u6559%u7A0B%uFF0C%u4E24%u4E2A%u9879%u76EE%u7684%u6587%u6863%u90FD%u975E%u5E38%u68D2%u3002%u5165%u53E3%u7EDF%u4E00%u5728%5Bgtest%20GitHub%u9879%u76EE%u4E3B%u9875%5D%28https%3A//github.com/google/googletest%29%u4E0A%u3002%u800C%u4E14%u8BE5%u6587%u6863%u4E0D%u4EC5%u5F88%u597D%u7684%u4ECB%u7ECD%u4E86gtest%uFF0Cgmock%u7684%u7528%u6CD5%uFF0C%u5176%u4E2D%u8FD8%u6D89%u53CA%u4E86%u5F88%u591ATDD%u6216%u8005UnitTest%u7684%u771F%u77E5%u707C%u89C1%uFF0C%u5F88%u503C%u5F97%u8BFB%u4E00%u8BFB%u3002%0A%u8981%u4F7F%u7528gtest%u975E%u5E38%u7B80%u5355%uFF1A%u7F16%u8BD1%u51FAgtest%uFF0Cgmock%uFF0C%u518D%u94FE%u5165%u4F60%u7684%u6D4B%u8BD5%u7A0B%u5E8F%u3002%0A%0A%23%23%23%20%u7F16%u8BD1gtest/gmock%0Agtest%uFF0Cgmock%u5747%u7528cmake%u6765%u7BA1%u7406%u8DE8%u5E73%u53F0%uFF0C%u5148%u7528cmake%u6765%u751F%u6210Makefile%u3002%u7528%u547D%u4EE4%60cmake%20-G%20%22Unix%20Makefiles%22%20/path/to/CMakeList.txt%60%0A%0A%23%23%23%20Makefile%0A%u7136%u540E%u6309%u7167%u4E0B%u9762%u7F16%u5199Makefile%u3002%u6CE8%u610Fgmock_main%u662F%u4E00%u4E2Amain%u51FD%u6570%u6765%u8C03%u7528%u6240%u6709%u7684test%20case%uFF0C%u7701%u5F97%u81EA%u5DF1%u5199main%u51FD%u6570%u4E86%u3002%0A%60%60%60%0ACC%20%3D%20gcc%0ACPP%20%3D%20g++%0ALINK%20%3D%20g++%0ACFLAGS%20%3D%20-g%20-Wall%20-Werror%20-Wextra%20-std%3Dgnu99%0ACPPFLAGS%20%3D%20-g%20-Wall%20-Werror%20-Wextra%0ALIBS%20%3D%20-L./lib%20-lgtest%20-lgmock%20-lgmock_main%20-lpthread%0A%0AC__SOURCES%20%3D%20%24%28wildcard%20*.c%29%0ACPPSOURCES%20%3D%20%24%28wildcard%20*.cpp%29%0AOBJECTS%20%3D%20%24%28patsubst%20%25.c%2C%20%25.o%2C%20%24%28C__SOURCES%29%29%20%24%28patsubst%20%25.cpp%2C%20%25.o%2C%20%24%28CPPSOURCES%29%29%0ATARGET%20%3D%20test_exe%0A%0Afirst%3A%20all%0A%0A%25.o%3A%20%25.c%0A%20%20%20%20%24%28CC%29%20%24%28INCLUDES%29%20-c%20%24%28CFLAGS%29%20-o%20%24@%20%24%3C%0A%0A%25.o%3A%20%25.cpp%0A%20%20%20%20%24%28CPP%29%20%24%28INCLUDES%29%20-c%20%24%28CPPFLAGS%29%20-o%20%24@%20%24%3C%0A%0Aall%3A%20%24%28TARGET%29%0A%0A%24%28TARGET%29%3A%20%24%28OBJECTS%29%0A%20%20%20%20%24%28LINK%29%20%24%28CPPFLAGS%29%20%24%28LIBS%29%20-o%20%24%28TARGET%29%20%24%28OBJECTS%29%0A%0A.PHONY%20%3A%20clean%0A%0Aclean%3A%0A%20%20%20%20rm%20-f%20%24%28TARGET%29%20%24%28OBJECTS%29%0A%60%60%60%0A%0A%23%23%23%20Terms%0A%7C%20Meaning%20%20%20%20%7C%20Google%20Test%20Term%20%7C%20ISTQB%20Term%20%7C%0A%7C%20%3A--------%3A%20%7C%20%3A--------------%3A%20%7C%20%3A--------%3A%20%7C%0A%7C%20Exercise%20a%20particular%20program%20path%20with%20specific%20input%20values%20and%20verify%20the%20results%20%7C%20TEST%28%29%20%7C%20Test%20Case%0A%7CA%20set%20of%20several%20tests%20related%20to%20one%20component%20%7C%20Test%20Case%20%7C%20Test%20Suite%0A%0A%23%23%23%20Test%0A%60%60%60%0A%23include%20%22gtest/gtest.h%22%0A%23include%20%22gmock/gmock.h%22%0A%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0Ausing%20%3A%3Atesting%3A%3ATest%3B%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AAtLeast%3B%0A%0ATEST%28TestCaseName%2C%20should_this_test_do%29%0A%7B%0A%09...%0A%20%20%20%20EXPECT_STREQ%28%22%7B%7D%22%2C%20str%29%3B%0A%7D%0A%60%60%60%0A%u4E2D%u95F4%u7684%u90A3%u5806namespace%u90FD%u662Fgtest/gmock%u5E93%u91CC%u5B9A%u4E49%u7684matcher%u5B8F%u6216%u8005%u5404%u79CD%u6709%u7528%u7684%u5B8F%u3002%0A%0A%23%23%23%20Test%20Fixture%0A%u5728%u6D4B%u8BD5%u6709%u91CD%u590D%u7684%u65F6%u5019%uFF0C%u5C31%u8981%u7528%u5230Test%20Fixture%u4E86%uFF0C%u4E5F%u5C31%u662FsetUp%20/%20tearDown%u3002%0A%60%60%60%0Aclass%20QueueTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%0A%20protected%3A%0A%20%20virtual%20void%20SetUp%28%29%20%7B%0A%20%20%20%20q1_.Enqueue%281%29%3B%0A%20%20%20%20q2_.Enqueue%282%29%3B%0A%20%20%20%20q2_.Enqueue%283%29%3B%0A%20%20%7D%0A%0A%20%20//%20virtual%20void%20TearDown%28%29%20%7B%7D%0A%0A%20%20Queue%3Cint%3E%20q0_%3B%0A%20%20Queue%3Cint%3E%20q1_%3B%0A%20%20Queue%3Cint%3E%20q2_%3B%0A%7D%3B%0A%0ATEST_F%28QueueTest%2C%20IsEmptyInitially%29%20%7B%0A%20%20EXPECT_EQ%280%2C%20q0_.size%28%29%29%3B%0A%7D%0A%0ATEST_F%28QueueTest%2C%20DequeueWorks%29%20%7B%0A%20%20int*%20n%20%3D%20q0_.Dequeue%28%29%3B%0A%20%20EXPECT_EQ%28NULL%2C%20n%29%3B%0A%0A%20%20n%20%3D%20q1_.Dequeue%28%29%3B%0A%20%20ASSERT_TRUE%28n%20%21%3D%20NULL%29%3B%0A%20%20EXPECT_EQ%281%2C%20*n%29%3B%0A%20%20EXPECT_EQ%280%2C%20q1_.size%28%29%29%3B%0A%20%20delete%20n%3B%0A%0A%20%20n%20%3D%20q2_.Dequeue%28%29%3B%0A%20%20ASSERT_TRUE%28n%20%21%3D%20NULL%29%3B%0A%20%20EXPECT_EQ%282%2C%20*n%29%3B%0A%20%20EXPECT_EQ%281%2C%20q2_.size%28%29%29%3B%0A%20%20delete%20n%3B%0A%7D%0A%60%60%60%0A%23%23%23%23%20constructor/destructor%20vs.%20SetUp/TearDown%0A%3EWhen%20you%20need%20to%20write%20per-test%20set-up%20and%20tear-down%20logic%2C%20you%20have%20the%20choice%20between%20using%20the%20test%20fixture%20constructor/destructor%20or%20SetUp%28%29/TearDown%28%29.%20The%20former%20is%20usually%20preferred%2C%20as%20it%20has%20the%20following%20benefits%3A%0A%0A%3E-%20By%20initializing%20a%20member%20variable%20in%20the%20constructor%2C%20we%20have%20the%20option%20to%20make%20it%20const%2C%20which%20helps%20prevent%20accidental%20changes%20to%20its%20value%20and%20makes%20the%20tests%20more%20obviously%20correct.%0A-%20**In%20case%20we%20need%20to%20subclass%20the%20test%20fixture%20class%2C%20the%20subclass%27%20constructor%20is%20guaranteed%20to%20call%20the%20base%20class%27%20constructor%20first%2C%20and%20the%20subclass%27%20destructor%20is%20guaranteed%20to%20call%20the%20base%20class%27%20destructor%20afterward.%20**With%20SetUp%28%29/TearDown%28%29%2C%20a%20subclass%20may%20make%20the%20mistake%20of%20forgetting%20to%20call%20the%20base%20class%27%20SetUp%28%29/TearDown%28%29%20or%20call%20them%20at%20the%20wrong%20moment.%0A%0A%3E%20Benefit%20for%20using%20SetUp/TearDown%3A%0A%0A%3E-%20If%20the%20tear-down%20operation%20could%20throw%20an%20exception%2C%20you%20must%20use%20TearDown%28%29%20as%20opposed%20to%20the%20destructor%2C%20as%20throwing%20in%20a%20destructor%20leads%20to%20undefined%20behavior%20and%20usually%20will%20kill%20your%20program%20right%20away.%20Note%20that%20many%20standard%20libraries%20%28like%20STL%29%20may%20throw%20when%20exceptions%20are%20enabled%20in%20the%20compiler.%20Therefore%20you%20should%20prefer%20TearDown%28%29%20if%20you%20want%20to%20write%20portable%20tests%20that%20work%20with%20or%20without%20exceptions.%0A-%20The%20assertion%20macros%20throw%20an%20exception%20when%20flag%20--gtest_throw_on_failure%20is%20specified.%20Therefore%2C%20you%20shouldn%27t%20use%20Google%20Test%20assertions%20in%20a%20destructor%20if%20you%20plan%20to%20run%20your%20tests%20with%20this%20flag.%0A-%20In%20a%20constructor%20or%20destructor%2C%20you%20cannot%20make%20a%20virtual%20function%20call%20on%20this%20object.%20%28You%20can%20call%20a%20method%20declared%20as%20virtual%2C%20but%20it%20will%20be%20statically%20bound.%29%20Therefore%2C%20if%20you%20need%20to%20call%20a%20method%20that%20will%20be%20overriden%20in%20a%20derived%20class%2C%20you%20have%20to%20use%20SetUp%28%29/TearDown%28%29.%0A%0A%u7B80%u8A00%u4E4B%uFF0C%u5728%u903B%u8F91%u4E0A%uFF0C%u8FD9%u4E24%u7EC4%u7684%u4F5C%u7528%u76F8%u540C%uFF0C%u90FD%u662F%u6BCF%u4E2A%u6D4B%u8BD5%u4E4B%u524D%u4E4B%u540E%u4F1A%u505A%u4E00%u4E9B%u5904%u7406%u5DE5%u4F5C%u3002Constructor/Destructor%u7684%u597D%u5904%u662F%u63D0%u4F9B%u4E86%u7EE7%u627F%u3002setUp/tearDown%u7684%u597D%u5904%u662F%u53EF%u4EE5%u5904%u7406exception%uFF0C%u8FD9%u662F%u4E0D%u80FD%u653E%u5728%u6790%u6784%u51FD%u6570%u91CC%u7684%u3002%0A%23%23%23%20SetUpTestCase%20/%20TearDownTestCase%0ATest%20Case%u7EA7%u522B%u7684SetUp/TearDown%0A%60%60%60%0Aclass%20FooTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%0A%20protected%3A%0A%20%20//%20Per-test-case%20set-up.%0A%20%20//%20Called%20before%20the%20first%20test%20in%20this%20test%20case.%0A%20%20//%20Can%20be%20omitted%20if%20not%20needed.%0A%20%20static%20void%20SetUpTestCase%28%29%20%7B%0A%20%20%20%20shared_resource_%20%3D%20new%20...%3B%0A%20%20%7D%0A%0A%20%20//%20Per-test-case%20tear-down.%0A%20%20//%20Called%20after%20the%20last%20test%20in%20this%20test%20case.%0A%20%20//%20Can%20be%20omitted%20if%20not%20needed.%0A%20%20static%20void%20TearDownTestCase%28%29%20%7B%0A%20%20%20%20delete%20shared_resource_%3B%0A%20%20%20%20shared_resource_%20%3D%20NULL%3B%0A%20%20%7D%0A%0A%20%20//%20You%20can%20define%20per-test%20set-up%20and%20tear-down%20logic%20as%20usual.%0A%20%20virtual%20void%20SetUp%28%29%20%7B%20...%20%7D%0A%20%20virtual%20void%20TearDown%28%29%20%7B%20...%20%7D%0A%0A%20%20//%20Some%20expensive%20resource%20shared%20by%20all%20tests.%0A%20%20static%20T*%20shared_resource_%3B%0A%7D%3B%0A%60%60%60%0A%23%23%23%20SetUp/TearDown%20Environment%20%0A%3E-%20First%2C%20you%20subclass%20the%20%3A%3Atesting%3A%3AEnvironment%20class%20to%20define%20a%20test%20environment%2C%20which%20knows%20how%20to%20set-up%20and%20tear-down%3A%0A%3E-%20Then%2C%20you%20register%20an%20instance%20of%20your%20environment%20class%20with%20Google%20Test%20by%20calling%20the%20%60%3A%3Atesting%3A%3AAddGlobalTestEnvironment%28%29%60%20function%3A%0A%3ENow%2C%20when%20RUN_ALL_TESTS%28%29%20is%20called%2C%20it%20first%20calls%20the%20SetUp%28%29%20method%20of%20the%20environment%20object%2C%20then%20runs%20the%20tests%20if%20there%20was%20no%20fatal%20failures%2C%20and%20finally%20calls%20TearDown%28%29%20of%20the%20environment%20object.%0A-%20It%27s%20OK%20to%20register%20multiple%20environment%20objects.%20In%20this%20case%2C%20their%20SetUp%28%29%20will%20be%20called%20in%20the%20order%20they%20are%20registered%2C%20and%20their%20TearDown%28%29%20will%20be%20called%20in%20the%20reverse%20order.%0A-%20Note%20that%20Google%20Test%20takes%20ownership%20of%20the%20registered%20environment%20objects.%20Therefore%20do%20not%20delete%20them%20by%20yourself.%0A%0A%60%60%60%0Aclass%20Environment%20%7B%0A%20public%3A%0A%20%20virtual%20%7EEnvironment%28%29%20%7B%7D%0A%20%20//%20Override%20this%20to%20define%20how%20to%20set%20up%20the%20environment.%0A%20%20virtual%20void%20SetUp%28%29%20%7B%7D%0A%20%20//%20Override%20this%20to%20define%20how%20to%20tear%20down%20the%20environment.%0A%20%20virtual%20void%20TearDown%28%29%20%7B%7D%0A%7D%3B%0A%0AEnvironment*%20AddGlobalTestEnvironment%28Environment*%20env%29%3B%0A%60%60%60%0A%23%23%23%20%u65AD%u8A00%0A%u6709%u4E24%u79CD%u65AD%u8A00EXPECT%5C_xxx%u548CASSERT%5C_xxx%u3002%u524D%u8005%u4F1A%u8BA9%u6D4B%u8BD5%u7EC8%u6B62%uFF0C%u540E%u8005%u4E0D%u4F1A%uFF0C%u53EA%u4F1A%u8BA9%u6D4B%u8BD5fail%u3002%0A%0A%0A%23%23%20gmock%0A%u4E4B%u6240%u4EE5%u8981%u5207%u5230gtest%uFF0C%u552F%u4E00%u7684%u539F%u56E0%u5C31%u662Fgmock%uFF0C%u6240%u4EE5%u8981%u4E13%u5F00%u4E00%u7AE0%u91CD%u70B9%u4ECB%u7ECD%u4E00%u4E0B%u3002%u6240%u6709%u5185%u5BB9%u5747%u6765%u81EA%u4E8E%u5B98%u65B9%u6587%u6863%u3002%u5185%u5BB9%u6DF1%u5EA6%u7531%u6D45%u5165%u6DF1%uFF0C%u4F9D%u6B21%u5982%u4E0B%uFF1A%0A-%20%5BGoogle%20Mock%20for%20Dummies%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md%29%0A-%20%5BCookBook%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/CookBook.md%29%0A%0A%u6700%u540E%u8FD8%u6709%u53C2%u8003%u624B%u518C%3A%0A-%20%5BCheat%20Sheet%5D%28https%3A//github.com/google/googletest/blob/master/googlemock/docs/CheatSheet.md%29%0A%0A%23%23%23%20%u7B80%u4ECB%0A%3EGoogle%20C++%20Mocking%20Framework%20%28or%20Google%20Mock%20for%20short%29%20is%20a%20library%20%28sometimes%20we%20also%20call%20it%20a%20%22framework%22%20to%20make%20it%20sound%20cool%29%20for%20creating%20mock%20classes%20and%20using%20them.%20It%20does%20to%20C++%20what%20jMock%20and%20EasyMock%20do%20to%20Java.%0A%0A%23%23%23%23%20%u4F55%u4E3AMock%uFF1F%0A%3E**Mocks**%20are%20objects%20pre-programmed%20with%20expectations%2C%20which%20form%20a%20specification%20of%20the%20calls%20they%20are%20expected%20to%20receive.%0A%0A%u76F8%u5E94%u7684%u8FD8%u6709Fake%u548CStub%0A%3E**Fake**%20objects%20have%20working%20implementations%2C%20but%20usually%20take%20some%20shortcut%20%28perhaps%20to%20make%20the%20operations%20less%20expensive%29%2C%20which%20makes%20them%20not%20suitable%20for%20production.%20An%20in-memory%20file%20system%20would%20be%20an%20example%20of%20a%20fake.%0A%0Agmock%u7684%u6587%u6863%u91CC%u53EA%u63D0%u5230%u4E86Fake%uFF0C%u4ECEMartin%20Fowler%u7684%u6587%u7AE0%5BMocks%20Aren%27t%20Stubs%5D%28https%3A//martinfowler.com/articles/mocksArentStubs.html%29%u4E2D%u6458%u5F55%u5982%u4E0B%3A%0A%3E**Stubs**%20provide%20canned%20answers%20to%20calls%20made%20during%20the%20test%2C%20usually%20not%20responding%20at%20all%20to%20anything%20outside%20what%27s%20programmed%20in%20for%20the%20test.%0A%0A%u4E09%u8005%u4F5C%u7528%u76F8%u540C%uFF0C%u90FD%u662F%u6A21%u62DF%u7CFB%u7EDF%u5176%u4ED6%u90E8%u5206%u7684%u529F%u80FD%uFF0C%u8FBE%u5230%u4EE3%u7801%u9694%u79BB%u7684%u6548%u679C%uFF0C%u65B9%u4FBF%u6D4B%u8BD5%u3002%u4F46%u662FMock%u7684%u7279%u70B9%u662F%u66F4OO%u5316%uFF0C%u4E5F%u7B26%u5408TDD%u6216%u8005BDD%u7684%u601D%u60F3%u2014%u2014%u9488%u5BF9%u4E00%u4E2Aobject%u8BBE%u7F6E%u671F%u5F85%uFF0C%u518D%u5BF9%u9F50verify%u3002%0A%0AMocks%20vs.%20Stubs%20-%20from%20Martin%20Fowler%0A%3EIn%20order%20to%20use%20state%20verification%20on%20the%20stub%2C%20I%20need%20to%20make%20some%20extra%20methods%20on%20the%20stub%20to%20help%20with%20verification.%20As%20a%20result%20the%20stub%20implements%20MailService%20but%20adds%20extra%20test%20methods.%0A%0A%3EMock%20objects%20always%20use%20behavior%20verification%2C%20a%20stub%20can%20go%20either%20way.%20Meszaros%20refers%20to%20stubs%20that%20use%20behavior%20verification%20as%20a%20Test%20Spy.%20The%20difference%20is%20in%20how%20exactly%20the%20double%20runs%20and%20verifies%20and%20I%27ll%20leave%20that%20for%20you%20to%20explore%20on%20your%20own.%0A%0A%23%23%23%23%20Getting%20Started%0AClass%20to%20Mock%0A%60%60%60%0Aclass%20Turtle%20%7B%0A%20%20...%0A%20%20virtual%20%7ETurtle%28%29%20%7B%7D%0A%20%20virtual%20void%20PenUp%28%29%20%3D%200%3B%0A%20%20virtual%20void%20PenDown%28%29%20%3D%200%3B%0A%20%20virtual%20void%20Forward%28int%20distance%29%20%3D%200%3B%0A%7D%3B%0A%60%60%60%0AMock%20class%0A%60%60%60%0A%23include%20%22gmock/gmock.h%22%20%20//%20Brings%20in%20Google%20Mock.%0Aclass%20MockTurtle%20%3A%20public%20Turtle%20%7B%0A%20public%3A%0A%20%20...%0A%20%20MOCK_METHOD0%28PenUp%2C%20void%28%29%29%3B%0A%20%20MOCK_METHOD0%28PenDown%2C%20void%28%29%29%3B%0A%20%20MOCK_METHOD1%28Forward%2C%20void%28int%20distance%29%29%3B%0A%7D%3B%0A%60%60%60%0A%u9488%u5BF9%u5F85Mock%u7684Turtle%20class%u8981%u6CE8%u610F%u7684%u662F%3A%0A%3ENote%20that%20the%20**destructor%20of%20Turtle%20must%20be%20virtual**%2C%20as%20is%20the%20case%20for%20all%20classes%20you%20intend%20to%20inherit%20from%20-%20otherwise%20the%20destructor%20of%20the%20derived%20class%20will%20not%20be%20called%20when%20you%20delete%20an%20object%20through%20a%20base%20pointer%2C%20and%20you%27ll%20get%20corrupted%20program%20states%20like%20memory%20leaks.%0A%0AUse%20it%0A%60%60%60%0A%23include%20%22path/to/mock-turtle.h%22%0A%23include%20%22gmock/gmock.h%22%0A%23include%20%22gtest/gtest.h%22%0Ausing%20%3A%3Atesting%3A%3AAtLeast%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%231%0A%0ATEST%28PainterTest%2C%20CanDrawSomething%29%20%7B%0A%20%20MockTurtle%20turtle%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%232%0A%20%20EXPECT_CALL%28turtle%2C%20PenDown%28%29%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%233%0A%20%20%20%20%20%20.Times%28AtLeast%281%29%29%3B%0A%0A%20%20Painter%20painter%28%26turtle%29%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%234%0A%0A%20%20EXPECT_TRUE%28painter.DrawCircle%280%2C%200%2C%2010%29%29%3B%0A%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20%235%0A%0Aint%20main%28int%20argc%2C%20char**%20argv%29%20%7B%0A%20%20//%20The%20following%20line%20must%20be%20executed%20to%20initialize%20Google%20Mock%0A%20%20//%20%28and%20Google%20Test%29%20before%20running%20the%20tests.%0A%20%20%3A%3Atesting%3A%3AInitGoogleMock%28%26argc%2C%20argv%29%3B%0A%20%20return%20RUN_ALL_TESTS%28%29%3B%0A%7D%0A%60%60%60%0A%u5982%u679C%u4F60%u613F%u610F%u7684%u8BDD%uFF0C%u53EF%u4EE5%u81EA%u5DF1%u5199main%uFF0C%u5982%u679C%u4F60%u60F3%u5077%u61D2%uFF0C%u8BB0%u5F97%u5728Makefile%u91CClink%20gmock_main%u3002%0A%u6309Google%u7684%u8BF4%u6CD5%uFF0Cgmock%u4E5F%u53EF%u4EE5%u548C%u5176%u4ED6%u6D4B%u8BD5%u6846%u67B6%u517C%u5BB9%uFF0C%u4F46%u603B%u611F%u89C9%u633A%u60AC%u7684%u3002%0A%0A%23%23%23%23%20%u4E00%u4E9B%u6709%u7528%u7684%u5DE5%u5177%0A**Marcher**%0A%60EXPECT_CALL%28turtle%2C%20Forward%28_%29%29%3B%60%0A%26nbsp%3B%26nbsp%3B%26nbsp%3B%26nbsp%3B%20%u4EE5%u4EFB%u610F%u53C2%u6570%u8C03%u7528Forward%0A%60EXPECT_CALL%28turtle%2C%20Forward%28Ge%28100%29%29%29%3B%60%0A%26nbsp%3B%26nbsp%3B%26nbsp%3B%26nbsp%3B%20%u4EE5%u5927%u4E8E100%u7684%u6574%u6570%u8C03%u7528Forward%0A%09%0A**Cardinalities%3A%20How%20Many%20Times%20Will%20It%20Be%20Called%3F**%0A%3E-%20If%20neither%20WillOnce%28%29%20nor%20WillRepeatedly%28%29%20is%20in%20the%20EXPECT_CALL%28%29%2C%20the%20inferred%20cardinality%20is%20Times%281%29.%0A-%20If%20there%20are%20n%20WillOnce%28%29%27s%20but%20no%20WillRepeatedly%28%29%2C%20where%20n%20%3E%3D%201%2C%20the%20cardinality%20is%20Times%28n%29.%0A-%20If%20there%20are%20n%20WillOnce%28%29%27s%20and%20one%20WillRepeatedly%28%29%2C%20where%20n%20%3E%3D%200%2C%20the%20cardinality%20is%20Times%28AtLeast%28n%29%29.%0A%0A%60%60%60%0AEXPECT_CALL%28mockObj%2C%20func%28%29%29%0A%09.Times%28AtLeast%281%29%29%0A%09.WillOnce%28Return%28123%29%29%0A%09.WillRepeatedly%28Return%28456%29%29%0A%60%60%60%0A%u4E0A%u9762%u8FD9%u6BB5%u4EE3%u7801%u8981%u6C42func%u51FD%u6570%u81F3%u5C11%u8FD0%u884C%u4E00%u6B21%uFF0C%u7B2C%u4E00%u6B21%u8FD4%u56DE123%uFF0C%u4E4B%u540E%u6BCF%u6B21%u8FD4%u56DE456%u3002%0A%0A%3E**Important%20note**%3A%20The%20EXPECT_CALL%28%29%20statement%20evaluates%20the%20action%20clause%20only%20once%2C%20even%20though%20the%20action%20may%20be%20performed%20many%20times.%20Therefore%20you%20must%20be%20careful%20about%20side%20effects.%20The%20following%20may%20not%20do%20what%20you%20want%3A%0A%0A%60%60%60%0Aint%20n%20%3D%20100%3B%0AEXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A.Times%284%29%0A.WillRepeatedly%28Return%28n++%29%29%3B%0A%60%60%60%0A%u56E0%u4E3AReturn%u662F%u5B8F%uFF0C%u6240%u4EE5%u53EA%u4F1A%u66FF%u6362%u4E00%u6B21%uFF0C%u6240%u4EE5%u4E0D%u7BA1GetX%u8C03%u7528%u51E0%u6B21%uFF0C%u8FD4%u56DE%u90FD%u662F101%uFF0C%u800C%u4E0D%u662F101%2C102%2C103%2C...%0A%0A**All%20Expectations%20Are%20Sticky**%0A%u6240%u8C13%u7684sticky%u5C31%u662FEXPECT%5C_CALL%u603B%u662F%u751F%u6548%u7684%uFF0C%u9664%u975E%u4F60%u663E%u793A%u7684%u5C06%u5176%u5931%u6548%u3002%u5982%u4E0B%uFF0C%u6240%u6709%u7684EXPECT%5C_CALL%u90FD%u4F1A%u751F%u6548%uFF0C%u90A3%u4E48%u6700%u540E%u4E00%u4E2A%u4F1A%u8986%u76D6%u524D%u9762%u6240%u6709%u7684%uFF0C%u4E5F%u5C31%u662FGetX%u603B%u4F1A%u8FD4%u56DE10%u3002%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0Afor%20%28int%20i%20%3D%20n%3B%20i%20%3E%200%3B%20i--%29%20%7B%0A%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20%20%20.WillOnce%28Return%2810*i%29%29%3B%0A%7D%0A%60%60%60%0A%u5982%u679C%u5E0C%u671B%u4ED6%u8FD4%u56DE%uFF0C30%2C20%2C10%uFF0C...%uFF0C%u5E94%u8BE5%u8FD9%u4E48%u5199%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0Afor%20%28int%20i%20%3D%20n%3B%20i%20%3E%200%3B%20i--%29%20%7B%0A%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20.WillOnce%28Return%2810*i%29%29%0A%20%20%20%20.RetiresOnSaturation%28%29%3B%0A%7D%0A%60%60%60%0A%60RetireOnSaturation%60%u5C31%u662F%u663E%u793A%u7684%u8BA9%u5176%u5931%u6548%u3002%u8FD8%u6709%u4E00%u4E2A%u529E%u6CD5%uFF1A%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AInSequence%3B%0Ausing%20%3A%3Atesting%3A%3AReturn%3B%0A...%0A%7B%0A%20%20InSequence%20s%3B%0A%0A%20%20for%20%28int%20i%20%3D%201%3B%20i%20%3C%3D%20n%3B%20i++%29%20%7B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20GetX%28%29%29%0A%20%20%20%20%20%20%20%20.WillOnce%28Return%2810*i%29%29%0A%20%20%20%20%20%20%20%20.RetiresOnSaturation%28%29%3B%0A%20%20%7D%0A%7D%0A%60%60%60%0A%u56E0%u4E3AInSequence%u7684%u5173%u7CFB%uFF0C%u5728%u524D%u9762%u7684EXPECT%5C_CALL%u751F%u6548%u4EE5%u540E%uFF0C%u5C31%u4F1A%u81EA%u52A8%u5931%u6548%uFF0C%u6240%u4EE5%u4E0D%u4F1A%u4EA7%u751F%u8986%u76D6%u7684%u6548%u679C%u3002%0A**Ordered%20vs%20Unordered%20Calls**%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3AInSequence%3B...%0ATEST%28FooTest%2C%20DrawsLineSegment%29%20%7B%0A%20%20...%0A%20%20%7B%0A%20%20%20%20InSequence%20dummy%3B%0A%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20PenDown%28%29%29%3B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20Forward%28100%29%29%3B%0A%20%20%20%20EXPECT_CALL%28turtle%2C%20PenUp%28%29%29%3B%0A%20%20%7D%0A%20%20Foo%28%29%3B%0A%7D%0A%60%60%60%0A**Expecting%20Partially%20Ordered%20Calls**%0AGoogle%20Mock%20allows%20you%20to%20impose%20an%20arbitrary%20DAG%20%28directed%20acyclic%20graph%29%20on%20the%20calls.%20One%20way%20to%20express%20the%20DAG%20is%20to%0Ause%20the%20After%20clause%20of%20EXPECT_CALL%20.%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3ASequence%3B%0ASequence%20s1%2C%20s2%3B%0AEXPECT_CALL%28foo%2C%20A%28%29%29%0A%09.InSequence%28s1%2C%20s2%29%3B%0AEXPECT_CALL%28bar%2C%20B%28%29%29%0A%09.InSequence%28s1%29%3B%0AEXPECT_CALL%28bar%2C%20C%28%29%29%0A%09.InSequence%28s2%29%3B%0AEXPECT_CALL%28foo%2C%20D%28%29%29%0A%09.InSequence%28s2%29%3B%0A%60%60%60%0Aspecifies%20the%20following%20DAG%20%28where%20s1%20is%20A%20-%3E%20B%20%2C%20and%20s2%20is%20A%20-%3E%20C%20-%3E%20D%20%29%3A%0A%60%60%60%0A%09%20+---%3E%20B%0A%20%20%20%20%20%7C%0AA%20---%7C%0A%09%20%7C%0A%09%20+---%3E%20C%20---%3E%20D%0A%60%60%60%0A**Uninteresting%20Calls**%0A%u8FD9%u662Fgmock%u62A5%u7684warning%u3002%u5F53%u9488%u5BF9%u67D0%u4E00%u4E2A%u5F85%u6D4B%u51FD%u6570%u8BBE%u7F6E%u4E86EXPECT%20spec%uFF0C%u5374%u5E76%u6CA1%u6709%u8C03%u7528%u7684%u65F6%u5019%uFF0C%u5C31%u4F1A%u62A5%u8FD9%u4E2Awarning%u3002%u6B64%u65F6gmock%u8BA4%u4E3A%u4F60%u5BF9%u8BE5%u51FD%u6570%u5E76%u6CA1%u6709%u5174%u8DA3%uFF0C%u6240%u4EE5%u5C31%u4E0D%u9700%u8981%u8FD9%u4E2AEXPECT%20spec%u3002%u5F53%u7136%u4F60%u53EF%u4EE5%u9009%u62E9%u5FFD%u7565%u8FD9%u4E2Awarning%uFF0C%u4F46%u6211%u8BA4%u4E3A%u51FA%u8FD9%u4E2Awarning%u7684%u65F6%u5019%uFF0C%u591A%u534A%u662Ftest%u6F0F%u5199%u4E86%u4EC0%u4E48%u3002%0A%0A**Returning%20Live%20Values%20from%20Mock%20Methods**%0A%60%60%60%0Ausing%20testing%3A%3AByRef%3B%0Ausing%20testing%3A%3AReturn%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0A%09public%3A%0A%09%09MOCK_METHOD0%28GetValue%2C%20int%28%29%29%3B%0A%7D%3B%0A...%0Aint%20x%20%3D%200%3B%0AMockFoo%20foo%3B%0AEXPECT_CALL%28foo%2C%20GetValue%28%29%29%0A%09//%20.WillRepeatedly%28Return%28ByRef%28x%29%29%29%3B%20X%20error%0A%09.WillRepeatedly%28ReturnPointee%28x%29%29%3B%0Ax%20%3D%2042%3B%0AEXPECT_EQ%2842%2C%20foo.GetValue%28%29%29%3B%0A%60%60%60%0A%0A%23%23%23%20%u4E00%u4E9B%u6D4B%u8BD5case%0A%u5199Unit%20Test%u5E76%u4E0D%u50CF%u60F3%u50CF%u7684%u90A3%u4E48%u7B80%u5355%uFF0C%u5E76%u4E0D%u662F%u8C03%u7528%u4E86%u6846%u67B6%uFF0C%u9488%u5BF9%u6BCF%u4E2A%u51FD%u6570%u5199test%20case%u5C31%u53EF%u4EE5%u3002%u6309%u6211%u76EE%u524D%u7684%u7406%u89E3%u6709%u4EE5%u4E0B%u51E0%u79CD%u6311%u6218%uFF1A%0A1.%20Test%20Case%u5982%u4F55%u89E3%u8026%u3002%u4E0D%u8981%u6709%u91CD%u590D%u6D4B%u8BD5%28overlap%29%u3002%0A%u4F8B%u5982%uFF1A%u5728%u5199A%u51FD%u6570%u7684%u65F6%u5019%uFF0C%u5199%u4E86%u6D4B%u8BD5testA%uFF0CB%u51FD%u6570%u4F1A%u8C03%u7528A%u51FD%u6570%uFF0C%u90A3%u4E48%u5728%u5199%u5B8CA%u4E4B%u540E%u5199B%u7684%u6D4B%u8BD5testB%u65F6%uFF0C%u662F%u5426%u8981%u5C06A%20mock/fake/stub%u6389%3F%20%u5982%u679C%u4E0D%u5C06A%u51FD%u6570Fake%u6389%uFF0C%u5219testA%u548CtestB%u4E4B%u95F4%u5C31%u662F%u6709overlap%u3002%u6211%u8BA4%u4E3A%u8FD9%u4E4B%u95F4%u53EF%u4EE5%u6709%u53D6%u820D%uFF0C%u6700%u4F73%u72B6%u6001%u5E94%u5F53%u662F%u6B64%u65F6%uFF0C%u5C06testA%u5220%u9664%uFF0C%u53EA%u4FDD%u7559testB%u3002%u4F46%u4ECD%u5E94%u6839%u636E%u5177%u4F53%u60C5%u51B5%u800C%u5B9A%u3002%0A%0A2.%20%u5982%u4F55%u9488%u5BF9%u4F9D%u8D56%u5173%u7CFB%u8FDB%u884Cmock%u5316%u3002%0A%u4F8B%u5982%u51FA%u73B0%u8FD9%u6837%u7684%u8BED%u53E5%3A%20%60B%20%3D%20new%20A%60%uFF0C%u5219%u7C7BB%u4F9D%u8D56%u4E8E%u7C7BA%u3002%u4F46%u7C7BA%u5E76%u6CA1%u6709%u5FC5%u8981%u7F16%u8BD1%u8FDBtest%u3002%u56E0%u4E3A%u4E00%u65E6%u52A0%u5165A%uFF0C%u5219%u52BF%u5FC5%u4F1A%u5F15%u5165%u66F4%u591A%u4F9D%u8D56%u5173%u7CFB%uFF0C%u800C%u5BFC%u81F4test%u7F16%u8BD1%u5D29%u6E83%u3002%u4F9D%u8D56%u5173%u7CFB%u7684%u89E3%u51B3%u65E0%u7A77%u65E0%u5C3D%u3002%u5728%u505AAndroid%u7684%u5355%u5143%u6D4B%u8BD5%u65F6%uFF0C%u53EF%u4EE5%u7528PowerMock%u53D6%u4EE3Mockito%u6765Mock%u6784%u9020%u51FD%u6570%uFF0C%u5C06%u6784%u9020%u51FD%u6570Fake%u5316%u6210%u7C7B%u4F3C%u5DE5%u5382%u51FD%u6570%uFF0C%u8FD4%u56DE%u7C7B%u5B9E%u4F8B%u3002%u5177%u4F53%u53C2%u770B%u8FD9%u7BC7%u535A%u6587%5BAndroid%u5355%u5143%u6D4B%u8BD5%5D%28https%3A//zhougy0717.github.io/2016/10/19/Android%25E5%258D%2595%25E5%2585%2583%25E6%25B5%258B%25E8%25AF%2595/%29%u3002%0A%u4F46%u5B9E%u9645%u4E0A%uFF0C%u6309%u7167%u73B0%u5728%u7684%u7406%u89E3%uFF0C%u5176%u5B9EMock%u6784%u9020%u51FD%u6570%u662F%u4E0D%u53EF%u53D6%u7684%uFF0C%u9996%u5148%u9020%u6210%u88AB%u6D4B%u4EE3%u7801spec%u4E0D%u6E05%u6670%uFF0C%u8BD5%u60F3%u4E00%u4E2A%u6784%u9020%u51FD%u6570%u600E%u4E48%u4F1A%u8FD4%u56DE%u53E6%u4E00%u4E2A%u7C7B%u7684%u5B9E%u4F8B%u3002%u5176%u6B21%uFF0C%u5728C++%u4E2D%u5F88%u96BE%u505A%u5230Mock%u6784%u9020%u51FD%u6570%u3002%u597D%u7684%u505A%u6CD5%u5E94%u5F53%u662F%u8FD0%u7528Dependency%20Injection%u3002%u4F8B%u5982%uFF1A%0A%60%60%60%0Aclass%20A%20%0A%7B%7D%0A%0Aclass%20B%0A%7B%0A%09void%20func%28%29%0A%09%7B%0A%09%09A*%20a%20%3D%20new%20A%3B%0A%09%7D%0A%7D%0A%60%60%60%0A%u7C7BB%u5E94%u5F53%u6539%u5199%u4E3A%uFF1A%0A%60%60%60%0Aclass%20B%0A%7B%0A%09void%20func%28A*%29%0A%09%7B%0A%09%09...%0A%09%7D%0A%7D%0A%60%60%60%0A%u5C06%u7C7BA%u6307%u9488%u4F20%u5165%uFF0C%u89E3%u51B3dependency%u7684%u95EE%u9898%u3002%0A%0A3.%20%u5982%u4F55%u80FD%u591F%u8BA9%u6D4B%u8BD5%u7A33%u5B9A%uFF0C%u5728%u4EFB%u610F%u73AF%u5883%u4E0B%u5747%u8FD4%u56DE%u540C%u6837%u7684%u6D4B%u8BD5%u7ED3%u679C%u3002%0A%u8FD9%u4E2A%u4E00%u822C%u6D89%u53CA%u6D4B%u8BD5%u73AF%u5883%u7684%u5F71%u54CD%u3002%u4F8B%u5982%u8C03%u7528%u7F51%u7EDC%u76F8%u5173%u7684%u529F%u80FD%uFF0C%u5728%u6CA1%u6709%u7F51%u7EDC%u7684%u73AF%u5883%u5C31%u6CA1%u6CD5%u8FDB%u884C%u3002%u518D%u4F8B%u5982%u6D4B%u8BD5%u65F6%u64CD%u4F5C%u771F%u5B9E%u5177%u4F53%u6587%u4EF6%uFF0C%u5219%u8BE5%u6587%u4EF6%u88AB%u6D4B%u8BD5%u5916%u4EBA%u4E3A%u6216%u4EE3%u7801%u4FEE%u6539%uFF0C%u5219%u6D4B%u8BD5%u53EF%u80FD%u5C31%u4F1A%u83AB%u540D%u5931%u8D25%u3002%0A%u9488%u5BF9%u8FD9%u4E9B%u60C5%u51B5%uFF0C%u6211%u4EEC%u5E94%u5F53%u5728%u6D4B%u8BD5%u4E2D%u5C3D%u91CF%u907F%u514D%u3002%u4F8B%u5982%u524D%u8005%uFF0C%u6211%u4EEC%u5E94%u5F53%u5BF9%u7F51%u7EDC%u63A5%u53E3%u8FDB%u884CMock%u5316%uFF0C%u540E%u8005%u5E94%u5F53%u5728%u6D4B%u8BD5%u7684setUp%u548CtearDown%u4E2D%u751F%u6210%u865A%u5047%u6587%u4EF6%u7528%u4E8E%u6D4B%u8BD5%uFF0C%u5E76%u5728%u6D4B%u8BD5%u5B8C%u6210%u65F6%u505A%u6E05%u7406%u3002%0A%0A4.%20%u4F1A%u56E0%u4E3A%u5F88%u5C0F%u7684%u88AB%u6D4B%u4EE3%u7801%u6539%u52A8%uFF0C%u800C%u5BFC%u81F4%u5927%u9762%u79EF%u6D4B%u8BD5%u5931%u8D25%uFF0C%u751A%u81F3%u6D4B%u8BD5%u5D29%u6E83%u3002%0A%u8FD9%u4E2A%u5C31%u662Fgmock%u6587%u6863%u4E2D%u63D0%u5230%u7684%u8981%u9488%u5BF9%u63A5%u53E3%u7F16%u7A0B%uFF0C%u9488%u5BF9%u63A5%u53E3%u6D4B%u8BD5%u3002Robert%20C%B7Martin%u5728%u300A%u654F%u6377%u8F6F%u4EF6%u5F00%u53D1%uFF0D%u539F%u5219%u3001%u6A21%u5F0F%u4E0E%u5B9E%u8DF5%u300B%u4E00%u4E66%u4E2D%u6709%u63D0%u51FA%uFF1A%u6240%u6709%u7684%u4EE3%u7801%u90FD%u5E94%u4F9D%u8D56%u4E8E%u62BD%u8C61%u63A5%u53E3%u3002%u56E0%u4E3A%u62BD%u8C61%u63A5%u53E3%u662F%u7ECF%u8FC7%u62BD%u8C61%u7684%uFF0C%u76F8%u5BF9%u5177%u4F53%u7684%u5B9E%u73B0%u4EE3%u7801%u8F83%u4E3A%u7A33%u5B9A%u3002%u800C%u88AB%u4F9D%u8D56%u7684%u4EE3%u7801%u5E94%u8BE5%u5C3D%u53EF%u80FD%u4FDD%u6301%u7A33%u5B9A%uFF0C%u8FD9%u6837%u57FA%u4E8E%u4E4B%u4E0A%u7684%u4EE3%u7801%u624D%u4E0D%u4F1A%u56E0%u4E3A%u4F9D%u8D56%u7684%u6539%u52A8%u800C%u6539%u52A8%u3002%0A%0A%u4E0B%u9762%u5217%u51FA%u51E0%u79CD%u6211%u5728%u5B9E%u9645%u5199test%20case%u65F6%u9047%u5230%u7684%u60C5%u51B5%uFF0C%u5728gmock%u4E2D%u7684%u89E3%u51B3%u65B9%u6848%u3002%0A%0A%23%23%23%20%u6309%u7167%u51FD%u6570%u53C2%u6570%u8FD4%u56DE%u7ED3%u679C%20-%20Fake%0A%u4F8B%u5982%3A%0A%60%60%60%0Aclass%20A%0A%7B%0A%09virtual%20int%20func%28int%20a%2C%20int%20b%29%3B%0A%7D%0A%0AEXPECT_CALL%28mockA%2C%20func%28%29%29%0A%09.WillRepeatedly%28a+b%29%3B%0A%60%60%60%0Agmock%u4E2D%u53EF%u4EE5%u8FD9%u6837%u505A%uFF1AUsing%20Functions/Methods/Functors%20as%20Actions%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0Apublic%3A%0A%09MOCK_METHOD2%28Sum%2C%20int%28int%20x%2C%20int%20y%29%29%3B%0A%09MOCK_METHOD1%28ComplexJob%2C%20bool%28int%20x%29%29%3B%0A%7D%3B%0Aint%20CalculateSum%28int%20x%2C%20int%20y%29%20%7B%20return%20x%20+%20y%3B%20%7D%0Aclass%20Helper%20%7B%0Apublic%3A%0A%09bool%20ComplexJob%28int%20x%29%3B%0A%7D%3B%0A...%0AMockFoo%20foo%3B%0AHelper%20helper%3B%0AEXPECT_CALL%28foo%2C%20Sum%28_%2C%20_%29%29%0A%09.WillOnce%28Invoke%28CalculateSum%29%29%3B%0AEXPECT_CALL%28foo%2C%20ComplexJob%28_%29%29%0A%09.WillOnce%28Invoke%28%26helper%2C%20%26Helper%3A%3AComplexJob%29%29%3B%0Afoo.Sum%285%2C%206%29%3B%20//%20Invokes%20CalculateSum%285%2C%206%29.%0Afoo.ComplexJob%2810%29%3B%20//%20Invokes%20helper.ComplexJob%2810%29%3B%0A%60%60%60%0A%0A%23%23%23%20Mock%20non-virtual%u51FD%u6570%0A%60%60%60%0A//%20A%20simple%20packet%20stream%20class.%20None%20of%20its%20members%20is%20virtual.%0Aclass%20ConcretePacketStream%20%7B%0A%09public%3A%0A%09%09void%20AppendPacket%28Packet*%20new_packet%29%3B%0A%09%09const%20Packet*%20GetPacket%28size_t%20packet_number%29%20const%3B%0A%09%09size_t%20NumberOfPackets%28%29%20const%3B%0A%09%09...%0A%7D%3B%0A//%20A%20mock%20packet%20stream%20class.%20It%20inherits%20from%20no%20other%2C%20but%20defines%0A//%20GetPacket%28%29%20and%20NumberOfPackets%28%29.%0Aclass%20MockPacketStream%20%7B%0A%09public%3A%0A%09%09MOCK_CONST_METHOD1%28GetPacket%2C%20const%20Packet*%28size_t%20packet_number%29%29%3B%0A%09%09MOCK_CONST_METHOD0%28NumberOfPackets%2C%20size_t%28%29%29%3B%0A%09%09...%0A%7D%0A%0Atemplate%20%3Cclass%20PacketStream%3E%0Avoid%20CreateConnection%28PacketStream*%20stream%29%20%7B%20...%20%7D%0Atemplate%20%3Cclass%20PacketStream%3E%0Aclass%20PacketReader%20%7B%0A%09public%3A%0A%09void%20ReadPackets%28PacketStream*%20stream%2C%20size_t%20packet_num%29%3B%0A%7D%3B%0A%0AMockPacketStream%20mock_stream%3B%0AEXPECT_CALL%28mock_stream%2C%20...%29...%3B%0A..%20set%20more%20expectations%20on%20mock_stream%20...%0APacketReader%3CMockPacketStream%3E%20reader%28%26mock_stream%29%3B%0A...%20exercise%20reader%20...%0A%60%60%60%0A%u4E3A%u4EC0%u4E48%u8981%u8FD9%u4E48%u505A%uFF1F%0A%u56E0%u4E3A%u53EA%u80FD%u8FD9%u4E48%u505A%u3002%u666E%u901A%u7684mock%uFF0C%u8981%u901A%u8FC7%u7EE7%u627F%u88AB%u6D4B%u8BD5%u7C7B%uFF0C%u5E76%u91CD%u5199virtual%u51FD%u6570%u6765%u5B9E%u73B0%u3002%u800C%u4E0A%u9762%u7684ConcretePacketStream%u548CMockPacketStream%u5E76%u4EFB%u4F55%u6CA1%u6709%u5173%u7CFB%uFF0C%u4E5F%u5C31%u662F%u8BF4%uFF0C%u5982%u679C%u4F20%u5165%u540E%u8005%u7684%u6307%u9488%uFF0C%u4E0D%u7528reinterpret_cast%u662F%u4E0D%u80FD%u8F6C%u6210%u524D%u8005%u7684%u6307%u9488%u7684%u3002%0A%u6240%u4EE5%u60F3%u4E00%u4E2A%u53D8%u901A%u7684%u529E%u6CD5%uFF0C%u7528%u6A21%u677F%u7C7B%u6765%u5B9A%u4E49%u88AB%u6D4B%u4EE3%u7801%uFF0C%u5728%u6D4B%u8BD5%u65F6%u4F20%u5165mock%u7C7B%uFF0C%u5728%u751F%u4EA7%u65F6%uFF0C%u4F20%u5165%u771F%u5B9E%u7C7B%u3002%0A%0A%23%23%23%20Mocking%20Side%20Effects%0A%60%60%60%0AEXPECT_CALL%28mutator%2C%20MutateInt%28_%29%29%0A%09.WillOnce%28DoAll%28SetArgPointee%3C0%3E%285%29%2C%20Return%28true%29%29%29%3B%0AEXPECT_CALL%28mutator%2C%20Mutate%28NotNull%28%29%2C%205%29%29%0A%09.WillOnce%28SetArrayArgument%3C0%3E%28values%2C%20values%20+%205%29%29%3B%0A%60%60%60%0A%u7B2C%u4E00%u4E2A%u5C06MutateInt%u7B2C%u4E00%u4E2A%u53C2%u6570%u6307%u9488%u6307%u5411%u7684int%uFF0C%u8BBE%u4E3A5%uFF0C%u5E76%u8FD4%u56DEtrue%u3002%0A%u7B2C%u4E8C%u4E2A%u5C06values%u6570%u7EC4%u7684%5B0%2C5%29%u62F7%u8D1D%u5230%u53C2%u65701%u6307%u5411%u7684%u5730%u5740%u3002%0A%u5982%u679C%u4ECD%u9700%u8981%u8FD4%u56DE%uFF0C%u5219%u7528DoAll%uFF0C%u5982%u4E0B%uFF1A%0A%60%60%60%0AEXPECT_CALL%28mutator%2C%20MutateInt%28_%29%29%0A%20%20%20%20%20%20.WillOnce%28DoAll%28SetArgPointee%3C0%3E%285%29%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Return%28true%29%29%29%3B%0A%60%60%60%0A%0A%23%23%23%20Selecting%20an%20Action%27s%20Arguments%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Abool%20MyIsVisibleInQuadrant1%28bool%20visible%2C%20const%20string%26%20name%2C%20int%20x%2C%20int%20y%2C%0Aconst%20map%3Cpair%3Cint%2C%20int%3E%2C%20double%3E%26%20weight%2C%0Adouble%20min_weight%2C%20double%20max_wight%29%20%7B%0A%09return%20IsVisibleInQuadrant1%28visible%2C%20x%2C%20y%29%3B%0A%7D.%0A..%0AEXPECT_CALL%28mock%2C%20Foo%28_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%29%29%0A%09.WillOnce%28Invoke%28MyIsVisibleInQuadrant1%29%29%3B%20//%20Now%20it%20works.%0A%60%60%60%0A%u5B9A%u4E49%u81EA%u5DF1%u7684adaptor%20MyIsVisibleInQuadrant1%uFF0C%u6216%u8005%u7528gmock%u63D0%u4F9B%u7684%u65B9%u6CD5%u4F18%u96C5%u7684%u89E3%u51B3%u3002%0A%60%60%60%0Ausing%20%3A%3Atesting%3A%3A_%3B%0Ausing%20%3A%3Atesting%3A%3AInvoke%3B%0Ausing%20%3A%3Atesting%3A%3AWithArgs%3B%0A...%0AEXPECT_CALL%28mock%2C%20Foo%28_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%2C%20_%29%29%0A.WillOnce%28WithArgs%3C0%2C%202%2C%203%3E%28Invoke%28IsVisibleInQuadrant1%29%29%29%3B%0A//%20No%20need%20to%20define%20your%20own%20adaptor.%0A%60%60%60%0A%0A%23%23%23%23%20Mocking%20Private%20or%20Protected%20Methods%0A%60%60%60%0Aclass%20Foo%20%7B%0A%09public%3A%0A%09%09...%0A%09%09virtual%20bool%20Transform%28Gadget*%20g%29%20%3D%200%3B%0A%09protected%3A%0A%09%09virtual%20void%20Resume%28%29%3B%0A%09private%3A%0A%09%09virtual%20int%20GetTimeOut%28%29%3B%0A%7D%3B%0Aclass%20MockFoo%20%3A%20public%20Foo%20%7B%0A%09public%3A%0A%09%09...%0A%09%09MOCK_METHOD1%28Transform%2C%20bool%28Gadget*%20g%29%29%3B%0A%09%09//%20The%20following%20must%20be%20in%20the%20public%20section%2C%20even%20though%20the%0A%09%09//%20methods%20are%20protected%20or%20private%20in%20the%20base%20class.%0A%09%09MOCK_METHOD0%28Resume%2C%20void%28%29%29%3B%0A%09%09MOCK_METHOD0%28GetTimeOut%2C%20int%28%29%29%3B%0A%7D%3B%0A%60%60%60%0A%3EC++%20allows%20a%20subclass%20to%20specify%20a%20different%20access%20level%20than%20the%20base%20class%20on%20a%20virtual%20function.%0A%0A%23%23%23%23%20Misc%0AKeep%20in%20mind%20that%20one%20doesn%27t%20have%20to%20verify%20more%20than%20one%20property%20in%20one%20test.%20In%20fact%2C%20it%27s%20a%20good%20style%20to%20verify%20only%20one%0Athing%20in%20one%20test.%20If%20you%20do%20that%2C%20a%20bug%20will%20likely%20break%20only%20one%20or%20two%20tests%20instead%20of%20dozens%0A%0AWhen%20it%27s%20being%20destroyed%2C%20your%20friendly%20mock%20object%20will%20automatically%20verify%20that%20all%20expectations%20on%20it%20have%20been%20satisfied%2C%0Aand%20will%20generate%20Google%20Test%20failures%20if%20not.%20%0A%0ACurrently%20these%20are%20only%20platforms%20that%20support%20the%20pthreads%20library%20%28this%20includes%20Linux%20and%20Mac%29.%20%0A%0A%u52A0%u4E0A%u547D%u4EE4%u884C%u53C2%u6570--gmock_verbose%3Dinfo%u53EF%u4EE5%u663E%u793A%u6240%u6709EXPECT%5C_CALL%u7684%u5177%u4F53%u8C03%u7528%u60C5%u51B5%u3002%0A%0A%23%23%20Some%20useful%20tips%20in%20gtest%0A%23%23%23%20Selecting%20Tests%0A%3E%20If%20you%20set%20the%20**GTEST_FILTER**%20environment%20variable%20or%20the%20**--gtest_filter**%20flag%20to%20a%20filter%20string%2C%20Google%20Test%20will%20only%20run%20the%20tests%20whose%20full%20names%20%28in%20the%20form%20of%20TestCaseName.TestName%29%20match%20the%20filter.%0A%3E%20The%20format%20of%20a%20filter%20is%20a%20%27%3A%27-separated%20list%20of%20wildcard%20patterns%20%28called%20the%20positive%20patterns%29%20optionally%20followed%20by%20a%20%27-%27%20and%20another%20%27%3A%27-separated%20pattern%20list%20%28called%20the%20negative%20patterns%29.%0A%0A-%20./foo_test%20Has%20no%20flag%2C%20and%20thus%20runs%20all%20its%20tests.%0A-%20./foo_test%20--gtest_filter%3D*%20Also%20runs%20everything%2C%20due%20to%20the%20single%20match-everything%20*%20value.%0A-%20./foo_test%20--gtest_filter%3DFooTest.*%20Runs%20everything%20in%20test%20case%20FooTest.%0A-%20./foo_test%20--gtest_filter%3D*Null*%3A*Constructor*%20Runs%20any%20test%20whose%20full%20name%20contains%20either%20%22Null%22%20or%20%22Constructor%22.%0A-%20./foo_test%20--gtest_filter%3D-*DeathTest.*%20Runs%20all%20non-death%20tests.%0A-%20./foo_test%20--gtest_filter%3DFooTest.*-FooTest.Bar%20Runs%20everything%20in%20test%20case%20FooTest%20except%20FooTest.Bar%0A%0ATemporarily%20Disabling%20Tests%0A%60%60%60%0A//%20Tests%20that%20Foo%20does%20Abc.%0ATEST%28FooTest%2C%20DISABLED_DoesAbc%29%20%7B%20...%20%7D%0A%0Aclass%20DISABLED_BarTest%20%3A%20public%20%3A%3Atesting%3A%3ATest%20%7B%20...%20%7D%3B%0A%0A//%20Tests%20that%20Bar%20does%20Xyz.%0ATEST_F%28DISABLED_BarTest%2C%20DoesXyz%29%20%7B%20...%20%7D%0A%60%60%60%0A%0ATemporarily%20Enabling%20Disabled%20Tests%0A%3Ejust%20invoke%20the%20test%20program%20with%20the%20**--gtest_also_run_disabled_tests**%20flag%20or%20set%20the%20**GTEST_ALSO_RUN_DISABLED_TESTS**%20environment%20variable%20to%20a%20value%20other%20than%200.%0A%0A%23%23%23%20Repeating%20the%20Tests%0A%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%3A--------%3A%20%7C%20%3A--------------%3A%20%7C%20%3A--------%3A%20%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D1000%20%7C%09Repeat%20foo_test%201000%20times%20and%20don%27t%20stop%20at%20failures.%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D-1%09%7CA%20negative%20count%20means%20repeating%20forever.%7C%0A%7C%5C%24%20foo_test%20--gtest_repeat%3D1000%20--gtest_break_on_failure%09%7C%20Repeat%20foo_test%201000%20times%2C%20stopping%20at%20the%20first%20failure.%20This%20is%20especially%20useful%20when%20running%20under%20a%20debugger%3A%20when%20the%20testfails%2C%20it%20will%20drop%20into%20the%20debugger%20and%20you%20can%20then%20inspect%20variables%20and%20stacks.%7C%0A%7C%24%20foo_test%20--gtest_repeat%3D1000%20--gtest_filter%3DFooBar%09%7C%20Repeat%20the%20tests%20whose%20name%20matches%20the%20filter%201000%20times.%7C&lt;/center&gt;&lt;br&gt;&lt;/div&gt;</content>
        <category term="TDD" />
        <category term="gtest" />
        <category term="gmock" />
        <updated>2017-09-12T09:02:37.000Z</updated>
    </entry>
</feed>
